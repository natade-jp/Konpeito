[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/konpeito.js",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Random from \"./math/core/tools/Random.js\";\nimport RoundingMode from \"./math/core/context/RoundingMode.js\";\nimport MathContext from \"./math/core/context/MathContext.js\";\nimport Probability from \"./math/core/tools/Probability.js\";\nimport BigDecimal from \"./math/core/BigDecimal.js\";\nimport BigInteger from \"./math/core/BigInteger.js\";\nimport Fraction from \"./math/core/Fraction.js\";\nimport Complex from \"./math/core/Complex.js\";\nimport Matrix from \"./math/core/Matrix.js\";\nimport DataAnalysis from \"./math/tools/DataAnalysis.js\";\n\n/**\n * Class collection of numerical calculation processing.\n * These classes are classified into a BigInteger, BigDecimal, Fraction, Matrix.\n * - BigInteger is a calculation class for arbitrary-precision integer arithmetic.\n * - BigDecimal is a calculation class for arbitrary-precision floating point arithmetic.\n * - Fraction is a calculation class for fractions with infinite precision.\n * - Matrix is a general-purpose calculation class with signal processing and statistical processing.\n */\nexport default class konpeito {\n\n\t/**\n\t * Return typedef BigInteger for arbitrary-precision integer calculation.\n\t * @returns {typeof BigInteger}\n\t */\n\tstatic get BigInteger() {\n\t\treturn BigInteger;\n\t}\n\n\t/**\n\t * Return typedef BigDecimal for arbitrary-precision floating-point number.\n\t * @returns {typeof BigDecimal}\n\t */\n\tstatic get BigDecimal() {\n\t\treturn BigDecimal;\n\t}\n\n\t/**\n\t * Return Rounding class for BigDecimal.\n\t * @returns {typeof RoundingMode}\n\t */\n\tstatic get RoundingMode() {\n\t\treturn RoundingMode;\n\t}\n\n\t/**\n\t * Return Configuration class for BigDecimal.\n\t * @returns {typeof MathContext}\n\t */\n\tstatic get MathContext() {\n\t\treturn MathContext;\n\t}\n\n\t/**\n\t * Return typedef Fraction for infinite precision arithmetic.\n\t * @returns {typeof Fraction}\n\t */\n\tstatic get Fraction() {\n\t\treturn Fraction;\n\t}\n\n\t/**\n\t * Return typedef Complex for complex number calculation.\n\t * @returns {typeof Complex}\n\t */\n\tstatic get Complex() {\n\t\treturn Complex;\n\t}\n\n\t/**\n\t * Return typedef Matrix for complex matrix calculation.\n\t * @returns {typeof Matrix}\n\t */\n\tstatic get Matrix() {\n\t\treturn Matrix;\n\t}\n\n\t/**\n\t * Return typedef Random.\n\t * @returns {typeof Random}\n\t */\n\tstatic get Random() {\n\t\treturn Random;\n\t}\n\t\n\t/**\n\t * Return typedef DataAnalysis.\n\t * @returns {typeof DataAnalysis}\n\t */\n\tstatic get DataAnalysis() {\n\t\treturn DataAnalysis;\n\t}\n\t\n\t/**\n\t * Return typedef Probability.\n\t * @returns {typeof Probability}\n\t */\n\tstatic get Probability() {\n\t\treturn Probability;\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/konpeito.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "konpeito",
    "memberof": "src/konpeito.js",
    "static": true,
    "longname": "src/konpeito.js~konpeito",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/konpeito.js",
    "importStyle": "konpeito",
    "description": "Class collection of numerical calculation processing.\nThese classes are classified into a BigInteger, BigDecimal, Fraction, Matrix.\n- BigInteger is a calculation class for arbitrary-precision integer arithmetic.\n- BigDecimal is a calculation class for arbitrary-precision floating point arithmetic.\n- Fraction is a calculation class for fractions with infinite precision.\n- Matrix is a general-purpose calculation class with signal processing and statistical processing.",
    "lineNumber": 30,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "get",
    "name": "BigInteger",
    "memberof": "src/konpeito.js~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.js~konpeito.BigInteger",
    "access": "public",
    "description": "Return typedef BigInteger for arbitrary-precision integer calculation.",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "get",
    "name": "BigDecimal",
    "memberof": "src/konpeito.js~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.js~konpeito.BigDecimal",
    "access": "public",
    "description": "Return typedef BigDecimal for arbitrary-precision floating-point number.",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof BigDecimal}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof BigDecimal"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "get",
    "name": "RoundingMode",
    "memberof": "src/konpeito.js~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.js~konpeito.RoundingMode",
    "access": "public",
    "description": "Return Rounding class for BigDecimal.",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingMode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingMode"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "get",
    "name": "MathContext",
    "memberof": "src/konpeito.js~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.js~konpeito.MathContext",
    "access": "public",
    "description": "Return Configuration class for BigDecimal.",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "get",
    "name": "Fraction",
    "memberof": "src/konpeito.js~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.js~konpeito.Fraction",
    "access": "public",
    "description": "Return typedef Fraction for infinite precision arithmetic.",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof Fraction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof Fraction"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "get",
    "name": "Complex",
    "memberof": "src/konpeito.js~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.js~konpeito.Complex",
    "access": "public",
    "description": "Return typedef Complex for complex number calculation.",
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof Complex"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "get",
    "name": "Matrix",
    "memberof": "src/konpeito.js~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.js~konpeito.Matrix",
    "access": "public",
    "description": "Return typedef Matrix for complex matrix calculation.",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "get",
    "name": "Random",
    "memberof": "src/konpeito.js~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.js~konpeito.Random",
    "access": "public",
    "description": "Return typedef Random.",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof Random}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof Random"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "get",
    "name": "DataAnalysis",
    "memberof": "src/konpeito.js~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.js~konpeito.DataAnalysis",
    "access": "public",
    "description": "Return typedef DataAnalysis.",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof DataAnalysis}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof DataAnalysis"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "get",
    "name": "Probability",
    "memberof": "src/konpeito.js~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.js~konpeito.Probability",
    "access": "public",
    "description": "Return typedef Probability.",
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof Probability}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof Probability"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/math/core/BigDecimal.js",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Polyfill from \"../tools/Polyfill.js\";\nimport BigInteger from \"./BigInteger.js\";\nimport RoundingMode, {RoundingModeEntity} from \"./context/RoundingMode.js\";\nimport MathContext from \"./context/MathContext.js\";\nimport Random from \"./tools/Random.js\";\nimport Fraction from \"./Fraction.js\";\nimport Complex from \"./Complex.js\";\nimport Matrix from \"./Matrix.js\";\n\n\n/**\n * BigDecimal type argument.(local)\n * - number\n * - boolean\n * - string\n * - BigDecimal\n * - BigInteger\n * - {toBigDecimal:function}\n * - {doubleValue:number}\n * - {toString:function}\n * @typedef {number|boolean|string|BigDecimal|BigInteger|{toBigDecimal:function}|{doubleValue:number}|{toString:function}} KBigDecimalLocalInputData\n */\n\n/**\n * ScaleData for argument of BigDecimal.\n * - {integer:BigInteger,scale:?number,context:?MathContext}\n * @typedef {{integer:BigInteger,scale:?number,context:?MathContext}} KBigDecimalScaleData\n */\n\n/**\n * BigDecimal type argument.\n * - KBigDecimalLocalInputData\n * - Array<KBigDecimalLocalInputData|MathContext>\n * - KBigDecimalScaleData\n * \n * Initialization can be performed as follows.\n * - 1200, \"1200\", \"12e2\", \"1.2e3\"\n * - When initializing with array. [ integer, [scale = 0], [context=default]].\n * - When initializing with object. { integer, [scale = 0], [context=default]}.\n * \n * Description of the settings are as follows, you can also omitted.\n * - The \"scale\" is an integer scale factor.\n * - The \"context\" is used to normalize the created floating point.\n * \n * If \"context\" is not specified, the \"default_context\" set for the class is used.\n * The \"context\" is the used when no environment settings are specified during calculation.\n * @typedef {KBigDecimalLocalInputData|Array<KBigDecimalLocalInputData|MathContext>|KBigDecimalScaleData} KBigDecimalInputData\n */\n\n/**\n * Setting of calculation result of division.\n * @typedef {Object} KBigDecimalDivideType\n * @property {number} [scale] Scale of rounding.\n * @property {RoundingModeEntity} [roundingMode] Rounding mode.\n * @property {MathContext} [context] Configuration.(scale and roundingMode are unnecessary.)\n */\n\n/**\n * Default MathContext class.\n * Used when MathContext not specified explicitly.\n * @type {MathContext[]}\n * @ignore\n */\nconst DEFAULT_CONTEXT_ = [];\nDEFAULT_CONTEXT_[0] = MathContext.DECIMAL128;\n\n/**\n * Collection of functions used in BigDecimal.\n * @ignore\n */\nclass BigDecimalTool {\n\n\t/**\n\t * Create data for BigDecimal from strings.\n\t * @param {string} ntext \n\t * @returns {{scale : number, integer : BigInteger}}\n\t */\n\tstatic ToBigDecimalFromString(ntext) {\n\t\tlet scale = 0;\n\t\tlet buff;\n\t\t// 正規化\n\t\tlet text = ntext.replace(/\\s/g, \"\").toLowerCase();\n\t\t// 特殊な状態\n\t\t{\n\t\t\tif(/nan/.test(text)) {\n\t\t\t\treturn {\n\t\t\t\t\tscale : 0,\n\t\t\t\t\tinteger : BigInteger.NaN\n\t\t\t\t};\n\t\t\t}\n\t\t\telse if(/inf/.test(text)) {\n\t\t\t\tif(!/-/.test(text)) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tscale : 0,\n\t\t\t\t\t\tinteger : BigInteger.POSITIVE_INFINITY\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tscale : 0,\n\t\t\t\t\t\tinteger : BigInteger.NEGATIVE_INFINITY\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// +-の符号があるか\n\t\tlet number_text = \"\";\n\t\tbuff = text.match(/^[+-]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tif(buff.indexOf(\"-\") !== -1) {\n\t\t\t\tnumber_text += \"-\";\n\t\t\t}\n\t\t}\n\t\t// 整数部があるか\n\t\tbuff = text.match(/^[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tnumber_text += buff;\n\t\t}\n\t\t// 小数部があるか\n\t\tbuff = text.match(/^\\.[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tbuff = buff.substr(1);\n\t\t\tscale = scale + buff.length;\n\t\t\tnumber_text += buff;\n\t\t}\n\t\t// 指数表記があるか\n\t\tbuff = text.match(/^e[+-]?[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0].substr(1);\n\t\t\tscale   = scale - parseInt(buff, 10);\n\t\t}\n\t\treturn {\n\t\t\tscale : scale,\n\t\t\tinteger : new BigInteger([number_text, 10])\n\t\t};\n\t}\n\n\t/**\n\t * Create data for BigDecimal from number.\n\t * @param {number|boolean} number \n\t * @returns {{scale : number, integer : BigInteger}}\n\t */\n\tstatic ToBigDecimalFromNumber(number) {\n\t\tconst value = typeof number !== \"boolean\" ? number : (number ? 1 : 0);\n\t\tif(!isFinite(value)) {\n\t\t\tif(value === Infinity) {\n\t\t\t\treturn {\n\t\t\t\t\tscale : 0,\n\t\t\t\t\tinteger : BigInteger.POSITIVE_INFINITY\n\t\t\t\t};\n\t\t\t}\n\t\t\telse if(value === - Infinity) {\n\t\t\t\treturn {\n\t\t\t\t\tscale : 0,\n\t\t\t\t\tinteger : BigInteger.NEGATIVE_INFINITY\n\t\t\t\t};\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn {\n\t\t\t\t\tscale : 0,\n\t\t\t\t\tinteger : BigInteger.NaN\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t// 整数\n\t\tif(value === Math.floor(value)) {\n\t\t\treturn {\n\t\t\t\tscale : 0,\n\t\t\t\tinteger : new BigInteger(Math.round(value))\n\t\t\t};\n\t\t}\n\t\t// 浮動小数\n\t\telse {\n\t\t\tlet scale = Math.trunc(Math.log(Math.abs(value)) / Math.log(10));\n\t\t\tlet x = value / Math.pow(10, scale);\n\t\t\t// スケールを逆にする\n\t\t\tscale = - scale;\n\t\t\tfor(let i = 0; i < 14; i++) {\n\t\t\t\tx = x * 10;\n\t\t\t\tscale = scale + 1;\n\t\t\t\tif(Math.abs(x - Math.round(x)) <= Number.EPSILON) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 最も下の桁は四捨五入する\n\t\t\tx = Math.round(x * 1e14) / 1e14;\n\t\t\treturn {\n\t\t\t\tscale : scale,\n\t\t\t\tinteger : new BigInteger(x)\n\t\t\t};\n\t\t\t// 64ビットの実数型は15桁程度まで正しい\n\t\t\t// 余裕をもって12桁程度までを抜き出すのが良いかと思われる。\n\t\t}\n\t}\n}\n\n/**\n * Arbitrary-precision floating-point number class (immutable).\n */\nexport default class BigDecimal {\n\t\n\t/**\n\t * Create an arbitrary-precision floating-point number.\n\t * \n\t * Initialization can be performed as follows.\n\t * - 1200, \"1200\", \"12e2\", \"1.2e3\"\n\t * - When initializing with array. [ integer, [scale = 0], [context=default]].\n\t * - When initializing with object. { integer, [scale = 0], [context=default]}.\n\t * \n\t * Description of the settings are as follows, you can also omitted.\n\t * - The \"scale\" is an integer scale factor.\n\t * - The \"context\" is used to normalize the created floating point.\n\t * \n\t * If \"context\" is not specified, the \"default_context\" set for the class is used.\n\t * The \"context\" is the used when no environment settings are specified during calculation.\n\t * @param {KBigDecimalInputData} number - Real data.\n\t */\n\tconstructor(number) {\n\n\t\t/**\n\t\t * The scale of this BigDecimal.\n\t\t * @private\n\t\t * @ignore\n\t\t * @type {number}\n\t\t */\n\t\tthis._scale\t= 0;\n\t\t\n\t\t/**\n\t\t * Context used during initialization.\n\t\t * @private\n\t\t * @ignore\n\t\t * @type {MathContext}\n\t\t */\n\t\tthis.context = BigDecimal.getDefaultContext();\n\n\t\t// この値がtrueの場合は最後に正規化を実行する\n\t\tlet is_set_context = false;\n\n\t\tif(arguments.length > 1) {\n\t\t\tthrow \"BigDecimal Unsupported argument[\" + arguments.length + \"]\";\n\t\t}\n\t\tif(number instanceof BigDecimal) {\n\n\t\t\t/**\n\t\t\t * Integer part.\n\t\t\t * @private\n\t\t\t * @ignore\n\t\t\t * @type {BigInteger}\n\t\t\t */\n\t\t\tthis.integer\t\t\t= number.integer.clone();\n\n\t\t\t/**\n\t\t\t * Integer part of string (for cache).\n\t\t\t * @private\n\t\t\t * @ignore\n\t\t\t * @type {string}\n\t\t\t */\n\t\t\tthis.int_string\t\t\t= number.int_string;\n\n\t\t\tthis._scale\t\t\t\t= number._scale;\n\t\t\tthis.context\t\t\t= number.context;\n\n\t\t}\n\t\telse if((typeof number === \"number\") || (typeof number === \"boolean\")) {\n\t\t\tconst data = BigDecimalTool.ToBigDecimalFromNumber(number);\n\t\t\tthis.integer\t= data.integer;\n\t\t\tthis._scale\t\t= data.scale;\n\t\t}\n\t\telse if(typeof number === \"string\") {\n\t\t\tconst data = BigDecimalTool.ToBigDecimalFromString(number);\n\t\t\tthis.integer\t= data.integer;\n\t\t\tthis._scale\t\t= data.scale;\n\t\t}\n\t\telse if(number instanceof Array) {\n\t\t\tif(number.length >= 1) {\n\t\t\t\tconst prm1 = number[0];\n\t\t\t\tif((typeof prm1 === \"number\") || (typeof prm1 === \"boolean\")) {\n\t\t\t\t\tconst data\t\t= BigDecimalTool.ToBigDecimalFromNumber(prm1);\n\t\t\t\t\tthis.integer\t= data.integer;\n\t\t\t\t\tthis._scale\t\t= data.scale;\n\t\t\t\t}\n\t\t\t\telse if(typeof prm1 === \"string\") {\n\t\t\t\t\tconst data\t\t= BigDecimalTool.ToBigDecimalFromString(prm1);\n\t\t\t\t\tthis.integer\t= data.integer;\n\t\t\t\t\tthis._scale\t\t= data.scale;\n\t\t\t\t}\n\t\t\t\telse if(prm1 instanceof BigDecimal) {\n\t\t\t\t\tthis.integer\t= prm1.integer.clone();\n\t\t\t\t\tthis._scale\t\t= prm1._scale;\n\t\t\t\t}\n\t\t\t\telse if(prm1 instanceof BigInteger) {\n\t\t\t\t\tthis.integer\t\t\t= prm1.clone();\n\t\t\t\t}\n\t\t\t\telse if(typeof prm1 === \"object\") {\n\t\t\t\t\tif(\"toBigDecimal\" in prm1) {\n\t\t\t\t\t\tconst data\t\t= prm1.toBigDecimal();\n\t\t\t\t\t\tthis.integer\t= data.integer;\n\t\t\t\t\t\tthis._scale\t\t= data._scale;\n\t\t\t\t\t}\n\t\t\t\t\telse if(\"doubleValue\" in prm1) {\n\t\t\t\t\t\tconst data = BigDecimalTool.ToBigDecimalFromNumber(prm1.doubleValue);\n\t\t\t\t\t\tthis.integer\t= data.integer;\n\t\t\t\t\t\tthis._scale\t\t= data.scale;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tconst data = BigDecimalTool.ToBigDecimalFromString(prm1.toString());\n\t\t\t\t\t\tthis.integer\t= data.integer;\n\t\t\t\t\t\tthis._scale\t\t= data.scale;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow \"BigDecimal Unsupported argument \" + prm1 + \"(\" + (typeof prm1) + \")\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(number.length >= 2) {\n\t\t\t\t// スケール値を省略しているかどうかを、数値かどうかで判定している。\n\t\t\t\tif(typeof number[1] === \"number\") {\n\t\t\t\t\t// 2つめが数値の場合は、2つ目をスケール値として使用する\n\t\t\t\t\tthis._scale\t= number[1];\n\t\t\t\t\tif(number.length >= 3) {\n\t\t\t\t\t\tthis.context = ((number[2] !== undefined) && (number[2] instanceof MathContext)) ? number[2] : BigDecimal.getDefaultContext();\n\t\t\t\t\t\tis_set_context = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(number.length >= 2) {\n\t\t\t\t\t\tthis.context = ((number[1] !== undefined) && (number[1] instanceof MathContext)) ? number[1] : BigDecimal.getDefaultContext();\n\t\t\t\t\t\tis_set_context = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(number instanceof BigInteger) {\n\t\t\tthis.integer\t= number.clone();\n\t\t}\n\t\telse if(typeof number === \"object\") {\n\t\t\tif(\"toBigDecimal\" in number) {\n\t\t\t\tconst data\t\t= number.toBigDecimal();\n\t\t\t\tthis.integer\t= data.integer;\n\t\t\t\tthis._scale\t\t= data._scale;\n\t\t\t\tthis.context\t= data.context;\n\t\t\t}\n\t\t\telse if(\"doubleValue\" in number) {\n\t\t\t\tconst data = BigDecimalTool.ToBigDecimalFromNumber(number.doubleValue);\n\t\t\t\tthis.integer\t= data.integer;\n\t\t\t\tthis._scale\t\t= data.scale;\n\t\t\t}\n\t\t\telse if((\"integer\" in number) && (\"scale\" in number) && (\"context\" in number)) {\n\t\t\t\tthis.integer\t= new BigInteger(number.integer);\n\t\t\t\tif(number.scale) {\n\t\t\t\t\tthis._scale = number.scale;\n\t\t\t\t}\n\t\t\t\tif(number.context) {\n\t\t\t\t\tthis.context = number.context;\n\t\t\t\t\tis_set_context = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(number instanceof Object) {\n\t\t\t\tconst data = BigDecimalTool.ToBigDecimalFromString(number.toString());\n\t\t\t\tthis.integer\t= data.integer;\n\t\t\t\tthis._scale\t\t= data.scale;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow \"BigDecimal Unsupported argument \" + arguments;\n\t\t}\n\t\t// データを正規化\n\t\tif(is_set_context) {\n\t\t\tconst newbigdecimal = this.round(this.context);\n\t\t\tthis.integer\t= newbigdecimal.integer;\n\t\t\tthis._scale\t\t= newbigdecimal._scale;\n\t\t\tdelete this.int_string;\n\t\t}\n\t\t// データが正しいかチェックする\n\t\tif((!(this.integer instanceof BigInteger)) || (!(this.context instanceof MathContext))) {\n\t\t\tthrow \"BigDecimal Unsupported argument \" + arguments;\n\t\t}\n\t}\n\n\t/**\n\t * Create an arbitrary-precision floating-point number.\n\t * \n\t * Initialization can be performed as follows.\n\t * - 1200, \"1200\", \"12e2\", \"1.2e3\"\n\t * - When initializing with array. [ integer, [scale = 0], [context=default]].\n\t * - When initializing with object. { integer, [scale = 0], [context=default]}.\n\t * \n\t * Description of the settings are as follows, you can also omitted.\n\t * - The \"scale\" is an integer scale factor.\n\t * - The \"context\" is used to normalize the created floating point.\n\t * \n\t * If \"context\" is not specified, the \"default_context\" set for the class is used.\n\t * The \"context\" is the used when no environment settings are specified during calculation.\n\t * @param {KBigDecimalInputData} number - Real data.\n\t * @returns {BigDecimal}\n\t */\n\tstatic create(number) {\n\t\tif(number instanceof BigDecimal) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new BigDecimal(number);\n\t\t}\n\t}\n\n\t/**\n\t * Convert number to BigDecimal type.\n\t * @param {KBigDecimalLocalInputData} x \n\t * @param {MathContext} [scale] \n\t * @returns {BigDecimal}\n\t */\n\tstatic valueOf(x, scale) {\n\t\tif(arguments.length === 1) {\n\t\t\treturn new BigDecimal(x);\n\t\t}\n\t\telse {\n\t\t\treturn new BigDecimal([x, scale]);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to BigDecimal.\n\t * If type conversion is unnecessary, return the value as it is.\n\t * @param {KBigDecimalInputData} number \n\t * @returns {BigDecimal}\n\t * @private\n\t */\n\tstatic _toBigDecimal(number) {\n\t\tif(number instanceof BigDecimal) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new BigDecimal(number);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to BigInteger.\n\t * If type conversion is unnecessary, return the value as it is.\n\t * @param {KBigDecimalInputData} number \n\t * @returns {BigInteger}\n\t * @private\n\t */\n\tstatic _toBigInteger(number) {\n\t\tif(number instanceof BigInteger) {\n\t\t\treturn number;\n\t\t}\n\t\telse if(number instanceof BigDecimal) {\n\t\t\treturn number.toBigInteger();\n\t\t}\n\t\telse {\n\t\t\t// @ts-ignore\n\t\t\treturn new BigInteger(number);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to real number.\n\t * @param {KBigDecimalInputData} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toFloat(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn number;\n\t\t}\n\t\telse if(number instanceof BigDecimal) {\n\t\t\treturn number.doubleValue;\n\t\t}\n\t\telse {\n\t\t\treturn (new BigDecimal(number)).doubleValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert to integer.\n\t * @param {KBigDecimalInputData} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toInteger(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn Math.trunc(number);\n\t\t}\n\t\telse if(number instanceof BigInteger) {\n\t\t\treturn number.intValue;\n\t\t}\n\t\telse {\n\t\t\t// @ts-ignore\n\t\t\treturn (new BigInteger(number)).intValue;\n\t\t}\n\t}\n\n\t/**\n\t * Return string of this number without sign.\n\t * If cache is already created, return cache.\n\t * @returns {string} \n\t */\n\t_getUnsignedIntegerString() {\n\t\t// キャッシュする\n\t\tif(typeof this.int_string === \"undefined\") {\n\t\t\tthis.int_string = this.integer.toString(10).replace(/^-/, \"\");\n\t\t}\n\t\treturn this.int_string;\n\t}\n\n\t/**\n\t * Deep copy.\n\t * @returns {BigDecimal} \n\t */\n\tclone() {\n\t\treturn new BigDecimal(this);\n\t}\n\t\n\t/**\n\t * The scale of this BigDecimal.\n\t * @returns {number} \n\t */\n\tscale() {\n\t\treturn this._scale;\n\t}\n\n\t/**\n\t * The positive or negative sign of this number.\n\t * - +1 if positive, -1 if negative, 0 if 0.\n\t * @returns {number}\n\t */\n\tsign() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? NaN : (this.isPositiveInfinity() ? 1 : -1);\n\t\t}\n\t\treturn this.integer.sign();\n\t}\n\n\t/**\n\t * Precision.\n\t * @returns {number} \n\t */\n\tprecision() {\n\t\treturn this._getUnsignedIntegerString().length;\n\t}\n\n\t/**\n\t * An integer with the exponent part removed.\n\t * @returns {BigInteger} \n\t */\n\tunscaledValue() {\n\t\treturn new BigInteger(this.integer);\n\t}\n\n\t/**\n\t * The smallest value that can be represented with the set precision.\n\t * @returns {BigDecimal} \n\t */\n\tulp() {\n\t\treturn new BigDecimal([BigInteger.ONE, this.scale()]);\n\t}\n\n\t/**\n\t * Absolute value.\n\t * @returns {BigDecimal} abs(A)\n\t */\n\tabs() {\n\t\tconst output = this.clone();\n\t\toutput.integer = output.integer.abs();\n\t\treturn output;\n\t}\n\n\t/**\n\t * this * 1\n\t * @returns {BigDecimal} +A\n\t */\n\tplus() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * this * -1\n\t * @returns {BigDecimal} -A\n\t */\n\tnegate() {\n\t\tconst output = this.clone();\n\t\toutput.integer = output.integer.negate();\n\t\treturn output;\n\t}\n\n\t/**\n\t * Move the decimal point to the left.\n\t * @param {KBigDecimalInputData} n \n\t * @returns {BigDecimal} \n\t */\n\tmovePointLeft(n) {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this;\n\t\t}\n\t\tconst x = BigDecimal._toInteger(n);\n\t\tlet output = this.scaleByPowerOfTen( -x );\n\t\toutput = output.setScale(Math.max(this.scale() + x, 0));\n\t\treturn output;\n\t}\n\n\t/**\n\t * Move the decimal point to the right.\n\t * @param {KBigDecimalInputData} n \n\t * @returns {BigDecimal} \n\t */\n\tmovePointRight(n) {\n\t\treturn this.movePointLeft(-n);\n\t}\n\n\t/**\n\t * Remove the 0 to the right of the numbers and normalize the scale.\n\t * @returns {BigDecimal} \n\t */\n\tstripTrailingZeros() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this;\n\t\t}\n\t\t// 0をできる限り取り除く\n\t\tconst sign\t\t= this.sign();\n\t\tconst sign_text\t= sign >= 0 ? \"\" : \"-\";\n\t\tconst text\t\t= this.integer.toString(10).replace(/^-/, \"\");\n\t\tconst zeros\t\t= text.match(/0+$/);\n\t\tlet zero_length\t= (zeros !== null) ? zeros[0].length : 0;\n\t\tif(zero_length === text.length) {\n\t\t\t// 全て 0 なら 1 ケタ残す\n\t\t\tzero_length = text.length - 1;\n\t\t}\n\t\tconst newScale\t= this.scale() - zero_length;\n\t\treturn new BigDecimal([new BigInteger(sign_text + text.substring(0, text.length - zero_length)), newScale]);\n\t}\n\n\t// ----------------------\n\t// 四則演算\n\t// ----------------------\n\t\n\t/**\n\t * Add.\n\t * @param {KBigDecimalInputData} number\n\t * @returns {BigDecimal} A + B\n\t */\n\tadd(number) {\n\t\tconst augend = BigDecimal._toBigDecimal(number);\n\t\tconst src\t\t\t= this;\n\t\tconst tgt\t\t\t= augend;\n\t\tif(!src.isFinite() || !tgt.isFinite()) {\n\t\t\tif(src.isNaN() || tgt.isNaN() || (src.isInfinite() && tgt.isInfinite() && !src.equalsState(tgt))) {\n\t\t\t\treturn BigDecimal.NaN;\n\t\t\t}\n\t\t\telse if(src.isPositiveInfinity() || tgt.isPositiveInfinity()) {\n\t\t\t\treturn BigDecimal.POSITIVE_INFINITY;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn BigDecimal.NEGATIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\tconst mc = BigDecimal.getDefaultContext();\n\t\tconst newscale\t= Math.max(src._scale, tgt._scale);\n\t\tif(src._scale === tgt._scale) {\n\t\t\t// 1 e1 + 1 e1 = 1\n\t\t\treturn new BigDecimal([src.integer.add(tgt.integer), newscale, mc]);\n\t\t}\n\t\telse if(src._scale > tgt._scale) {\n\t\t\t// 1 e-2 + 1 e-1\n\t\t\tconst newdst = tgt.setScale(src._scale);\n\t\t\t// 0.01 + 0.10 = 0.11 = 11 e-2\n\t\t\treturn new BigDecimal([src.integer.add(newdst.integer), newscale, mc]);\n\t\t}\n\t\telse {\n\t\t\t// 1 e-1 + 1 e-2\n\t\t\tconst newsrc = src.setScale(tgt._scale);\n\t\t\t// 0.1 + 0.01 = 0.11 = 11 e-2\n\t\t\treturn new BigDecimal([newsrc.integer.add(tgt.integer), newscale, mc]);\n\t\t}\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {KBigDecimalInputData} number \n\t * @returns {BigDecimal} A - B\n\t */\n\tsub(number) {\n\t\tconst subtrahend = BigDecimal._toBigDecimal(number);\n\t\treturn this.add(subtrahend.negate());\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {KBigDecimalInputData} number\n\t * @returns {BigDecimal} A * B\n\t */\n\tmul(number) {\n\t\tconst multiplicand = BigDecimal._toBigDecimal(number);\n\t\tconst src\t\t\t= this;\n\t\tconst tgt\t\t\t= multiplicand;\n\t\tif(!src.isFinite() || !tgt.isFinite()) {\n\t\t\tif(src.isNaN() || tgt.isNaN() || (src.isZero() || tgt.isZero())) {\n\t\t\t\treturn BigDecimal.NaN;\n\t\t\t}\n\t\t\telse if(src.sign() * tgt.sign() > 0) {\n\t\t\t\treturn BigDecimal.POSITIVE_INFINITY;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn BigDecimal.NEGATIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\tconst mc = BigDecimal.getDefaultContext();\n\t\tconst newinteger\t= src.integer.mul(tgt.integer);\n\t\t// 0.1 * 0.01 = 0.001\n\t\tconst newscale\t= src._scale + tgt._scale;\n\t\treturn new BigDecimal([newinteger, newscale, mc]);\n\t}\n\n\t/**\n\t * Divide not calculated to the decimal point.\n\t * @param {KBigDecimalInputData} number\n\t * @returns {BigDecimal} (int)(A / B)\n\t */\n\tdivideToIntegralValue(number) {\n\t\tconst divisor = BigDecimal._toBigDecimal(number);\n\t\tconst src\t\t= this;\n\t\tconst tgt\t\t= divisor;\n\t\tif(!src.isFinite() || !tgt.isFinite()) {\n\t\t\tif(src.isNaN() || tgt.isNaN() || (src.isInfinite() && tgt.isInfinite())) {\n\t\t\t\treturn BigDecimal.NaN;\n\t\t\t}\n\t\t\telse if(src.isInfinite()) {\n\t\t\t\tif(src.sign() * tgt.sign() >= 0) {\n\t\t\t\t\treturn BigDecimal.POSITIVE_INFINITY;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn BigDecimal.NEGATIVE_INFINITY;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn BigDecimal.ZERO;\n\t\t\t}\n\t\t}\n\t\telse if(tgt.isZero()) {\n\t\t\tif(src.isZero()) {\n\t\t\t\treturn BigDecimal.NaN;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn src.sign() >= 0 ? BigDecimal.POSITIVE_INFINITY : BigDecimal.NEGATIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\tconst mc = BigDecimal.getDefaultContext();\n\t\t/**\n\t\t * @param {number} num \n\t\t * @returns {BigInteger}\n\t\t */\n\t\tconst getDigit  = function( num ) {\n\t\t\tlet i;\n\t\t\tlet text = \"1\";\n\t\t\tfor(i = 0; i < num; i++) {\n\t\t\t\ttext = text + \"0\";\n\t\t\t}\n\t\t\treturn new BigInteger(text);\n\t\t};\n\t\tif(tgt.compareTo(BigDecimal.ZERO) === 0) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\n\t\t// 1000e0\t\t/\t1e2\t\t\t\t=\t1000e-2\n\t\t// 1000e0\t\t/\t10e1\t\t\t=\t100e-1\n\t\t// 1000e0\t\t/\t100e0\t\t\t=\t10e0\n\t\t// 1000e0\t\t/\t1000e-1\t\t\t=\t1e1\n\t\t// 1000e0\t\t/\t10000e-2\t\t=\t1e1\n\t\t// 1000e0\t\t/\t100000e-3\t\t=\t1e1\n\n\t\t// 10e2\t\t\t/\t100e0\t\t\t=\t1e1\n\t\t// 100e1\t\t/\t100e0\t\t\t=\t1e1\n\t\t// 1000e0\t\t/\t100e0\t\t\t=\t10e0\n\t\t// 10000e-1\t\t/\t100e0\t\t\t=\t100e-1\t\n\t\t// 100000e-2\t/\t100e0\t\t\t=\t1000e-2\n\t\tlet src_integer\t= src.integer;\n\t\tlet tgt_integer\t= tgt.integer;\n\t\tconst newScale\t= src._scale - tgt._scale;\n\n\t\t// 100e-2 / 3e-1 = 1 / 0.3 -> 100 / 30\n\t\tif(src._scale > tgt._scale) {\n\t\t\t// src._scale に合わせる\n\t\t\ttgt_integer = tgt_integer.mul(getDigit(  newScale ));\n\t\t}\n\t\t// 1e-1 / 3e-2 = 0.1 / 0.03 -> 10 / 3\n\t\telse if(src._scale < tgt._scale) {\n\t\t\t// tgt._scale に合わせる\n\t\t\tsrc_integer = src_integer.mul(getDigit( -newScale ));\n\t\t}\n\n\t\t// とりあえず計算結果だけ作ってしまう\n\t\tconst new_integer\t= src_integer.div(tgt_integer);\n\t\tconst sign\t\t\t= new_integer.sign();\n\t\tif(sign !== 0) {\n\t\t\tconst text\t= new_integer.toString(10).replace(/^-/, \"\");\n\t\t\t// 指定した桁では表すことができない\n\t\t\tif((mc.getPrecision() !== 0) && (text.length > mc.getPrecision())) {\n\t\t\t\tthrow \"ArithmeticException\";\n\t\t\t}\n\t\t\t// 結果の優先スケール に合わせる (this.scale() - divisor.scale())\n\t\t\tif(text.length <= (-newScale)) {\n\t\t\t\t// 合わせることができないので、0をできる限り削る = stripTrailingZerosメソッド\n\t\t\t\tconst zeros\t\t\t= text.match(/0+$/);\n\t\t\t\tconst zero_length\t= (zeros !== null) ? zeros[0].length : 0;\n\t\t\t\tconst sign_text\t\t= sign >= 0 ? \"\" : \"-\";\n\t\t\t\treturn new BigDecimal([new BigInteger(sign_text + text.substring(0, text.length - zero_length)), -zero_length, mc]);\n\t\t\t}\n\t\t}\n\n\t\tlet output = new BigDecimal(new_integer);\n\t\toutput = output.setScale(newScale, RoundingMode.UP);\n\t\toutput = output.round(mc);\n\t\toutput.context = mc;\n\t\treturn output;\n\t}\n\n\t/**\n\t * Divide and remainder.\n\t * @param {KBigDecimalInputData} number\n\t * @returns {Array<BigDecimal>} [C = (int)(A / B), A - C * B]\n\t */\n\tdivideAndRemainder(number) {\n\t\tconst divisor = BigDecimal._toBigDecimal(number);\n\t\tif(!this.isFinite() || !divisor.isFinite()) {\n\t\t\tif(this.isNaN() || divisor.isNaN() || (this.isInfinite() && divisor.isInfinite())) {\n\t\t\t\treturn [BigDecimal.NaN, BigDecimal.NaN];\n\t\t\t}\n\t\t\telse if(this.isInfinite()) {\n\t\t\t\tif(this.sign() * divisor.sign() >= 0) {\n\t\t\t\t\treturn [BigDecimal.POSITIVE_INFINITY, BigDecimal.NaN];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn [BigDecimal.NEGATIVE_INFINITY, BigDecimal.NaN];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn [BigDecimal.ZERO, BigDecimal.NaN];\n\t\t\t}\n\t\t}\n\t\telse if(divisor.isZero()) {\n\t\t\tif(this.isZero()) {\n\t\t\t\treturn [BigDecimal.NaN, BigDecimal.NaN];\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn [this.sign() >= 0 ? BigDecimal.POSITIVE_INFINITY : BigDecimal.NEGATIVE_INFINITY, BigDecimal.NaN];\n\t\t\t}\n\t\t}\n\t\t// 1000e0\t\t/\t1e2\t\t\t\t=\t1000e-2\t... 0e0\n\t\t// 1000e0\t\t/\t10e1\t\t\t=\t100e-1\t... 0e0\n\t\t// 1000e0\t\t/\t100e0\t\t\t=\t10e0\t... 0e0\n\t\t// 1000e0\t\t/\t1000e-1\t\t\t=\t1e1\t\t... 0e0\n\t\t// 1000e0\t\t/\t10000e-2\t\t=\t1e1\t\t... 0e-1\n\t\t// 1000e0\t\t/\t100000e-3\t\t=\t1e1\t\t... 0e-2\n\n\t\t// 10e2\t\t\t/\t100e0\t\t\t=\t1e1\t\t... 0e1\n\t\t// 100e1\t\t/\t100e0\t\t\t=\t1e1\t\t... 0e1\n\t\t// 1000e0\t\t/\t100e0\t\t\t=\t10e0\t... 0e0\n\t\t// 10000e-1\t\t/\t100e0\t\t\t=\t100e-1\t... 0e-1\n\t\t// 100000e-2\t/\t100e0\t\t\t=\t1000e-2\t... 0e-2\n\n\t\tconst result_divide\t= this.divideToIntegralValue(divisor);\n\t\tconst result_remaind\t= this.sub(result_divide.mul(divisor));\n\n\t\tconst output = [result_divide, result_remaind];\n\t\treturn output;\n\t}\n\n\t/**\n\t * Remainder of division.\n\t * - Result has same sign as the Dividend.\n\t * @param {KBigDecimalInputData} number\n\t * @returns {BigDecimal} A % B\n\t */\n\trem(number) {\n\t\treturn this.divideAndRemainder(number)[1];\n\t}\n\n\t/**\n\t * Modulo, positive remainder of division.\n\t * - Result has same sign as the Divisor.\n\t * @param {KBigDecimalInputData} number\n\t * @returns {BigDecimal} A mod B\n\t */\n\tmod(number) {\n\t\tconst src = this;\n\t\tconst tgt = BigDecimal._toBigDecimal(number);\n\t\tif(tgt.isZero()) {\n\t\t\treturn src;\n\t\t}\n\t\tconst x = src.rem(tgt);\n\t\tif(!src.equalsState(tgt)) {\n\t\t\treturn x.add(tgt);\n\t\t}\n\t\telse {\n\t\t\treturn x;\n\t\t}\n\t}\n\n\t/**\n\t * Divide.\n\t * - The argument can specify the scale after calculation.\n\t * - In the case of precision infinity, it may generate an error by a repeating decimal.\n\t * - When \"{}\" is specified for the argument, it is calculated on the scale of \"this.scale() - divisor.scale()\".\n\t * - When null is specified for the argument, it is calculated on the scale of \"divisor.context\".\n\t * @param {KBigDecimalInputData} number\n\t * @param {MathContext|KBigDecimalDivideType} [type] - Scale, MathContext, RoundingMode used for the calculation.\n\t * @returns {BigDecimal}\n\t */\n\tdiv(number, type) {\n\t\tconst divisor = BigDecimal._toBigDecimal(number);\n\t\tconst src\t\t\t= this;\n\t\tconst tgt\t\t\t= divisor;\n\t\tif(!src.isFinite() || !tgt.isFinite()) {\n\t\t\tif(src.isNaN() || tgt.isNaN() || (src.isInfinite() && tgt.isInfinite())) {\n\t\t\t\treturn BigDecimal.NaN;\n\t\t\t}\n\t\t\telse if(src.isInfinite()) {\n\t\t\t\tif(src.sign() * tgt.sign() >= 0) {\n\t\t\t\t\treturn BigDecimal.POSITIVE_INFINITY;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn BigDecimal.NEGATIVE_INFINITY;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn BigDecimal.ZERO;\n\t\t\t}\n\t\t}\n\t\telse if(tgt.isZero()) {\n\t\t\tif(src.isZero()) {\n\t\t\t\treturn BigDecimal.NaN;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn src.sign() >= 0 ? BigDecimal.POSITIVE_INFINITY : BigDecimal.NEGATIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\tlet roundingMode\t= null;\n\t\tlet mc\t\t\t\t= null;\n\t\tlet newScale\t\t= 0;\n\t\tlet isPriorityScale\t= false;\n\n\t\t// 設定をロードする\n\t\tif(!type) {\n\t\t\tmc = BigDecimal.getDefaultContext();\n\t\t\troundingMode = mc.getRoundingMode();\n\t\t\tnewScale = mc.getPrecision();\n\t\t}\n\t\telse if(type instanceof MathContext) {\n\t\t\tmc = type;\n\t\t\troundingMode = mc.getRoundingMode();\n\t\t\tnewScale = mc.getPrecision();\n\t\t}\n\t\telse {\n\t\t\tif(type && type.scale) {\n\t\t\t\tnewScale = type.scale;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tisPriorityScale\t= true;\n\t\t\t\tif(type && (type.roundingMode || type.context)) {\n\t\t\t\t\tnewScale = src.scale();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnewScale = src.scale() - tgt.scale();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(type && type.context) {\n\t\t\t\tmc = type.context;\n\t\t\t\troundingMode = mc.getRoundingMode();\n\t\t\t\tnewScale = mc.getPrecision();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmc = this.context;\n\t\t\t}\n\t\t\tif(type && type.roundingMode) {\n\t\t\t\troundingMode = type.roundingMode;\n\t\t\t}\n\t\t\telse {\n\t\t\t\troundingMode = mc.getRoundingMode();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(tgt.compareTo(BigDecimal.ZERO) === 0) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\n\t\tconst precision = mc.getPrecision();\n\n\t\tlet all_result;\n\t\t// 無限精度か、精度が小さい場合は厳密に求める\n\t\tif((precision === 0) || (precision <= 100)) {\n\t\t\tlet newsrc;\n\t\t\t/**\n\t\t\t * @type {any}\n\t\t\t */\n\t\t\tconst result_map = {};\n\t\t\tlet result, result_divide, result_remaind;\n\t\t\tall_result = BigDecimal.ZERO;\n\t\t\tconst check_max = precision !== 0 ? (precision + 8) : 0x3FFFF;\n\t\t\tnewsrc = src;\n\t\t\tBigDecimal.pushDefaultContext(MathContext.UNLIMITED);\n\t\t\tlet is_error = false;\n\t\t\tlet error_message;\n\t\t\tfor(let i = 0; i < check_max; i++) {\n\t\t\t\tresult = newsrc.divideAndRemainder(tgt);\n\t\t\t\tresult_divide\t= result[0];\n\t\t\t\tresult_remaind\t= result[1];\n\t\t\t\tall_result = all_result.add(result_divide.scaleByPowerOfTen(-i));\n\t\t\t\tif(result_remaind.compareTo(BigDecimal.ZERO) !== 0) {\n\t\t\t\t\tif(precision === 0) {\t// 精度無限大の場合は、循環小数のチェックが必要\n\t\t\t\t\t\tif(result_map[result_remaind._getUnsignedIntegerString()]) {\n\t\t\t\t\t\t\tis_error = true;\n\t\t\t\t\t\t\terror_message = \"ArithmeticException \" + all_result + \"[\" + result_remaind._getUnsignedIntegerString() + \"]\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tresult_map[result_remaind._getUnsignedIntegerString()] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tnewsrc = result_remaind.scaleByPowerOfTen(1);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tBigDecimal.popDefaultContext();\n\t\t\tif(is_error) {\n\t\t\t\tthrow error_message;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// 巨大な値は繰り返しで求める\n\t\t\tBigDecimal.pushDefaultContext(new MathContext(precision + 4, RoundingMode.HALF_UP));\n\t\t\tall_result = this.mul(tgt.inv());\n\t\t\tBigDecimal.popDefaultContext();\n\t\t}\n\t\n\t\tall_result.context = mc;\n\t\tif(isPriorityScale) {\n\t\t\t// 優先スケールの場合は、スケールの変更に失敗する可能性あり\n\t\t\ttry {\n\t\t\t\tall_result = all_result.setScale(newScale, roundingMode);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\t// falls through\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tall_result = all_result.setScale(newScale, roundingMode);\n\t\t}\n\t\tall_result = all_result.round(BigDecimal.getDefaultContext());\n\t\treturn all_result;\n\t}\n\n\t/**\n\t * Inverse number of this value.\n\t * @returns {BigDecimal} 1 / A\n\t */\n\tinv() {\n\t\tif(BigDecimal.getDefaultContext().equals(MathContext.UNLIMITED)) {\n\t\t\treturn BigDecimal.ONE.div(this);\n\t\t}\n\t\t{\n\t\t\tif(!this.isFinite()) {\n\t\t\t\treturn this.isNaN() ? BigDecimal.NaN : BigDecimal.ZERO;\n\t\t\t}\n\t\t\tif(this.isZero()) {\n\t\t\t\treturn BigDecimal.NaN;\n\t\t\t}\n\t\t}\n\t\t// 通常の割り算を行うと、「1」÷巨大な数を計算したときに、\n\t\t// 1 の仮数部の精度によってしまい、結果が0になってしまう場合がある\n\t\t// const mc = context ? context : this.context;\n\t\t// const b1 = this.createUsingThisSettings(1, mc);\n\t\t// return b1.div(this, mc);\n\t\t// 計算は絶対値を用いて行う\n\t\tconst is_negative = this.isNegative();\n\t\tconst A = !is_negative ? this: this.negate();\n\t\t// 3次のニュートン・ラフソン法で求める\n\t\tconst B1 = BigDecimal.create(1);\n\t\t// 初期値は、指数部の情報を使用する\n\t\tconst scale = - A.scale() + (A.precision() - 1);\n\t\tconst x0 = new BigDecimal([1, scale + 1]);\n\t\tif(x0.isZero()) {\n\t\t\treturn null;\n\t\t}\n\t\tlet xn = x0;\n\t\tfor(let i = 0; i < 20; i++) {\n\t\t\tconst h = B1.sub(A.mul(xn));\n\t\t\tif(h.isZero()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\txn = xn.mul(B1.add(h).add(h.square()));\n\t\t}\n\t\t// 参考\n\t\t// Lyuka - 逆数と平方根を求める高次収束アルゴリズム\n\t\t// http://www.finetune.co.jp/~lyuka/technote/fract/sqrt.html\n\t\treturn !is_negative ? xn : xn.negate();\n\t}\n\n\t// ----------------------\n\t// その他の演算\n\t// ----------------------\n\t\n\t/**\n\t * Factorial function, x!.\n\t * - Supports only integers.\n\t * @returns {BigDecimal} n!\n\t */\n\tfactorial() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this;\n\t\t}\n\t\tconst output = new BigDecimal((new BigInteger(this)).factorial());\n\t\treturn output;\n\t}\n\n\t/**\n\t * Multiply a multiple of ten.\n\t * - Supports only integers.\n\t * - Only the scale is changed without changing the precision.\n\t * @param {KBigDecimalInputData} n \n\t * @returns {BigDecimal} A * 10^floor(n)\n\t */\n\tscaleByPowerOfTen(n) {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this;\n\t\t}\n\t\tconst x = BigDecimal._toInteger(n);\n\t\tconst output = this.clone();\n\t\toutput._scale = this.scale() - x;\n\t\treturn output;\n\t}\n\n\t// ----------------------\n\t// 環境設定用\n\t// ----------------------\n\t\n\t/**\n\t * Set default the MathContext.\n\t * - This is used if you do not specify MathContext when creating a new object.\n\t * @param {MathContext} [context=MathContext.DECIMAL128]\n\t */\n\tstatic setDefaultContext(context) {\n\t\tDEFAULT_CONTEXT_[DEFAULT_CONTEXT_.length - 1] = context ? context : MathContext.DECIMAL128;\n\t}\n\n\t/**\n\t * Return default MathContext class.\n\t * - Used when MathContext not specified explicitly.\n\t * @returns {MathContext}\n\t */\n\tstatic getDefaultContext() {\n\t\treturn DEFAULT_CONTEXT_[DEFAULT_CONTEXT_.length - 1];\n\t}\n\n\t/**\n\t * Push default the MathContext.\n\t * - Use with `popDefaultContext` when you want to switch settings temporarily.\n\t * @param {MathContext} [context]\n\t */\n\tstatic pushDefaultContext(context) {\n\t\tDEFAULT_CONTEXT_.push(context);\n\t}\n\n\t/**\n\t * Pop default the MathContext.\n\t * - Use with `pushDefaultContext` when you want to switch settings temporarily.\n\t */\n\tstatic popDefaultContext() {\n\t\tDEFAULT_CONTEXT_.pop();\n\t}\n\n\t// ----------------------\n\t// 他の型に変換用\n\t// ----------------------\n\t\n\t/**\n\t * boolean value.\n\t * @returns {boolean}\n\t */\n\tget booleanValue() {\n\t\treturn this.integer.booleanValue;\n\t}\n\n\t/**\n\t * 32-bit integer value.\n\t * @returns {number}\n\t */\n\tget intValue() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? NaN : (this.isPositiveInfinity() ? Infinity : -Infinity);\n\t\t}\n\t\tconst bigintdata = this.toBigInteger();\n\t\tconst x = bigintdata.intValue;\n\t\treturn x & 0xFFFFFFFF;\n\t}\n\n\t/**\n\t * 32-bit integer value.\n\t * An error occurs if conversion fails.\n\t * @returns {number}\n\t */\n\tget intValueExact() {\n\t\tif(!this.isFinite()) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t\tconst bigintdata = this.toBigInteger();\n\t\tconst x = bigintdata.intValue;\n\t\tif((x < -2147483648) || (2147483647 < x)) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 32-bit floating point.\n\t * @returns {number}\n\t */\n\tget floatValue() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? NaN : (this.isPositiveInfinity() ? Infinity : -Infinity);\n\t\t}\n\t\tconst p = this.precision();\n\t\tif(MathContext.DECIMAL32.getPrecision() < p) {\n\t\t\treturn(this.sign() >= 0 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY);\n\t\t}\n\t\treturn parseFloat(this.toEngineeringString());\n\t}\n\n\t/**\n\t * 64-bit floating point.\n\t * @returns {number}\n\t */\n\tget doubleValue() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? NaN : (this.isPositiveInfinity() ? Infinity : -Infinity);\n\t\t}\n\t\treturn parseFloat(this.toEngineeringString());\n\t}\n\n\t// ----------------------\n\t// konpeito で扱う数値型へ変換\n\t// ----------------------\n\t\n\t/**\n\t * return BigInteger.\n\t * @returns {BigInteger}\n\t */\n\ttoBigInteger() {\n\t\treturn this.integer.scaleByPowerOfTen(-this.scale());\n\t}\n\n\t/**\n\t * return BigDecimal.\n\t * @param {MathContext} [mc] - MathContext setting after calculation. \n\t * @returns {BigDecimal}\n\t */\n\ttoBigDecimal(mc) {\n\t\tif(mc) {\n\t\t\treturn this.round(mc);\n\t\t}\n\t\telse {\n\t\t\treturn this;\n\t\t}\n\t}\n\t\n\t/**\n\t * return Fraction.\n\t * @returns {Fraction}\n\t */\n\ttoFraction() {\n\t\treturn new Fraction(this);\n\t}\n\n\t/**\n\t * return Complex.\n\t * @returns {Complex}\n\t */\n\ttoComplex() {\n\t\treturn new Complex(this);\n\t}\n\t\n\t/**\n\t * return Matrix.\n\t * @returns {Matrix}\n\t */\n\ttoMatrix() {\n\t\treturn new Matrix(this);\n\t}\n\n\t// ----------------------\n\t// 比較\n\t// ----------------------\n\t\n\t/**\n\t * Equals.\n\t * - Attention : Test for equality, including the precision and the scale. \n\t * - Use the \"compareTo\" if you only want to find out whether they are also mathematically equal.\n\t * - If you specify a \"tolerance\", it is calculated by ignoring the test of the precision and the scale.\n\t * @param {KBigDecimalInputData} number \n\t * @param {KBigDecimalInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean} A === B\n\t */\n\tequals(number, tolerance) {\n\t\t// 誤差を指定しない場合は、厳密に調査\n\t\tif(!tolerance) {\n\t\t\tif((number instanceof BigDecimal) || (typeof number === \"string\")) {\n\t\t\t\tconst val = number instanceof BigDecimal ? number : BigDecimal._toBigDecimal(number);\n\t\t\t\tif(this.isNaN() || val.isNaN()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn (this.equalsState(val) && (this._scale === val._scale) && this.integer.equals(val.integer));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this.compareTo(number) === 0;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn this.compareTo(number, tolerance) === 0;\n\t\t}\n\t}\n\n\t/**\n\t * Numeric type match.\n\t * @param {KBigDecimalInputData} number \n\t * @returns {boolean}\n\t */\n\tequalsState(number) {\n\t\tconst x = this;\n\t\tconst y = BigDecimal._toBigDecimal(number);\n\t\treturn x.integer.equalsState(y.integer);\n\t}\n\n\t/**\n\t * Compare values.\n\t * @param {KBigDecimalInputData} number\n\t * @param {KBigDecimalInputData} [tolerance=0] - Calculation tolerance of calculation.\n\t * @returns {number} A > B ? 1 : (A === B ? 0 : -1)\n\t */\n\tcompareTo(number, tolerance) {\n\t\tconst src = this;\n\t\tconst tgt = BigDecimal._toBigDecimal(number);\n\t\t// 特殊な条件\n\t\tif(!src.isFinite() || !tgt.isFinite()) {\n\t\t\treturn src.integer.compareTo(tgt.integer);\n\t\t}\n\t\t// 通常の条件\n\t\tif(!tolerance) {\n\t\t\t// 誤差の指定がない場合\n\t\t\t// 簡易計算\n\t\t\t{\n\t\t\t\tconst src_sign\t= src.sign();\n\t\t\t\tconst tgt_sign\t= tgt.sign();\n\t\t\t\tif((src_sign === 0) && (src_sign === tgt_sign)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\telse if(src_sign === 0) {\n\t\t\t\t\treturn - tgt_sign;\n\t\t\t\t}\n\t\t\t\telse if(tgt_sign === 0) {\n\t\t\t\t\treturn src_sign;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 実際に計算する\n\t\t\tif(src._scale === tgt._scale) {\n\t\t\t\treturn src.integer.compareTo(tgt.integer);\n\t\t\t}\n\t\t\telse if(src._scale > tgt._scale) {\n\t\t\t\tconst newdst = tgt.setScale(src._scale);\n\t\t\t\treturn src.integer.compareTo(newdst.integer);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst newsrc = src.setScale(tgt._scale);\n\t\t\t\treturn newsrc.integer.compareTo(tgt.integer);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconst tolerance_ = BigDecimal._toBigDecimal(tolerance);\n\t\t\tBigDecimal.pushDefaultContext(MathContext.UNLIMITED);\n\t\t\tconst delta = src.sub(tgt);\n\t\t\tBigDecimal.popDefaultContext();\n\t\t\tconst delta_abs = delta.abs();\n\t\t\tif(delta_abs.compareTo(tolerance_) <= 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn delta.sign();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Maximum number.\n\t * @param {KBigDecimalInputData} number\n\t * @returns {BigDecimal} max([A, B])\n\t */\n\tmax(number) {\n\t\tconst val = BigDecimal._toBigDecimal(number);\n\t\tif(this.isNaN() || val.isNaN()) {\n\t\t\treturn BigDecimal.NaN;\n\t\t}\n\t\tif(this.compareTo(val) >= 0) {\n\t\t\treturn this.clone();\n\t\t}\n\t\telse {\n\t\t\treturn val.clone();\n\t\t}\n\t}\n\n\t/**\n\t * Minimum number.\n\t * @param {KBigDecimalInputData} number \n\t * @returns {BigDecimal} min([A, B])\n\t */\n\tmin(number) {\n\t\tconst val = BigDecimal._toBigDecimal(number);\n\t\tif(this.isNaN() || val.isNaN()) {\n\t\t\treturn BigDecimal.NaN;\n\t\t}\n\t\tif(this.compareTo(val) <= 0) {\n\t\t\treturn this.clone();\n\t\t}\n\t\telse {\n\t\t\treturn val.clone();\n\t\t}\n\t}\n\n\t/**\n\t * Clip number within range.\n\t * @param {KBigDecimalInputData} min\n\t * @param {KBigDecimalInputData} max\n\t * @returns {BigDecimal} min(max(x, min), max)\n\t */\n\tclip(min, max) {\n\t\tconst min_ = BigDecimal._toBigDecimal(min);\n\t\tconst max_ = BigDecimal._toBigDecimal(max);\n\t\tif(this.isNaN() || min_.isNaN() || max_.isNaN()) {\n\t\t\treturn BigDecimal.NaN;\n\t\t}\n\t\tconst arg_check = min_.compareTo(max_);\n\t\tif(arg_check === 1) {\n\t\t\tthrow \"clip(min, max) error. (min > max)->(\" + min_ + \" > \" + max_ + \")\";\n\t\t}\n\t\telse if(arg_check === 0) {\n\t\t\treturn min_;\n\t\t}\n\t\tif(this.compareTo(max_) === 1) {\n\t\t\treturn max_;\n\t\t}\n\t\telse if(this.compareTo(min_) === -1) {\n\t\t\treturn min_;\n\t\t}\n\t\treturn this;\n\t}\n\n\t// ----------------------\n\t// 文字列化\n\t// ----------------------\n\t\n\t/**\n\t * Convert to string.\n\t * @returns {string} \n\t */\n\ttoString() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? \"NaN\" : (this.isPositiveInfinity() ? \"Infinity\" : \"-Infinity\");\n\t\t}\n\t\t// 「調整された指数」\n\t\tconst x = - this.scale() + (this.precision() - 1);\n\t\t// スケールが 0 以上で、「調整された指数」が -6 以上\n\t\tif((this.scale() >= 0) && (x >= -6)) {\n\t\t\treturn this.toPlainString();\n\t\t}\n\t\telse {\n\t\t\treturn this.toScientificNotation(x);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to string using scientific notation.\n\t * @param {KBigDecimalInputData} e_len - Number of digits in exponent part.\n\t * @returns {string} \n\t */\n\ttoScientificNotation(e_len) {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? \"NaN\" : (this.isPositiveInfinity() ? \"Infinity\" : \"-Infinity\");\n\t\t}\n\t\tconst e\t\t= BigDecimal._toInteger(e_len);\n\t\tconst text\t= this._getUnsignedIntegerString();\n\t\tlet s\t\t= this.scale();\n\t\tconst x\t\t= [];\n\t\tlet i, k;\n\t\t// -\n\t\tif(this.sign() === -1) {\n\t\t\tx[x.length] = \"-\";\n\t\t}\n\t\t// 表示上の桁数\n\t\ts = - e - s;\n\t\t// 小数点が付かない\n\t\tif(s >= 0) {\n\t\t\tx[x.length] = text;\n\t\t\tfor(i = 0; i < s; i++) {\n\t\t\t\tx[x.length] = \"0\";\n\t\t\t}\n\t\t}\n\t\t// 小数点が付く\n\t\telse {\n\t\t\tk = this.precision() + s;\n\t\t\tif(0 < k) {\n\t\t\t\tx[x.length] = text.substring(0, k);\n\t\t\t\tx[x.length] = \".\";\n\t\t\t\tx[x.length] = text.substring(k, text.length);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tk = - k;\n\t\t\t\tx[x.length] = \"0.\";\n\t\t\t\tfor(i = 0; i < k; i++) {\n\t\t\t\t\tx[x.length] = \"0\";\n\t\t\t\t}\n\t\t\t\tx[x.length] = text;\n\t\t\t}\n\t\t}\n\t\tx[x.length] = \"E\";\n\t\tif(e >= 0) {\n\t\t\tx[x.length] = \"+\";\n\t\t}\n\t\tx[x.length] = e;\n\t\treturn x.join(\"\");\n\t}\n\n\t/**\n\t * Convert to string usding technical notation.\n\t * @returns {string} \n\t */\n\ttoEngineeringString() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? \"NaN\" : (this.isPositiveInfinity() ? \"Infinity\" : \"-Infinity\");\n\t\t}\n\t\t// 「調整された指数」\n\t\tconst x = - this.scale() + (this.precision() - 1);\n\t\t// スケールが 0 以上で、「調整された指数」が -6 以上\n\t\tif((this.scale() >= 0) && (x >= -6)) {\n\t\t\treturn this.toPlainString();\n\t\t}\n\t\telse {\n\t\t\t// 0 でない値の整数部が 1 〜 999 の範囲に収まるように調整\n\t\t\treturn this.toScientificNotation(Math.floor(x / 3) * 3);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to string without exponential notation.\n\t * @returns {string} \n\t */\n\ttoPlainString() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? \"NaN\" : (this.isPositiveInfinity() ? \"Infinity\" : \"-Infinity\");\n\t\t}\n\t\t// スケールの変換なし\n\t\tif(this.scale() === 0) {\n\t\t\tif(this.sign() < 0) {\n\t\t\t\treturn \"-\" + this._getUnsignedIntegerString();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this._getUnsignedIntegerString();\n\t\t\t}\n\t\t}\n\t\t// 指数0で文字列を作成後、Eの後ろの部分をとっぱらう\n\t\tconst text = this.toScientificNotation(0);\n\t\treturn text.match(/^[^E]*/)[0];\n\t}\n\n\t// ----------------------\n\t// 丸め\n\t// ----------------------\n\t\n\t/**\n\t * Change the scale.\n\t * @param {KBigDecimalInputData} new_scale - New scale.\n\t * @param {RoundingModeEntity} [rounding_mode=RoundingMode.UNNECESSARY] - Rounding method when converting precision.\n\t * @returns {BigDecimal} \n\t */\n\tsetScale(new_scale, rounding_mode) {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this;\n\t\t}\n\t\tconst newScale = BigDecimal._toInteger(new_scale);\n\t\tif(this.scale() === newScale) {\n\t\t\t// scaleが同一なので処理の必要なし\n\t\t\treturn(this.clone());\n\t\t}\n\t\tconst roundingMode = (rounding_mode !== undefined) ? RoundingMode.valueOf(rounding_mode) : RoundingMode.UNNECESSARY;\n\t\t// 文字列を扱ううえで、符号があるとやりにくいので外しておく\n\t\tlet text\t\t= this._getUnsignedIntegerString();\n\t\tconst sign\t\t= this.sign();\n\t\tconst sign_text\t= sign >= 0 ? \"\" : \"-\";\n\t\t// scale の誤差\n\t\t// 0 以上なら 0 を加えればいい。0未満なら0を削るか、四捨五入など丸めを行う\n\t\tconst delta\t\t= newScale - this.scale();\t// この桁分増やすといい\n\t\tif(0 <= delta) {\n\t\t\t// 0を加える\n\t\t\tlet i;\n\t\t\tfor(i = 0; i < delta; i++) {\n\t\t\t\ttext = text + \"0\";\n\t\t\t}\n\t\t\treturn new BigDecimal([new BigInteger(sign_text + text), newScale]);\n\t\t}\n\t\tconst keta = text.length + delta;\t\t// 最終的な桁数\n\t\tconst keta_marume = keta + 1;\n\t\tif(keta <= 0) {\n\t\t\t// 指定した scale では設定できない場合\n\t\t\t// 例えば \"0.1\".setScale(-2), \"10\".setScale(-3) としても表すことは不可能であるため、\n\t\t\t// sign（-1, 0, +1）のどれかの数値を使用して丸める\n\t\t\tconst outdata = (sign + roundingMode.getAddNumber(sign)) / 10;\n\t\t\t// 上記の式は、CEILINGなら必ず1、正でCEILINGなら1、負でFLOORなら1、それ以外は0となり、\n\t\t\t// さらに元々の数値が 0 なら 0、切り捨て不能なら例外が返る計算式である。\n\t\t\t// これは Java の動作をまねています。\n\t\t\treturn new BigDecimal([new BigInteger(outdata), newScale]);\n\t\t}\n\t\t{\n\t\t\t// 0を削るだけで解決する場合\n\t\t\t// 単純な切捨て(0を削るのみ)\n\t\t\tconst zeros\t\t\t= text.match(/0+$/);\n\t\t\tconst zero_length\t\t= (zeros !== null) ? zeros[0].length : 0;\n\t\t\tif(( (zero_length + delta) >= 0 ) || (roundingMode === RoundingMode.DOWN)) {\n\t\t\t\treturn new BigDecimal([new BigInteger(sign_text + text.substring(0, keta)), newScale]);\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\t// 丸め計算で解決する場合\n\t\t\t// 12345 -> '123'45\n\t\t\ttext = text.substring(0, keta_marume);\n\t\t\t// 丸め計算に必要な切り取る桁数(後ろの1～2桁を取得)\n\t\t\tconst cutsize = text.length > 1 ? 2 : 1;\n\t\t\t// '123'45 -> 1'23'4\n\t\t\tconst number = parseInt(text.substring(text.length - cutsize, text.length)) * sign;\n\t\t\t// 「元の数」と「丸めに必要な数」を足す\n\t\t\tconst x1 = new BigInteger(sign_text + text);\n\t\t\tconst x2 = new BigInteger(roundingMode.getAddNumber(number));\n\t\t\ttext = x1.add(x2).toString();\n\t\t\t// 丸め後の桁数に戻して\n\t\t\treturn new BigDecimal([new BigInteger(text.substring(0, text.length - 1)), newScale]);\n\t\t}\n\t}\n\n\t/**\n\t * Round with specified settings.\n\t * \n\t * - This method is not a method round the decimal point.\n\t * - This method converts numbers in the specified Context and rounds unconvertible digits.\n\t * \n\t * Use `this.setScale(0, RoundingMode.HALF_UP)` if you want to round the decimal point.\n\t * When the argument is omitted, such decimal point rounding operation is performed.\n\t * @param {MathContext} [mc] - New setting.\n\t * @returns {BigDecimal} \n\t */\n\tround(mc) {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this;\n\t\t}\n\t\tif(arguments.length === 1) {\n\t\t\tif(mc !== undefined) {\n\t\t\t\t// MathContext を設定した場合\n\t\t\t\tif(!(mc instanceof MathContext)) {\n\t\t\t\t\tthrow \"not MathContext\";\n\t\t\t\t}\n\t\t\t\tconst newPrecision\t= mc.getPrecision();\n\t\t\t\tconst delta\t\t\t= newPrecision - this.precision();\n\t\t\t\tif((delta === 0)||(newPrecision === 0)) {\n\t\t\t\t\treturn this.clone();\n\t\t\t\t}\n\t\t\t\tconst newBigDecimal = this.setScale( this.scale() + delta, mc.getRoundingMode());\n\t\t\t\t/* 精度を上げる必要があるため、0を加えた場合 */\n\t\t\t\tif(delta > 0) {\n\t\t\t\t\treturn newBigDecimal;\n\t\t\t\t}\n\t\t\t\t/* 精度を下げる必要があるため、丸めた場合は、桁の数が正しいか調べる */\n\t\t\t\tif(newBigDecimal.precision() === mc.getPrecision()) {\n\t\t\t\t\treturn newBigDecimal;\n\t\t\t\t}\n\t\t\t\t/* 切り上げなどで桁数が１つ増えた場合 */\n\t\t\t\tconst sign_text\t= newBigDecimal.integer.sign() >= 0 ? \"\" : \"-\";\n\t\t\t\tconst abs_text\t= newBigDecimal._getUnsignedIntegerString();\n\t\t\t\tconst inte_text\t= sign_text + abs_text.substring(0, abs_text.length - 1);\n\t\t\t\treturn new BigDecimal([new BigInteger(inte_text), newBigDecimal.scale() - 1]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// 小数点以下を四捨五入する\n\t\t\treturn this.setScale(0, RoundingMode.HALF_UP);\n\t\t}\n\t}\n\n\t/**\n\t * Floor.\n\t * @returns {BigDecimal} floor(A)\n\t */\n\tfloor() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn this.setScale(0, RoundingMode.FLOOR);\n\t}\n\n\t/**\n\t * Ceil.\n\t * @returns {BigDecimal} ceil(A)\n\t */\n\tceil() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn this.setScale(0, RoundingMode.CEILING);\n\t}\n\t\n\t/**\n\t * To integer rounded down to the nearest.\n\t * @returns {BigDecimal} fix(A), trunc(A)\n\t */\n\tfix() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn this.setScale(0, RoundingMode.DOWN);\n\t}\n\n\t/**\n\t * Fraction.\n\t * @returns {BigDecimal} fract(A)\n\t */\n\tfract() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn BigDecimal.NaN;\n\t\t}\n\t\treturn this.sub(this.floor());\n\t}\n\n\t// ----------------------\n\t// 指数\n\t// ----------------------\n\t\n\t/**\n\t * Power function.\n\t * - An exception occurs when doing a huge multiplication.\n\t * @param {KBigDecimalInputData} number \n\t * @returns {BigDecimal} pow(A, B)\n\t */\n\tpow(number) {\n\t\tconst num = BigDecimal._toBigDecimal(number);\n\t\tconst src = this;\n\t\tconst tgt = num;\n\t\t{\n\t\t\tif(src.isNaN() || tgt.isNaN()) {\n\t\t\t\treturn BigDecimal.NaN;\n\t\t\t}\n\t\t\tif(tgt.isZero()) {\n\t\t\t\treturn BigDecimal.ONE;\n\t\t\t}\n\t\t\telse if(src.isZero()) {\n\t\t\t\treturn BigDecimal.ZERO;\n\t\t\t}\n\t\t\telse if(src.isOne()) {\n\t\t\t\treturn src;\n\t\t\t}\n\t\t\telse if(src.isInfinite()) {\n\t\t\t\tif(src.isPositiveInfinity()) {\n\t\t\t\t\treturn BigDecimal.POSITIVE_INFINITY;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(tgt.isPositiveInfinity()) {\n\t\t\t\t\t\treturn BigDecimal.NaN;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn BigDecimal.create(Infinity * Math.pow(-1, Math.round(tgt.doubleValue)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(tgt.isInfinite()) {\n\t\t\t\tif(src.isNegative()) {\n\t\t\t\t\t// 複素数\n\t\t\t\t\treturn BigDecimal.NaN;\n\t\t\t\t}\n\t\t\t\tif(src.compareTo(BigDecimal.ONE) < 0) {\n\t\t\t\t\tif(tgt.isPositiveInfinity()) {\n\t\t\t\t\t\treturn BigDecimal.ZERO;\n\t\t\t\t\t}\n\t\t\t\t\telse if(tgt.isNegativeInfinity()) {\n\t\t\t\t\t\treturn BigDecimal.POSITIVE_INFINITY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(tgt.isPositiveInfinity()) {\n\t\t\t\t\t\treturn BigDecimal.POSITIVE_INFINITY;\n\t\t\t\t\t}\n\t\t\t\t\telse if(tgt.isNegativeInfinity()) {\n\t\t\t\t\t\treturn BigDecimal.ZERO;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst mc = BigDecimal.getDefaultContext();\n\t\tconst integer = tgt.intValue;\n\t\tif(Math.abs(integer) > 1000) {\n\t\t\tthrow BigDecimal.POSITIVE_INFINITY;\n\t\t}\n\t\telse if((mc.getPrecision() === 0) && (tgt.isNegative())) {\n\t\t\treturn BigDecimal.NaN; // 複素数\n\t\t}\n\t\tif(tgt.isInteger()) {\n\t\t\tconst is_negative = tgt.isNegative();\n\t\t\tlet n = Math.round(Math.abs(integer));\n\t\t\tlet x, y;\n\t\t\tx = this.clone();\n\t\t\ty = BigDecimal.ONE;\n\t\t\tBigDecimal.pushDefaultContext(MathContext.UNLIMITED);\n\t\t\twhile(n !== 0) {\n\t\t\t\tif((n & 1) !== 0) {\n\t\t\t\t\ty = y.mul(x);\n\t\t\t\t}\n\t\t\t\tx = x.square();\n\t\t\t\tn >>>= 1;\n\t\t\t}\n\t\t\tBigDecimal.popDefaultContext();\n\t\t\t// コンテキストの状態が変わっているので元に戻す\n\t\t\ty.context = mc;\n\t\t\tif(is_negative) {\n\t\t\t\ty = y.inv();\n\t\t\t}\n\t\t\ty = y.round(mc);\n\t\t\treturn y;\n\t\t}\n\t\telse {\n\t\t\tconst mc = BigDecimal.getDefaultContext();\n\t\t\tBigDecimal.pushDefaultContext(BigDecimal.getDefaultContext().increasePrecision());\n\t\t\tconst ret = this.log().mul(number).exp().round(mc);\n\t\t\tBigDecimal.popDefaultContext();\n\t\t\treturn ret;\n\t\t}\n\t}\n\t\n\t/**\n\t * Square.\n\t * @returns {BigDecimal} A^2\n\t */\n\tsquare() {\n\t\treturn this.mul(this);\n\t}\n\n\t/**\n\t * Square root.\n\t * @returns {BigDecimal} sqrt(A)\n\t */\n\tsqrt() {\n\t\t{\n\t\t\tif(this.isZero()) {\n\t\t\t\treturn BigDecimal.ZERO;\n\t\t\t}\n\t\t\telse if(this.isNaN()) {\n\t\t\t\treturn BigDecimal.NaN;\n\t\t\t}\n\t\t\telse if(this.isNegative()) {\n\t\t\t\treturn BigDecimal.NaN; // 複素数\n\t\t\t}\n\t\t\telse if(this.isInfinite()) {\n\t\t\t\treturn BigDecimal.POSITIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\tif(this.isZero()) {\n\t\t\treturn BigDecimal.ZERO;\n\t\t}\n\t\t// ニュートンラフソン法は割り算があり速度が遅いので、以下の計算で求める。\n\t\t{\n\t\t\tconst mc = BigDecimal.getDefaultContext();\n\t\t\tBigDecimal.pushDefaultContext(BigDecimal.getDefaultContext().increasePrecision());\n\t\t\tconst ret = this.rsqrt().inv().round(mc);\n\t\t\tBigDecimal.popDefaultContext();\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t * Cube root.\n\t * @returns {BigDecimal} cbrt(A)\n\t */\n\tcbrt() {\n\t\t{\n\t\t\tif(this.isZero()) {\n\t\t\t\treturn BigDecimal.ZERO;\n\t\t\t}\n\t\t\telse if(this.isNaN()) {\n\t\t\t\treturn BigDecimal.NaN;\n\t\t\t}\n\t\t\telse if(this.isInfinite()) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tconst scale = - this.scale() + (this.precision() - 1) + 1;\n\t\tconst sign = this.sign();\n\t\tconst abs = this.abs();\n\t\tlet ret;\n\t\t// 小さい数値はpowを使ったほうが早く計算できる\n\t\tif(scale < 30) {\n\t\t\tconst mc = BigDecimal.getDefaultContext();\n\t\t\tBigDecimal.pushDefaultContext(BigDecimal.getDefaultContext().increasePrecision());\n\t\t\tret = abs.log().div(3).exp().round(mc);\n\t\t\tBigDecimal.popDefaultContext();\n\t\t}\n\t\telse {\n\t\t\t// ニュートン法によって求める\n\t\t\t// 参考：奥村晴彦 (1991). C言語による最新アルゴリズム事典.\n\t\t\tconst x0 = abs.compareTo(BigDecimal.ONE) === 1 ? abs : BigDecimal.ONE;\n\t\t\tlet xn = x0;\n\t\t\tfor(let i = 0; i < 1000; i++) {\n\t\t\t\tconst xn_2 = xn.mul(xn);\n\t\t\t\tconst xn1 = xn.mul(2).add(abs.div(xn_2)).div(3);\n\t\t\t\tconst delta = xn1.sub(xn);\n\t\t\t\tif(delta.isZero()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\txn = xn1;\n\t\t\t}\n\t\t\tret = xn;\n\t\t}\n\t\treturn sign === 1 ? ret : ret.negate();\n\t}\n\t\n\t/**\n\t * Reciprocal square root.\n\t * @returns {BigDecimal} rsqrt(A)\n\t */\n\trsqrt() {\n\t\t{\n\t\t\tif(this.isZero()) {\n\t\t\t\treturn BigDecimal.POSITIVE_INFINITY;\n\t\t\t}\n\t\t\telse if(this.isNaN()) {\n\t\t\t\treturn BigDecimal.NaN;\n\t\t\t}\n\t\t\telse if(this.isInfinite()) {\n\t\t\t\treturn BigDecimal.ZERO;\n\t\t\t}\n\t\t\telse if(this.isNegative()) {\n\t\t\t\treturn BigDecimal.NaN; // 複素数\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * @type {BigDecimal}\n\t\t */\n\t\tconst A = this;\n\t\t// 4次収束のニュートン・ラフソン法で求める\n\t\t// 使用する固定値を列挙\n\t\tconst B1 = BigDecimal.create(1);\n\t\tconst B5 = BigDecimal.create(5);\n\t\tconst B6 = BigDecimal.create(6);\n\t\tconst B8 = BigDecimal.create(8);\n\t\tconst B16 = BigDecimal.create(16);\n\t\tconst B16r = B16.inv();\n\t\t// 初期値\n\t\tconst x0 = A.inv();\n\t\tif(x0.isZero()) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t\tlet xn = x0;\n\t\tfor(let i = 0; i < 50; i++) {\n\t\t\tconst h = B1.sub(A.mul(xn.square()));\n\t\t\tif(h.isZero()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\txn = xn.mul(B1.add(h.mul(B8.add(h.mul(B6.add(B5.mul(h))))).mul(B16r)));\n\t\t}\n\t\t// 参考\n\t\t// Lyuka - 逆数と平方根を求める高次収束アルゴリズム\n\t\t// http://www.finetune.co.jp/~lyuka/technote/fract/sqrt.html\n\t\treturn xn;\n\t}\n\t\n\t/**\n\t * Logarithmic function.\n\t * @returns {BigDecimal} log(A)\n\t */\n\tlog() {\n\t\t{\n\t\t\tif(this.isZero()) {\n\t\t\t\treturn BigDecimal.NEGATIVE_INFINITY;\n\t\t\t}\n\t\t\telse if(this.isNaN()) {\n\t\t\t\treturn BigDecimal.NaN;\n\t\t\t}\n\t\t\telse if(this.isNegative()) {\n\t\t\t\treturn BigDecimal.NaN; // 複素数\n\t\t\t}\n\t\t\telse if(this.isInfinite()) {\n\t\t\t\treturn BigDecimal.POSITIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\tif(this.isOne()) {\n\t\t\treturn BigDecimal.ZERO;\n\t\t}\n\t\tconst mc = BigDecimal.getDefaultContext();\n\t\t// log(x)\n\t\t// -> x = a * E -> log(a * E) = log(a) + log(E)\n\t\t// -> x = a / E -> log(a / E) = log(E) - log(a)\n\t\t// 上記の式を使用して、適切な値の範囲で計算できるように調整する\n\t\tconst scale = - this.scale() + (this.precision() - 1) + 1;\n\t\tBigDecimal.pushDefaultContext(new MathContext(mc.getPrecision() + scale, RoundingMode.HALF_UP));\n\t\t/**\n\t\t * @type {BigDecimal}\n\t\t */\n\t\tlet a = this;\n\t\tlet b = 0;\n\t\t{\n\t\t\t// 範囲を 1 < x <= e の間に収める\n\t\t\tconst e = BigDecimal.E;\n\t\t\tconst compare_to_e = a.compareTo(e);\n\t\t\tif(compare_to_e === 0) {\n\t\t\t\tBigDecimal.popDefaultContext();\n\t\t\t\treturn BigDecimal.ONE;\n\t\t\t}\n\t\t\t// 内部の値が大きすぎるので小さくする\n\t\t\telse if(compare_to_e > 0) {\n\t\t\t\tfor(; b < 300; b++) {\n\t\t\t\t\tif(a.compareTo(e) <= 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ta = a.div(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 内部の値が小さすぎるので大きくする\n\t\t\telse {\n\t\t\t\tconst B1 = new BigDecimal(1);\n\t\t\t\tif(a.compareTo(B1) < 0) {\n\t\t\t\t\tfor(; b > -300; b--) {\n\t\t\t\t\t\tif(a.compareTo(B1) > 0) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ta = a.mul(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tBigDecimal.popDefaultContext();\n\t\ta = a.round(BigDecimal.getDefaultContext());\n\t\t// この時点で 1 < x <= e となる\n\t\t// log((1+u)/(1-u)) = 2 * (u + u^3/3 + u^5/5 + ...) の式を使用する\n\t\t// solve((1+u)/(1-u)-x=0,[u]);->u=(x-1)/(x+1)\n\t\tconst u = a.sub(BigDecimal.ONE).div(a.add(BigDecimal.ONE));\n\t\tconst u_x2 = u.mul(u);\n\t\t{\n\t\t\t// 初期値\n\t\t\tlet x = u;\n\t\t\tlet n0 = u;\n\t\t\tlet k = BigDecimal.ONE;\n\t\t\t// 繰り返し求める\n\t\t\tfor(let i = 0; i < 300; i++) {\n\t\t\t\tk = k.add(BigDecimal.TWO);\n\t\t\t\tx = x.mul(u_x2);\n\t\t\t\tconst n1 = n0.add(x.div(k));\n\t\t\t\tconst delta = n1.sub(n0);\n\t\t\t\tn0 = n1;\n\t\t\t\tif(delta.isZero()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\ta = n0.mul(BigDecimal.TWO);\n\t\t}\n\t\t// 最終結果\n\t\tconst y = a.add(b);\n\t\treturn y;\n\t}\n\n\t/**\n\t * Exponential function.\n\t * @returns {BigDecimal} exp(A)\n\t */\n\texp() {\n\t\t{\n\t\t\tif(this.isZero()) {\n\t\t\t\treturn BigDecimal.ONE;\n\t\t\t}\n\t\t\telse if(this.isNaN()) {\n\t\t\t\treturn BigDecimal.NaN;\n\t\t\t}\n\t\t\telse if(this.isNegativeInfinity()) {\n\t\t\t\treturn BigDecimal.ZERO;\n\t\t\t}\n\t\t\telse if(this.isPositiveInfinity()) {\n\t\t\t\treturn BigDecimal.POSITIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\tconst is_negative = this.isNegative();\n\t\t/**\n\t\t * @type {BigDecimal}\n\t\t */\n\t\tlet number = this;\n\t\t// 負の値でマクローリン展開すると振動して桁落ちする可能性があるため正の値にしておく\n\t\tif(is_negative) {\n\t\t\tnumber = number.negate();\n\t\t}\n\t\t// X = exp(x) とすると X = exp(x/A)^A である。\n\t\t// そのため、収束を早くするためにexpの中を小さくしておき、最後にpowを行う。\n\t\t// scale > (10^a) = b ≒ this\n\t\t// 小さな値で計算するため精度をあげる\n\t\tconst scale = - number.scale() + (number.precision() - 1) + 1;\n\t\tconst mc = BigDecimal.getDefaultContext();\n\t\tBigDecimal.pushDefaultContext(new MathContext(mc.getPrecision() + scale, RoundingMode.HALF_UP));\n\t\tlet a = 0;\n\t\tlet b = 1;\n\t\t{\n\t\t\tconst val = number.doubleValue;\n\t\t\tif(val >= 10) {\n\t\t\t\ta = Math.floor(Math.log(Math.floor(val)) / Math.log(10));\n\t\t\t\tb = Math.pow(10, a);\n\t\t\t}\n\t\t}\n\t\t// ここでターゲットの数値を割ってしまう\n\t\tconst target = number.div(b, mc);\n\t\t// 小さくなった値に対してexpを計算する\n\t\tlet y;\n\t\t{\n\t\t\t// マクローリン展開で計算する\n\t\t\t// 初期値\n\t\t\tlet x = target;\n\t\t\tlet n0 = BigDecimal.ONE.add(target);\n\t\t\tlet k = BigDecimal.ONE;\n\t\t\t// 繰り返し求める\n\t\t\tfor(let i = 2; i < 300; i++) {\n\t\t\t\tk = k.mul(i);\n\t\t\t\tx = x.mul(target);\n\t\t\t\tconst n1 = n0.add(x.div(k));\n\t\t\t\tconst delta = n1.sub(n0);\n\t\t\t\tn0 = n1;\n\t\t\t\tif(delta.isZero()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\ty = n0;\n\t\t}\n\t\t// exp(x) = pow(y, b)である。\n\t\ty = y.pow(b);\n\t\tBigDecimal.popDefaultContext();\n\t\ty = y.round(BigDecimal.getDefaultContext());\n\t\t// 負の値だったら 1/(x^2) にして戻す\n\t\tif(is_negative) {\n\t\t\treturn y.inv();\n\t\t}\n\t\telse {\n\t\t\treturn y;\n\t\t}\n\t}\n\n\t/**\n\t * e^x - 1\n\t * @returns {BigDecimal} expm1(A)\n\t */\n\texpm1() {\n\t\treturn this.exp().sub(1);\n\t}\n\n\t/**\n\t * ln(1 + x)\n\t * @returns {BigDecimal} log1p(A)\n\t */\n\tlog1p() {\n\t\treturn this.add(1).log();\n\t}\n\t\n\t/**\n\t * log_2(x)\n\t * @returns {BigDecimal} log2(A)\n\t */\n\tlog2() {\n\t\treturn this.log().div(BigDecimal.LN2);\n\t\t\n\t}\n\n\t/**\n\t * log_10(x)\n\t * @returns {BigDecimal} log10(A)\n\t */\n\tlog10() {\n\t\treturn this.log().div(BigDecimal.LN10);\n\t}\n\t\n\t// ----------------------\n\t// 三角関数\n\t// ----------------------\n\n\t/**\n\t * Sine function.\n\t * @returns {BigDecimal} sin(A)\n\t */\n\tsin() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn BigDecimal.NaN;\n\t\t}\n\t\t// 2PIの余りを実際の計算で使用する。\n\t\tconst scale = - this.scale() + (this.precision() - 1) + 1;\n\t\tconst new_mc = new MathContext(BigDecimal.getDefaultContext().getPrecision() + scale, RoundingMode.HALF_UP);\n\t\tBigDecimal.pushDefaultContext(new_mc);\n\t\tconst target = this.mod(BigDecimal.TWO_PI);\n\t\tBigDecimal.popDefaultContext();\n\t\t// マクローリン展開で計算する\n\t\t// 初期値\n\t\tlet n0 = target;\n\t\t{\n\t\t\tconst t_x2 = target.mul(target);\n\t\t\tlet x = target;\n\t\t\tlet k = BigDecimal.ONE;\n\t\t\tlet sign = -1;\n\t\t\t// 繰り返し求める\n\t\t\tfor(let i = 2; i < 300; i++) {\n\t\t\t\tk = k.mul(i);\n\t\t\t\tif((i % 2) === 1) {\n\t\t\t\t\tx = x.mul(t_x2);\n\t\t\t\t\tlet n1;\n\t\t\t\t\tif(sign < 0) {\n\t\t\t\t\t\tn1 = n0.sub(x.div(k));\n\t\t\t\t\t\tsign = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tn1 = n0.add(x.div(k));\n\t\t\t\t\t\tsign = -1;\n\t\t\t\t\t}\n\t\t\t\t\tconst delta = n1.sub(n0);\n\t\t\t\t\tn0 = n1;\n\t\t\t\t\tif(delta.isZero()) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn n0;\n\t}\n\n\t/**\n\t * Cosine function.\n\t * @returns {BigDecimal} cos(A)\n\t */\n\tcos() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn BigDecimal.NaN;\n\t\t}\n\t\tconst scale = - this.scale() + (this.precision() - 1) + 1;\n\t\tconst new_mc = new MathContext(BigDecimal.getDefaultContext().getPrecision() + scale, RoundingMode.HALF_UP);\n\t\tBigDecimal.pushDefaultContext(new_mc);\n\t\tconst target = this.mod(BigDecimal.TWO_PI);\n\t\tBigDecimal.popDefaultContext();\n\t\t// マクローリン展開で計算する\n\t\t// 初期値\n\t\tlet n0 = BigDecimal.ONE;\n\t\t{\n\t\t\tlet x = BigDecimal.ONE;\n\t\t\tconst t_x2 = target.mul(target);\n\t\t\tlet k = BigDecimal.ONE;\n\t\t\tlet sign = -1;\n\t\t\t// 繰り返し求める\n\t\t\tfor(let i = 2; i < 300; i++) {\n\t\t\t\tk = k.mul(i);\n\t\t\t\tif((i % 2) === 0) {\n\t\t\t\t\tx = x.mul(t_x2);\n\t\t\t\t\tlet n1;\n\t\t\t\t\tif(sign < 0) {\n\t\t\t\t\t\tn1 = n0.sub(x.div(k));\n\t\t\t\t\t\tsign = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tn1 = n0.add(x.div(k));\n\t\t\t\t\t\tsign = -1;\n\t\t\t\t\t}\n\t\t\t\t\tconst delta = n1.sub(n0);\n\t\t\t\t\tn0 = n1;\n\t\t\t\t\tif(delta.isZero()) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn n0;\n\t}\n\n\t/**\n\t * Tangent function.\n\t * @returns {BigDecimal} tan(A)\n\t */\n\ttan() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn BigDecimal.NaN;\n\t\t}\n\t\treturn this.sin().div(this.cos());\n\t}\n\n\t/**\n\t * Atan (arc tangent) function.\n\t * - Return the values of [-PI/2, PI/2].\n\t * @returns {BigDecimal} atan(A)\n\t */\n\tatan() {\n\t\tif(!this.isFinite()) {\n\t\t\tif(this.isNaN()) {\n\t\t\t\treturn BigDecimal.NaN;\n\t\t\t}\n\t\t\telse if(this.isPositiveInfinity()) {\n\t\t\t\treturn BigDecimal.HALF_PI;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn BigDecimal.HALF_PI.negate();\n\t\t\t}\n\t\t}\n\t\tif(this.isZero()) {\n\t\t\tconst y = BigDecimal.ZERO;\n\t\t\treturn y;\n\t\t}\n\t\telse if(this.compareTo(BigDecimal.ONE) === 0) {\n\t\t\tconst y = BigDecimal.QUARTER_PI;\n\t\t\treturn y;\n\t\t}\n\t\telse if(this.compareTo(BigDecimal.MINUS_ONE) === 0) {\n\t\t\tconst y = BigDecimal.QUARTER_PI.negate();\n\t\t\treturn y;\n\t\t}\n\t\t// x を 0 <= x <= 0.5 に収める\n\t\tconst target_sign = this.sign();\n\t\tlet target = this.abs();\n\t\tlet type;\n\t\tif(target.compareTo(BigDecimal.TWO) === 1) {\n\t\t\t// atan(x) = pi/2-atan(1/x)\n\t\t\ttype = 1;\n\t\t\ttarget = target.inv();\n\t\t}\n\t\telse if(target.compareTo(BigDecimal.HALF) === 1) {\n\t\t\t// atan(x) = pi/4-atan((1-x)/(1+x))\n\t\t\ttype = 2;\n\t\t\ttarget = BigDecimal.ONE.sub(target).div(BigDecimal.ONE.add(target));\n\t\t}\n\t\telse {\n\t\t\ttype = 3;\n\t\t}\n\t\t// グレゴリー級数\n\t\t// 初期値\n\t\tlet n0 = target;\n\t\t{\n\t\t\tconst t_x2 = target.mul(target);\n\t\t\tlet x = target;\n\t\t\tlet k = BigDecimal.ONE;\n\t\t\tlet sign = -1;\n\t\t\t// 繰り返し求める\n\t\t\tfor(let i = 0; i < 300; i++) {\n\t\t\t\tx = x.mul(t_x2);\n\t\t\t\tk = k.add(BigDecimal.TWO);\n\t\t\t\tlet n1;\n\t\t\t\tif(sign < 0) {\n\t\t\t\t\tn1 = n0.sub(x.div(k));\n\t\t\t\t\tsign = 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tn1 = n0.add(x.div(k));\n\t\t\t\t\tsign = -1;\n\t\t\t\t}\n\t\t\t\tconst delta = n1.sub(n0);\n\t\t\t\tn0 = n1;\n\t\t\t\tif(delta.isZero()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(type === 1) {\n\t\t\tn0 = BigDecimal.HALF_PI.sub(n0);\n\t\t}\n\t\telse if(type === 2) {\n\t\t\tn0 = BigDecimal.QUARTER_PI.sub(n0);\n\t\t}\n\t\tif(target_sign < 0) {\n\t\t\tn0 = n0.negate();\n\t\t}\n\t\treturn n0;\n\t}\n\n\t/**\n\t * Atan (arc tangent) function.\n\t * Return the values of [-PI, PI] .\n\t * Supports only real numbers.\n\t * @param {KBigDecimalInputData} number \n\t * @param {MathContext} [context] - MathContext setting after calculation. If omitted, use the MathContext of the B.\n\t * @returns {BigDecimal} atan2(Y, X)\n\t */\n\tatan2(number, context) {\n\t\tconst default_context = BigDecimal.getDefaultContext();\n\t\t// y.atan2(x) とする。\n\t\tconst y = this.round(context);\n\t\tconst x = new BigDecimal([number, context]);\n\t\tif(x.isNaN() || y.isNaN()) {\n\t\t\treturn BigDecimal.NaN;\n\t\t}\n\t\t// 参考: https://en.wikipedia.org/wiki/Inverse_trigonometric_functions\n\t\tlet ret;\n\t\tif(x.isPositive()) {\n\t\t\tret = y.div(x).atan();\n\t\t}\n\t\telse if(y.isNotNegative() && x.isNegative()) {\n\t\t\tret = y.div(x).atan().add(BigDecimal.PI);\n\t\t}\n\t\telse if(y.isNegative() && x.isNegative()) {\n\t\t\tret = y.div(x).atan().sub(BigDecimal.PI);\n\t\t}\n\t\telse if(y.isPositive()) {\n\t\t\tret = BigDecimal.HALF_PI;\n\t\t}\n\t\telse if(y.isNegative()) {\n\t\t\tret = BigDecimal.HALF_PI.negate();\n\t\t}\n\t\telse {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t\tBigDecimal.setDefaultContext(default_context);\n\t\treturn ret;\n\t}\n\n\t// ----------------------\n\t// 双曲線関数\n\t// ----------------------\n\t\n\t/**\n\t * Arc sine function.\n\t * @returns {BigDecimal} asin(A)\n\t */\n\tasin() {\n\t\t// 逆正弦\n\t\t// 複素数\n\t\tconst re_1 = this.square().negate().add(1).sqrt();\n\t\tconst im_1 = this;\n\t\t// 複素数のログ\n\t\tconst norm = re_1.square().add(im_1.square()).sqrt();\n\t\tconst arg  = im_1.atan2(re_1);\n\t\tconst re_2 = norm.log();\n\t\tconst im_2 = arg;\n\t\t// -i を掛け算する\n\t\treturn re_2.add(im_2);\n\t}\n\n\t/**\n\t * Arc cosine function.\n\t * @returns {BigDecimal} acos(A)\n\t */\n\tacos() {\n\t\t// 逆余弦\n\t\t// 複素数\n\t\tconst re_1 = this;\n\t\tconst im_1 = this.square().negate().add(1).sqrt();\n\t\t// 複素数のログ\n\t\tconst norm = re_1.square().add(im_1.square()).sqrt();\n\t\tconst arg  = im_1.atan2(re_1);\n\t\tconst re_2 = norm.log();\n\t\tconst im_2 = arg;\n\t\t// -i を掛け算する\n\t\treturn re_2.add(im_2);\n\t}\n\t\n\n\t/**\n\t * Hyperbolic sine function.\n\t * @returns {BigDecimal} sinh(A)\n\t */\n\tsinh() {\n\t\t// 双曲線正弦\n\t\tif(this.isInfinite()) {\n\t\t\treturn this;\n\t\t}\n\t\tconst y = this.exp();\n\t\treturn y.sub(y.inv()).mul(0.5);\n\t}\n\n\t/**\n\t * Inverse hyperbolic sine function.\n\t * @returns {BigDecimal} asinh(A)\n\t */\n\tasinh() {\n\t\tif(this.isInfinite()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn this.add(this.mul(this).add(1).sqrt()).log();\n\t}\n\n\t/**\n\t * Hyperbolic cosine function.\n\t * @returns {BigDecimal} cosh(A)\n\t */\n\tcosh() {\n\t\t// 双曲線余弦\n\t\tif(this.isInfinite()) {\n\t\t\treturn BigDecimal.POSITIVE_INFINITY;\n\t\t}\n\t\treturn this.exp().add(this.negate().exp()).mul(0.5);\n\t}\n\n\t/**\n\t * Inverse hyperbolic cosine function.\n\t * @returns {BigDecimal} acosh(A)\n\t */\n\tacosh() {\n\t\t// 逆双曲線余弦 Math.log(x + Math.sqrt(x * x - 1));\n\t\tif(this.isInfinite()) {\n\t\t\treturn BigDecimal.NaN;\n\t\t}\n\t\treturn this.add(this.mul(this).sub(1).sqrt()).log();\n\t}\n\n\t/**\n\t * Hyperbolic tangent function.\n\t * @returns {BigDecimal} tanh(A)\n\t */\n\ttanh() {\n\t\t// 双曲線正接\n\t\tif(this.isInfinite()) {\n\t\t\treturn BigDecimal.create(this.sign());\n\t\t}\n\t\tconst y =  this.mul(2).exp();\n\t\treturn y.sub(1).div(y.add(1));\n\t}\n\t\n\t/**\n\t * Inverse hyperbolic tangent function.\n\t * @returns {BigDecimal} atanh(A)\n\t */\n\tatanh() {\n\t\t// 逆双曲線正接\n\t\treturn this.add(1).div(this.negate().add(1)).log().mul(0.5);\n\t}\n\n\t/**\n\t * Secant function.\n\t * @returns {BigDecimal} sec(A)\n\t */\n\tsec() {\n\t\t// 正割\n\t\treturn this.cos().inv();\n\t}\n\n\t/**\n\t * Reverse secant function.\n\t * @returns {BigDecimal} asec(A)\n\t */\n\tasec() {\n\t\t// 逆正割\n\t\treturn this.inv().acos();\n\t}\n\n\t/**\n\t * Hyperbolic secant function.\n\t * @returns {BigDecimal} sech(A)\n\t */\n\tsech() {\n\t\t// 双曲線正割\n\t\tif(this.isNegativeInfinity()) {\n\t\t\treturn BigDecimal.ZERO;\n\t\t}\n\t\treturn this.exp().add(this.negate().exp()).inv().mul(2);\n\t}\n\n\t/**\n\t * Inverse hyperbolic secant function.\n\t * @returns {BigDecimal} asech(A)\n\t */\n\tasech() {\n\t\t// 逆双曲線正割\n\t\treturn this.inv().add(this.square().inv().sub(1).sqrt()).log();\n\t}\n\n\t/**\n\t * Cotangent function.\n\t * @returns {BigDecimal} cot(A)\n\t */\n\tcot() {\n\t\t// 余接\n\t\tif(this.isZero()) {\n\t\t\treturn BigDecimal.POSITIVE_INFINITY;\n\t\t}\n\t\treturn this.tan().inv();\n\t}\n\n\t/**\n\t * Inverse cotangent function.\n\t * @returns {BigDecimal} acot(A)\n\t */\n\tacot() {\n\t\t// 逆余接\n\t\tif(this.isZero()) {\n\t\t\treturn BigDecimal.HALF_PI;\n\t\t}\n\t\treturn this.inv().atan();\n\t}\n\n\t/**\n\t * Hyperbolic cotangent function.\n\t * @returns {BigDecimal} coth(A)\n\t */\n\tcoth() {\n\t\t// 双曲線余接\n\t\tif(this.isInfinite()) {\n\t\t\treturn BigDecimal.create(this.sign());\n\t\t}\n\t\tconst y =  this.mul(2).exp();\n\t\treturn y.add(1).div(y.sub(1));\n\t}\n\n\t/**\n\t * Inverse hyperbolic cotangent function.\n\t * @returns {BigDecimal} acoth(A)\n\t */\n\tacoth() {\n\t\t// 逆双曲線余接\n\t\tif(this.isInfinite()) {\n\t\t\treturn BigDecimal.ZERO;\n\t\t}\n\t\treturn this.add(1).div(this.sub(1)).log().mul(0.5);\n\t}\n\n\t/**\n\t * Cosecant function.\n\t * @returns {BigDecimal} csc(A)\n\t */\n\tcsc() {\n\t\t// 余割\n\t\tif(this.isZero()) {\n\t\t\treturn BigDecimal.POSITIVE_INFINITY;\n\t\t}\n\t\treturn this.sin().inv();\n\t}\n\n\t/**\n\t * Inverse cosecant function.\n\t * @returns {BigDecimal} acsc(A)\n\t */\n\tacsc() {\n\t\t// 逆余割\n\t\treturn this.inv().asin();\n\t}\n\n\t/**\n\t * Hyperbolic cosecant function.\n\t * @returns {BigDecimal} csch(A)\n\t */\n\tcsch() {\n\t\tif(this.isInfinite()) {\n\t\t\treturn BigDecimal.ZERO;\n\t\t}\n\t\telse if(this.isZero()) {\n\t\t\treturn BigDecimal.POSITIVE_INFINITY;\n\t\t}\n\t\t// 双曲線余割\n\t\treturn this.exp().sub(this.negate().exp()).inv().mul(2);\n\t}\n\n\t/**\n\t * Inverse hyperbolic cosecant function.\n\t * @returns {BigDecimal} acsch(A)\n\t */\n\tacsch() {\n\t\tif(this.isZero()) {\n\t\t\treturn BigDecimal.POSITIVE_INFINITY;\n\t\t}\n\t\t// 逆双曲線余割\n\t\treturn this.inv().add(this.square().inv().add(1).sqrt()).log();\n\t}\n\n\t// ----------------------\n\t// 信号処理系\n\t// ----------------------\n\t\n\t/**\n\t * Normalized sinc function.\n\t * @returns {BigDecimal} sinc(A)\n\t */\n\tsinc() {\n\t\tif(this.isZero()) {\n\t\t\treturn(BigDecimal.ONE);\n\t\t}\n\t\tconst x = BigDecimal.PI.mul(this);\n\t\treturn x.sin().div(x);\n\t}\n\n\t// ----------------------\n\t// 乱数\n\t// ----------------------\n\t\n\t/**\n\t * Create random values with uniform random numbers.\n\t * @param {Random} [random] - Class for creating random numbers.\n\t * @returns {BigDecimal}\n\t */\n\tstatic rand(random) {\n\t\tlet precision = BigDecimal.getDefaultContext().getPrecision();\n\t\tif(precision <= 0) {\n\t\t\tprecision = 100;\n\t\t}\n\t\tconst keta = Math.ceil(precision * Math.log(10) / Math.log(2));\n\t\tconst a = BigInteger.ONE.shiftLeft(keta);\n\t\tconst b = BigInteger.createRandomBigInteger(keta, random);\n\t\treturn (new BigDecimal(b)).div(a);\n\t}\n\n\t/**\n\t * Create random values with normal distribution.\n\t * @param {Random} [random] - Class for creating random numbers.\n\t * @returns {BigDecimal}\n\t */\n\tstatic randn(random) {\n\t\t// Box-Muller法\n\t\tconst a = BigDecimal.rand(random).log().mul(-2).sqrt();\n\t\tconst b = BigDecimal.rand(random).mul(2).mul(BigDecimal.PI);\n\t\tconst y = a.mul(b.sin());\n\t\treturn y;\n\t}\n\n\t// ----------------------\n\t// テスト系\n\t// ----------------------\n\t\n\t/**\n\t * Return true if the value is integer.\n\t * @param {KBigDecimalInputData} [tolerance=0] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisInteger(tolerance) {\n\t\tif(!this.isFinite()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.sub(this.fix()).isZero(tolerance);\n\t}\n\n\t/**\n\t * this === 0\n\t * @param {KBigDecimalInputData} [tolerance=0] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisZero(tolerance) {\n\t\tif(!this.isFinite()) {\n\t\t\treturn false;\n\t\t}\n\t\tif(tolerance) {\n\t\t\treturn this.equals(BigDecimal.ZERO, tolerance);\n\t\t}\n\t\telse {\n\t\t\treturn this.integer.isZero();\n\t\t}\n\t}\n\t\n\t/**\n\t * this === 1\n\t * @param {KBigDecimalInputData} [tolerance=0] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisOne(tolerance) {\n\t\tif(!this.isFinite()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.compareTo(BigDecimal.ONE, tolerance) === 0;\n\t}\n\n\t/**\n\t * this > 0\n\t * @returns {boolean}\n\t */\n\tisPositive() {\n\t\treturn this.integer.isPositive();\n\t}\n\n\t/**\n\t * this < 0\n\t * @returns {boolean}\n\t */\n\tisNegative() {\n\t\treturn this.integer.isNegative();\n\t}\n\n\t/**\n\t * this >= 0\n\t * @returns {boolean}\n\t */\n\tisNotNegative() {\n\t\treturn this.integer.isNotNegative();\n\t}\n\t\n\t/**\n\t * this === NaN\n\t * @returns {boolean} isNaN(A)\n\t */\n\tisNaN() {\n\t\treturn this.integer.isNaN();\n\t}\n\t\n\t/**\n\t * this === Infinity\n\t * @returns {boolean} isPositiveInfinity(A)\n\t */\n\tisPositiveInfinity() {\n\t\treturn this.integer.isPositiveInfinity();\n\t}\n\n\t/**\n\t * this === -Infinity\n\t * @returns {boolean} isNegativeInfinity(A)\n\t */\n\tisNegativeInfinity() {\n\t\treturn this.integer.isNegativeInfinity();\n\t}\n\n\t/**\n\t * this === Infinity or -Infinity\n\t * @returns {boolean} isPositiveInfinity(A) || isNegativeInfinity(A)\n\t */\n\tisInfinite() {\n\t\treturn this.integer.isInfinite();\n\t}\n\t\n\t/**\n\t * Return true if the value is finite number.\n\t * @returns {boolean} !isNaN(A) && !isInfinite(A)\n\t */\n\tisFinite() {\n\t\treturn this.integer.isFinite();\n\t}\n\n\t// ----------------------\n\t// ビット演算系\n\t// ----------------------\n\t\n\t/**\n\t * Logical AND.\n\t * - Calculated as an integer.\n\t * @param {KBigDecimalInputData} number \n\t * @returns {BigDecimal} A & B\n\t */\n\tand(number) {\n\t\tconst n_src = this;\n\t\tconst n_tgt = BigDecimal._toBigDecimal(number);\n\t\tconst src\t= n_src.round().toBigInteger();\n\t\tconst tgt\t= n_tgt.round().toBigInteger();\n\t\treturn new BigDecimal(src.and(tgt));\n\t}\n\n\t/**\n\t * Logical OR.\n\t * - Calculated as an integer.\n\t * @param {KBigDecimalInputData} number \n\t * @returns {BigDecimal} A | B\n\t */\n\tor(number) {\n\t\tconst n_src = this;\n\t\tconst n_tgt = BigDecimal._toBigDecimal(number);\n\t\tconst src\t= n_src.round().toBigInteger();\n\t\tconst tgt\t= n_tgt.round().toBigInteger();\n\t\treturn new BigDecimal(src.or(tgt));\n\t}\n\n\t/**\n\t * Logical Exclusive-OR.\n\t * - Calculated as an integer.\n\t * @param {KBigDecimalInputData} number \n\t * @returns {BigDecimal} A ^ B\n\t */\n\txor(number) {\n\t\tconst n_src = this;\n\t\tconst n_tgt = BigDecimal._toBigDecimal(number);\n\t\tconst src\t= n_src.round().toBigInteger();\n\t\tconst tgt\t= n_tgt.round().toBigInteger();\n\t\treturn new BigDecimal(src.xor(tgt));\n\t}\n\n\t/**\n\t * Logical Not. (mutable)\n\t * - Calculated as an integer.\n\t * @returns {BigDecimal} !A\n\t */\n\tnot() {\n\t\tconst n_src = this;\n\t\tconst src\t= n_src.round().toBigInteger();\n\t\treturn new BigDecimal(src.not());\n\t}\n\t\n\t/**\n\t * this << n\n\t * - Calculated as an integer.\n\t * @param {KBigDecimalInputData} n\n\t * @returns {BigDecimal} A << n\n\t */\n\tshift(n) {\n\t\tconst src\t\t= this.round().toBigInteger();\n\t\tconst number\t= BigDecimal._toInteger(n);\n\t\treturn new BigDecimal(src.shift(number));\n\t}\n\n\t// ----------------------\n\t// gcd, lcm\n\t// ----------------------\n\t\n\t/**\n\t * Euclidean algorithm.\n\t * - Calculated as an integer.\n\t * @param {KBigDecimalInputData} number \n\t * @returns {BigDecimal} gcd(x, y)\n\t */\n\tgcd(number) {\n\t\tconst x = this.round().toBigInteger();\n\t\tconst y = BigDecimal._toBigDecimal(number).toBigInteger();\n\t\tconst result = x.gcd(y);\n\t\treturn new BigDecimal(result);\n\t}\n\n\t/**\n\t * Extended Euclidean algorithm.\n\t * - Calculated as an integer.\n\t * @param {KBigDecimalInputData} number \n\t * @returns {Array<BigDecimal>} [a, b, gcd(x, y)], Result of calculating a*x + b*y = gcd(x, y).\n\t */\n\textgcd(number) {\n\t\tconst x = this.round().toBigInteger();\n\t\tconst y = BigDecimal._toBigDecimal(number).toBigInteger();\n\t\tconst result = x.extgcd(y);\n\t\treturn [new BigDecimal(result[0]), new BigDecimal(result[1]), new BigDecimal(result[2])];\n\t}\n\n\t/**\n\t * Least common multiple.\n\t * - Calculated as an integer.\n\t * @param {KBigDecimalInputData} number \n\t * @returns {BigDecimal} lcm(x, y)\n\t */\n\tlcm(number) {\n\t\tconst x = this.round().toBigInteger();\n\t\tconst y = BigDecimal._toBigDecimal(number).toBigInteger();\n\t\tconst result = x.lcm(y);\n\t\treturn new BigDecimal(result);\n\t}\n\n\t// ----------------------\n\t// mod\n\t// ----------------------\n\n\t/**\n\t * Modular exponentiation.\n\t * - Calculated as an integer.\n\t * @param {KBigDecimalInputData} exponent\n\t * @param {KBigDecimalInputData} m \n\t * @returns {BigDecimal} A^B mod m\n\t */\n\tmodPow(exponent, m) {\n\t\tconst A = this.round().toBigInteger();\n\t\tconst B = BigDecimal._toBigDecimal(exponent).toBigInteger();\n\t\tconst m_ = BigDecimal._toBigDecimal(m).toBigInteger();\n\t\tconst result = A.modPow(B, m_);\n\t\treturn new BigDecimal(result);\n\t}\n\n\t/**\n\t * Modular multiplicative inverse.\n\t * - Calculated as an integer.\n\t * @param {KBigDecimalInputData} m\n\t * @returns {BigDecimal} A^(-1) mod m\n\t */\n\tmodInverse(m) {\n\t\tconst A = this.round().toBigInteger();\n\t\tconst m_ = BigDecimal._toBigDecimal(m).toBigInteger();\n\t\tconst result = A.modInverse(m_);\n\t\treturn new BigDecimal(result);\n\t}\n\t\n\t// ----------------------\n\t// 素数\n\t// ----------------------\n\t\n\t/**\n\t * Return true if the value is prime number.\n\t * - Calculated as an integer.\n\t * - Calculate up to `2251799813685248(=2^51)`.\n\t * @returns {boolean} - If the calculation range is exceeded, null is returned.\n\t */\n\tisPrime() {\n\t\tconst src = this.round().toBigInteger();\n\t\treturn src.isPrime();\n\t}\n\t\n\t/**\n\t * Return true if the value is prime number by Miller-Labin prime number determination method.\n\t * \n\t * Attention : it takes a very long time to process.\n\t * - Calculated as an integer.\n\t * @param {KBigDecimalInputData} [certainty=100] - Repeat count (prime precision).\n\t * @returns {boolean}\n\t */\n\tisProbablePrime(certainty) {\n\t\tconst src = this.round().toBigInteger();\n\t\treturn src.isProbablePrime(certainty !== undefined ? BigDecimal._toInteger(certainty) : undefined);\n\t}\n\n\t/**\n\t * Next prime.\n\t * @param {KBigDecimalInputData} [certainty=100] - Repeat count (prime precision).\n\t * @param {KBigDecimalInputData} [search_max=100000] - Search range of next prime.\n\t * @returns {BigDecimal}\n\t */\n\tnextProbablePrime(certainty, search_max) {\n\t\tconst src = this.round().toBigInteger();\n\t\tconst p1 = certainty !== undefined ? BigDecimal._toInteger(certainty) : undefined;\n\t\tconst p2 = search_max !== undefined ? BigDecimal._toInteger(search_max) : undefined;\n\t\treturn BigDecimal.create(src.nextProbablePrime(p1, p2));\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * -1\n\t * @returns {BigDecimal} -1\n\t */\n\tstatic get MINUS_ONE() {\n\t\treturn CACHED_DATA.MINUS_ONE.get();\n\t}\n\n\t/**\n\t * 0\n\t * @returns {BigDecimal} 0\n\t */\n\tstatic get ZERO() {\n\t\treturn CACHED_DATA.ZERO.get();\n\t}\n\t\n\t/**\n\t * 0.5\n\t * @returns {BigDecimal} 0.5\n\t */\n\tstatic get HALF() {\n\t\treturn CACHED_DATA.HALF.get();\n\t}\n\t\n\t/**\n\t * 1\n\t * @returns {BigDecimal} 1\n\t */\n\tstatic get ONE() {\n\t\treturn CACHED_DATA.ONE.get();\n\t}\n\t\n\t/**\n\t * 2\n\t * @returns {BigDecimal} 2\n\t */\n\tstatic get TWO() {\n\t\treturn CACHED_DATA.TWO.get();\n\t}\n\t\n\t/**\n\t * 10\n\t * @returns {BigDecimal} 10\n\t */\n\tstatic get TEN() {\n\t\treturn CACHED_DATA.TEN.get();\n\t}\n\n\t/**\n\t * PI\n\t * @returns {BigDecimal} 3.14...\n\t */\n\tstatic get PI() {\n\t\treturn CACHED_DATA.PI.get();\n\t}\n\n\t/**\n\t * 0.25 * PI.\n\t * @returns {BigDecimal} 0.78...\n\t */\n\tstatic get QUARTER_PI() {\n\t\treturn CACHED_DATA.QUARTER_PI.get();\n\t}\n\n\t/**\n\t * 0.5 * PI.\n\t * @returns {BigDecimal} 1.57...\n\t */\n\tstatic get HALF_PI() {\n\t\treturn CACHED_DATA.HALF_PI.get();\n\t}\n\n\t/**\n\t * 2 * PI.\n\t * @returns {BigDecimal} 6.28...\n\t */\n\tstatic get TWO_PI() {\n\t\treturn CACHED_DATA.TWO_PI.get();\n\t}\n\n\t/**\n\t * E, Napier's constant.\n\t * @returns {BigDecimal} E\n\t */\n\tstatic get E() {\n\t\treturn CACHED_DATA.E.get();\n\t}\n\n\t/**\n\t * log_e(2)\n\t * @returns {BigDecimal} ln(2)\n\t */\n\tstatic get LN2() {\n\t\treturn CACHED_DATA.LN2.get();\n\t}\n\n\t/**\n\t * log_e(10)\n\t * @returns {BigDecimal} ln(10)\n\t */\n\tstatic get LN10() {\n\t\treturn CACHED_DATA.LN10.get();\n\t}\n\n\t/**\n\t * log_2(e)\n\t * @returns {BigDecimal} log_2(e)\n\t */\n\tstatic get LOG2E() {\n\t\treturn CACHED_DATA.LOG2E.get();\n\t}\n\t\n\t/**\n\t * log_10(e)\n\t * @returns {BigDecimal} log_10(e)\n\t */\n\tstatic get LOG10E() {\n\t\treturn CACHED_DATA.LOG10E.get();\n\t}\n\t\n\t/**\n\t * sqrt(2)\n\t * @returns {BigDecimal} sqrt(2)\n\t */\n\tstatic get SQRT2() {\n\t\treturn CACHED_DATA.SQRT2.get();\n\t}\n\t\n\t/**\n\t * sqrt(0.5)\n\t * @returns {BigDecimal} sqrt(0.5)\n\t */\n\tstatic get SQRT1_2() {\n\t\treturn CACHED_DATA.SQRT1_2.get();\n\t}\n\n\t/**\n\t * Positive infinity.\n\t * @returns {BigDecimal} Infinity\n\t */\n\tstatic get POSITIVE_INFINITY() {\n\t\tif(DEFINE.POSITIVE_INFINITY === null) {\n\t\t\tDEFINE.POSITIVE_INFINITY = new BigDecimal(Number.POSITIVE_INFINITY);\n\t\t}\n\t\treturn DEFINE.POSITIVE_INFINITY;\n\t}\n\t\n\t/**\n\t * Negative Infinity.\n\t * @returns {BigDecimal} -Infinity\n\t */\n\tstatic get NEGATIVE_INFINITY() {\n\t\tif(DEFINE.NEGATIVE_INFINITY === null) {\n\t\t\tDEFINE.NEGATIVE_INFINITY = new BigDecimal(Number.NEGATIVE_INFINITY);\n\t\t}\n\t\treturn DEFINE.NEGATIVE_INFINITY;\n\t}\n\n\t/**\n\t * Not a Number.\n\t * @returns {BigDecimal} NaN\n\t */\n\tstatic get NaN() {\n\t\tif(DEFINE.NaN === null) {\n\t\t\tDEFINE.NaN = new BigDecimal(Number.NaN);\n\t\t}\n\t\treturn DEFINE.NaN;\n\t}\n\n\t// ----------------------\n\t// 互換性\n\t// ----------------------\n\t\n\t/**\n\t * The positive or negative sign of this number.\n\t * - +1 if positive, -1 if negative, 0 if 0.\n\t * @returns {number}\n\t */\n\tsignum() {\n\t\treturn this.sign();\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {KBigDecimalInputData} number \n\t * @returns {BigDecimal} A - B\n\t */\n\tsubtract(number) {\n\t\treturn this.sub(number);\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {KBigDecimalInputData} number\n\t * @returns {BigDecimal} A * B\n\t */\n\tmultiply(number) {\n\t\treturn this.mul(number);\n\t}\n\n\t/**\n\t * Divide.\n\t * - The argument can specify the scale after calculation.\n\t * - In the case of precision infinity, it may generate an error by a repeating decimal.\n\t * - When \"{}\" is specified for the argument, it is calculated on the scale of \"this.scale() - divisor.scale()\".\n\t * - When null is specified for the argument, it is calculated on the scale of \"divisor.context\".\n\t * @param {KBigDecimalInputData} number\n\t * @param {MathContext|KBigDecimalDivideType} [type] - Scale, MathContext, RoundingMode used for the calculation.\n\t * @returns {BigDecimal} A / B\n\t */\n\tdivide(number, type) {\n\t\treturn this.div(number, type);\n\t}\n\n\t/**\n\t * Remainder of division.\n\t * - Result has same sign as the Dividend.\n\t * @param {KBigDecimalInputData} number\n\t * @returns {BigDecimal} A % B\n\t */\n\tremainder(number) {\n\t\treturn this.rem(number);\n\t}\n\t\n\t/**\n\t * To integer rounded down to the nearest.\n\t * @returns {BigDecimal} fix(A), trunc(A)\n\t */\n\ttrunc() {\n\t\treturn this.fix();\n\t}\n\n}\n\nBigDecimal.RoundingMode = RoundingMode;\nBigDecimal.MathContext = MathContext;\n\n/**\n * Collection of constant values used in the class.\n * @ignore\n */\nconst DEFINE = {\n\n\t/**\n\t * -1\n\t * @returns {BigDecimal} -1\n\t */\n\tMINUS_ONE : function() {\n\t\treturn new BigDecimal(-1);\n\t},\n\n\t/**\n\t * 0\n\t * @returns {BigDecimal} 0\n\t */\n\tZERO : function() {\n\t\treturn new BigDecimal(0);\n\t},\n\t\n\t/**\n\t * 0.5\n\t * @returns {BigDecimal} 0.5\n\t */\n\tHALF : function() {\n\t\treturn new BigDecimal(0.5);\n\t},\n\t\n\t/**\n\t * 1\n\t * @returns {BigDecimal} 1\n\t */\n\tONE : function() {\n\t\treturn new BigDecimal(1);\n\t},\n\t\n\t/**\n\t * 2\n\t * @returns {BigDecimal} 2\n\t */\n\tTWO : function() {\n\t\treturn new BigDecimal(2);\n\t},\n\t\n\t/**\n\t * 10\n\t * @returns {BigDecimal} 10\n\t */\n\tTEN : function() {\n\t\treturn new BigDecimal(10);\n\t},\n\n\t/**\n\t * PI\n\t * @returns {BigDecimal} 3.14...\n\t */\n\tPI : function() {\n\t\t// DECIMAL256 でも精度は72桁ほどである。\n\t\t// 従って、79桁のPIをすでにデータとして持っておく。\n\t\tconst PI79 = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862\";\n\t\tconst context = BigDecimal.getDefaultContext();\n\t\tif(context.getPrecision() <= 78) {\n\t\t\treturn new BigDecimal(PI79).round(context);\n\t\t}\n\t\telse {\n\t\t\t// ガウス＝ルジャンドルのアルゴリズム\n\t\t\t// 使用する固定値を列挙\n\t\t\tconst B1\t\t= BigDecimal.create(1);\n\t\t\tconst B2\t\t= BigDecimal.create(2);\n\t\t\tconst B4\t\t= BigDecimal.create(4);\n\t\t\t// 初期値\n\t\t\tlet a = B1;\n\t\t\tlet b = B2.sqrt().inv();\n\t\t\tlet t = B4.inv();\n\t\t\tlet p = B1;\n\t\t\tlet pi = B1;\n\t\t\t// 繰り返し求める\n\t\t\tfor(let i = 0; i < 10; i++) {\n\t\t\t\tconst a1 = a.add(b).div(B2);\n\t\t\t\tconst b1 = a.mul(b).sqrt();\n\t\t\t\tconst t1 = t.sub(p.mul(a.sub(a1).square()));\n\t\t\t\tconst p1 = p.mul(B2);\n\t\t\t\tconst pi1 = a1.add(b1).square().div(t1.mul(B4));\n\t\t\t\tconst delta = pi1.sub(pi);\n\t\t\t\tpi = pi1;\n\t\t\t\tif(delta.isZero()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ta = a1;\n\t\t\t\tb = b1;\n\t\t\t\tt = t1;\n\t\t\t\tp = p1;\n\t\t\t}\n\t\t\treturn pi;\n\t\t}\n\t},\n\n\t/**\n\t * 0.25 * PI.\n\t * @returns {BigDecimal} 0.78...\n\t */\n\tQUARTER_PI : function() {\n\t\treturn DEFINE.PI().div(4);\n\t},\n\n\t/**\n\t * 0.5 * PI.\n\t * @returns {BigDecimal} 1.57...\n\t */\n\tHALF_PI : function() {\n\t\treturn DEFINE.PI().div(2);\n\t},\n\n\t/**\n\t * 2 * PI.\n\t * @returns {BigDecimal} 6.28...\n\t */\n\tTWO_PI : function() {\n\t\treturn DEFINE.PI().mul(2);\n\t},\n\t\n\t/**\n\t * E, Napier's constant.\n\t * @returns {BigDecimal} E\n\t */\n\tE : function() {\n\t\t// DECIMAL256 でも精度は72桁ほどである。\n\t\t// 従って、84桁のEをすでにデータとして持っておく。\n\t\tconst E84 = \"2.71828182845904523536028747135266249775724709369995957496696762772407663035354759\";\n\t\tconst context = BigDecimal.getDefaultContext();\n\t\tif(context.getPrecision() <= 83) {\n\t\t\treturn new BigDecimal(E84).round(context);\n\t\t}\n\t\telse {\n\t\t\t// 初期値\n\t\t\tlet n0 = BigDecimal.create(2);\n\t\t\tlet k = BigDecimal.create(1);\n\t\t\t// 繰り返し求める\n\t\t\tfor(let i = 2; i < 300; i++) {\n\t\t\t\tk = k.mul(i);\n\t\t\t\tconst n1 = n0.add(k.inv());\n\t\t\t\tconst delta = n1.sub(n0);\n\t\t\t\tn0 = n1;\n\t\t\t\tif(delta.isZero()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn n0;\n\t\t}\n\t},\n\n\t/**\n\t * log_e(2)\n\t * @returns {BigDecimal} ln(2)\n\t */\n\tLN2 : function() {\n\t\treturn (new BigDecimal(2)).log();\n\t},\n\n\t/**\n\t * log_e(10)\n\t * @returns {BigDecimal} ln(10)\n\t */\n\tLN10 : function() {\n\t\treturn (new BigDecimal(10)).log();\n\t},\n\n\t/**\n\t * log_2(e)\n\t * @returns {BigDecimal} log_2(e)\n\t */\n\tLOG2E : function() {\n\t\treturn (new BigDecimal(2)).log().inv();\n\t},\n\t\n\t/**\n\t * log_10(e)\n\t * @returns {BigDecimal} log_10(e)\n\t */\n\tLOG10E : function() {\n\t\treturn (new BigDecimal(10)).log().inv();\n\t},\n\t\n\t/**\n\t * sqrt(2)\n\t * @returns {BigDecimal} sqrt(2)\n\t */\n\tSQRT2 : function() {\n\t\treturn (new BigDecimal(2)).sqrt();\n\t},\n\t\n\t/**\n\t * sqrt(0.5)\n\t * @returns {BigDecimal} sqrt(0.5)\n\t */\n\tSQRT1_2 : function() {\n\t\treturn (new BigDecimal(0.5)).sqrt();\n\t},\n\t\n\t/**\n\t * Positive infinity.\n\t * @type {any}\n\t */\n\tPOSITIVE_INFINITY : null,\n\n\t/**\n\t * Negative Infinity.\n\t * @type {any}\n\t */\n\tNEGATIVE_INFINITY : null,\n\n\t/**\n\t * Not a Number.\n\t * @type {any}\n\t */\n\tNaN : null\n\t\n};\n\n/**\n * Simple cache class.\n * @ignore\n */\nclass BigDecimalCache {\n\t\n\t/**\n\t * Create Cache.\n\t * @param {string} method_name - Method name in the DEFINE.\n\t * @param {number} cache_size - Maximum number of caches.\n\t */\n\tconstructor(method_name, cache_size) {\n\n\t\t/**\n\t\t * Method name in the DEFINE.\n\t\t * @type {string}\n\t\t */\n\t\tthis.method_name = method_name;\n\t\t\n\t\t/**\n\t\t * @type {Array<{name:string, number:BigDecimal}>}\n\t\t */\n\t\tthis.table = [];\n\n\t\t/**\n\t\t * Maximum number of caches.\n\t\t * @type {number}\n\t\t */\n\t\tthis.table_max = cache_size;\n\n\t}\n\n\t/**\n\t * Use from cache if it exists in cache.\n\t * @returns {BigDecimal}\n\t */\n\tget() {\n\t\tconst name = BigDecimal.getDefaultContext().toString();\n\n\t\tfor(let index = 0; index < this.table.length; index++) {\n\t\t\tif(this.table[index].name === name) {\n\t\t\t\t// 先頭にもってくる\n\t\t\t\tconst object = this.table.splice(index, 1)[0];\n\t\t\t\tthis.table.unshift(object);\n\t\t\t\treturn object.number;\n\t\t\t}\n\t\t}\n\t\t// @ts-ignore\n\t\tconst new_number = DEFINE[this.method_name]();\n\t\tif(this.table.length === this.table_max) {\n\t\t\t// 後ろのデータを消去\n\t\t\tthis.table.pop();\n\t\t}\n\t\t// 前方に追加\n\t\tthis.table.unshift({\n\t\t\tname : name,\n\t\t\tnumber : new_number\n\t\t});\n\t\treturn new_number;\n\t}\n\n}\n\n/**\n * Simple cache class.\n * @ignore\n */\nclass BigDecimalConst {\n\t/**\n\t * Constructor\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * -1\n\t\t */\n\t\tthis.MINUS_ONE = new BigDecimalCache(\"MINUS_ONE\", 10);\n\n\t\t/**\n\t\t * 0\n\t\t */\n\t\tthis.ZERO = new BigDecimalCache(\"ZERO\", 10);\n\n\t\t/**\n\t\t * 0.5\n\t\t */\n\t\tthis.HALF = new BigDecimalCache(\"HALF\", 10);\n\n\t\t/**\n\t\t * 1\n\t\t */\n\t\tthis.ONE = new BigDecimalCache(\"ONE\", 10);\n\n\t\t/**\n\t\t * 2\n\t\t */\n\t\tthis.TWO = new BigDecimalCache(\"TWO\", 10);\n\n\t\t/**\n\t\t * 10\n\t\t */\n\t\tthis.TEN = new BigDecimalCache(\"TEN\", 10);\n\n\t\t/**\n\t\t * PI\n\t\t */\n\t\tthis.PI = new BigDecimalCache(\"PI\", 10);\n\n\t\t/**\n\t\t * QUARTER_PI\n\t\t */\n\t\tthis.QUARTER_PI = new BigDecimalCache(\"QUARTER_PI\", 10);\n\n\t\t/**\n\t\t * HALF_PI\n\t\t */\n\t\tthis.HALF_PI = new BigDecimalCache(\"HALF_PI\", 10);\n\n\t\t/**\n\t\t * TWO_PI\n\t\t */\n\t\tthis.TWO_PI = new BigDecimalCache(\"TWO_PI\", 10);\n\n\t\t/**\n\t\t * E\n\t\t */\n\t\tthis.E = new BigDecimalCache(\"E\", 10);\n\n\t\t/**\n\t\t * LN2\n\t\t */\n\t\tthis.LN2 = new BigDecimalCache(\"LN2\", 10);\n\n\t\t/**\n\t\t * LN10\n\t\t */\n\t\tthis.LN10 = new BigDecimalCache(\"LN10\", 10);\n\n\t\t/**\n\t\t * LOG2E\n\t\t */\n\t\tthis.LOG2E = new BigDecimalCache(\"LOG2E\", 10);\n\t\t\n\t\t/**\n\t\t * LOG10E\n\t\t */\n\t\tthis.LOG10E = new BigDecimalCache(\"LOG10E\", 10);\n\t\t\n\t\t/**\n\t\t * SQRT2\n\t\t */\n\t\tthis.SQRT2 = new BigDecimalCache(\"SQRT2\", 10);\n\t\t\n\t\t/**\n\t\t * SQRT1_2\n\t\t */\n\t\tthis.SQRT1_2 = new BigDecimalCache(\"SQRT1_2\", 10);\n\t}\n}\n\n/**\n * Cache of the constant.\n * @ignore\n */\nconst CACHED_DATA = new BigDecimalConst();\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/core/BigDecimal.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "typedef",
    "name": "KBigDecimalLocalInputData",
    "memberof": "src/math/core/BigDecimal.js",
    "static": true,
    "longname": "src/math/core/BigDecimal.js~KBigDecimalLocalInputData",
    "access": "public",
    "description": "BigDecimal type argument.(local)\n- number\n- boolean\n- string\n- BigDecimal\n- BigInteger\n- {toBigDecimal:function}\n- {doubleValue:number}\n- {toString:function}",
    "type": {
      "types": [
        "number",
        "boolean",
        "string",
        "BigDecimal",
        "BigInteger",
        "{toBigDecimal:function}",
        "{doubleValue:number}",
        "{toString:function}"
      ],
      "optional": false,
      "name": "KBigDecimalLocalInputData"
    }
  },
  {
    "__docId__": 62,
    "kind": "typedef",
    "name": "KBigDecimalScaleData",
    "memberof": "src/math/core/BigDecimal.js",
    "static": true,
    "longname": "src/math/core/BigDecimal.js~KBigDecimalScaleData",
    "access": "public",
    "description": "ScaleData for argument of BigDecimal.\n- {integer:BigInteger,scale:?number,context:?MathContext}",
    "type": {
      "types": [
        "{integer:BigInteger,scale:?number,context:?MathContext}"
      ],
      "optional": false,
      "name": "KBigDecimalScaleData"
    }
  },
  {
    "__docId__": 63,
    "kind": "typedef",
    "name": "KBigDecimalInputData",
    "memberof": "src/math/core/BigDecimal.js",
    "static": true,
    "longname": "src/math/core/BigDecimal.js~KBigDecimalInputData",
    "access": "public",
    "description": "BigDecimal type argument.\n- KBigDecimalLocalInputData\n- Array<KBigDecimalLocalInputData|MathContext>\n- KBigDecimalScaleData\n\nInitialization can be performed as follows.\n- 1200, \"1200\", \"12e2\", \"1.2e3\"\n- When initializing with array. [ integer, [scale = 0], [context=default]].\n- When initializing with object. { integer, [scale = 0], [context=default]}.\n\nDescription of the settings are as follows, you can also omitted.\n- The \"scale\" is an integer scale factor.\n- The \"context\" is used to normalize the created floating point.\n\nIf \"context\" is not specified, the \"default_context\" set for the class is used.\nThe \"context\" is the used when no environment settings are specified during calculation.",
    "type": {
      "types": [
        "KBigDecimalLocalInputData|Array<KBigDecimalLocalInputData|MathContext>|KBigDecimalScaleData"
      ],
      "optional": false,
      "name": "KBigDecimalInputData"
    }
  },
  {
    "__docId__": 64,
    "kind": "typedef",
    "name": "KBigDecimalDivideType",
    "memberof": "src/math/core/BigDecimal.js",
    "static": true,
    "longname": "src/math/core/BigDecimal.js~KBigDecimalDivideType",
    "access": "public",
    "description": "Setting of calculation result of division.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "scale",
        "description": "Scale of rounding."
      },
      {
        "nullable": null,
        "types": [
          "RoundingModeEntity"
        ],
        "spread": false,
        "optional": true,
        "name": "roundingMode",
        "description": "Rounding mode."
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "Configuration.(scale and roundingMode are unnecessary.)"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "KBigDecimalDivideType"
    }
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "DEFAULT_CONTEXT_",
    "memberof": "src/math/core/BigDecimal.js",
    "static": true,
    "longname": "src/math/core/BigDecimal.js~DEFAULT_CONTEXT_",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/BigDecimal.js",
    "importStyle": null,
    "description": "Default MathContext class.\nUsed when MathContext not specified explicitly.",
    "lineNumber": 74,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "MathContext[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 66,
    "kind": "class",
    "name": "BigDecimalTool",
    "memberof": "src/math/core/BigDecimal.js",
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimalTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/BigDecimal.js",
    "importStyle": null,
    "description": "Collection of functions used in BigDecimal.",
    "lineNumber": 81,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "ToBigDecimalFromString",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimalTool.ToBigDecimalFromString",
    "access": "public",
    "description": "Create data for BigDecimal from strings.",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{scale : number, integer : BigInteger}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ntext",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{scale : number, integer : BigInteger}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "ToBigDecimalFromNumber",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimalTool.ToBigDecimalFromNumber",
    "access": "public",
    "description": "Create data for BigDecimal from number.",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{scale : number, integer : BigInteger}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{scale : number, integer : BigInteger}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 69,
    "kind": "class",
    "name": "BigDecimal",
    "memberof": "src/math/core/BigDecimal.js",
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/core/BigDecimal.js",
    "importStyle": "BigDecimal",
    "description": "Arbitrary-precision floating-point number class (immutable).",
    "lineNumber": 216,
    "interface": false
  },
  {
    "__docId__": 70,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#constructor",
    "access": "public",
    "description": "Create an arbitrary-precision floating-point number.\n\nInitialization can be performed as follows.\n- 1200, \"1200\", \"12e2\", \"1.2e3\"\n- When initializing with array. [ integer, [scale = 0], [context=default]].\n- When initializing with object. { integer, [scale = 0], [context=default]}.\n\nDescription of the settings are as follows, you can also omitted.\n- The \"scale\" is an integer scale factor.\n- The \"context\" is used to normalize the created floating point.\n\nIf \"context\" is not specified, the \"default_context\" set for the class is used.\nThe \"context\" is the used when no environment settings are specified during calculation.",
    "lineNumber": 234,
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Real data."
      }
    ]
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "_scale",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#_scale",
    "access": "private",
    "description": "The scale of this BigDecimal.",
    "lineNumber": 242,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "context",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#context",
    "access": "private",
    "description": "Context used during initialization.",
    "lineNumber": 250,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "integer",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#integer",
    "access": "private",
    "description": "Integer part.",
    "lineNumber": 266,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "int_string",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#int_string",
    "access": "private",
    "description": "Integer part of string (for cache).",
    "lineNumber": 274,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "create",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.create",
    "access": "public",
    "description": "Create an arbitrary-precision floating-point number.\n\nInitialization can be performed as follows.\n- 1200, \"1200\", \"12e2\", \"1.2e3\"\n- When initializing with array. [ integer, [scale = 0], [context=default]].\n- When initializing with object. { integer, [scale = 0], [context=default]}.\n\nDescription of the settings are as follows, you can also omitted.\n- The \"scale\" is an integer scale factor.\n- The \"context\" is used to normalize the created floating point.\n\nIf \"context\" is not specified, the \"default_context\" set for the class is used.\nThe \"context\" is the used when no environment settings are specified during calculation.",
    "lineNumber": 413,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Real data."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.valueOf",
    "access": "public",
    "description": "Convert number to BigDecimal type.",
    "lineNumber": 428,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalLocalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "scale",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "_toBigDecimal",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal._toBigDecimal",
    "access": "private",
    "description": "Convert to BigDecimal.\nIf type conversion is unnecessary, return the value as it is.",
    "lineNumber": 444,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "_toBigInteger",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal._toBigInteger",
    "access": "private",
    "description": "Convert to BigInteger.\nIf type conversion is unnecessary, return the value as it is.",
    "lineNumber": 460,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "_toFloat",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal._toFloat",
    "access": "private",
    "description": "Convert to real number.",
    "lineNumber": 479,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "_toInteger",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal._toInteger",
    "access": "private",
    "description": "Convert to integer.",
    "lineNumber": 497,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "_getUnsignedIntegerString",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#_getUnsignedIntegerString",
    "access": "private",
    "description": "Return string of this number without sign.\nIf cache is already created, return cache.",
    "lineNumber": 515,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#clone",
    "access": "public",
    "description": "Deep copy.",
    "lineNumber": 527,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "scale",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#scale",
    "access": "public",
    "description": "The scale of this BigDecimal.",
    "lineNumber": 535,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "sign",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#sign",
    "access": "public",
    "description": "The positive or negative sign of this number.\n- +1 if positive, -1 if negative, 0 if 0.",
    "lineNumber": 544,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "precision",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#precision",
    "access": "public",
    "description": "Precision.",
    "lineNumber": 555,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "unscaledValue",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#unscaledValue",
    "access": "public",
    "description": "An integer with the exponent part removed.",
    "lineNumber": 563,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "ulp",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#ulp",
    "access": "public",
    "description": "The smallest value that can be represented with the set precision.",
    "lineNumber": 571,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "abs",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#abs",
    "access": "public",
    "description": "Absolute value.",
    "lineNumber": 579,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} abs(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "abs(A)"
    },
    "params": []
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "plus",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#plus",
    "access": "public",
    "description": "this * 1",
    "lineNumber": 589,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} +A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "+A"
    },
    "params": []
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "negate",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#negate",
    "access": "public",
    "description": "this * -1",
    "lineNumber": 597,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} -A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A"
    },
    "params": []
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "movePointLeft",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#movePointLeft",
    "access": "public",
    "description": "Move the decimal point to the left.",
    "lineNumber": 608,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "movePointRight",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#movePointRight",
    "access": "public",
    "description": "Move the decimal point to the right.",
    "lineNumber": 623,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "stripTrailingZeros",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#stripTrailingZeros",
    "access": "public",
    "description": "Remove the 0 to the right of the numbers and normalize the scale.",
    "lineNumber": 631,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#add",
    "access": "public",
    "description": "Add.",
    "lineNumber": 658,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A + B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A + B"
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "sub",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#sub",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 698,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "mul",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#mul",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 708,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "divideToIntegralValue",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#divideToIntegralValue",
    "access": "public",
    "description": "Divide not calculated to the decimal point.",
    "lineNumber": 735,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} (int)(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "(int)(A / B)"
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "divideAndRemainder",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#divideAndRemainder",
    "access": "public",
    "description": "Divide and remainder.",
    "lineNumber": 838,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<BigDecimal>} [C = (int)(A / B), A - C * B]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<BigDecimal>"
      ],
      "spread": false,
      "description": "[C = (int)(A / B), A - C * B]"
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "rem",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#rem",
    "access": "public",
    "description": "Remainder of division.\n- Result has same sign as the Dividend.",
    "lineNumber": 890,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A % B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A % B"
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "mod",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#mod",
    "access": "public",
    "description": "Modulo, positive remainder of division.\n- Result has same sign as the Divisor.",
    "lineNumber": 900,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A mod B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A mod B"
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "div",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#div",
    "access": "public",
    "description": "Divide.\n- The argument can specify the scale after calculation.\n- In the case of precision infinity, it may generate an error by a repeating decimal.\n- When \"{}\" is specified for the argument, it is calculated on the scale of \"this.scale() - divisor.scale()\".\n- When null is specified for the argument, it is calculated on the scale of \"divisor.context\".",
    "lineNumber": 925,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext",
          "KBigDecimalDivideType"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": "Scale, MathContext, RoundingMode used for the calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "inv",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#inv",
    "access": "public",
    "description": "Inverse number of this value.",
    "lineNumber": 1074,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 1 / A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "1 / A"
    },
    "params": []
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#factorial",
    "access": "public",
    "description": "Factorial function, x!.\n- Supports only integers.",
    "lineNumber": 1125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} n!"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "n!"
    },
    "params": []
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "scaleByPowerOfTen",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#scaleByPowerOfTen",
    "access": "public",
    "description": "Multiply a multiple of ten.\n- Supports only integers.\n- Only the scale is changed without changing the precision.",
    "lineNumber": 1140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A * 10^floor(n)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A * 10^floor(n)"
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "setDefaultContext",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.setDefaultContext",
    "access": "public",
    "description": "Set default the MathContext.\n- This is used if you do not specify MathContext when creating a new object.",
    "lineNumber": 1159,
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "MathContext.DECIMAL128",
        "defaultRaw": "MathContext.DECIMAL128",
        "name": "context",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "getDefaultContext",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.getDefaultContext",
    "access": "public",
    "description": "Return default MathContext class.\n- Used when MathContext not specified explicitly.",
    "lineNumber": 1168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "pushDefaultContext",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.pushDefaultContext",
    "access": "public",
    "description": "Push default the MathContext.\n- Use with `popDefaultContext` when you want to switch settings temporarily.",
    "lineNumber": 1177,
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "popDefaultContext",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.popDefaultContext",
    "access": "public",
    "description": "Pop default the MathContext.\n- Use with `pushDefaultContext` when you want to switch settings temporarily.",
    "lineNumber": 1185,
    "params": [],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "get",
    "name": "booleanValue",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#booleanValue",
    "access": "public",
    "description": "boolean value.",
    "lineNumber": 1197,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "get",
    "name": "intValue",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#intValue",
    "access": "public",
    "description": "32-bit integer value.",
    "lineNumber": 1205,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "get",
    "name": "intValueExact",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#intValueExact",
    "access": "public",
    "description": "32-bit integer value.\nAn error occurs if conversion fails.",
    "lineNumber": 1219,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "get",
    "name": "floatValue",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#floatValue",
    "access": "public",
    "description": "32-bit floating point.",
    "lineNumber": 1235,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "get",
    "name": "doubleValue",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#doubleValue",
    "access": "public",
    "description": "64-bit floating point.",
    "lineNumber": 1250,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "toBigInteger",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#toBigInteger",
    "access": "public",
    "description": "return BigInteger.",
    "lineNumber": 1265,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "toBigDecimal",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#toBigDecimal",
    "access": "public",
    "description": "return BigDecimal.",
    "lineNumber": 1274,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "MathContext setting after calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "toFraction",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#toFraction",
    "access": "public",
    "description": "return Fraction.",
    "lineNumber": 1287,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "toComplex",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#toComplex",
    "access": "public",
    "description": "return Complex.",
    "lineNumber": 1295,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "toMatrix",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#toMatrix",
    "access": "public",
    "description": "return Matrix.",
    "lineNumber": 1303,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#equals",
    "access": "public",
    "description": "Equals.\n- Attention : Test for equality, including the precision and the scale. \n- Use the \"compareTo\" if you only want to find out whether they are also mathematically equal.\n- If you specify a \"tolerance\", it is calculated by ignoring the test of the precision and the scale.",
    "lineNumber": 1320,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "equalsState",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#equalsState",
    "access": "public",
    "description": "Numeric type match.",
    "lineNumber": 1346,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#compareTo",
    "access": "public",
    "description": "Compare values.",
    "lineNumber": 1358,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A > B ? 1 : (A === B ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A > B ? 1 : (A === B ? 0 : -1)"
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#max",
    "access": "public",
    "description": "Maximum number.",
    "lineNumber": 1415,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#min",
    "access": "public",
    "description": "Minimum number.",
    "lineNumber": 1433,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "clip",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#clip",
    "access": "public",
    "description": "Clip number within range.",
    "lineNumber": 1452,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} min(max(x, min), max)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "min(max(x, min), max)"
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#toString",
    "access": "public",
    "description": "Convert to string.",
    "lineNumber": 1482,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "toScientificNotation",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#toScientificNotation",
    "access": "public",
    "description": "Convert to string using scientific notation.",
    "lineNumber": 1502,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "e_len",
        "description": "Number of digits in exponent part."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "toEngineeringString",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#toEngineeringString",
    "access": "public",
    "description": "Convert to string usding technical notation.",
    "lineNumber": 1553,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "toPlainString",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#toPlainString",
    "access": "public",
    "description": "Convert to string without exponential notation.",
    "lineNumber": 1573,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "setScale",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#setScale",
    "access": "public",
    "description": "Change the scale.",
    "lineNumber": 1601,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "new_scale",
        "description": "New scale."
      },
      {
        "nullable": null,
        "types": [
          "RoundingModeEntity"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "RoundingMode.UNNECESSARY",
        "defaultRaw": "RoundingMode.UNNECESSARY",
        "name": "rounding_mode",
        "description": "Rounding method when converting precision."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "round",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#round",
    "access": "public",
    "description": "Round with specified settings.\n\n- This method is not a method round the decimal point.\n- This method converts numbers in the specified Context and rounds unconvertible digits.\n\nUse `this.setScale(0, RoundingMode.HALF_UP)` if you want to round the decimal point.\nWhen the argument is omitted, such decimal point rounding operation is performed.",
    "lineNumber": 1675,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "New setting."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "floor",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#floor",
    "access": "public",
    "description": "Floor.",
    "lineNumber": 1719,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} floor(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "floor(A)"
    },
    "params": []
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "ceil",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#ceil",
    "access": "public",
    "description": "Ceil.",
    "lineNumber": 1730,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} ceil(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "ceil(A)"
    },
    "params": []
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "fix",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#fix",
    "access": "public",
    "description": "To integer rounded down to the nearest.",
    "lineNumber": 1741,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} fix(A), trunc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "fix(A), trunc(A)"
    },
    "params": []
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "fract",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#fract",
    "access": "public",
    "description": "Fraction.",
    "lineNumber": 1752,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} fract(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "fract(A)"
    },
    "params": []
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "pow",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#pow",
    "access": "public",
    "description": "Power function.\n- An exception occurs when doing a huge multiplication.",
    "lineNumber": 1769,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} pow(A, B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "pow(A, B)"
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "square",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#square",
    "access": "public",
    "description": "Square.",
    "lineNumber": 1866,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A^2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A^2"
    },
    "params": []
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "sqrt",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#sqrt",
    "access": "public",
    "description": "Square root.",
    "lineNumber": 1874,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} sqrt(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "sqrt(A)"
    },
    "params": []
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "cbrt",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#cbrt",
    "access": "public",
    "description": "Cube root.",
    "lineNumber": 1906,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} cbrt(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "cbrt(A)"
    },
    "params": []
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "rsqrt",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#rsqrt",
    "access": "public",
    "description": "Reciprocal square root.",
    "lineNumber": 1952,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} rsqrt(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "rsqrt(A)"
    },
    "params": []
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "log",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#log",
    "access": "public",
    "description": "Logarithmic function.",
    "lineNumber": 2002,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} log(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "log(A)"
    },
    "params": []
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "exp",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#exp",
    "access": "public",
    "description": "Exponential function.",
    "lineNumber": 2096,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} exp(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "exp(A)"
    },
    "params": []
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "expm1",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#expm1",
    "access": "public",
    "description": "e^x - 1",
    "lineNumber": 2176,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} expm1(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "expm1(A)"
    },
    "params": []
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "log1p",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#log1p",
    "access": "public",
    "description": "ln(1 + x)",
    "lineNumber": 2184,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} log1p(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "log1p(A)"
    },
    "params": []
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "log2",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#log2",
    "access": "public",
    "description": "log_2(x)",
    "lineNumber": 2192,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} log2(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "log2(A)"
    },
    "params": []
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "log10",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#log10",
    "access": "public",
    "description": "log_10(x)",
    "lineNumber": 2201,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} log10(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "log10(A)"
    },
    "params": []
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "sin",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#sin",
    "access": "public",
    "description": "Sine function.",
    "lineNumber": 2213,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} sin(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "sin(A)"
    },
    "params": []
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "cos",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#cos",
    "access": "public",
    "description": "Cosine function.",
    "lineNumber": 2260,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} cos(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "cos(A)"
    },
    "params": []
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "tan",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#tan",
    "access": "public",
    "description": "Tangent function.",
    "lineNumber": 2306,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} tan(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "tan(A)"
    },
    "params": []
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "atan",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#atan",
    "access": "public",
    "description": "Atan (arc tangent) function.\n- Return the values of [-PI/2, PI/2].",
    "lineNumber": 2318,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} atan(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "atan(A)"
    },
    "params": []
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "atan2",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#atan2",
    "access": "public",
    "description": "Atan (arc tangent) function.\nReturn the values of [-PI, PI] .\nSupports only real numbers.",
    "lineNumber": 2407,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} atan2(Y, X)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of the B."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "atan2(Y, X)"
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "asin",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#asin",
    "access": "public",
    "description": "Arc sine function.",
    "lineNumber": 2447,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} asin(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "asin(A)"
    },
    "params": []
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "acos",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#acos",
    "access": "public",
    "description": "Arc cosine function.",
    "lineNumber": 2465,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} acos(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "acos(A)"
    },
    "params": []
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "sinh",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#sinh",
    "access": "public",
    "description": "Hyperbolic sine function.",
    "lineNumber": 2484,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} sinh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "sinh(A)"
    },
    "params": []
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "asinh",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#asinh",
    "access": "public",
    "description": "Inverse hyperbolic sine function.",
    "lineNumber": 2497,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} asinh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "asinh(A)"
    },
    "params": []
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "cosh",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#cosh",
    "access": "public",
    "description": "Hyperbolic cosine function.",
    "lineNumber": 2508,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} cosh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "cosh(A)"
    },
    "params": []
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "acosh",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#acosh",
    "access": "public",
    "description": "Inverse hyperbolic cosine function.",
    "lineNumber": 2520,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} acosh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "acosh(A)"
    },
    "params": []
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "tanh",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#tanh",
    "access": "public",
    "description": "Hyperbolic tangent function.",
    "lineNumber": 2532,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} tanh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "tanh(A)"
    },
    "params": []
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "atanh",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#atanh",
    "access": "public",
    "description": "Inverse hyperbolic tangent function.",
    "lineNumber": 2545,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} atanh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "atanh(A)"
    },
    "params": []
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "sec",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#sec",
    "access": "public",
    "description": "Secant function.",
    "lineNumber": 2554,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} sec(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "sec(A)"
    },
    "params": []
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "asec",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#asec",
    "access": "public",
    "description": "Reverse secant function.",
    "lineNumber": 2563,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} asec(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "asec(A)"
    },
    "params": []
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "sech",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#sech",
    "access": "public",
    "description": "Hyperbolic secant function.",
    "lineNumber": 2572,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} sech(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "sech(A)"
    },
    "params": []
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "asech",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#asech",
    "access": "public",
    "description": "Inverse hyperbolic secant function.",
    "lineNumber": 2584,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} asech(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "asech(A)"
    },
    "params": []
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "cot",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#cot",
    "access": "public",
    "description": "Cotangent function.",
    "lineNumber": 2593,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} cot(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "cot(A)"
    },
    "params": []
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "acot",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#acot",
    "access": "public",
    "description": "Inverse cotangent function.",
    "lineNumber": 2605,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} acot(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "acot(A)"
    },
    "params": []
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "coth",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#coth",
    "access": "public",
    "description": "Hyperbolic cotangent function.",
    "lineNumber": 2617,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} coth(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "coth(A)"
    },
    "params": []
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "acoth",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#acoth",
    "access": "public",
    "description": "Inverse hyperbolic cotangent function.",
    "lineNumber": 2630,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} acoth(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "acoth(A)"
    },
    "params": []
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "csc",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#csc",
    "access": "public",
    "description": "Cosecant function.",
    "lineNumber": 2642,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} csc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "csc(A)"
    },
    "params": []
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "acsc",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#acsc",
    "access": "public",
    "description": "Inverse cosecant function.",
    "lineNumber": 2654,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} acsc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "acsc(A)"
    },
    "params": []
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "csch",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#csch",
    "access": "public",
    "description": "Hyperbolic cosecant function.",
    "lineNumber": 2663,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} csch(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "csch(A)"
    },
    "params": []
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "acsch",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#acsch",
    "access": "public",
    "description": "Inverse hyperbolic cosecant function.",
    "lineNumber": 2678,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} acsch(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "acsch(A)"
    },
    "params": []
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "sinc",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#sinc",
    "access": "public",
    "description": "Normalized sinc function.",
    "lineNumber": 2694,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} sinc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "sinc(A)"
    },
    "params": []
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "rand",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.rand",
    "access": "public",
    "description": "Create random values with uniform random numbers.",
    "lineNumber": 2711,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": true,
        "name": "random",
        "description": "Class for creating random numbers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "randn",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.randn",
    "access": "public",
    "description": "Create random values with normal distribution.",
    "lineNumber": 2727,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": true,
        "name": "random",
        "description": "Class for creating random numbers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "isInteger",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#isInteger",
    "access": "public",
    "description": "Return true if the value is integer.",
    "lineNumber": 2744,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "isZero",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#isZero",
    "access": "public",
    "description": "this === 0",
    "lineNumber": 2756,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "isOne",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#isOne",
    "access": "public",
    "description": "this === 1",
    "lineNumber": 2773,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "isPositive",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#isPositive",
    "access": "public",
    "description": "this > 0",
    "lineNumber": 2784,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "isNegative",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#isNegative",
    "access": "public",
    "description": "this < 0",
    "lineNumber": 2792,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "isNotNegative",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#isNotNegative",
    "access": "public",
    "description": "this >= 0",
    "lineNumber": 2800,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "isNaN",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#isNaN",
    "access": "public",
    "description": "this === NaN",
    "lineNumber": 2808,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isNaN(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isNaN(A)"
    },
    "params": []
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "isPositiveInfinity",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#isPositiveInfinity",
    "access": "public",
    "description": "this === Infinity",
    "lineNumber": 2816,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isPositiveInfinity(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isPositiveInfinity(A)"
    },
    "params": []
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "isNegativeInfinity",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#isNegativeInfinity",
    "access": "public",
    "description": "this === -Infinity",
    "lineNumber": 2824,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isNegativeInfinity(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isNegativeInfinity(A)"
    },
    "params": []
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "isInfinite",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#isInfinite",
    "access": "public",
    "description": "this === Infinity or -Infinity",
    "lineNumber": 2832,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isPositiveInfinity(A) || isNegativeInfinity(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isPositiveInfinity(A) || isNegativeInfinity(A)"
    },
    "params": []
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "isFinite",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#isFinite",
    "access": "public",
    "description": "Return true if the value is finite number.",
    "lineNumber": 2840,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} !isNaN(A) && !isInfinite(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "!isNaN(A) && !isInfinite(A)"
    },
    "params": []
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "and",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#and",
    "access": "public",
    "description": "Logical AND.\n- Calculated as an integer.",
    "lineNumber": 2854,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A & B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A & B"
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "or",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#or",
    "access": "public",
    "description": "Logical OR.\n- Calculated as an integer.",
    "lineNumber": 2868,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A | B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A | B"
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "xor",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#xor",
    "access": "public",
    "description": "Logical Exclusive-OR.\n- Calculated as an integer.",
    "lineNumber": 2882,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A ^ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A ^ B"
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "not",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#not",
    "access": "public",
    "description": "Logical Not. (mutable)\n- Calculated as an integer.",
    "lineNumber": 2895,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} !A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "!A"
    },
    "params": []
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "shift",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#shift",
    "access": "public",
    "description": "this << n\n- Calculated as an integer.",
    "lineNumber": 2907,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A << n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A << n"
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "gcd",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#gcd",
    "access": "public",
    "description": "Euclidean algorithm.\n- Calculated as an integer.",
    "lineNumber": 2923,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} gcd(x, y)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "gcd(x, y)"
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "extgcd",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#extgcd",
    "access": "public",
    "description": "Extended Euclidean algorithm.\n- Calculated as an integer.",
    "lineNumber": 2936,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<BigDecimal>} [a, b, gcd(x, y)], Result of calculating a*x + b*y = gcd(x, y)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<BigDecimal>"
      ],
      "spread": false,
      "description": "[a, b, gcd(x, y)], Result of calculating a*x + b*y = gcd(x, y)."
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "lcm",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#lcm",
    "access": "public",
    "description": "Least common multiple.\n- Calculated as an integer.",
    "lineNumber": 2949,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} lcm(x, y)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "lcm(x, y)"
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "modPow",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#modPow",
    "access": "public",
    "description": "Modular exponentiation.\n- Calculated as an integer.",
    "lineNumber": 2967,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A^B mod m"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exponent",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A^B mod m"
    }
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "modInverse",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#modInverse",
    "access": "public",
    "description": "Modular multiplicative inverse.\n- Calculated as an integer.",
    "lineNumber": 2981,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A^(-1) mod m"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A^(-1) mod m"
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "isPrime",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#isPrime",
    "access": "public",
    "description": "Return true if the value is prime number.\n- Calculated as an integer.\n- Calculate up to `2251799813685248(=2^51)`.",
    "lineNumber": 2998,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - If the calculation range is exceeded, null is returned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "If the calculation range is exceeded, null is returned."
    },
    "params": []
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "isProbablePrime",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#isProbablePrime",
    "access": "public",
    "description": "Return true if the value is prime number by Miller-Labin prime number determination method.\n\nAttention : it takes a very long time to process.\n- Calculated as an integer.",
    "lineNumber": 3011,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "certainty",
        "description": "Repeat count (prime precision)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "nextProbablePrime",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#nextProbablePrime",
    "access": "public",
    "description": "Next prime.",
    "lineNumber": 3022,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "certainty",
        "description": "Repeat count (prime precision)."
      },
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100000",
        "defaultRaw": 100000,
        "name": "search_max",
        "description": "Search range of next prime."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 234,
    "kind": "get",
    "name": "MINUS_ONE",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.MINUS_ONE",
    "access": "public",
    "description": "-1",
    "lineNumber": 3037,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} -1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "get",
    "name": "ZERO",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.ZERO",
    "access": "public",
    "description": "0",
    "lineNumber": 3045,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "0"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "get",
    "name": "HALF",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.HALF",
    "access": "public",
    "description": "0.5",
    "lineNumber": 3053,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 0.5"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "0.5"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "get",
    "name": "ONE",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.ONE",
    "access": "public",
    "description": "1",
    "lineNumber": 3061,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "get",
    "name": "TWO",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.TWO",
    "access": "public",
    "description": "2",
    "lineNumber": 3069,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "2"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "get",
    "name": "TEN",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.TEN",
    "access": "public",
    "description": "10",
    "lineNumber": 3077,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 10"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "10"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "get",
    "name": "PI",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.PI",
    "access": "public",
    "description": "PI",
    "lineNumber": 3085,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 3.14..."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "3.14..."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "get",
    "name": "QUARTER_PI",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.QUARTER_PI",
    "access": "public",
    "description": "0.25 * PI.",
    "lineNumber": 3093,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 0.78..."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "0.78..."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "get",
    "name": "HALF_PI",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.HALF_PI",
    "access": "public",
    "description": "0.5 * PI.",
    "lineNumber": 3101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 1.57..."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "1.57..."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "get",
    "name": "TWO_PI",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.TWO_PI",
    "access": "public",
    "description": "2 * PI.",
    "lineNumber": 3109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 6.28..."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "6.28..."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "get",
    "name": "E",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.E",
    "access": "public",
    "description": "E, Napier's constant.",
    "lineNumber": 3117,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} E"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "E"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "get",
    "name": "LN2",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.LN2",
    "access": "public",
    "description": "log_e(2)",
    "lineNumber": 3125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} ln(2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "ln(2)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "get",
    "name": "LN10",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.LN10",
    "access": "public",
    "description": "log_e(10)",
    "lineNumber": 3133,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} ln(10)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "ln(10)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "get",
    "name": "LOG2E",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.LOG2E",
    "access": "public",
    "description": "log_2(e)",
    "lineNumber": 3141,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} log_2(e)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "log_2(e)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "get",
    "name": "LOG10E",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.LOG10E",
    "access": "public",
    "description": "log_10(e)",
    "lineNumber": 3149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} log_10(e)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "log_10(e)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "get",
    "name": "SQRT2",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.SQRT2",
    "access": "public",
    "description": "sqrt(2)",
    "lineNumber": 3157,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} sqrt(2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "sqrt(2)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "get",
    "name": "SQRT1_2",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.SQRT1_2",
    "access": "public",
    "description": "sqrt(0.5)",
    "lineNumber": 3165,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} sqrt(0.5)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "sqrt(0.5)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "get",
    "name": "POSITIVE_INFINITY",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.POSITIVE_INFINITY",
    "access": "public",
    "description": "Positive infinity.",
    "lineNumber": 3173,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} Infinity"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "Infinity"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "get",
    "name": "NEGATIVE_INFINITY",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.NEGATIVE_INFINITY",
    "access": "public",
    "description": "Negative Infinity.",
    "lineNumber": 3184,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} -Infinity"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "Infinity"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "get",
    "name": "NaN",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimal.NaN",
    "access": "public",
    "description": "Not a Number.",
    "lineNumber": 3195,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} NaN"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "NaN"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "signum",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#signum",
    "access": "public",
    "description": "The positive or negative sign of this number.\n- +1 if positive, -1 if negative, 0 if 0.",
    "lineNumber": 3211,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "subtract",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#subtract",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 3220,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "multiply",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#multiply",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 3229,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "divide",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#divide",
    "access": "public",
    "description": "Divide.\n- The argument can specify the scale after calculation.\n- In the case of precision infinity, it may generate an error by a repeating decimal.\n- When \"{}\" is specified for the argument, it is calculated on the scale of \"this.scale() - divisor.scale()\".\n- When null is specified for the argument, it is calculated on the scale of \"divisor.context\".",
    "lineNumber": 3243,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A / B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext",
          "KBigDecimalDivideType"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": "Scale, MathContext, RoundingMode used for the calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A / B"
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "remainder",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#remainder",
    "access": "public",
    "description": "Remainder of division.\n- Result has same sign as the Dividend.",
    "lineNumber": 3253,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A % B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigDecimalInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A % B"
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "trunc",
    "memberof": "src/math/core/BigDecimal.js~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimal#trunc",
    "access": "public",
    "description": "To integer rounded down to the nearest.",
    "lineNumber": 3261,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} fix(A), trunc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "fix(A), trunc(A)"
    },
    "params": []
  },
  {
    "__docId__": 260,
    "kind": "variable",
    "name": "DEFINE",
    "memberof": "src/math/core/BigDecimal.js",
    "static": true,
    "longname": "src/math/core/BigDecimal.js~DEFINE",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/BigDecimal.js",
    "importStyle": null,
    "description": "Collection of constant values used in the class.",
    "lineNumber": 3274,
    "ignore": true,
    "type": {
      "types": [
        "{\"MINUS_ONE\": *, \"ZERO\": *, \"HALF\": *, \"ONE\": *, \"TWO\": *, \"TEN\": *, \"PI\": *, \"QUARTER_PI\": *, \"HALF_PI\": *, \"TWO_PI\": *, \"E\": *, \"LN2\": *, \"LN10\": *, \"LOG2E\": *, \"LOG10E\": *, \"SQRT2\": *, \"SQRT1_2\": *, \"POSITIVE_INFINITY\": *, \"NEGATIVE_INFINITY\": *, \"NaN\": *}"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "class",
    "name": "BigDecimalCache",
    "memberof": "src/math/core/BigDecimal.js",
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimalCache",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/BigDecimal.js",
    "importStyle": null,
    "description": "Simple cache class.",
    "lineNumber": 3495,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 262,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalCache#constructor",
    "access": "public",
    "description": "Create Cache.",
    "lineNumber": 3502,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method_name",
        "description": "Method name in the DEFINE."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "cache_size",
        "description": "Maximum number of caches."
      }
    ]
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "method_name",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalCache",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalCache#method_name",
    "access": "public",
    "description": "Method name in the DEFINE.",
    "lineNumber": 3508,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "table",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalCache",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalCache#table",
    "access": "public",
    "description": "",
    "lineNumber": 3513,
    "type": {
      "nullable": null,
      "types": [
        "Array<{name:string, number:BigDecimal}>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "table_max",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalCache",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalCache#table_max",
    "access": "public",
    "description": "Maximum number of caches.",
    "lineNumber": 3519,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "get",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalCache#get",
    "access": "public",
    "description": "Use from cache if it exists in cache.",
    "lineNumber": 3527,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 267,
    "kind": "class",
    "name": "BigDecimalConst",
    "memberof": "src/math/core/BigDecimal.js",
    "static": true,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/BigDecimal.js",
    "importStyle": null,
    "description": "Simple cache class.",
    "lineNumber": 3558,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 268,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalConst",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 3562
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "MINUS_ONE",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalConst",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst#MINUS_ONE",
    "access": "public",
    "description": "-1",
    "lineNumber": 3566,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "member",
    "name": "ZERO",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalConst",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst#ZERO",
    "access": "public",
    "description": "0",
    "lineNumber": 3571,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "member",
    "name": "HALF",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalConst",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst#HALF",
    "access": "public",
    "description": "0.5",
    "lineNumber": 3576,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "member",
    "name": "ONE",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalConst",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst#ONE",
    "access": "public",
    "description": "1",
    "lineNumber": 3581,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "member",
    "name": "TWO",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalConst",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst#TWO",
    "access": "public",
    "description": "2",
    "lineNumber": 3586,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "member",
    "name": "TEN",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalConst",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst#TEN",
    "access": "public",
    "description": "10",
    "lineNumber": 3591,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "PI",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalConst",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst#PI",
    "access": "public",
    "description": "PI",
    "lineNumber": 3596,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "QUARTER_PI",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalConst",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst#QUARTER_PI",
    "access": "public",
    "description": "QUARTER_PI",
    "lineNumber": 3601,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "member",
    "name": "HALF_PI",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalConst",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst#HALF_PI",
    "access": "public",
    "description": "HALF_PI",
    "lineNumber": 3606,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "member",
    "name": "TWO_PI",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalConst",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst#TWO_PI",
    "access": "public",
    "description": "TWO_PI",
    "lineNumber": 3611,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "member",
    "name": "E",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalConst",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst#E",
    "access": "public",
    "description": "E",
    "lineNumber": 3616,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "LN2",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalConst",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst#LN2",
    "access": "public",
    "description": "LN2",
    "lineNumber": 3621,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "member",
    "name": "LN10",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalConst",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst#LN10",
    "access": "public",
    "description": "LN10",
    "lineNumber": 3626,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "LOG2E",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalConst",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst#LOG2E",
    "access": "public",
    "description": "LOG2E",
    "lineNumber": 3631,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "LOG10E",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalConst",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst#LOG10E",
    "access": "public",
    "description": "LOG10E",
    "lineNumber": 3636,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "SQRT2",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalConst",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst#SQRT2",
    "access": "public",
    "description": "SQRT2",
    "lineNumber": 3641,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "SQRT1_2",
    "memberof": "src/math/core/BigDecimal.js~BigDecimalConst",
    "static": false,
    "longname": "src/math/core/BigDecimal.js~BigDecimalConst#SQRT1_2",
    "access": "public",
    "description": "SQRT1_2",
    "lineNumber": 3646,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "variable",
    "name": "CACHED_DATA",
    "memberof": "src/math/core/BigDecimal.js",
    "static": true,
    "longname": "src/math/core/BigDecimal.js~CACHED_DATA",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/BigDecimal.js",
    "importStyle": null,
    "description": "Cache of the constant.",
    "lineNumber": 3654,
    "ignore": true,
    "type": {
      "types": [
        "src/math/core/BigDecimal.js~BigDecimalConst"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "file",
    "name": "src/math/core/BigInteger.js",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Polyfill from \"../tools/Polyfill.js\";\nimport Random from \"./tools/Random.js\";\nimport Fraction from \"./Fraction.js\";\nimport BigDecimal from \"./BigDecimal.js\";\nimport Complex from \"./Complex.js\";\nimport Matrix from \"./Matrix.js\";\nimport MathContext from \"./context/MathContext.js\";\n\n/**\n * BigInteger type argument.\n * - BigInteger\n * - number\n * - string\n * - Array<string|number>\n * - {toBigInteger:function}\n * - {intValue:number}\n * - {toString:function}\n * \n * Initialization can be performed as follows.\n * - 1200, \"1200\", \"12e2\", \"1.2e3\", [\"1200\", 10]\n * - \"0xff\", [\"ff\", 16]\n * - \"0o01234567\", [\"01234567\", 8]\n * - \"0b0110101\", [\"0110101\", 2]\n * @typedef {BigInteger|number|boolean|string|Array<string|number>|{toBigInteger:function}|{intValue:number}|{toString:function}} KBigIntegerInputData\n */\n\n/**\n * Random number class to be used when the random number class is not set.\n * @type {Random}\n * @ignore\n */\nlet DEFAULT_RANDOM = new Random();\n\n/**\n * Collection of functions used in BigInteger.\n * @ignore\n */\nclass BigIntegerTool {\n\n\t/**\n\t * Return a hex array from a string containing numbers.\n\t * @param {string} text - String containing a number (remove the negative sign).\n\t * @param {number} radix - Base number.\n\t * @returns {Array<number>} Hex array.\n\t */\n\tstatic toHexadecimalArrayFromPlainString(text, radix) {\n\t\t// 下の変換をすることで、2進数での変換時に内部のforの繰り返す回数が減る\n\t\t// v0.03 出来る限りまとめてn進数変換する\n\t\tconst max_num = 0x3FFFFFFF;\n\t\tconst keta = Math.floor( Math.log(max_num) / Math.log(radix) );\n\n\t\t/**\n\t\t * @type {Array<number>}\n\t\t */\n\t\tlet x = [];\n\t\t\n\t\t/**\n\t\t * @type {Array<number>}\n\t\t */\n\t\tconst y = [];\n\t\tconst len = Math.ceil(text.length / keta);\n\t\tlet offset = text.length;\n\t\tfor(let i = 0; i < len; i++ ) {\n\t\t\toffset -= keta;\n\t\t\tif(offset >= 0) {\n\t\t\t\tx[i] = parseInt(text.substring(offset, offset + keta), radix);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tx[i] = parseInt(text.substring(0, offset + keta), radix);\n\t\t\t}\n\t\t}\n\t\tconst calcradix = Math.round(Math.pow(radix, keta));\n\t\t// v0.03ここまで\n\t\t// 2で割っていくアルゴリズムで2進数に変換する\n\t\twhile(x.length !==  0) {\n\t\t\t// 2で割っていく\n\t\t\t// 隣の桁でたcarryはradix進数をかけて桁上げしてる\n\t\t\tlet carry = 0;\n\t\t\tfor(let i = x.length - 1; i >= 0; i--) {\n\t\t\t\tconst a = x[i] + carry * calcradix;\n\t\t\t\tx[i]  = a >>> 1;\n\t\t\t\tcarry = a & 1;\n\t\t\t}\n\t\t\t// 1余るかどうかをテストする\n\t\t\ty[y.length] = carry;\n\t\t\t// xが0になっている部分は削除していく\n\t\t\tif(x[x.length - 1] === 0) {\n\t\t\t\tx.pop();\n\t\t\t}\n\t\t}\n\t\t// メモリ節約のため1つの変数（16ビット）に収めるだけ収めていく\n\t\tx = [];\n\t\tfor(let i = 0; i < y.length; i++) {\n\t\t\tx[i >>> 4] |= y[i] << (i & 0xF);\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * Remove exponent notation in strings representing unsigned numbers.\n\t * @param {string} ntext \n\t * @returns {string}\n\t */\n\tstatic toPlainStringFromString(ntext) {\n\t\tlet scale = 0;\n\t\tlet buff;\n\t\t// 正規化\n\t\tlet text = ntext.replace(/\\s/g, \"\").toLowerCase();\n\n\t\t/**\n\t\t * @type {Array<string>}\n\t\t */\n\t\tconst number_text = [];\n\t\t// 整数部を抽出\n\t\tbuff = text.match(/^[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tnumber_text.push(buff);\n\t\t}\n\t\t// 小数部があるか\n\t\tbuff = text.match(/^\\.[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tbuff = buff.substr(1);\n\t\t\tscale = scale + buff.length;\n\t\t\tnumber_text.push(buff);\n\t\t}\n\t\t// 指数表記があるか\n\t\tbuff = text.match(/^e[+-]?[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0].substr(1);\n\t\t\tscale -= parseInt(buff, 10);\n\t\t}\n\t\t// 出力用の文字を作成\n\t\tlet output_string;\n\t\tif(scale === 0) {\n\t\t\toutput_string = number_text.join(\"\");\n\t\t}\n\t\tif(scale < 0) {\n\t\t\tfor(let i = 0; i < -scale; i++) {\n\t\t\t\tnumber_text.push(\"0\");\n\t\t\t}\n\t\t\toutput_string = number_text.join(\"\");\n\t\t}\n\t\telse if(scale > 0) {\n\t\t\toutput_string = number_text.join(\"\");\n\t\t\toutput_string = output_string.substring(0, output_string.length - scale);\n\t\t\toutput_string = output_string.length !== 0 ? output_string : \"0\";\n\t\t}\n\t\treturn output_string;\n\t}\n\n\t/**\n\t * Return a hexadecimal array from the number.\n\t * @param {number} num - Target number.\n\t * @returns {{element : Array<number>, state : number}} Data for BigInteger.\n\t */\n\tstatic toBigIntegerFromNumber(num) {\n\t\tif(!isFinite(num)) {\n\t\t\tif(num === Number.POSITIVE_INFINITY) {\n\t\t\t\treturn {\n\t\t\t\t\tstate : BIGINTEGER_NUMBER_STATE.POSITIVE_INFINITY,\n\t\t\t\t\telement : []\n\t\t\t\t};\n\t\t\t}\n\t\t\tif(num === Number.NEGATIVE_INFINITY) {\n\t\t\t\treturn {\n\t\t\t\t\tstate : BIGINTEGER_NUMBER_STATE.NEGATIVE_INFINITY,\n\t\t\t\t\telement : []\n\t\t\t\t};\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn {\n\t\t\t\t\tstate : BIGINTEGER_NUMBER_STATE.NOT_A_NUMBER,\n\t\t\t\t\telement : []\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tlet x;\n\t\tlet state;\n\t\tif(num === 0) {\n\t\t\tstate = BIGINTEGER_NUMBER_STATE.ZERO;\n\t\t\tx = 0;\n\t\t}\n\t\telse if(num > 0) {\n\t\t\tstate = BIGINTEGER_NUMBER_STATE.POSITIVE_NUMBER;\n\t\t\tx = num;\n\t\t}\n\t\telse {\n\t\t\tstate = BIGINTEGER_NUMBER_STATE.NEGATIVE_NUMBER;\n\t\t\tx = -num;\n\t\t}\n\t\tif(x > 0xFFFFFFFF) {\n\t\t\treturn {\n\t\t\t\telement : BigIntegerTool.toHexadecimalArrayFromPlainString(BigIntegerTool.toPlainStringFromString(x.toFixed()), 10),\n\t\t\t\tstate : state\n\t\t\t};\n\t\t}\n\t\t/**\n\t\t * @type {Array<number>}\n\t\t */\n\t\tconst y = [];\n\t\twhile(x !==  0) {\n\t\t\ty[y.length] = x & 1;\n\t\t\tx >>>= 1;\n\t\t}\n\t\t/**\n\t\t * @type {Array<number>}\n\t\t */\n\t\tconst z = [];\n\t\tfor(let i = 0; i < y.length; i++) {\n\t\t\tz[i >>> 4] |= y[i] << (i & 0xF);\n\t\t}\n\t\t\n\t\treturn {\n\t\t\telement : z,\n\t\t\tstate : state\n\t\t};\n\t}\n\n\t/**\n\t * Return string of number from a hexadecimal array.\n\t * @param {Array<number>} binary - Hex array.\n\t * @param {number} radix - Base number.\n\t * @returns {Array<number>} Numeric array for each digit in the specified base number.\n\t */\n\tstatic toPlainStringFromHexadecimalArray(binary, radix) {\n\n\t\t/**\n\t\t * @param {Array<number>} x1 \n\t\t * @param {Array<number>} x2 \n\t\t * @param {Array<number>} y \n\t\t */\n\t\tconst add = function(x1, x2, y) {\n\t\t\tconst size = x1.length;\n\t\t\tlet carry = 0;\n\t\t\tfor(let i = 0; i < size; i++) {\n\t\t\t\ty[i] = x1[i] + ((x2.length >= (i + 1)) ? x2[i] : 0) + carry;\n\t\t\t\tif(y[i] >= radix) {\n\t\t\t\t\tcarry = 1;\n\t\t\t\t\ty[i] -= radix;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(carry === 1) {\n\t\t\t\ty[size] = 1;\n\t\t\t}\n\t\t};\n\t\tconst y = [0];\n\t\tconst t = [1];\n\t\tfor(let i = 0;i < binary.length;i++) {\n\t\t\tfor(let j = 0; j < 16; j++) {\n\t\t\t\tif((binary[i] >>> j) & 1) {\n\t\t\t\t\tadd(t, y, y);\n\t\t\t\t}\n\t\t\t\tadd(t, t, t);\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * @param {number[]} element\n\t * @returns {boolean}\n\t * @ignore\n\t */\n\tstatic isZeroElement(element) {\n\t\tif(element.length === 0) {\n\t\t\treturn true;\n\t\t}\n\t\tif((element.length === 1 && element[0] === 0)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Return data to represent multi-precision numbers from strings.\n\t * @param {string} text - String containing a number.\n\t * @param {number} [radix=10] - Base number.\n\t * @returns {{element : Array<number>, state : number}} Data for BigInteger.\n\t */\n\tstatic toBigIntegerFromString(text, radix) {\n\t\tlet x = text.replace(/\\s/g, \"\").toLowerCase();\n\t\t// 特殊な状態\n\t\t{\n\t\t\tif(/nan/.test(text)) {\n\t\t\t\treturn {\n\t\t\t\t\tstate : BIGINTEGER_NUMBER_STATE.NOT_A_NUMBER,\n\t\t\t\t\telement : []\n\t\t\t\t};\n\t\t\t}\n\t\t\telse if(/inf/.test(text)) {\n\t\t\t\tif(!/-/.test(text)) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstate : BIGINTEGER_NUMBER_STATE.POSITIVE_INFINITY,\n\t\t\t\t\t\telement : []\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstate : BIGINTEGER_NUMBER_STATE.NEGATIVE_INFINITY,\n\t\t\t\t\t\telement : []\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst sign_text = x.match(/^[-+]+/);\n\n\t\t/**\n\t\t * @type {Array<number>}\n\t\t */\n\t\tlet element     = [];\n\t\tlet state       = BIGINTEGER_NUMBER_STATE.POSITIVE_NUMBER;\n\n\t\tif(sign_text !== null) {\n\t\t\tconst hit_text = sign_text[0];\n\t\t\tx = x.substring(hit_text.length, x.length);\n\t\t\tif(hit_text.indexOf(\"-\") !== -1) {\n\t\t\t\tstate = BIGINTEGER_NUMBER_STATE.NEGATIVE_NUMBER;\n\t\t\t}\n\t\t}\n\n\t\tif(radix) {\n\t\t\telement = BigIntegerTool.toHexadecimalArrayFromPlainString(x, radix);\n\t\t}\n\t\telse if(/^0x/.test(x)) {\n\t\t\telement = BigIntegerTool.toHexadecimalArrayFromPlainString(x.substring(2, x.length), 16);\n\t\t}\n\t\telse if(/^0b/.test(x)) {\n\t\t\telement = BigIntegerTool.toHexadecimalArrayFromPlainString(x.substring(2, x.length), 2);\n\t\t}\n\t\telse if(/^0o/.test(x)) {\n\t\t\telement = BigIntegerTool.toHexadecimalArrayFromPlainString(x.substring(2, x.length), 8);\n\t\t}\n\t\telse {\n\t\t\tx = BigIntegerTool.toPlainStringFromString(x);\n\t\t\telement = BigIntegerTool.toHexadecimalArrayFromPlainString(x, 10);\n\t\t}\n\t\t// \"0\"の場合がある為\n\t\tif(BigIntegerTool.isZeroElement(element)) {\n\t\t\telement = [];\n\t\t\tstate = BIGINTEGER_NUMBER_STATE.ZERO;\n\t\t}\n\n\t\treturn {\n\t\t\telement : element,\n\t\t\tstate : state\n\t\t};\n\t}\n}\n\n/**\n * Numeric state.\n * @type {{ZERO:number, POSITIVE_NUMBER:number, NEGATIVE_NUMBER:number, NOT_A_NUMBER:number, POSITIVE_INFINITY:number, NEGATIVE_INFINITY:number}}\n * @ignore\n */\nconst BIGINTEGER_NUMBER_STATE = {\n\tZERO : 0,\n\tPOSITIVE_NUMBER : 1,\n\tNEGATIVE_NUMBER : 2,\n\tNOT_A_NUMBER : 3,\n\tPOSITIVE_INFINITY : 4,\n\tNEGATIVE_INFINITY : 5\n};\n\n// 内部では1変数内の中の16ビットごとに管理\n// 2変数で16ビット*16ビットで32ビットを表す\n// this.element\t...\t16ビットごとに管理\n//\n// 本クラスはイミュータブルです。\n// 内部の「_」から始まるメソッドは内部計算用で非公開です。またミュータブルです。\n\n/**\n * Arbitrary-precision integer class (immutable).\n */\nexport default class BigInteger {\n\n\t/**\n\t * Create an arbitrary-precision integer.\n\t * \n\t * Initialization can be performed as follows.\n\t * - 1200, \"1200\", \"12e2\", \"1.2e3\", [\"1200\", 10]\n\t * - \"0xff\", [\"ff\", 16]\n\t * - \"0o01234567\", [\"01234567\", 8]\n\t * - \"0b0110101\", [\"0110101\", 2]\n\t * @param {KBigIntegerInputData} [number] - Numeric data. See how to use the function.\n\t */\n\tconstructor(number) {\n\t\t\n\t\t/**\n\t\t * Numeric state.\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.state = BIGINTEGER_NUMBER_STATE.ZERO;\n\n\t\tif(arguments.length === 0) {\n\n\t\t\t/**\n\t\t\t * An integer consisting of 16 bits per element of the array.\n\t\t\t * @private\n\t\t\t * @type {Array<number>}\n\t\t\t */\n\t\t\tthis.element     = [];\n\n\t\t}\n\t\telse if(arguments.length === 1) {\n\t\t\tif(number instanceof BigInteger) {\n\t\t\t\tthis.element = number.element.slice(0);\n\t\t\t\tthis.state = number.state;\n\t\t\t}\n\t\t\telse if(typeof number === \"number\") {\n\t\t\t\tconst x = BigIntegerTool.toBigIntegerFromNumber(number);\n\t\t\t\tthis.element = x.element;\n\t\t\t\tthis.state = x.state;\n\t\t\t}\n\t\t\telse if(typeof number === \"string\") {\n\t\t\t\tconst x = BigIntegerTool.toBigIntegerFromString(number);\n\t\t\t\tthis.element = x.element;\n\t\t\t\tthis.state = x.state;\n\t\t\t}\n\t\t\telse if(number instanceof Array) {\n\t\t\t\tif((number.length === 2) && (typeof number[0] === \"string\" && (typeof number[1] === \"number\"))) {\n\t\t\t\t\tconst x = BigIntegerTool.toBigIntegerFromString(number[0], number[1]);\n\t\t\t\t\tthis.element = x.element;\n\t\t\t\t\tthis.state = x.state;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow \"BigInteger Unsupported argument \" + arguments;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(typeof number === \"object\") {\n\t\t\t\tif(\"toBigInteger\" in number) {\n\t\t\t\t\tconst x = number.toBigInteger();\n\t\t\t\t\tthis.element = x.element;\n\t\t\t\t\tthis.state = x.state;\n\t\t\t\t}\n\t\t\t\telse if(\"intValue\" in number) {\n\t\t\t\t\tconst x = BigIntegerTool.toBigIntegerFromNumber(number.intValue);\n\t\t\t\t\tthis.element = x.element;\n\t\t\t\t\tthis.state = x.state;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst x = BigIntegerTool.toBigIntegerFromString(number.toString());\n\t\t\t\t\tthis.element = x.element;\n\t\t\t\t\tthis.state = x.state;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(typeof number === \"boolean\") {\n\t\t\t\tconst x = BigIntegerTool.toBigIntegerFromNumber(number ? 1 : 0);\n\t\t\t\tthis.element = x.element;\n\t\t\t\tthis.state = x.state;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow \"BigInteger Unsupported argument \" + number;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow \"BigInteger Unsupported argument \" + number;\n\t\t}\n\t}\n\n\t/**\n\t * Create an entity object of this class.\n\t * @param {KBigIntegerInputData} number \n\t * @returns {BigInteger}\n\t */\n\tstatic create(number) {\n\t\tif(number instanceof BigInteger) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new BigInteger(number);\n\t\t}\n\t}\n\n\t/**\n\t * Create an arbitrary-precision integer.\n\t * - Does not support strings using exponential notation.\n\t * - If you want to initialize with the specified base number, please set up with an array [\"ff\", 16].\n\t * @param {KBigIntegerInputData} number \n\t * @returns {BigInteger}\n\t */\n\tstatic valueOf(number) {\n\t\treturn BigInteger.create(number);\n\t}\n\n\t/**\n\t * Convert to BigInteger.\n\t * If type conversion is unnecessary, return the value as it is.\n\t * @param {KBigIntegerInputData} number \n\t * @returns {BigInteger}\n\t * @private\n\t */\n\tstatic _toBigInteger(number) {\n\t\tif(number instanceof BigInteger) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new BigInteger(number);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to real number.\n\t * @param {KBigIntegerInputData} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toFloat(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn number;\n\t\t}\n\t\telse if(number instanceof BigInteger) {\n\t\t\treturn number.doubleValue;\n\t\t}\n\t\telse {\n\t\t\treturn (new BigInteger(number)).doubleValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert to integer.\n\t * @param {KBigIntegerInputData} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toInteger(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn Math.trunc(number);\n\t\t}\n\t\telse if(number instanceof BigInteger) {\n\t\t\treturn number.intValue;\n\t\t}\n\t\telse {\n\t\t\treturn (new BigInteger(number)).intValue;\n\t\t}\n\t}\n\n\t/**\n\t * Random number of specified bit length.\n\t * @param {KBigIntegerInputData} bitsize - Bit length.\n\t * @param {Random} [random] - Class for creating random numbers.\n\t * @returns {BigInteger}\n\t */\n\tstatic createRandomBigInteger(bitsize, random) {\n\t\tconst rand = (random !== undefined && random instanceof Random) ? random : DEFAULT_RANDOM;\n\t\tconst x = new BigInteger();\n\t\tconst bits = BigInteger._toInteger(bitsize);\n\t\tconst size = ((bits - 1) >> 4) + 1;\n\t\tif(bits === 0) {\n\t\t\treturn BigInteger.ZERO;\n\t\t}\n\t\tlet r;\n\t\tfor(let i = 0, j = 0; i < size; i++) {\n\t\t\tif(j === 0) {\n\t\t\t\tr = rand.nextInt(); // 32ビットずつ作成する\n\t\t\t\tx.element[i] = r & 0xFFFF;\n\t\t\t\tj = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tx.element[i] = (r >>> 16) & 0xFFFF;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t\t// 1～15ビット余る場合は、16ビットずつ作成しているので削る\n\t\tif((bits % 16) !== 0) {\n\t\t\tx.element[x.element.length - 1] &= (1 << (bits % 16)) - 1;\n\t\t}\n\t\t// 最後のビットに 0 をたくさん作成していると、\n\t\t// 0のみのデータになる可能性があるためメモリを修正\n\t\tx.state = BIGINTEGER_NUMBER_STATE.POSITIVE_NUMBER;\n\t\tx._memory_reduction();\n\t\treturn x;\n\t}\n\n\t/**\n\t * Convert to string.\n\t * @param {KBigIntegerInputData} [radix=10] - Base number.\n\t * @returns {string}\n\t */\n\ttoString(radix) {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? \"NaN\" : (this.isPositiveInfinity() ? \"Infinity\" : \"-Infinity\");\n\t\t}\n\t\tconst radix_ = radix ? BigInteger._toInteger(radix) : 10;\n\n\t\t// int型で扱える数値で toString が可能なので、\n\t\t// せっかくだからより大きな進数で計算していけば、あとでtoStringする回数が減るテクニック\n\t\t// 2進数であれば、2^n乗で計算しても問題がない 4進数や8進数で計算して、2進数に戻せば巡回少数なし\n\t\t// v0.03 出来る限りまとめてn進数変換する\n\t\tconst max_num = 0x3FFFFFFF;\n\t\t//                        max_num > radix^x\n\t\t// floor(log max_num / log radix) = x\n\t\tconst keta = Math.floor( Math.log(max_num) / Math.log(radix_) );\n\t\tconst calcradix = Math.round(Math.pow(radix_, keta));\n\t\t// zeros = \"00000000....\"\n\t\tconst zeros_array = [];\n\t\tfor(let i = 0; i < keta; i++) {\n\t\t\tzeros_array[i] = \"0\";\n\t\t}\n\t\tconst zeros_string = zeros_array.join(\"\");\n\t\t// v0.03ここまで\n\t\tconst x = BigIntegerTool.toPlainStringFromHexadecimalArray(this.element, calcradix);\n\t\tconst y = [];\n\t\tlet z = \"\";\n\t\tif(this.sign() < 0) {\n\t\t\ty[y.length] = \"-\";\n\t\t}\n\t\tfor(let i = x.length - 1; i >= 0; i--) {\n\t\t\tz = x[i].toString(radix_);\n\t\t\tif(i < (x.length - 1)) {\n\t\t\t\ty[y.length] = zeros_string.substring(0, keta - z.length);\n\t\t\t}\n\t\t\ty[y.length] = z;\n\t\t}\n\t\treturn y.join(\"\");\n\t}\n\n\t/**\n\t * Deep copy.\n\t * @returns {BigInteger}\n\t */\n\tclone() {\n\t\treturn new BigInteger(this);\n\t}\n\n\t/**\n\t * Create a numerical value for addition. If negative, two's complement.\n\t * @param {number} [bit_length] - Bit length. If not set, it will be calculated automatically.\n\t * @returns {BigInteger}\n\t * @private\n\t */\n\tgetTwosComplement(bit_length) {\n\t\tconst y = this.clone();\n\t\tif(!this.isFinite()) {\n\t\t\treturn y;\n\t\t}\n\t\tif(y.isNotNegative()) {\n\t\t\treturn y;\n\t\t}\n\t\telse {\n\t\t\t// 正にする\n\t\t\ty.state = BIGINTEGER_NUMBER_STATE.POSITIVE_NUMBER;\n\t\t\t// ビットの数が存在しない場合は数える\n\t\t\tconst len = (bit_length !== undefined) ? bit_length : y.bitLength();\n\t\t\tconst e = y.element;\n\t\t\t// ビット反転後\n\t\t\tfor(let i = 0; i < e.length; i++) {\n\t\t\t\te[i] ^= 0xFFFF;\n\t\t\t}\n\t\t\t// 1～15ビット余る場合は、16ビットずつ作成しているので削る\n\t\t\t// nビットのマスク（なお負の値を表す最上位ビットは削除する）\n\t\t\tif((len % 16) !== 0) {\n\t\t\t\te[e.length - 1] &= (1 << (len % 16)) - 1;\n\t\t\t}\n\t\t\t// 1を加算\n\t\t\ty._add(new BigInteger(1));\n\t\t\treturn y;\n\t\t}\n\t}\n\n\t/**\n\t * Expand memory to specified bit length. (mutable)\n\t * @param {number} bit_length - Bit length.\n\t * @private\n\t */\n\t_memory_allocation(bit_length) {\n\t\tif(!this.isFinite()) {\n\t\t\treturn;\n\t\t}\n\t\tconst n = BigInteger._toInteger(bit_length);\n\t\tconst elementsize = this.element.length << 4;\n\t\tif(elementsize < n) {\n\t\t\tconst addsize = (((n - elementsize - 1) & 0xFFFFFFF0) >>> 4) + 1;\n\t\t\tfor(let i = 0;i < addsize;i++) {\n\t\t\t\tthis.element[this.element.length] = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Normalization of the internal data. (mutable)\n\t * @private\n\t */\n\t_memory_reduction() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn;\n\t\t}\n\t\tfor(let i = this.element.length - 1;i >= 0;i--) {\n\t\t\tif(this.element[i] !==  0) {\n\t\t\t\t// 最終行以外で見つかったら、上の領域を削除する\n\t\t\t\tif(i < this.element.length - 1) {\n\t\t\t\t\tthis.element.splice(i + 1, this.element.length - i - 1);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t// 全て0だった場合\n\t\tthis.state = BIGINTEGER_NUMBER_STATE.ZERO;\n\t\tthis.element = [];\n\t}\n\n\t/**\n\t * Absolute value. (mutable)\n\t * @returns {BigInteger} A = abs(A)\n\t * @private\n\t */\n\t_abs() {\n\t\t// -1 -> 1, 0 -> 0, 1 -> 1\n\t\tif(this.state === BIGINTEGER_NUMBER_STATE.NEGATIVE_NUMBER) {\n\t\t\tthis.state = BIGINTEGER_NUMBER_STATE.POSITIVE_NUMBER;\n\t\t}\n\t\telse if(this.state === BIGINTEGER_NUMBER_STATE.NEGATIVE_INFINITY) {\n\t\t\tthis.state = BIGINTEGER_NUMBER_STATE.POSITIVE_INFINITY;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Absolute value.\n\t * @returns {BigInteger} abs(A)\n\t */\n\tabs() {\n\t\treturn this.clone()._abs();\n\t}\n\n\t/**\n\t * this *= -1\n\t * @returns {BigInteger} A = -A\n\t * @private\n\t */\n\t_negate() {\n\t\tif(this.state === BIGINTEGER_NUMBER_STATE.POSITIVE_NUMBER) {\n\t\t\tthis.state = BIGINTEGER_NUMBER_STATE.NEGATIVE_NUMBER;\n\t\t}\n\t\telse if(this.state === BIGINTEGER_NUMBER_STATE.NEGATIVE_NUMBER) {\n\t\t\tthis.state = BIGINTEGER_NUMBER_STATE.POSITIVE_NUMBER;\n\t\t}\n\t\telse if(this.state === BIGINTEGER_NUMBER_STATE.POSITIVE_INFINITY) {\n\t\t\tthis.state = BIGINTEGER_NUMBER_STATE.NEGATIVE_INFINITY;\n\t\t}\n\t\telse if(this.state === BIGINTEGER_NUMBER_STATE.NEGATIVE_INFINITY) {\n\t\t\tthis.state = BIGINTEGER_NUMBER_STATE.POSITIVE_INFINITY;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * this * -1\n\t * @returns {BigInteger} -A\n\t */\n\tnegate() {\n\t\treturn this.clone()._negate();\n\t}\n\n\t/**\n\t * The positive or negative sign of this number.\n\t * - +1 if positive, -1 if negative, 0 if 0.\n\t * @returns {number}\n\t */\n\tsign() {\n\t\tif(this.isNaN()) {\n\t\t\treturn NaN;\n\t\t}\n\t\telse if(this.isZero()) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(this.isPositive()) {\n\t\t\treturn 1;\n\t\t}\n\t\telse {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// ----------------------\n\t// 四則演算\n\t// ----------------------\n\t\n\t/**\n\t * Add. (mutable)\n\t * @param {KBigIntegerInputData} number\n\t * @returns {BigInteger} A += B\n\t * @private\n\t */\n\t_add(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst o1 = this;\n\t\tconst o2 = val;\n\t\tif(!o1.isFinite() || !o2.isFinite()) {\n\t\t\tlet ret;\n\t\t\tif(o1.isNaN() || o2.isNaN() || (o1.isInfinite() && o2.isInfinite() && !o1.equalsState(o2))) {\n\t\t\t\tret = BigInteger.NaN.clone();\n\t\t\t}\n\t\t\telse if(o1.isPositiveInfinity() || o2.isPositiveInfinity()) {\n\t\t\t\tret = BigInteger.POSITIVE_INFINITY.clone();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tret = BigInteger.NEGATIVE_INFINITY.clone();\n\t\t\t}\n\t\t\tthis.element = ret.element;\n\t\t\tthis.state = ret.state;\n\t\t\treturn this;\n\t\t}\n\t\tlet x1 = o1.element;\n\t\tlet x2 = o2.element;\n\t\tif(o1.sign() === o2.sign()) {\n\t\t\t//足し算\n\t\t\tthis._memory_allocation(x2.length << 4);\n\t\t\tlet carry = 0;\n\t\t\tfor(let i = 0; i < x1.length; i++) {\n\t\t\t\tx1[i] += ((x2.length >= (i + 1)) ? x2[i] : 0) + carry;\n\t\t\t\tif(x1[i] > 0xFFFF) {\n\t\t\t\t\tcarry = 1;\n\t\t\t\t\tx1[i] &= 0xFFFF;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(carry !== 0) {\n\t\t\t\tx1[x1.length] = carry;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// 引き算\n\t\t\tconst compare = o1.compareToAbs(o2);\n\t\t\tif(compare === 0) {\n\t\t\t\tthis.element = [];\n\t\t\t\tthis.state = BIGINTEGER_NUMBER_STATE.ZERO;\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\telse if(compare === -1) {\n\t\t\t\tthis.state = o2.state;\n\t\t\t\tconst swap = x1;\n\t\t\t\tx1 = x2.slice(0);\n\t\t\t\tx2 = swap;\n\t\t\t}\n\t\t\tlet carry = 0;\n\t\t\tfor(let i = 0; i < x1.length; i++) {\n\t\t\t\tx1[i] -= ((x2.length >= (i + 1)) ? x2[i] : 0) + carry;\n\t\t\t\tif(x1[i] < 0) {\n\t\t\t\t\tx1[i] += 0x10000;\n\t\t\t\t\tcarry  = 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry  = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.element = x1;\n\t\t\tthis._memory_reduction();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add.\n\t * @param {KBigIntegerInputData} number\n\t * @returns {BigInteger} A + B\n\t */\n\tadd(number) {\n\t\treturn this.clone()._add(number);\n\t}\n\n\t/**\n\t * Subtract. (mutable)\n\t * @param {KBigIntegerInputData} number\n\t * @returns {BigInteger} A -= B\n\t * @private\n\t */\n\t_sub(number) {\n\t\t// 一時的に記録しておいて引数の情報は書き換えないようにする\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst state = val.state;\n\t\tconst out  = this._add(val._negate());\n\t\tval.state = state;\n\t\treturn out;\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {KBigIntegerInputData} number\n\t * @returns {BigInteger} A - B\n\t */\n\tsub(number) {\n\t\treturn this.clone()._sub(number);\n\t}\n\n\t/**\n\t * Multiply. (mutable)\n\t * @param {KBigIntegerInputData} number\n\t * @returns {BigInteger} A *= B\n\t * @private\n\t */\n\t_mul(number) {\n\t\tconst x = this.mul(number);\n\t\tthis.element = x.element;\n\t\tthis.state   = x.state;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {KBigIntegerInputData} number\n\t * @returns {BigInteger} A * B\n\t */\n\tmul(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst o1 = this;\n\t\tconst o2 = val;\n\t\tif(!o1.isFinite() || !o2.isFinite()) {\n\t\t\tif(o1.isNaN() || o2.isNaN() || (o1.isZero() || o2.isZero())) {\n\t\t\t\treturn BigInteger.NaN.clone();\n\t\t\t}\n\t\t\telse if(o1.sign() * o2.sign() > 0) {\n\t\t\t\treturn BigInteger.POSITIVE_INFINITY.clone();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn BigInteger.NEGATIVE_INFINITY.clone();\n\t\t\t}\n\t\t}\n\t\tconst x1 = o1.element;\n\t\tconst x2 = o2.element;\n\t\tconst out  = new BigInteger();\n\t\tconst buff = new BigInteger();\n\t\tconst y  = out.element;\n\t\tfor(let i = 0; i < x1.length; i++) {\n\t\t\tbuff.element = [];\n\t\t\t// x3 = x1[i] * x2\n\t\t\tconst x3 = buff.element;\n\t\t\tlet carry = 0;\n\t\t\tfor(let j = 0; j < x2.length; j++) {\n\t\t\t\tx3[j] = x1[i] * x2[j] + carry;\n\t\t\t\tif(x3[j] > 0xFFFF) {\n\t\t\t\t\tcarry = x3[j] >>> 16;\n\t\t\t\t\tx3[j] &= 0xFFFF;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(carry !== 0) {\n\t\t\t\tx3[x3.length] = carry;\n\t\t\t}\n\t\t\t// x3 = x3 << (i * 16)\n\t\t\t//buff._shift(i << 4);\n\t\t\tfor(let j = x3.length - 1; j >= 0; j--) {\n\t\t\t\tx3[j + i] = x3[j];\n\t\t\t}\n\t\t\tfor(let j = i - 1; j >= 0; j--) {\n\t\t\t\tx3[j] = 0;\n\t\t\t}\n\t\t\t// y = y + x3 (out._add(buff))\n\t\t\t//out._add(buff);\n\t\t\tcarry = 0;\n\t\t\tout._memory_allocation(x3.length << 4);\n\t\t\tfor(let j = i; j < y.length; j++) {\n\t\t\t\ty[j] += ((x3.length >= (j + 1)) ? x3[j] : 0) + carry;\n\t\t\t\tif(y[j] > 0xFFFF) {\n\t\t\t\t\tcarry = 1;\n\t\t\t\t\ty[j] &= 0xFFFF;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(carry !== 0) {\n\t\t\t\ty[y.length] = carry;\n\t\t\t}\n\t\t}\n\t\tconst sign = this.sign() * val.sign();\n\t\tout.state = sign === 0 ? BIGINTEGER_NUMBER_STATE.ZERO :\t(sign === 1 ? BIGINTEGER_NUMBER_STATE.POSITIVE_NUMBER : BIGINTEGER_NUMBER_STATE.NEGATIVE_NUMBER);\n\t\treturn out;\n\t}\n\n\t/**\n\t * Divide and rem. (mutable)\n\t * @param {KBigIntegerInputData} number\n\t * @returns {Array<BigInteger>} [C = fix(A / B), A - C * B]\n\t * @private\n\t */\n\t_divideAndRemainder(number) {\n\t\tconst o1 = this;\n\t\tconst o2 = BigInteger._toBigInteger(number);\n\t\tif(!o1.isFinite() || !o2.isFinite()) {\n\t\t\tif(o1.isNaN() || o2.isNaN() || (o1.isInfinite() && o2.isInfinite())) {\n\t\t\t\treturn [BigInteger.NaN, BigInteger.NaN];\n\t\t\t}\n\t\t\telse if(o1.isInfinite()) {\n\t\t\t\tif(o1.sign() * o2.sign() >= 0) {\n\t\t\t\t\treturn [BigInteger.POSITIVE_INFINITY, BigInteger.NaN];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn [BigInteger.NEGATIVE_INFINITY, BigInteger.NaN];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn [BigInteger.ZERO, BigInteger.NaN];\n\t\t\t}\n\t\t}\n\t\telse if(o2.isZero()) {\n\t\t\tif(o1.isZero()) {\n\t\t\t\treturn [BigInteger.NaN, BigInteger.NaN];\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn [o1.sign() >= 0 ? BigInteger.POSITIVE_INFINITY : BigInteger.NEGATIVE_INFINITY, BigInteger.NaN];\n\t\t\t}\n\t\t}\n\t\tconst out = [];\n\t\tconst compare = o1.compareToAbs(o2);\n\t\tconst sign = o1.sign() * o2.sign();\n\t\tif(compare < 0) {\n\t\t\tout[0] = new BigInteger(0);\n\t\t\tout[1] = o1.clone();\n\t\t\treturn out;\n\t\t}\n\t\telse if(compare === 0) {\n\t\t\tout[0] = new BigInteger(1);\n\t\t\tout[0].state = sign === 1 ? BIGINTEGER_NUMBER_STATE.POSITIVE_NUMBER : BIGINTEGER_NUMBER_STATE.NEGATIVE_NUMBER;\n\t\t\tout[1] = new BigInteger(0);\n\t\t\treturn out;\n\t\t}\n\t\tconst ONE = new BigInteger(1);\n\t\tconst size = o1.bitLength() - o2.bitLength();\n\t\tconst x1 = o1.clone()._abs();\n\t\tconst x2 = o2.shift(size)._abs();\n\t\tconst y  = new BigInteger();\n\t\tfor(let i = 0; i <= size; i++) {\n\t\t\tif(x1.compareToAbs(x2) >= 0) {\n\t\t\t\tx1._sub(x2);\n\t\t\t\ty._add(ONE);\n\t\t\t}\n\t\t\tif(i === size) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx2._shift(-1);\n\t\t\ty._shift(1);\n\t\t}\n\t\tout[0] = y;\n\t\tout[0].state = sign === 1 ? BIGINTEGER_NUMBER_STATE.POSITIVE_NUMBER : BIGINTEGER_NUMBER_STATE.NEGATIVE_NUMBER;\n\t\tout[1] = x1;\n\t\tout[1].state = x1.state !== BIGINTEGER_NUMBER_STATE.ZERO ? o1.state : x1.state;\n\t\treturn out;\n\t}\n\n\t/**\n\t * Divide and rem.\n\t * @param {KBigIntegerInputData} number\n\t * @returns {Array<BigInteger>} [C = fix(A / B), A - C * B]\n\t */\n\tdivideAndRemainder(number) {\n\t\treturn this.clone()._divideAndRemainder(number);\n\t}\n\n\t/**\n\t * Divide. (mutable)\n\t * @param {KBigIntegerInputData} number\n\t * @returns {BigInteger} fix(A / B)\n\t * @private\n\t */\n\t_div(number) {\n\t\treturn this._divideAndRemainder(number)[0];\n\t}\n\n\t/**\n\t * Divide.\n\t * @param {KBigIntegerInputData} number\n\t * @returns {BigInteger} fix(A / B)\n\t */\n\tdiv(number) {\n\t\treturn this.clone()._div(number);\n\t}\n\n\t/**\n\t * Remainder of division. (mutable)\n\t * - Result has same sign as the Dividend.\n\t * @param {KBigIntegerInputData} number\n\t * @returns {BigInteger} A %= B\n\t * @private\n\t */\n\t_rem(number) {\n\t\tconst y = this._divideAndRemainder(number)[1];\n\t\tthis.element = y.element;\n\t\tthis.state = y.state;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remainder of division.\n\t * - Result has same sign as the Dividend.\n\t * @param {KBigIntegerInputData} number\n\t * @returns {BigInteger} A % B\n\t */\n\trem(number) {\n\t\treturn this.clone()._rem(number);\n\t}\n\n\t/**\n\t * Modulo, positive rem of division. (mutable)\n\t * - Result has same sign as the Divisor.\n\t * @param {KBigIntegerInputData} number\n\t * @returns {BigInteger} A = A mod B\n\t * @private\n\t */\n\t_mod(number) {\n\t\tconst o1 = this;\n\t\tconst o2 = BigInteger._toBigInteger(number);\n\t\tif(o2.isZero()) {\n\t\t\treturn o1;\n\t\t}\n\t\tconst y = o1._divideAndRemainder(o2)[1];\n\t\tif(o1.state !== o2.state) {\n\t\t\ty._add(o2);\n\t\t}\n\t\tthis.element = y.element;\n\t\tthis.state = y.state;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Modulo, positive rem of division.\n\t * - Result has same sign as the Divisor.\n\t * @param {KBigIntegerInputData} number\n\t * @returns {BigInteger} A mod B\n\t */\n\tmod(number) {\n\t\treturn this.clone()._mod(number);\n\t}\n\n\t/**\n\t * Modular exponentiation.\n\t * @param {KBigIntegerInputData} exponent\n\t * @param {KBigIntegerInputData} m \n\t * @returns {BigInteger} A^B mod m\n\t */\n\tmodPow(exponent, m) {\n\t\tconst m_ = BigInteger._toBigInteger(m);\n\t\tlet x = new BigInteger(this);\n\t\tlet y = new BigInteger(1);\n\t\tconst e = new BigInteger(exponent);\n\t\tif(!x.isFinite() || !e.isFinite()) {\n\t\t\treturn BigInteger.NaN;\n\t\t}\n\t\twhile(e.element.length !== 0) {\n\t\t\tif((e.element[0] & 1) !== 0) {\n\t\t\t\ty = y.multiply(x).mod(m_);\n\t\t\t}\n\t\t\tx = x.multiply(x).mod(m_);\n\t\t\te._shift(-1);\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Modular multiplicative inverse.\n\t * @param {KBigIntegerInputData} m\n\t * @returns {BigInteger} A^(-1) mod m\n\t */\n\tmodInverse(m) {\n\t\tconst m_ = BigInteger._toBigInteger(m);\n\t\tif(!this.isFinite() || !m_.isFinite()) {\n\t\t\treturn BigInteger.NaN;\n\t\t}\n\t\tconst y = this.extgcd(m);\n\t\tconst ONE  = new BigInteger(1);\n\t\tif(y[2].compareTo(ONE) !== 0) {\n\t\t\treturn BigInteger.NaN;\n\t\t}\n\t\t// 正にするため rem ではなく mod を使用する\n\t\treturn y[0]._add(m_).rem(m_);\n\t}\n\n\t// ----------------------\n\t// その他の演算\n\t// ----------------------\n\t\n\t/**\n\t * Factorial function, x!.\n\t * @returns {BigInteger} n!\n\t */\n\tfactorial() {\n\t\t{\n\t\t\tif(!this.isFinite()) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\telse if(this.isNegative()) {\n\t\t\t\treturn BigInteger.NaN;\n\t\t\t}\n\t\t}\n\t\tconst loop_max = BigInteger._toInteger(this);\n\t\tlet x = BigInteger.ONE;\n\t\tfor(let i = 2; i <= loop_max; i++) {\n\t\t\tx = x.multiply(i);\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * Multiply a multiple of ten.\n\t * @param {KBigIntegerInputData} n\n\t * @returns {BigInteger} x * 10^n\n\t */\n\tscaleByPowerOfTen(n) {\n\t\tconst x = BigInteger._toInteger(n);\n\t\tif(x === 0) {\n\t\t\treturn this;\n\t\t}\n\t\tif(x > 0) {\n\t\t\treturn this.mul(BigInteger.TEN.pow(x));\n\t\t}\n\t\telse {\n\t\t\treturn this.div(BigInteger.TEN.pow(x));\n\t\t}\n\t}\n\n\t// ----------------------\n\t// 指数\n\t// ----------------------\n\t\n\t/**\n\t * Power function.\n\t * @param {KBigIntegerInputData} exponent\n\t * @returns {BigInteger} pow(A, B)\n\t */\n\tpow(exponent) {\n\t\tconst e = new BigInteger(exponent);\n\t\t{\n\t\t\tif(this.isNaN() || e.isNaN()) {\n\t\t\t\treturn BigInteger.NaN;\n\t\t\t}\n\t\t\tif(e.isZero()) {\n\t\t\t\treturn BigInteger.ONE;\n\t\t\t}\n\t\t\telse if(this.isZero()) {\n\t\t\t\tif(e.isNegativeInfinity()) {\n\t\t\t\t\treturn BigInteger.POSITIVE_INFINITY;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn BigInteger.ZERO;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(this.isOne()) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\telse if(this.isInfinite()) {\n\t\t\t\tif(this.isPositiveInfinity()) {\n\t\t\t\t\treturn BigInteger.POSITIVE_INFINITY;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(e.isPositiveInfinity()) {\n\t\t\t\t\t\treturn BigInteger.NaN;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn BigInteger.create(Infinity * Math.pow(-1, Math.round(e.doubleValue)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(e.isInfinite()) {\n\t\t\t\tif(this.isNegative()) {\n\t\t\t\t\t// 複素数\n\t\t\t\t\treturn BigInteger.NaN;\n\t\t\t\t}\n\t\t\t\tif(this.compareTo(BigInteger.ONE) < 0) {\n\t\t\t\t\tif(e.isPositiveInfinity()) {\n\t\t\t\t\t\treturn BigInteger.ZERO;\n\t\t\t\t\t}\n\t\t\t\t\telse if(e.isNegativeInfinity()) {\n\t\t\t\t\t\treturn BigInteger.POSITIVE_INFINITY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(e.isPositiveInfinity()) {\n\t\t\t\t\t\treturn BigInteger.POSITIVE_INFINITY;\n\t\t\t\t\t}\n\t\t\t\t\telse if(e.isNegativeInfinity()) {\n\t\t\t\t\t\treturn BigInteger.ZERO;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet x = BigInteger._toBigInteger(this);\n\t\tlet y = BigInteger._toBigInteger(1);\n\t\twhile(e.element.length !== 0) {\n\t\t\tif((e.element[0] & 1) !== 0) {\n\t\t\t\ty = y.multiply(x);\n\t\t\t}\n\t\t\tx = x.multiply(x);\n\t\t\te._shift(-1);\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Square.\n\t * @returns {BigInteger} A^2\n\t */\n\tsquare() {\n\t\treturn this.mul(this);\n\t}\n\n\t/**\n\t * Square root.\n\t * @returns {BigInteger} floor(sqrt(A))\n\t */\n\tsqrt() {\n\t\t{\n\t\t\tif(this.isZero()) {\n\t\t\t\treturn BigInteger.ZERO;\n\t\t\t}\n\t\t\telse if(this.isNaN()) {\n\t\t\t\treturn BigInteger.NaN;\n\t\t\t}\n\t\t\telse if(this.isNegative()) {\n\t\t\t\treturn BigInteger.NaN; // 複素数\n\t\t\t}\n\t\t\telse if(this.isInfinite()) {\n\t\t\t\treturn BigInteger.POSITIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\t// ニュートン法によって求める\n\t\t// 参考：奥村晴彦 (1991). C言語による最新アルゴリズム事典.\n\t\t// A^0.5  = x\n\t\t//     A  = x^2\n\t\t//     0  = x^2 - A\n\t\t//   f(x) = x^2 - A\n\t\t//   f'(x) = 2x\n\t\t// x_(n+1) = x_n - f(x_n)/f'(x_n)\n\t\t//         = x_n - (x_n^2 - A)/2x_n\n\t\t//         = (2*x_n^2 - x_n^2 + A)/2x_n\n\t\t//         = (x_n^2 + A)/2x_n\n\t\t//         = (x_n + (A/x_n)) / 2\n\t\tlet s = BigInteger.ONE;\n\t\t/**\n\t\t * @type {BigInteger}\n\t\t */\n\t\tlet t = this;\n\t\twhile(s.compareToAbs(t) === -1) {\n\t\t\ts = s.shiftLeft(1);\n\t\t\tt = t.shiftRight(1);\n\t\t}\n\t\tconst x0 = t;\n\t\tlet xn = x0;\n\t\tfor(let i = 0; i < 300; i++) {\n\t\t\tconst xn1 = xn.add(this.div(xn)).shiftRight(1);\n\t\t\tconst delta = xn1.sub(xn);\n\t\t\tif(delta.isZero()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\txn = xn1;\n\t\t}\n\t\treturn xn;\n\t}\n\t\n\t/**\n\t * Cube root.\n\t * @returns {BigInteger} floor(cbrt(A))\n\t */\n\tcbrt() {\n\t\t{\n\t\t\tif(this.isZero()) {\n\t\t\t\treturn BigInteger.ZERO;\n\t\t\t}\n\t\t\telse if(this.isNaN()) {\n\t\t\t\treturn BigInteger.NaN;\n\t\t\t}\n\t\t\telse if(this.isInfinite()) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\t// ニュートン法によって求める\n\t\t// 参考：奥村晴彦 (1991). C言語による最新アルゴリズム事典.\n\t\tlet s = BigInteger.ONE;\n\t\t/**\n\t\t * @type {BigInteger}\n\t\t */\n\t\tlet t = this;\n\t\twhile(s.compareToAbs(t) === -1) {\n\t\t\ts = s.shiftLeft(1);\n\t\t\tt = t.shiftRight(2);\n\t\t}\n\t\tconst x0 = t;\n\t\tlet xn = x0;\n\t\tfor(let i = 0; i < 300; i++) {\n\t\t\tconst xn_2 = xn.mul(xn);\n\t\t\tconst xn1 = xn.shiftLeft(1).add(this.div(xn_2)).div(3);\n\t\t\tconst delta = xn1.sub(xn);\n\t\t\tif(delta.isZero()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\txn = xn1;\n\t\t}\n\t\treturn xn;\n\t}\n\n\t/**\n\t * log_2(x)\n\t * @returns {BigInteger} log2(A)\n\t */\n\tlog2() {\n\t\t{\n\t\t\tif(this.isZero()) {\n\t\t\t\treturn BigInteger.ZERO;\n\t\t\t}\n\t\t\telse if(this.isNaN()) {\n\t\t\t\treturn BigInteger.NaN;\n\t\t\t}\n\t\t\telse if(this.isNegative()) {\n\t\t\t\treturn BigInteger.NaN;\n\t\t\t}\n\t\t\telse if(this.isInfinite()) {\n\t\t\t\treturn BigInteger.POSITIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\treturn BigInteger.create(this.bitLength() - 1);\n\t}\n\n\t/**\n\t * log_10(x)\n\t * @returns {BigInteger} log10(A)\n\t */\n\tlog10() {\n\t\t{\n\t\t\tif(this.isZero()) {\n\t\t\t\treturn BigInteger.ZERO;\n\t\t\t}\n\t\t\telse if(this.isNaN()) {\n\t\t\t\treturn BigInteger.NaN;\n\t\t\t}\n\t\t\telse if(this.isNegative()) {\n\t\t\t\treturn BigInteger.NaN;\n\t\t\t}\n\t\t\telse if(this.isInfinite()) {\n\t\t\t\treturn BigInteger.POSITIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\treturn BigInteger.create(this.toString(10).length - 1);\n\t}\n\n\t// ----------------------\n\t// 環境設定用\n\t// ----------------------\n\t\n\t/**\n\t * Set default class of random.\n\t * This is used if you do not specify a random number.\n\t * @param {Random} random\n\t */\n\tstatic setDefaultRandom(random) {\n\t\tDEFAULT_RANDOM = random;\n\t}\n\n\t/**\n\t * Return default Random class.\n\t * Used when Random not specified explicitly.\n\t * @returns {Random}\n\t */\n\tstatic getDefaultRandom() {\n\t\treturn DEFAULT_RANDOM;\n\t}\n\n\t// ----------------------\n\t// 他の型に変換用\n\t// ----------------------\n\t\n\t/**\n\t * Value at the specified position of the internally used array that composed of hexadecimal numbers.\n\t * @param {KBigIntegerInputData} point - Array address.\n\t * @returns {number}\n\t */\n\tgetShort(point) {\n\t\tif(this.isZero()) {\n\t\t\treturn 0;\n\t\t}\n\t\tconst n = BigInteger._toInteger(point);\n\t\treturn ((0 <= n) && (n <= this.element.length)) ? this.element[n] : NaN;\n\t}\n\n\t/**\n\t * boolean value.\n\t * @returns {boolean}\n\t */\n\tget booleanValue() {\n\t\treturn !this.isZero() && !this.isNaN();\n\t}\n\n\t/**\n\t * 32-bit integer value.\n\t * - If it is outside the range of JavaScript Number, it will not be an accurate number.\n\t * @returns {number}\n\t */\n\tget intValue() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? NaN : (this.isPositiveInfinity() ? Infinity : -Infinity);\n\t\t}\n\t\tlet x = this.getShort(0) + (this.getShort(1) << 16);\n\t\tx &= 0xFFFFFFFF;\n\t\tif((x > 0) && this.isNegative()) {\n\t\t\tx = -x;\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 64-bit integer value.\n\t * - If it is outside the range of JavaScript Number, it will not be an accurate number.\n\t * @returns {number}\n\t * @deprecated\n\t */\n\tget longValue() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? NaN : (this.isPositiveInfinity() ? Infinity : -Infinity);\n\t\t}\n\t\tlet x = 0;\n\t\tfor(let i = Math.min(3, this.element.length - 1); i >= 0; i--) {\n\t\t\tx *= 65536;\n\t\t\tx += this.getShort(i);\n\t\t}\n\t\tif(this.isNegative()) {\n\t\t\tx = -x;\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 64-bit floating point.\n\t * - If it is outside the range of JavaScript Number, it will not be an accurate number.\n\t * @returns {number}\n\t */\n\tget doubleValue() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? NaN : (this.isPositiveInfinity() ? Infinity : -Infinity);\n\t\t}\n\t\treturn parseFloat(this.toString());\n\t}\n\t\n\t// ----------------------\n\t// konpeito で扱う数値型へ変換\n\t// ----------------------\n\t\n\t/**\n\t * return BigInteger.\n\t * @returns {BigInteger}\n\t */\n\ttoBigInteger() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * return BigDecimal.\n\t * @param {MathContext} [mc] - MathContext setting after calculation. \n\t * @returns {BigDecimal}\n\t */\n\ttoBigDecimal(mc) {\n\t\tif(mc) {\n\t\t\treturn new BigDecimal([this, mc]);\n\t\t}\n\t\telse {\n\t\t\treturn new BigDecimal(this);\n\t\t}\n\t}\n\t\n\t/**\n\t * return Fraction.\n\t * @returns {Fraction}\n\t */\n\ttoFraction() {\n\t\treturn new Fraction(this);\n\t}\n\t\n\t/**\n\t * return Complex.\n\t * @returns {Complex}\n\t */\n\ttoComplex() {\n\t\treturn new Complex(this);\n\t}\n\t\n\t/**\n\t * return Matrix.\n\t * @returns {Matrix}\n\t */\n\ttoMatrix() {\n\t\treturn new Matrix(this);\n\t}\n\n\t// ----------------------\n\t// 比較\n\t// ----------------------\n\t\n\t/**\n\t * Equals.\n\t * @param {KBigIntegerInputData} number\n\t * @returns {boolean} A === B\n\t */\n\tequals(number) {\n\t\tconst x = this;\n\t\tconst y = BigInteger._toBigInteger(number);\n\t\tif(!x.isFinite() || !y.isFinite()) {\n\t\t\tif(x.isNaN() || y.isNaN()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(x.state === y.state) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif(x.state !== y.state) {\n\t\t\treturn false;\n\t\t}\n\t\tif(x.element.length !== y.element.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor(let i = 0; i < y.element.length; i++) {\n\t\t\tif(x.element[i] !==  y.element[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Compare values without sign.\n\t * @param {KBigIntegerInputData} number \n\t * @returns {number} abs(A) > abs(B) ? 1 : (abs(A) === abs(B) ? 0 : -1)\n\t */\n\tcompareToAbs(number) {\n\t\tconst x = this;\n\t\tconst y = BigInteger._toBigInteger(number);\n\t\tif(!x.isFinite() || !y.isFinite()) {\n\t\t\tif(x.isNaN() || y.isNaN()) {\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t\telse if(x.isInfinite() || y.isInfinite()) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse if(y.isInfinite()) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\tif(x.element.length < y.element.length) {\n\t\t\treturn -1;\n\t\t}\n\t\telse if(x.element.length > y.element.length) {\n\t\t\treturn 1;\n\t\t}\n\t\tfor(let i = x.element.length - 1;i >= 0;i--) {\n\t\t\tif(x.element[i] !== y.element[i]) {\n\t\t\t\tconst val = x.element[i] - y.element[i];\n\t\t\t\treturn ( (val === 0) ? 0 : ((val > 0) ? 1 : -1) );\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Compare values.\n\t * @param {KBigIntegerInputData} number \n\t * @returns {number} A > B ? 1 : (A === B ? 0 : -1)\n\t */\n\tcompareTo(number) {\n\t\tconst x = this;\n\t\tconst y = BigInteger._toBigInteger(number);\n\t\tif(!x.isFinite() || !y.isFinite()) {\n\t\t\tif(x.isNaN() || y.isNaN()) {\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t\tif(x.state === y.state) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif(x.isPositiveInfinity() || y.isNegativeInfinity()) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\tconst x_sign = x.sign();\n\t\tconst y_sign = y.sign();\n\t\tif(x_sign !== y_sign) {\n\t\t\tif(x_sign > y_sign) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\telse if(x_sign === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn x.compareToAbs(y) * x_sign;\n\t}\n\n\t/**\n\t * Numeric type match.\n\t * @param {KBigIntegerInputData} number \n\t * @returns {boolean}\n\t */\n\tequalsState(number) {\n\t\tconst x = this;\n\t\tconst y = BigInteger._toBigInteger(number);\n\t\treturn x.state === y.state;\n\t}\n\n\t/**\n\t * Maximum number.\n\t * @param {KBigIntegerInputData} number\n\t * @returns {BigInteger} max([A, B])\n\t */\n\tmax(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tif(this.compareTo(val) >= 0) {\n\t\t\treturn this.clone();\n\t\t}\n\t\telse {\n\t\t\treturn val.clone();\n\t\t}\n\t}\n\n\t/**\n\t * Minimum number.\n\t * @param {KBigIntegerInputData} number\n\t * @returns {BigInteger} min([A, B])\n\t */\n\tmin(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tif(this.compareTo(val) >= 0) {\n\t\t\treturn val.clone();\n\t\t}\n\t\telse {\n\t\t\treturn this.clone();\n\t\t}\n\t}\n\n\t/**\n\t * Clip number within range.\n\t * @param {KBigIntegerInputData} min \n\t * @param {KBigIntegerInputData} max\n\t * @returns {BigInteger} min(max(x, min), max)\n\t */\n\tclip(min, max) {\n\t\tconst min_ = BigInteger._toBigInteger(min);\n\t\tconst max_ = BigInteger._toBigInteger(max);\n\t\tif(this.isNaN() || min_.isNaN() || max_.isNaN()) {\n\t\t\treturn BigInteger.NaN;\n\t\t}\n\t\tconst arg_check = min_.compareTo(max_);\n\t\tif(arg_check === 1) {\n\t\t\tthrow \"clip(min, max) error. (min > max)->(\" + min_ + \" > \" + max_ + \")\";\n\t\t}\n\t\telse if(arg_check === 0) {\n\t\t\treturn min_;\n\t\t}\n\t\tif(this.compareTo(max_) === 1) {\n\t\t\treturn max_;\n\t\t}\n\t\telse if(this.compareTo(min_) === -1) {\n\t\t\treturn min_;\n\t\t}\n\t\treturn this;\n\t}\n\n\t// ----------------------\n\t// gcd, lcm\n\t// ----------------------\n\t\n\t/**\n\t * Euclidean algorithm.\n\t * @param {KBigIntegerInputData} number \n\t * @returns {BigInteger} gcd(x, y)\n\t */\n\tgcd(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tif(!this.isFinite() || !val.isFinite()) {\n\t\t\treturn BigInteger.NaN;\n\t\t}\n\t\t/**\n\t\t * @type {any}\n\t\t */\n\t\tlet x = this, y = val, z;\n\t\tlet i = 10;\n\t\twhile(y.sign() !== 0 && i) {\n\t\t\tz = x.rem(y);\n\t\t\tx = y;\n\t\t\ty = z;\n\t\t\ti--;\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * Extended Euclidean algorithm.\n\t * @param {KBigIntegerInputData} number \n\t * @returns {Array<BigInteger>} [a, b, gcd(x, y)], Result of calculating a*x + b*y = gcd(x, y).\n\t */\n\textgcd(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tif(!this.isFinite() || !val.isFinite()) {\n\t\t\treturn [BigInteger.NaN, BigInteger.NaN, BigInteger.NaN];\n\t\t}\n\t\t// 非再帰\n\t\tconst ONE  = new BigInteger(1);\n\t\tconst ZERO = new BigInteger(0);\n\t\t/**\n\t\t * @type {any}\n\t\t */\n\t\tlet r0 = this, r1 = val, r2, q1;\n\t\tlet a0 = ONE,  a1 = ZERO, a2;\n\t\tlet b0 = ZERO, b1 = ONE,  b2;\n\t\twhile(r1.sign() !== 0) {\n\t\t\tconst y = r0.divideAndRemainder(r1);\n\t\t\tq1 = y[0];\n\t\t\tr2 = y[1];\n\t\t\ta2 = a0.subtract(q1.multiply(a1));\n\t\t\tb2 = b0.subtract(q1.multiply(b1));\n\t\t\ta0 = a1;\n\t\t\ta1 = a2;\n\t\t\tb0 = b1;\n\t\t\tb1 = b2;\n\t\t\tr0 = r1;\n\t\t\tr1 = r2;\n\t\t}\n\t\treturn [a0, b0, r0];\n\t}\n\n\t/**\n\t * Least common multiple.\n\t * @param {KBigIntegerInputData} number \n\t * @returns {BigInteger} lcm(x, y)\n\t */\n\tlcm(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tif(!this.isFinite() || !val.isFinite()) {\n\t\t\treturn BigInteger.NaN;\n\t\t}\n\t\treturn this.mul(val).div(this.gcd(val));\n\t}\n\n\t// ----------------------\n\t// 素数系\n\t// ----------------------\n\t\n\t/**\n\t * Prime represented within the specified bit length.\n\t * @param {KBigIntegerInputData} bits - Bit length.\n\t * @param {Random} [random] - Class for creating random numbers.\n\t * @param {KBigIntegerInputData} [certainty=100] - Repeat count (prime precision).\n\t * @param {KBigIntegerInputData} [create_count=500] - Number of times to retry if prime generation fails.\n\t * @returns {BigInteger}\n\t */\n\tstatic probablePrime(bits, random, certainty, create_count ) {\n\t\tconst certainty_ = certainty ? BigInteger._toInteger(certainty) : 100;\n\t\tconst create_count_ = create_count ? BigInteger._toInteger(create_count) : 500;\n\t\tfor(let i = 0; i < create_count_; i++) {\n\t\t\tconst x = BigInteger.createRandomBigInteger(bits, random);\n\t\t\tif(x.isProbablePrime(certainty_)) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\t\tconsole.log(\"probablePrime \" + create_count);\n\t\treturn BigInteger.NaN;\n\t}\n\n\t/**\n\t * Return true if the value is prime number.\n\t * - Calculate up to `2251799813685248(=2^51)`.\n\t * @returns {boolean} - If the calculation range is exceeded, null is returned.\n\t */\n\tisPrime() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn false;\n\t\t}\n\t\t// 0や負の値は、素数ではない\n\t\tif(this.sign() <= 0) {\n\t\t\treturn false;\n\t\t}\n\t\t// 47453132.81212578 = Math.sqrt(Number.MAX_SAFE_INTEGER)\n\t\tconst limit = Math.sqrt(Math.pow(2, 51));\n\t\tconst target_number = this.doubleValue;\n\t\tconst count_max = Math.ceil(Math.sqrt(target_number));\n\t\t// 1, 2 -> true\n\t\tif(target_number <= 2) {\n\t\t\treturn true;\n\t\t}\n\t\t// 指定した値より大きい場合は計算不可能として false を返す\n\t\tif(count_max > limit) {\n\t\t\treturn null;\n\t\t}\n\t\tfor(let i = 2; i <= count_max; i++) {\n\t\t\tif((target_number % i) === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Return true if the value is prime number by Miller-Labin prime number determination method.\n\t * \n\t * Attention : it takes a very long time to process.\n\t * @param {KBigIntegerInputData} [certainty=100] - Repeat count (prime precision).\n\t * @returns {boolean}\n\t */\n\tisProbablePrime(certainty) {\n\t\tif(!this.isFinite()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst e = this.element;\n\t\t// 0や負の値は、素数ではない\n\t\tif(this.sign() <= 0) {\n\t\t\treturn false;\n\t\t}\n\t\t// 1, 2 -> true\n\t\tif((e.length === 1)&&(e[0] <= 2)) {\n\t\t\treturn true;\n\t\t}\n\t\t// even number -> false\n\t\telse if((e[0] & 1) === 0) {\n\t\t\treturn false;\n\t\t}\n\t\t// ミラーラビン素数判定法\n\t\t// かなり処理が重たいです。まあお遊び程度に使用という感じで。\n\t\tconst loop\t= certainty !== undefined ? BigInteger._toInteger(certainty) : 100;\n\t\tconst ZERO\t= BigInteger.ZERO;\n\t\tconst ONE\t= BigInteger.ONE;\n\t\tconst n\t\t= this;\n\t\tconst LEN\t= n.bitLength();\n\t\tconst n_1\t= n.subtract(ONE);\n\t\tconst s \t= n_1.getLowestSetBit();\n\t\tconst d \t= n_1.shift(-s);\n\n\t\tif(loop <= 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor(let i = 0; i < loop; i++ ) {\n\t\t\t//[ 1, n - 1] の範囲から a を選択\n\t\t\tlet a;\n\t\t\tdo {\n\t\t\t\ta = BigInteger.createRandomBigInteger(LEN);\n\t\t\t} while(( a.compareTo(ZERO) === 0 )||( a.compareTo(n) !== -1 ));\n\n\t\t\tlet t = d;\n\t\t\t// a^t != 1 mod n\n\t\t\tlet y = a.modPow(t, n);\n\t\t\t\n\t\t\twhile(true) {\n\t\t\t\tif((t.equals(n_1)) || (y.equals(ONE)) || (y.equals(n_1))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ty = y.mul(y)._mod(n);\n\t\t\t\tt = t.shiftLeft(1);\n\t\t\t}\n\n\t\t\tif((!y.equals(n_1)) && ((t.element[0] & 1) === 0)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Next prime.\n\t * @param {KBigIntegerInputData} [certainty=100] - Repeat count (prime precision).\n\t * @param {KBigIntegerInputData} [search_max=100000] - Search range of next prime.\n\t * @returns {BigInteger}\n\t */\n\tnextProbablePrime(certainty, search_max) {\n\t\tif(!this.isFinite()) {\n\t\t\treturn BigInteger.NaN;\n\t\t}\n\t\tconst loop\t= certainty !== undefined ? (BigInteger._toInteger(certainty) >> 1) : 100 / 2;\n\t\tconst search_max_ = search_max !== undefined ? BigInteger._toInteger(search_max) : 100000;\n\t\tconst x = this.clone();\n\t\tfor(let i = 0; i < search_max_; i++) {\n\t\t\tx._add(BigInteger.ONE);\n\t\t\tif(x.isProbablePrime(loop)) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\t\tthrow \"nextProbablePrime [\" + search_max_ +\"]\";\n\t}\n\n\t// ----------------------\n\t// シフト演算系\n\t// ----------------------\n\t\n\t/**\n\t * this <<= n\n\t * @param {KBigIntegerInputData} shift_length - Bit shift size.\n\t * @returns {BigInteger} A <<= n\n\t * @private\n\t */\n\t_shift(shift_length) {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this;\n\t\t}\n\t\tlet n = BigInteger._toInteger(shift_length);\n\t\tif(n === 0) {\n\t\t\treturn this;\n\t\t}\n\t\tconst x = this.element;\n\t\t// 1ビットなら専用コードで高速計算\n\t\tif(n === 1) {\n\t\t\tlet i = x.length - 1;\n\t\t\tif((x[i] & 0x8000) !==  0) {\n\t\t\t\tx[x.length] = 1;\n\t\t\t}\n\t\t\tfor(;i >= 0;i--) {\n\t\t\t\tx[i] <<= 1;\n\t\t\t\tx[i]  &= 0xFFFF;\n\t\t\t\tif((i > 0) && ((x[i - 1] & 0x8000) !==  0)) {\n\t\t\t\t\tx[i] += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(n === -1) {\n\t\t\tfor(let i = 0;i < x.length;i++) {\n\t\t\t\tx[i] >>>= 1;\n\t\t\t\tif((i < x.length - 1) && ((x[i + 1] & 1) !==  0)) {\n\t\t\t\t\tx[i] |= 0x8000;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(x[x.length - 1] === 0) {\n\t\t\t\tx.pop();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// 16ビット単位なら配列を追加削除する高速計算\n\t\t\tif(n >= 16) {\n\t\t\t\tconst m = n >>> 4;\n\t\t\t\tfor(let i = x.length - 1; i >= 0; i--) {\n\t\t\t\t\tx[i + m] = x[i];\n\t\t\t\t}\n\t\t\t\tfor(let i = m - 1; i >= 0; i--) {\n\t\t\t\t\tx[i] = 0;\n\t\t\t\t}\n\t\t\t\tn &= 0xF;\n\t\t\t}\n\t\t\telse if(n <= -16){\n\t\t\t\tconst m = (-n) >>> 4;\n\t\t\t\tx.splice(0, m);\n\t\t\t\tn += m << 4;\n\t\t\t}\n\t\t\tif(n !== 0) {\n\t\t\t\t// 15ビット以内ならビット演算でまとめて操作\n\t\t\t\tif(0 < n) {\n\t\t\t\t\tlet carry = 0;\n\t\t\t\t\tfor(let i = 0; i < x.length; i++) {\n\t\t\t\t\t\tx[i] = (x[i] << n) + carry;\n\t\t\t\t\t\tif(x[i] > 0xFFFF) {\n\t\t\t\t\t\t\tcarry = x[i] >>> 16;\n\t\t\t\t\t\t\tx[i] &= 0xFFFF;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tcarry = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(carry !== 0) {\n\t\t\t\t\t\tx[x.length] = carry;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tn = -n;\n\t\t\t\t\tfor(let i = 0; i < x.length; i++) {\n\t\t\t\t\t\tif(i !== x.length - 1) {\n\t\t\t\t\t\t\tx[i] += x[i + 1] << 16;\n\t\t\t\t\t\t\tx[i] >>>= n;\n\t\t\t\t\t\t\tx[i] &= 0xFFFF;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tx[i] >>>= n;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(x[x.length - 1] === 0) {\n\t\t\t\t\t\tx.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * this << n\n\t * @param {KBigIntegerInputData} n\n\t * @returns {BigInteger} A << n\n\t */\n\tshift(n) {\n\t\treturn this.clone()._shift(n);\n\t}\n\n\t/**\n\t * this << n\n\t * @param {KBigIntegerInputData} n\n\t * @returns {BigInteger} A << n\n\t */\n\tshiftLeft(n) {\n\t\treturn this.shift(n);\n\t}\n\n\t/**\n\t * this >> n\n\t * @param {KBigIntegerInputData} n\n\t * @returns {BigInteger} A >> n\n\t */\n\tshiftRight(n) {\n\t\treturn this.shift(-n);\n\t}\n\n\t// ----------------------\n\t// ビット演算系\n\t// ----------------------\n\t\n\t/**\n\t * Number of digits in which the number \"1\" appears first when expressed in binary.\n\t * - Return -1 If 1 is not found it.\n\t * @returns {number}\n\t */\n\tgetLowestSetBit() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn NaN;\n\t\t}\n\t\tfor(let i = 0; i < this.element.length; i++) {\n\t\t\tif(this.element[i] !==  0) {\n\t\t\t\tconst x = this.element[i];\n\t\t\t\tfor(let j = 0; j < 16; j++) {\n\t\t\t\t\tif(((x >>> j) & 1) !==  0) {\n\t\t\t\t\t\treturn i * 16 + j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Length when the number is binary.\n\t * @returns {number}\n\t */\n\tbitLength() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn NaN;\n\t\t}\n\t\tfor(let i = this.element.length - 1; i >= 0; i--) {\n\t\t\tif(this.element[i] !==  0) {\n\t\t\t\tconst x = this.element[i];\n\t\t\t\tfor(let j = 15; j >= 0; j--) {\n\t\t\t\t\tif(((x >>> j) & 1) !==  0) {\n\t\t\t\t\t\treturn i * 16 + j + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Sum that the bit is 1 when represented in the two's complement.\n\t * @returns {number}\n\t */\n\tbitCount() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn NaN;\n\t\t}\n\t\tlet target;\n\t\tif(this.sign() >= 0) {\n\t\t\ttarget = this;\n\t\t}\n\t\telse {\n\t\t\ttarget = this.add(new BigInteger(1));\n\t\t}\n\t\tconst len = target.bitLength();\n\t\tlet bit = 0;\n\t\tlet count = 0;\n\t\tfor(let i = 0;bit < len;i++) {\n\t\t\tconst x = target.element[i];\n\t\t\tfor(let j = 0;((j < 16) && (bit < len));j++, bit++) {\n\t\t\t\tif(((x >>> j) & 1) !==  0) {\n\t\t\t\t\tcount = count + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * Logical AND. (mutable)\n\t * @param {KBigIntegerInputData} number \n\t * @returns {BigInteger} A &= B\n\t * @private\n\t */\n\t_and(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst e1 = this;\n\t\tconst e2 = val;\n\t\tif((!e1.isFinite()) || (!e2.isFinite())) {\n\t\t\tlet ret;\n\t\t\tif(e1.isNaN() || e2.isNaN()) {\n\t\t\t\tret = BigInteger.NaN;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tret = BigInteger.ZERO;\n\t\t\t}\n\t\t\tret = ret.clone();\n\t\t\tthis.element = ret.element;\n\t\t\tthis.state = ret.state;\n\t\t\treturn this;\n\t\t}\n\t\tconst s1  = e1.sign(), s2 = e2.sign();\n\t\tconst len = Math.max(e1.bitLength(), e2.bitLength());\n\t\t// 引数が負の場合は、2の補数\n\t\tconst e1_array = e1.getTwosComplement(len).element;\n\t\tconst e2_array = e2.getTwosComplement(len).element;\n\t\tconst size = Math.max(e1_array.length, e2_array.length);\n\t\tthis.element = [];\n\t\tfor(let i = 0;i < size;i++) {\n\t\t\tconst x1 = (i >= e1_array.length) ? 0 : e1_array[i];\n\t\t\tconst x2 = (i >= e2_array.length) ? 0 : e2_array[i];\n\t\t\tthis.element[i] = x1 & x2;\n\t\t}\n\t\t// 配列の上位が空になる可能性があるためノーマライズが必要\n\t\tthis._memory_reduction();\n\t\t// 符号を計算\n\t\tif((s1 === 1)||(s2 === 1)) {\n\t\t\tthis.state = BIGINTEGER_NUMBER_STATE.POSITIVE_NUMBER;\n\t\t}\n\t\t// 出力が負の場合は、2の補数\n\t\telse if(this.state === BIGINTEGER_NUMBER_STATE.NEGATIVE_NUMBER) {\n\t\t\tthis.element = this.getTwosComplement(len).element;\n\t\t\t// 反転させたことで配列の上位が空になる可能性があるためノーマライズが必要\n\t\t\tthis._memory_reduction();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Logical AND.\n\t * @param {KBigIntegerInputData} number \n\t * @returns {BigInteger} A & B\n\t */\n\tand(number) {\n\t\treturn this.clone()._and(number);\n\t}\n\n\t/**\n\t * Logical OR. (mutable)\n\t * @param {KBigIntegerInputData} number \n\t * @returns {BigInteger} A |= B\n\t * @private\n\t */\n\t_or(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst e1 = this;\n\t\tconst e2 = val;\n\t\tif((!e1.isFinite()) || (!e2.isFinite())) {\n\t\t\tlet ret;\n\t\t\tif(e1.isNaN() || e2.isNaN()) {\n\t\t\t\tret = BigInteger.NaN.clone();\n\t\t\t}\n\t\t\telse if(e1.isInfinite() || e2.isInfinite()) {\n\t\t\t\tret = BigInteger.ZERO;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tret = e1.isInfinite() ? e2 : e1;\n\t\t\t}\n\t\t\tret = ret.clone();\n\t\t\tthis.element = ret.element;\n\t\t\tthis.state = ret.state;\n\t\t\treturn this;\n\t\t}\n\n\t\tconst s1  = e1.sign(), s2 = e2.sign();\n\t\tconst len = Math.max(e1.bitLength(), e2.bitLength());\n\t\t// 引数が負の場合は、2の補数\n\t\tconst e1_array = e1.getTwosComplement(len).element;\n\t\tconst e2_array = e2.getTwosComplement(len).element;\n\t\tconst size = Math.max(e1_array.length, e2_array.length);\n\t\tthis.element = [];\n\t\tfor(let i = 0;i < size;i++) {\n\t\t\tconst x1 = (i >= e1_array.length) ? 0 : e1_array[i];\n\t\t\tconst x2 = (i >= e2_array.length) ? 0 : e2_array[i];\n\t\t\tthis.element[i] = x1 | x2;\n\t\t}\n\t\t// 符号を計算\n\t\tthis.state = ((s1 === -1)||(s2 === -1)) ?\n\t\t\tBIGINTEGER_NUMBER_STATE.NEGATIVE_NUMBER :\n\t\t\t(Math.max(s1, s2) === 0 ? BIGINTEGER_NUMBER_STATE.ZERO : BIGINTEGER_NUMBER_STATE.POSITIVE_NUMBER);\n\t\t// 出力が負の場合は、2の補数\n\t\tif(this.state === BIGINTEGER_NUMBER_STATE.NEGATIVE_NUMBER) {\n\t\t\tthis.element = this.getTwosComplement(len).element;\n\t\t\t// 反転させたことで配列の上位が空になる可能性があるためノーマライズが必要\n\t\t\tthis._memory_reduction();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Logical OR.\n\t * @param {KBigIntegerInputData} number \n\t * @returns {BigInteger} A | B\n\t */\n\tor(number) {\n\t\treturn this.clone()._or(number);\n\t}\n\n\t/**\n\t * Logical Exclusive-OR. (mutable)\n\t * @param {KBigIntegerInputData} number \n\t * @returns {BigInteger} A ^= B\n\t * @private\n\t */\n\t_xor(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst e1 = this;\n\t\tconst e2 = val;\n\t\tif((!e1.isFinite()) || (!e2.isFinite())) {\n\t\t\tlet ret;\n\t\t\tif(e1.isNaN() || e2.isNaN()) {\n\t\t\t\tret = BigInteger.NaN;\n\t\t\t}\n\t\t\telse if(e1.isInfinite() || e2.isInfinite()) {\n\t\t\t\tret = BigInteger.ZERO;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tret = e1.isInfinite() ? e2 : e1; \n\t\t\t}\n\t\t\tret = ret.clone();\n\t\t\tthis.element = ret.element;\n\t\t\tthis.state = ret.state;\n\t\t\treturn this;\n\t\t}\n\t\tconst s1  = e1.sign(), s2 = e2.sign();\n\t\tconst len = Math.max(e1.bitLength(), e2.bitLength());\n\t\t// 引数が負の場合は、2の補数\n\t\tconst e1_array = e1.getTwosComplement(len).element;\n\t\tconst e2_array = e2.getTwosComplement(len).element;\n\t\tconst size = Math.max(e1_array.length, e2_array.length);\n\t\tthis.element = [];\n\t\tfor(let i = 0;i < size;i++) {\n\t\t\tconst x1 = (i >= e1_array.length) ? 0 : e1_array[i];\n\t\t\tconst x2 = (i >= e2_array.length) ? 0 : e2_array[i];\n\t\t\tthis.element[i] = x1 ^ x2;\n\t\t}\n\t\t// 配列の上位が空になる可能性があるためノーマライズが必要\n\t\tthis._memory_reduction();\n\t\t// 符号を計算\n\t\tthis.state = ((s1 !== 0)&&(s1 !== s2)) ? BIGINTEGER_NUMBER_STATE.NEGATIVE_NUMBER : BIGINTEGER_NUMBER_STATE.POSITIVE_NUMBER;\n\t\t// 出力が負の場合は、2の補数\n\t\tif(this.state === BIGINTEGER_NUMBER_STATE.NEGATIVE_NUMBER) {\n\t\t\tthis.element = this.getTwosComplement(len).element;\n\t\t\t// 反転したことでさらに空になる可能性がある\n\t\t\tthis._memory_reduction();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Logical Exclusive-OR.\n\t * @param {KBigIntegerInputData} number \n\t * @returns {BigInteger} A ^ B\n\t */\n\txor(number) {\n\t\treturn(this.clone()._xor(number));\n\t}\n\n\t/**\n\t * Logical Not.\n\t * @returns {BigInteger} A = !A\n\t * @private\n\t */\n\t_not() {\n\t\treturn(this._add(new BigInteger(1))._negate());\n\t}\n\n\t/**\n\t * Logical Not. (mutable)\n\t * @returns {BigInteger} !A\n\t */\n\tnot() {\n\t\treturn(this.clone()._not());\n\t}\n\n\t/**\n\t * this | (1 << n) (mutable)\n\t * @param {KBigIntegerInputData} bit\n\t * @returns {BigInteger}\n\t * @private\n\t */\n\t_setBit(bit) {\n\t\tconst n = BigInteger._toInteger(bit);\n\t\tthis._memory_allocation(n + 1);\n\t\tthis.element[n >>> 4] |= 1 << (n & 0xF);\n\t\tthis.state = BIGINTEGER_NUMBER_STATE.POSITIVE_NUMBER;\n\t\treturn this;\n\t}\n\n\t/**\n\t * this | (1 << n)\n\t * @param {KBigIntegerInputData} bit\n\t * @returns {BigInteger}\n\t */\n\tsetBit(bit) {\n\t\tconst n = BigInteger._toInteger(bit);\n\t\treturn this.clone()._setBit(n);\n\t}\n\n\t/**\n\t * Invert a specific bit.) (mutable)\n\t * @param {KBigIntegerInputData} bit\n\t * @returns {BigInteger}\n\t * @private\n\t */\n\t_flipBit(bit) {\n\t\tconst n = BigInteger._toInteger(bit);\n\t\tthis._memory_allocation(n + 1);\n\t\tthis.element[n >>> 4] ^= 1 << (n & 0xF);\n\t\tthis._memory_reduction();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invert a specific bit.\n\t * @param {KBigIntegerInputData} bit\n\t * @returns {BigInteger}\n\t */\n\tflipBit(bit) {\n\t\tconst n = BigInteger._toInteger(bit);\n\t\treturn this.clone()._flipBit(n);\n\t}\n\n\t/**\n\t * Lower a specific bit.\n\t * @param {KBigIntegerInputData} bit \n\t * @returns {BigInteger}\n\t */\n\tclearBit(bit) {\n\t\tconst n = BigInteger._toInteger(bit);\n\t\tconst y = this.clone();\n\t\ty.element[n >>> 4] &= ~(1 << (n & 0xF));\n\t\ty._memory_reduction();\n\t\treturn y;\n\t}\n\n\t/**\n\t * Test if a particular bit is on.\n\t * @param {KBigIntegerInputData} bit\n\t * @returns {boolean}\n\t */\n\ttestBit(bit) {\n\t\tconst n = BigInteger._toInteger(bit);\n\t\treturn ((this.element[n >>> 4] >>> (n & 0xF)) & 1) !== 0;\n\t}\n\n\t// ----------------------\n\t// テスト系\n\t// ----------------------\n\t\n\t/**\n\t * this === 0\n\t * @returns {boolean}\n\t */\n\tisZero() {\n\t\treturn this.state === BIGINTEGER_NUMBER_STATE.ZERO;\n\t}\n\t\n\t/**\n\t * this === 1\n\t * @returns {boolean}\n\t */\n\tisOne() {\n\t\treturn this.state === BIGINTEGER_NUMBER_STATE.POSITIVE_NUMBER && this.element.length === 1 && this.element[0] === 1;\n\t}\n\t\n\t/**\n\t * this > 0\n\t * @returns {boolean}\n\t */\n\tisPositive() {\n\t\treturn this.state === BIGINTEGER_NUMBER_STATE.POSITIVE_NUMBER || this.state === BIGINTEGER_NUMBER_STATE.POSITIVE_INFINITY;\n\t}\n\n\t/**\n\t * this < 0\n\t * @returns {boolean}\n\t */\n\tisNegative() {\n\t\treturn this.state === BIGINTEGER_NUMBER_STATE.NEGATIVE_NUMBER || this.state === BIGINTEGER_NUMBER_STATE.NEGATIVE_INFINITY;\n\t}\n\n\t/**\n\t * this >= 0\n\t * @returns {boolean}\n\t */\n\tisNotNegative() {\n\t\treturn this.state === BIGINTEGER_NUMBER_STATE.ZERO || this.state === BIGINTEGER_NUMBER_STATE.POSITIVE_NUMBER || this.state === BIGINTEGER_NUMBER_STATE.POSITIVE_INFINITY;\n\t}\n\t\n\t/**\n\t * this === NaN\n\t * @returns {boolean} isNaN(A)\n\t */\n\tisNaN() {\n\t\treturn this.state === BIGINTEGER_NUMBER_STATE.NOT_A_NUMBER;\n\t}\n\t\n\t/**\n\t * this === Infinity\n\t * @returns {boolean} isPositiveInfinity(A)\n\t */\n\tisPositiveInfinity() {\n\t\treturn this.state === BIGINTEGER_NUMBER_STATE.POSITIVE_INFINITY;\n\t}\n\n\t/**\n\t * this === -Infinity\n\t * @returns {boolean} isNegativeInfinity(A)\n\t */\n\tisNegativeInfinity() {\n\t\treturn this.state === BIGINTEGER_NUMBER_STATE.NEGATIVE_INFINITY;\n\t}\n\n\t/**\n\t * this === Infinity or -Infinity\n\t * @returns {boolean} isPositiveInfinity(A) || isNegativeInfinity(A)\n\t */\n\tisInfinite() {\n\t\treturn this.isPositiveInfinity() || this.isNegativeInfinity();\n\t}\n\t\n\t/**\n\t * Return true if the value is finite number.\n\t * @returns {boolean} !isNaN(A) && !isInfinite(A)\n\t */\n\tisFinite() {\n\t\treturn !this.isNaN() && !this.isInfinite();\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * -1\n\t * @returns {BigInteger} -1\n\t */\n\tstatic get MINUS_ONE() {\n\t\treturn DEFINE.MINUS_ONE;\n\t}\n\t\n\t/**\n\t * 0\n\t * @returns {BigInteger} 0\n\t */\n\tstatic get ZERO() {\n\t\treturn DEFINE.ZERO;\n\t}\n\n\t/**\n\t * 1\n\t * @returns {BigInteger} 1\n\t */\n\tstatic get ONE() {\n\t\treturn DEFINE.ONE;\n\t}\n\t\n\t/**\n\t * 2\n\t * @returns {BigInteger} 2\n\t */\n\tstatic get TWO() {\n\t\treturn DEFINE.TWO;\n\t}\n\t\n\t/**\n\t * 10\n\t * @returns {BigInteger} 10\n\t */\n\tstatic get TEN() {\n\t\treturn DEFINE.TEN;\n\t}\n\n\t/**\n\t * Positive infinity.\n\t * @returns {BigInteger} Infinity\n\t */\n\tstatic get POSITIVE_INFINITY() {\n\t\treturn DEFINE.POSITIVE_INFINITY;\n\t}\n\t\n\t/**\n\t * Negative Infinity.\n\t * @returns {BigInteger} -Infinity\n\t */\n\tstatic get NEGATIVE_INFINITY() {\n\t\treturn DEFINE.NEGATIVE_INFINITY;\n\t}\n\n\t/**\n\t * Not a Number.\n\t * @returns {BigInteger} NaN\n\t */\n\tstatic get NaN() {\n\t\treturn DEFINE.NaN;\n\t}\n\n\t// ----------------------\n\t// 互換性\n\t// ----------------------\n\t\n\t/**\n\t * The positive or negative sign of this number.\n\t * - +1 if positive, -1 if negative, 0 if 0.\n\t * @returns {number}\n\t */\n\tsignum() {\n\t\treturn this.sign();\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {KBigIntegerInputData} number\n\t * @returns {BigInteger} A - B\n\t */\n\tsubtract(number) {\n\t\treturn this.sub(number);\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {KBigIntegerInputData} number\n\t * @returns {BigInteger} A * B\n\t */\n\tmultiply(number) {\n\t\treturn this.mul(number);\n\t}\n\n\t/**\n\t * Divide.\n\t * @param {KBigIntegerInputData} number\n\t * @returns {BigInteger} fix(A / B)\n\t */\n\tdivide(number) {\n\t\treturn this.div(number);\n\t}\n\n\t/**\n\t * Remainder of division.\n\t * - Result has same sign as the Dividend.\n\t * @param {KBigIntegerInputData} number\n\t * @returns {BigInteger} A % B\n\t */\n\tremainder(number) {\n\t\treturn this.rem(number);\n\t}\n\n}\n\n/**\n * Collection of constant values used in the class.\n * @ignore\n */\nconst DEFINE = {\n\n\t/**\n\t * -1\n\t */\n\tMINUS_ONE : new BigInteger(-1),\n\n\t/**\n\t * 0\n\t */\n\tZERO : new BigInteger(0),\n\t\n\t/**\n\t * 1\n\t */\n\tONE : new BigInteger(1),\n\n\t/**\n\t * 2\n\t */\n\tTWO : new BigInteger(2),\n\n\t/**\n\t * 10\n\t */\n\tTEN : new BigInteger(10),\n\n\t/**\n\t * Positive infinity.\n\t */\n\tPOSITIVE_INFINITY : new BigInteger(Number.POSITIVE_INFINITY),\n\n\t/**\n\t * Negative Infinity.\n\t */\n\tNEGATIVE_INFINITY : new BigInteger(Number.NEGATIVE_INFINITY),\n\n\t/**\n\t * Not a Number.\n\t */\n\tNaN : new BigInteger(Number.NaN)\n};\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/core/BigInteger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 288,
    "kind": "typedef",
    "name": "KBigIntegerInputData",
    "memberof": "src/math/core/BigInteger.js",
    "static": true,
    "longname": "src/math/core/BigInteger.js~KBigIntegerInputData",
    "access": "public",
    "description": "BigInteger type argument.\n- BigInteger\n- number\n- string\n- Array<string|number>\n- {toBigInteger:function}\n- {intValue:number}\n- {toString:function}\n\nInitialization can be performed as follows.\n- 1200, \"1200\", \"12e2\", \"1.2e3\", [\"1200\", 10]\n- \"0xff\", [\"ff\", 16]\n- \"0o01234567\", [\"01234567\", 8]\n- \"0b0110101\", [\"0110101\", 2]",
    "type": {
      "types": [
        "BigInteger|number|boolean|string|Array<string|number>|{toBigInteger:function}|{intValue:number}|{toString:function}"
      ],
      "optional": false,
      "name": "KBigIntegerInputData"
    }
  },
  {
    "__docId__": 289,
    "kind": "variable",
    "name": "DEFAULT_RANDOM",
    "memberof": "src/math/core/BigInteger.js",
    "static": true,
    "longname": "src/math/core/BigInteger.js~DEFAULT_RANDOM",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/BigInteger.js",
    "importStyle": null,
    "description": "Random number class to be used when the random number class is not set.",
    "lineNumber": 42,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Random"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 290,
    "kind": "class",
    "name": "BigIntegerTool",
    "memberof": "src/math/core/BigInteger.js",
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigIntegerTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/BigInteger.js",
    "importStyle": null,
    "description": "Collection of functions used in BigInteger.",
    "lineNumber": 48,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "toHexadecimalArrayFromPlainString",
    "memberof": "src/math/core/BigInteger.js~BigIntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigIntegerTool.toHexadecimalArrayFromPlainString",
    "access": "public",
    "description": "Return a hex array from a string containing numbers.",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} Hex array."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "String containing a number (remove the negative sign)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radix",
        "description": "Base number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "Hex array."
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "toPlainStringFromString",
    "memberof": "src/math/core/BigInteger.js~BigIntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigIntegerTool.toPlainStringFromString",
    "access": "public",
    "description": "Remove exponent notation in strings representing unsigned numbers.",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ntext",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "toBigIntegerFromNumber",
    "memberof": "src/math/core/BigInteger.js~BigIntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigIntegerTool.toBigIntegerFromNumber",
    "access": "public",
    "description": "Return a hexadecimal array from the number.",
    "lineNumber": 170,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{element : Array<number>, state : number}} Data for BigInteger."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "Target number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{element : Array<number>, state : number}"
      ],
      "spread": false,
      "description": "Data for BigInteger."
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "toPlainStringFromHexadecimalArray",
    "memberof": "src/math/core/BigInteger.js~BigIntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigIntegerTool.toPlainStringFromHexadecimalArray",
    "access": "public",
    "description": "Return string of number from a hexadecimal array.",
    "lineNumber": 239,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} Numeric array for each digit in the specified base number."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "binary",
        "description": "Hex array."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radix",
        "description": "Base number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "Numeric array for each digit in the specified base number."
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "isZeroElement",
    "memberof": "src/math/core/BigInteger.js~BigIntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigIntegerTool.isZeroElement",
    "access": "public",
    "description": "",
    "lineNumber": 281,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "toBigIntegerFromString",
    "memberof": "src/math/core/BigInteger.js~BigIntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigIntegerTool.toBigIntegerFromString",
    "access": "public",
    "description": "Return data to represent multi-precision numbers from strings.",
    "lineNumber": 297,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{element : Array<number>, state : number}} Data for BigInteger."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "String containing a number."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "radix",
        "description": "Base number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{element : Array<number>, state : number}"
      ],
      "spread": false,
      "description": "Data for BigInteger."
    }
  },
  {
    "__docId__": 297,
    "kind": "variable",
    "name": "BIGINTEGER_NUMBER_STATE",
    "memberof": "src/math/core/BigInteger.js",
    "static": true,
    "longname": "src/math/core/BigInteger.js~BIGINTEGER_NUMBER_STATE",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/BigInteger.js",
    "importStyle": null,
    "description": "Numeric state.",
    "lineNumber": 372,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "{ZERO:number, POSITIVE_NUMBER:number, NEGATIVE_NUMBER:number, NOT_A_NUMBER:number, POSITIVE_INFINITY:number, NEGATIVE_INFINITY:number}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 298,
    "kind": "class",
    "name": "BigInteger",
    "memberof": "src/math/core/BigInteger.js",
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigInteger",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/core/BigInteger.js",
    "importStyle": "BigInteger",
    "description": "Arbitrary-precision integer class (immutable).",
    "lineNumber": 391,
    "interface": false
  },
  {
    "__docId__": 299,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#constructor",
    "access": "public",
    "description": "Create an arbitrary-precision integer.\n\nInitialization can be performed as follows.\n- 1200, \"1200\", \"12e2\", \"1.2e3\", [\"1200\", 10]\n- \"0xff\", [\"ff\", 16]\n- \"0o01234567\", [\"01234567\", 8]\n- \"0b0110101\", [\"0110101\", 2]",
    "lineNumber": 403,
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "number",
        "description": "Numeric data. See how to use the function."
      }
    ]
  },
  {
    "__docId__": 300,
    "kind": "member",
    "name": "state",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#state",
    "access": "private",
    "description": "Numeric state.",
    "lineNumber": 410,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "element",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#element",
    "access": "private",
    "description": "An integer consisting of 16 bits per element of the array.",
    "lineNumber": 419,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "create",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigInteger.create",
    "access": "public",
    "description": "Create an entity object of this class.",
    "lineNumber": 483,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigInteger.valueOf",
    "access": "public",
    "description": "Create an arbitrary-precision integer.\n- Does not support strings using exponential notation.\n- If you want to initialize with the specified base number, please set up with an array [\"ff\", 16].",
    "lineNumber": 499,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "_toBigInteger",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigInteger._toBigInteger",
    "access": "private",
    "description": "Convert to BigInteger.\nIf type conversion is unnecessary, return the value as it is.",
    "lineNumber": 510,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "_toFloat",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigInteger._toFloat",
    "access": "private",
    "description": "Convert to real number.",
    "lineNumber": 525,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "_toInteger",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigInteger._toInteger",
    "access": "private",
    "description": "Convert to integer.",
    "lineNumber": 543,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "createRandomBigInteger",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigInteger.createRandomBigInteger",
    "access": "public",
    "description": "Random number of specified bit length.",
    "lineNumber": 561,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "bitsize",
        "description": "Bit length."
      },
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": true,
        "name": "random",
        "description": "Class for creating random numbers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#toString",
    "access": "public",
    "description": "Convert to string.",
    "lineNumber": 597,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "radix",
        "description": "Base number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#clone",
    "access": "public",
    "description": "Deep copy.",
    "lineNumber": 639,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "getTwosComplement",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#getTwosComplement",
    "access": "private",
    "description": "Create a numerical value for addition. If negative, two's complement.",
    "lineNumber": 649,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "bit_length",
        "description": "Bit length. If not set, it will be calculated automatically."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "_memory_allocation",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#_memory_allocation",
    "access": "private",
    "description": "Expand memory to specified bit length. (mutable)",
    "lineNumber": 683,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bit_length",
        "description": "Bit length."
      }
    ],
    "return": null
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "_memory_reduction",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#_memory_reduction",
    "access": "private",
    "description": "Normalization of the internal data. (mutable)",
    "lineNumber": 701,
    "params": [],
    "return": null
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "_abs",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#_abs",
    "access": "private",
    "description": "Absolute value. (mutable)",
    "lineNumber": 724,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A = abs(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A = abs(A)"
    },
    "params": []
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "abs",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#abs",
    "access": "public",
    "description": "Absolute value.",
    "lineNumber": 739,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} abs(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "abs(A)"
    },
    "params": []
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "_negate",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#_negate",
    "access": "private",
    "description": "this *= -1",
    "lineNumber": 748,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A = -A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A = -A"
    },
    "params": []
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "negate",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#negate",
    "access": "public",
    "description": "this * -1",
    "lineNumber": 768,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} -A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A"
    },
    "params": []
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "sign",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#sign",
    "access": "public",
    "description": "The positive or negative sign of this number.\n- +1 if positive, -1 if negative, 0 if 0.",
    "lineNumber": 777,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "_add",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#_add",
    "access": "private",
    "description": "Add. (mutable)",
    "lineNumber": 802,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A += B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A += B"
    }
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#add",
    "access": "public",
    "description": "Add.",
    "lineNumber": 877,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A + B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A + B"
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "_sub",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#_sub",
    "access": "private",
    "description": "Subtract. (mutable)",
    "lineNumber": 887,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A -= B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A -= B"
    }
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "sub",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#sub",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 901,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "_mul",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#_mul",
    "access": "private",
    "description": "Multiply. (mutable)",
    "lineNumber": 911,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A *= B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A *= B"
    }
  },
  {
    "__docId__": 355,
    "kind": "method",
    "name": "mul",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#mul",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 923,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "_divideAndRemainder",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#_divideAndRemainder",
    "access": "private",
    "description": "Divide and rem. (mutable)",
    "lineNumber": 998,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<BigInteger>} [C = fix(A / B), A - C * B]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<BigInteger>"
      ],
      "spread": false,
      "description": "[C = fix(A / B), A - C * B]"
    }
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "divideAndRemainder",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#divideAndRemainder",
    "access": "public",
    "description": "Divide and rem.",
    "lineNumber": 1067,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<BigInteger>} [C = fix(A / B), A - C * B]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<BigInteger>"
      ],
      "spread": false,
      "description": "[C = fix(A / B), A - C * B]"
    }
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "_div",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#_div",
    "access": "private",
    "description": "Divide. (mutable)",
    "lineNumber": 1077,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} fix(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "fix(A / B)"
    }
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "div",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#div",
    "access": "public",
    "description": "Divide.",
    "lineNumber": 1086,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} fix(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "fix(A / B)"
    }
  },
  {
    "__docId__": 360,
    "kind": "method",
    "name": "_rem",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#_rem",
    "access": "private",
    "description": "Remainder of division. (mutable)\n- Result has same sign as the Dividend.",
    "lineNumber": 1097,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A %= B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A %= B"
    }
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "rem",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#rem",
    "access": "public",
    "description": "Remainder of division.\n- Result has same sign as the Dividend.",
    "lineNumber": 1110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A % B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A % B"
    }
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "_mod",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#_mod",
    "access": "private",
    "description": "Modulo, positive rem of division. (mutable)\n- Result has same sign as the Divisor.",
    "lineNumber": 1121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A = A mod B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A = A mod B"
    }
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "mod",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#mod",
    "access": "public",
    "description": "Modulo, positive rem of division.\n- Result has same sign as the Divisor.",
    "lineNumber": 1142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A mod B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A mod B"
    }
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "modPow",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#modPow",
    "access": "public",
    "description": "Modular exponentiation.",
    "lineNumber": 1152,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A^B mod m"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exponent",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A^B mod m"
    }
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "modInverse",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#modInverse",
    "access": "public",
    "description": "Modular multiplicative inverse.",
    "lineNumber": 1175,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A^(-1) mod m"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A^(-1) mod m"
    }
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#factorial",
    "access": "public",
    "description": "Factorial function, x!.",
    "lineNumber": 1197,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} n!"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "n!"
    },
    "params": []
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "scaleByPowerOfTen",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#scaleByPowerOfTen",
    "access": "public",
    "description": "Multiply a multiple of ten.",
    "lineNumber": 1219,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} x * 10^n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "x * 10^n"
    }
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "pow",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#pow",
    "access": "public",
    "description": "Power function.",
    "lineNumber": 1241,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} pow(A, B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exponent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "pow(A, B)"
    }
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "square",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#square",
    "access": "public",
    "description": "Square.",
    "lineNumber": 1313,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A^2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A^2"
    },
    "params": []
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "sqrt",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#sqrt",
    "access": "public",
    "description": "Square root.",
    "lineNumber": 1321,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} floor(sqrt(A))"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "floor(sqrt(A))"
    },
    "params": []
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "cbrt",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#cbrt",
    "access": "public",
    "description": "Cube root.",
    "lineNumber": 1374,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} floor(cbrt(A))"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "floor(cbrt(A))"
    },
    "params": []
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "log2",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#log2",
    "access": "public",
    "description": "log_2(x)",
    "lineNumber": 1415,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} log2(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "log2(A)"
    },
    "params": []
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "log10",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#log10",
    "access": "public",
    "description": "log_10(x)",
    "lineNumber": 1437,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} log10(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "log10(A)"
    },
    "params": []
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "setDefaultRandom",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigInteger.setDefaultRandom",
    "access": "public",
    "description": "Set default class of random.\nThis is used if you do not specify a random number.",
    "lineNumber": 1464,
    "params": [
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": false,
        "name": "random",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "getDefaultRandom",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigInteger.getDefaultRandom",
    "access": "public",
    "description": "Return default Random class.\nUsed when Random not specified explicitly.",
    "lineNumber": 1473,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Random}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Random"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "getShort",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#getShort",
    "access": "public",
    "description": "Value at the specified position of the internally used array that composed of hexadecimal numbers.",
    "lineNumber": 1486,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": "Array address."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 381,
    "kind": "get",
    "name": "booleanValue",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#booleanValue",
    "access": "public",
    "description": "boolean value.",
    "lineNumber": 1498,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "get",
    "name": "intValue",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#intValue",
    "access": "public",
    "description": "32-bit integer value.\n- If it is outside the range of JavaScript Number, it will not be an accurate number.",
    "lineNumber": 1507,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "get",
    "name": "longValue",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#longValue",
    "access": "public",
    "description": "64-bit integer value.\n- If it is outside the range of JavaScript Number, it will not be an accurate number.",
    "lineNumber": 1525,
    "deprecated": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "get",
    "name": "doubleValue",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#doubleValue",
    "access": "public",
    "description": "64-bit floating point.\n- If it is outside the range of JavaScript Number, it will not be an accurate number.",
    "lineNumber": 1545,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "toBigInteger",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#toBigInteger",
    "access": "public",
    "description": "return BigInteger.",
    "lineNumber": 1560,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "toBigDecimal",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#toBigDecimal",
    "access": "public",
    "description": "return BigDecimal.",
    "lineNumber": 1569,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "MathContext setting after calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 387,
    "kind": "method",
    "name": "toFraction",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#toFraction",
    "access": "public",
    "description": "return Fraction.",
    "lineNumber": 1582,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "toComplex",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#toComplex",
    "access": "public",
    "description": "return Complex.",
    "lineNumber": 1590,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "toMatrix",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#toMatrix",
    "access": "public",
    "description": "return Matrix.",
    "lineNumber": 1598,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 390,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#equals",
    "access": "public",
    "description": "Equals.",
    "lineNumber": 1611,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 391,
    "kind": "method",
    "name": "compareToAbs",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#compareToAbs",
    "access": "public",
    "description": "Compare values without sign.",
    "lineNumber": 1644,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} abs(A) > abs(B) ? 1 : (abs(A) === abs(B) ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "abs(A) > abs(B) ? 1 : (abs(A) === abs(B) ? 0 : -1)"
    }
  },
  {
    "__docId__": 392,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#compareTo",
    "access": "public",
    "description": "Compare values.",
    "lineNumber": 1681,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A > B ? 1 : (A === B ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A > B ? 1 : (A === B ? 0 : -1)"
    }
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "equalsState",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#equalsState",
    "access": "public",
    "description": "Numeric type match.",
    "lineNumber": 1719,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#max",
    "access": "public",
    "description": "Maximum number.",
    "lineNumber": 1730,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#min",
    "access": "public",
    "description": "Minimum number.",
    "lineNumber": 1745,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "clip",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#clip",
    "access": "public",
    "description": "Clip number within range.",
    "lineNumber": 1761,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} min(max(x, min), max)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "min(max(x, min), max)"
    }
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "gcd",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#gcd",
    "access": "public",
    "description": "Euclidean algorithm.",
    "lineNumber": 1792,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} gcd(x, y)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "gcd(x, y)"
    }
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "extgcd",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#extgcd",
    "access": "public",
    "description": "Extended Euclidean algorithm.",
    "lineNumber": 1816,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<BigInteger>} [a, b, gcd(x, y)], Result of calculating a*x + b*y = gcd(x, y)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<BigInteger>"
      ],
      "spread": false,
      "description": "[a, b, gcd(x, y)], Result of calculating a*x + b*y = gcd(x, y)."
    }
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "lcm",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#lcm",
    "access": "public",
    "description": "Least common multiple.",
    "lineNumber": 1851,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} lcm(x, y)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "lcm(x, y)"
    }
  },
  {
    "__docId__": 400,
    "kind": "method",
    "name": "probablePrime",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigInteger.probablePrime",
    "access": "public",
    "description": "Prime represented within the specified bit length.",
    "lineNumber": 1871,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "bits",
        "description": "Bit length."
      },
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": true,
        "name": "random",
        "description": "Class for creating random numbers."
      },
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "certainty",
        "description": "Repeat count (prime precision)."
      },
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "500",
        "defaultRaw": 500,
        "name": "create_count",
        "description": "Number of times to retry if prime generation fails."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 401,
    "kind": "method",
    "name": "isPrime",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#isPrime",
    "access": "public",
    "description": "Return true if the value is prime number.\n- Calculate up to `2251799813685248(=2^51)`.",
    "lineNumber": 1889,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - If the calculation range is exceeded, null is returned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "If the calculation range is exceeded, null is returned."
    },
    "params": []
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "isProbablePrime",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#isProbablePrime",
    "access": "public",
    "description": "Return true if the value is prime number by Miller-Labin prime number determination method.\n\nAttention : it takes a very long time to process.",
    "lineNumber": 1924,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "certainty",
        "description": "Repeat count (prime precision)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "nextProbablePrime",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#nextProbablePrime",
    "access": "public",
    "description": "Next prime.",
    "lineNumber": 1988,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "certainty",
        "description": "Repeat count (prime precision)."
      },
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100000",
        "defaultRaw": 100000,
        "name": "search_max",
        "description": "Search range of next prime."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "_shift",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#_shift",
    "access": "private",
    "description": "this <<= n",
    "lineNumber": 2014,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A <<= n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "shift_length",
        "description": "Bit shift size."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A <<= n"
    }
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "shift",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#shift",
    "access": "public",
    "description": "this << n",
    "lineNumber": 2109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A << n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A << n"
    }
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "shiftLeft",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#shiftLeft",
    "access": "public",
    "description": "this << n",
    "lineNumber": 2118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A << n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A << n"
    }
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "shiftRight",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#shiftRight",
    "access": "public",
    "description": "this >> n",
    "lineNumber": 2127,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A >> n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A >> n"
    }
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "getLowestSetBit",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#getLowestSetBit",
    "access": "public",
    "description": "Number of digits in which the number \"1\" appears first when expressed in binary.\n- Return -1 If 1 is not found it.",
    "lineNumber": 2140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "bitLength",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#bitLength",
    "access": "public",
    "description": "Length when the number is binary.",
    "lineNumber": 2161,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "bitCount",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#bitCount",
    "access": "public",
    "description": "Sum that the bit is 1 when represented in the two's complement.",
    "lineNumber": 2182,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "_and",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#_and",
    "access": "private",
    "description": "Logical AND. (mutable)",
    "lineNumber": 2213,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A &= B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A &= B"
    }
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "and",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#and",
    "access": "public",
    "description": "Logical AND.",
    "lineNumber": 2262,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A & B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A & B"
    }
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "_or",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#_or",
    "access": "private",
    "description": "Logical OR. (mutable)",
    "lineNumber": 2272,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A |= B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A |= B"
    }
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "or",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#or",
    "access": "public",
    "description": "Logical OR.",
    "lineNumber": 2323,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A | B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A | B"
    }
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "_xor",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#_xor",
    "access": "private",
    "description": "Logical Exclusive-OR. (mutable)",
    "lineNumber": 2333,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A ^= B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A ^= B"
    }
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "xor",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#xor",
    "access": "public",
    "description": "Logical Exclusive-OR.",
    "lineNumber": 2383,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A ^ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A ^ B"
    }
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "_not",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#_not",
    "access": "private",
    "description": "Logical Not.",
    "lineNumber": 2392,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A = !A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A = !A"
    },
    "params": []
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "not",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#not",
    "access": "public",
    "description": "Logical Not. (mutable)",
    "lineNumber": 2400,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} !A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "!A"
    },
    "params": []
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "_setBit",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#_setBit",
    "access": "private",
    "description": "this | (1 << n) (mutable)",
    "lineNumber": 2410,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "setBit",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#setBit",
    "access": "public",
    "description": "this | (1 << n)",
    "lineNumber": 2423,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "_flipBit",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#_flipBit",
    "access": "private",
    "description": "Invert a specific bit.) (mutable)",
    "lineNumber": 2434,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "flipBit",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#flipBit",
    "access": "public",
    "description": "Invert a specific bit.",
    "lineNumber": 2447,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 439,
    "kind": "method",
    "name": "clearBit",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#clearBit",
    "access": "public",
    "description": "Lower a specific bit.",
    "lineNumber": 2457,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "testBit",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#testBit",
    "access": "public",
    "description": "Test if a particular bit is on.",
    "lineNumber": 2470,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "isZero",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#isZero",
    "access": "public",
    "description": "this === 0",
    "lineNumber": 2483,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "isOne",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#isOne",
    "access": "public",
    "description": "this === 1",
    "lineNumber": 2491,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "isPositive",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#isPositive",
    "access": "public",
    "description": "this > 0",
    "lineNumber": 2499,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "isNegative",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#isNegative",
    "access": "public",
    "description": "this < 0",
    "lineNumber": 2507,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "isNotNegative",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#isNotNegative",
    "access": "public",
    "description": "this >= 0",
    "lineNumber": 2515,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "isNaN",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#isNaN",
    "access": "public",
    "description": "this === NaN",
    "lineNumber": 2523,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isNaN(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isNaN(A)"
    },
    "params": []
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "isPositiveInfinity",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#isPositiveInfinity",
    "access": "public",
    "description": "this === Infinity",
    "lineNumber": 2531,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isPositiveInfinity(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isPositiveInfinity(A)"
    },
    "params": []
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "isNegativeInfinity",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#isNegativeInfinity",
    "access": "public",
    "description": "this === -Infinity",
    "lineNumber": 2539,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isNegativeInfinity(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isNegativeInfinity(A)"
    },
    "params": []
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "isInfinite",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#isInfinite",
    "access": "public",
    "description": "this === Infinity or -Infinity",
    "lineNumber": 2547,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isPositiveInfinity(A) || isNegativeInfinity(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isPositiveInfinity(A) || isNegativeInfinity(A)"
    },
    "params": []
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "isFinite",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#isFinite",
    "access": "public",
    "description": "Return true if the value is finite number.",
    "lineNumber": 2555,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} !isNaN(A) && !isInfinite(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "!isNaN(A) && !isInfinite(A)"
    },
    "params": []
  },
  {
    "__docId__": 451,
    "kind": "get",
    "name": "MINUS_ONE",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigInteger.MINUS_ONE",
    "access": "public",
    "description": "-1",
    "lineNumber": 2567,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} -1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 452,
    "kind": "get",
    "name": "ZERO",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigInteger.ZERO",
    "access": "public",
    "description": "0",
    "lineNumber": 2575,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "0"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 453,
    "kind": "get",
    "name": "ONE",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigInteger.ONE",
    "access": "public",
    "description": "1",
    "lineNumber": 2583,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} 1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 454,
    "kind": "get",
    "name": "TWO",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigInteger.TWO",
    "access": "public",
    "description": "2",
    "lineNumber": 2591,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} 2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "2"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 455,
    "kind": "get",
    "name": "TEN",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigInteger.TEN",
    "access": "public",
    "description": "10",
    "lineNumber": 2599,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} 10"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "10"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "get",
    "name": "POSITIVE_INFINITY",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigInteger.POSITIVE_INFINITY",
    "access": "public",
    "description": "Positive infinity.",
    "lineNumber": 2607,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} Infinity"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "Infinity"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 457,
    "kind": "get",
    "name": "NEGATIVE_INFINITY",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigInteger.NEGATIVE_INFINITY",
    "access": "public",
    "description": "Negative Infinity.",
    "lineNumber": 2615,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} -Infinity"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "Infinity"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 458,
    "kind": "get",
    "name": "NaN",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/BigInteger.js~BigInteger.NaN",
    "access": "public",
    "description": "Not a Number.",
    "lineNumber": 2623,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} NaN"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "NaN"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "signum",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#signum",
    "access": "public",
    "description": "The positive or negative sign of this number.\n- +1 if positive, -1 if negative, 0 if 0.",
    "lineNumber": 2636,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 460,
    "kind": "method",
    "name": "subtract",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#subtract",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 2645,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "multiply",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#multiply",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 2654,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "divide",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#divide",
    "access": "public",
    "description": "Divide.",
    "lineNumber": 2663,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} fix(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "fix(A / B)"
    }
  },
  {
    "__docId__": 463,
    "kind": "method",
    "name": "remainder",
    "memberof": "src/math/core/BigInteger.js~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/BigInteger.js~BigInteger#remainder",
    "access": "public",
    "description": "Remainder of division.\n- Result has same sign as the Dividend.",
    "lineNumber": 2673,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A % B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KBigIntegerInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A % B"
    }
  },
  {
    "__docId__": 464,
    "kind": "variable",
    "name": "DEFINE",
    "memberof": "src/math/core/BigInteger.js",
    "static": true,
    "longname": "src/math/core/BigInteger.js~DEFINE",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/BigInteger.js",
    "importStyle": null,
    "description": "Collection of constant values used in the class.",
    "lineNumber": 2683,
    "ignore": true,
    "type": {
      "types": [
        "{\"MINUS_ONE\": *, \"ZERO\": *, \"ONE\": *, \"TWO\": *, \"TEN\": *, \"POSITIVE_INFINITY\": *, \"NEGATIVE_INFINITY\": *, \"NaN\": *}"
      ]
    }
  },
  {
    "__docId__": 465,
    "kind": "file",
    "name": "src/math/core/Complex.js",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Polyfill from \"../tools/Polyfill.js\";\nimport Probability from \"./tools/Probability.js\";\nimport Random from \"./tools/Random.js\";\nimport Matrix from \"./Matrix.js\";\nimport BigInteger from \"./BigInteger.js\";\nimport BigDecimal from \"./BigDecimal.js\";\nimport Fraction from \"./Fraction.js\";\nimport MathContext from \"./context/MathContext.js\";\n\n/**\n * Complex type argument.\n * - Complex\n * - number\n * - boolean\n * - string\n * - Array<number>\n * - {_re:number,_im:number}\n * - {doubleValue:number}\n * - {toString:function}\n * \n * Initialization can be performed as follows.\n * - 1200, \"1200\", \"12e2\", \"1.2e3\"\n * - \"3 + 4i\", \"4j + 3\", [3, 4].\n * @typedef {Complex|number|boolean|string|Array<number>|{_re:number,_im:number}|{doubleValue:number}|{toString:function}} KComplexInputData\n */\n\n/**\n * Random number generation class used within Complex.\n * @type {Random}\n * @ignore\n */\nconst random_class = new Random();\n\n/**\n * Collection of functions used in Complex.\n * @ignore\n */\nclass ComplexTool {\n\n\t/**\n\t * Create data for complex numbers from strings.\n\t * @param {string} text - Target strings.\n\t * @returns {{real : number, imag : number}}\n\t */\n\tstatic ToComplexFromString(text) {\n\t\tlet str = text.replace(/\\s/g, \"\").toLowerCase();\n\t\tstr = str.replace(/infinity|inf/g, \"1e100000\");\n\t\t// 複素数の宣言がない場合\n\t\tif(!(/[ij]/.test(str))) {\n\t\t\treturn {\n\t\t\t\treal : parseFloat(str),\n\t\t\t\timag : 0.0\n\t\t\t};\n\t\t}\n\t\t// この時点で複素数である。\n\t\t// 以下真面目に調査\n\t\tlet re = 0;\n\t\tlet im = 0;\n\t\tlet buff;\n\t\t// 最後が$なら右側が実数、最後が[+-]なら左側が実数\n\t\tbuff = str.match(/[+-]?(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))($|[+-])/);\n\t\tif(buff) {\n\t\t\tre = parseFloat(buff[0]);\n\t\t}\n\t\t// 複素数は数値が省略される場合がある\n\t\tbuff = str.match(/[+-]?(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))?[ij]/);\n\t\tif(buff) {\n\t\t\tbuff = buff[0].substring(0, buff[0].length - 1);\n\t\t\t// i, +i, -j のように実数部がなく、数値もない場合\n\t\t\tif((/^[-+]$/.test(buff)) || buff.length === 0) {\n\t\t\t\tim = buff === \"-\" ? -1 : 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tim = parseFloat(buff);\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\treal : re,\n\t\t\timag : im\n\t\t};\n\t}\n\n}\n\n/**\n * Complex number class. (immutable)\n */\nexport default class Complex {\n\n\t/**\n\t * Create a complex number.\n\t * \n\t * Initialization can be performed as follows.\n\t * - 1200, \"1200\", \"12e2\", \"1.2e3\"\n\t * - \"3 + 4i\", \"4j + 3\", [3, 4].\n\t * @param {KComplexInputData} number - Complex number. See how to use the function.\n\t */\n\tconstructor(number) {\n\t\t// 行列で使うためイミュータブルは必ず守ること。\n\t\tif(arguments.length === 1) {\n\t\t\tconst obj = number;\n\t\t\tif(obj instanceof Complex) {\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * The real part of this Comlex.\n\t\t\t\t * @private\n\t\t\t\t * @type {number}\n\t\t\t\t */\n\t\t\t\tthis._re = obj._re;\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * The imaginary part of this Comlex.\n\t\t\t\t * @private\n\t\t\t\t * @type {number}\n\t\t\t\t */\n\t\t\t\tthis._im = obj._im;\n\t\t\t}\n\t\t\telse if(typeof obj === \"number\") {\n\t\t\t\tthis._re = obj;\n\t\t\t\tthis._im = 0.0;\n\t\t\t}\n\t\t\telse if(typeof obj === \"string\") {\n\t\t\t\tconst x = ComplexTool.ToComplexFromString(obj);\n\t\t\t\tthis._re = x.real;\n\t\t\t\tthis._im = x.imag;\n\t\t\t}\n\t\t\telse if(obj instanceof Array) {\n\t\t\t\tif(obj.length === 2) {\n\t\t\t\t\tthis._re = obj[0];\n\t\t\t\t\tthis._im = obj[1];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow \"Complex Unsupported argument \" + arguments;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(typeof obj === \"boolean\") {\n\t\t\t\tthis._re = obj ? 1 : 0;\n\t\t\t\tthis._im = 0.0;\n\t\t\t}\n\t\t\telse if(\"doubleValue\" in obj) {\n\t\t\t\tthis._re = obj.doubleValue;\n\t\t\t\tthis._im = 0.0;\n\t\t\t}\n\t\t\telse if((\"_re\" in obj) && (\"_im\" in obj)) {\n\t\t\t\tthis._re = obj._re;\n\t\t\t\tthis._im = obj._im;\n\t\t\t}\n\t\t\telse if(obj instanceof Object) {\n\t\t\t\tconst x = ComplexTool.ToComplexFromString(obj.toString());\n\t\t\t\tthis._re = x.real;\n\t\t\t\tthis._im = x.imag;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow \"Complex Unsupported argument \" + arguments;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow \"Complex Many arguments : \" + arguments.length;\n\t\t}\n\t}\n\n\t/**\n\t * Create an entity object of this class.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex}\n\t */\n\tstatic create(number) {\n\t\tif(number instanceof Complex) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new Complex(number);\n\t\t}\n\t}\n\t\n\t/**\n\t * Convert number to Complex type.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex}\n\t */\n\tstatic valueOf(number) {\n\t\treturn Complex.create(number);\n\t}\n\t\n\t/**\n\t * Convert to Complex.\n\t * If type conversion is unnecessary, return the value as it is.\n\t * @param {KComplexInputData} number \n\t * @returns {Complex}\n\t * @private\n\t */\n\tstatic _toComplex(number) {\n\t\tif(number instanceof Complex) {\n\t\t\treturn number;\n\t\t}\n\t\telse if(number instanceof Matrix) {\n\t\t\t// @ts-ignore\n\t\t\treturn Matrix._toComplex(number);\n\t\t}\n\t\telse {\n\t\t\treturn new Complex(number);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to real number.\n\t * @param {KComplexInputData} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toDouble(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn number;\n\t\t}\n\t\tconst complex_number = Complex._toComplex(number);\n\t\tif(complex_number.isReal()) {\n\t\t\treturn complex_number.real;\n\t\t}\n\t\telse {\n\t\t\tthrow \"not support complex numbers.[\" + number + \"]\";\n\t\t}\n\t}\n\n\t/**\n\t * Convert to integer.\n\t * @param {KComplexInputData} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toInteger(number) {\n\t\treturn Math.trunc(Complex._toDouble(number));\n\t}\n\n\t/**\n\t * Deep copy.\n\t * @returns {Complex} \n\t */\n\tclone() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Convert to string.\n\t * @returns {string} \n\t */\n\ttoString() {\n\t\t/**\n\t\t * @type {function(number): string }\n\t\t */\n\t\tconst formatG = function(x) {\n\t\t\tlet numstr = x.toPrecision(6);\n\t\t\tif(numstr.indexOf(\".\") !== -1) {\n\t\t\t\tnumstr = numstr.replace(/\\.?0+$/, \"\");  // 1.00 , 1.10\n\t\t\t\tnumstr = numstr.replace(/\\.?0+e/, \"e\"); // 1.0e , 1.10e\n\t\t\t}\n\t\t\telse if(/inf/i.test(numstr)) {\n\t\t\t\tif(x === Number.POSITIVE_INFINITY) {\n\t\t\t\t\treturn \"Inf\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn \"-Inf\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(/nan/i.test(numstr)) {\n\t\t\t\treturn \"NaN\";\n\t\t\t}\n\t\t\treturn numstr;\n\t\t};\n\t\tif(!this.isReal()) {\n\t\t\tif(this._re === 0) {\n\t\t\t\treturn formatG(this._im) + \"i\";\n\t\t\t}\n\t\t\telse if((this._im >= 0) || (Number.isNaN(this._im))) {\n\t\t\t\treturn formatG(this._re) + \" + \" + formatG(this._im) + \"i\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn formatG(this._re) + \" - \" + formatG(-this._im) + \"i\";\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn formatG(this._re);\n\t\t}\n\t}\n\t\n\t/**\n\t * The real part of this Comlex.\n\t * @returns {number} real(A)\n\t */\n\tget real() {\n\t\treturn this._re;\n\t}\n\t\n\t/**\n\t * The imaginary part of this Comlex.\n\t * @returns {number} imag(A)\n\t */\n\tget imag() {\n\t\treturn this._im;\n\t}\n\n\t/**\n\t * norm.\n\t * @returns {number} |A|\n\t */\n\tget norm() {\n\t\tif(this._im === 0) {\n\t\t\treturn Math.abs(this._re);\n\t\t}\n\t\telse if(this._re === 0) {\n\t\t\treturn Math.abs(this._im);\n\t\t}\n\t\telse {\n\t\t\treturn Math.sqrt(this._re * this._re + this._im * this._im);\n\t\t}\n\t}\n\n\t/**\n\t * The argument of this complex number.\n\t * @returns {number} arg(A)\n\t */\n\tget arg() {\n\t\tif(this._im === 0) {\n\t\t\treturn this._re >= 0 ? 0 : Math.PI;\n\t\t}\n\t\telse if(this._re === 0) {\n\t\t\treturn Math.PI * (this._im >= 0.0 ? 0.5 : -0.5);\n\t\t}\n\t\telse {\n\t\t\treturn Math.atan2(this._im, this._re);\n\t\t}\n\t}\n\n\t/**\n\t * Return number of decimal places for real and imaginary parts.\n\t * - Used to make a string.\n\t * @returns {number} Number of decimal places.\n\t */\n\tgetDecimalPosition() {\n\t\t/**\n\t\t * @type {function(number): number }\n\t\t */\n\t\tconst getDecimal = function(x) {\n\t\t\tif(!Number.isFinite(x)) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tlet a = x;\n\t\t\tlet point = 0;\n\t\t\tfor(let i = 0; i < 20; i++) {\n\t\t\t\tif(Math.abs(a - Math.round(a)) <= Number.EPSILON) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ta *= 10;\n\t\t\t\tpoint++;\n\t\t\t}\n\t\t\treturn point;\n\t\t};\n\t\treturn Math.max( getDecimal(this.real), getDecimal(this.imag) );\n\t}\n\n\t/**\n\t * The positive or negative sign of this number.\n\t * - +1 if positive, -1 if negative, 0 if 0.\n\t * @returns {Complex} \n\t */\n\tsign() {\n\t\tif(!this.isFinite()) {\n\t\t\tif(this.isNaN() || this._im === Infinity || this._im === -Infinity) {\n\t\t\t\treturn Complex.NaN;\n\t\t\t}\n\t\t\tif(this._re === Infinity) {\n\t\t\t\treturn Complex.ONE;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Complex.MINUS_ONE;\n\t\t\t}\n\t\t}\n\t\tif(this._im === 0) {\n\t\t\tif(this._re === 0) {\n\t\t\t\treturn Complex.ZERO;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new Complex(this._re > 0 ? 1 : -1);\n\t\t\t}\n\t\t}\n\t\treturn this.div(this.norm);\n\t}\n\t\n\t// ----------------------\n\t// 四則演算\n\t// ----------------------\n\t\n\t/**\n\t * Add.\n\t * @param {KComplexInputData} number \n\t * @returns {Complex} A + B\n\t */\n\tadd(number) {\n\t\tconst A = this;\n\t\tconst B = new Complex(number);\n\t\tB._re = A._re + B._re;\n\t\tB._im = A._im + B._im;\n\t\treturn B;\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} A - B\n\t */\n\tsub(number) {\n\t\tconst A = this;\n\t\tconst B = new Complex(number);\n\t\tB._re = A._re - B._re;\n\t\tB._im = A._im - B._im;\n\t\treturn B;\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} A * B\n\t */\n\tmul(number) {\n\t\tconst A = this;\n\t\tconst B = new Complex(number);\n\t\tif((A._im === 0) && (B._im === 0)) {\n\t\t\tB._re = A._re * B._re;\n\t\t\treturn B;\n\t\t}\n\t\telse if((A._re === 0) && (B._re === 0)) {\n\t\t\tB._re = - A._im * B._im;\n\t\t\tB._im = 0;\n\t\t\treturn B;\n\t\t}\n\t\telse {\n\t\t\tconst re = A._re * B._re - A._im * B._im;\n\t\t\tconst im = A._im * B._re + A._re * B._im;\n\t\t\tB._re = re;\n\t\t\tB._im = im;\n\t\t\treturn B;\n\t\t}\n\t}\n\t\n\t/**\n\t * Inner product/Dot product.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} A * conj(B)\n\t */\n\tdot(number) {\n\t\tconst A = this;\n\t\tconst B = new Complex(number);\n\t\tif((A._im === 0) && (B._im === 0)) {\n\t\t\tB._re = A._re * B._re;\n\t\t\treturn B;\n\t\t}\n\t\telse if((A._re === 0) && (B._re === 0)) {\n\t\t\tB._re = A._im * B._im;\n\t\t\tB._im = 0;\n\t\t\treturn B;\n\t\t}\n\t\telse {\n\t\t\tconst re =   A._re * B._re + A._im * B._im;\n\t\t\tconst im = - A._im * B._re + A._re * B._im;\n\t\t\tB._re = re;\n\t\t\tB._im = im;\n\t\t\treturn B;\n\t\t}\n\t}\n\t\n\t/**\n\t * Divide.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} A / B\n\t */\n\tdiv(number) {\n\t\tconst A = this;\n\t\tconst B = new Complex(number);\n\t\tif((A._im === 0) && (B._im === 0)) {\n\t\t\tB._re = A._re / B._re;\n\t\t\treturn B;\n\t\t}\n\t\telse if((A._re === 0) && (B._re === 0)) {\n\t\t\tB._re = A._im / B._im;\n\t\t\tB._im = 0;\n\t\t\treturn B;\n\t\t}\n\t\telse {\n\t\t\tconst re = A._re * B._re + A._im * B._im;\n\t\t\tconst im = A._im * B._re - A._re * B._im;\n\t\t\tconst denominator = 1.0 / (B._re * B._re + B._im * B._im);\n\t\t\tB._re = re * denominator;\n\t\t\tB._im = im * denominator;\n\t\t\treturn B;\n\t\t}\n\t}\n\n\t/**\n\t * Modulo, positive remainder of division.\n\t * - Result has same sign as the Dividend.\n\t * @param {KComplexInputData} number - Divided value (real number only).\n\t * @returns {Complex} A rem B\n\t */\n\trem(number) {\n\t\tconst A = this;\n\t\tconst B = new Complex(number);\n\t\tif((A._im !== 0) || (B._im !== 0)) {\n\t\t\tthrow \"calculation method is undefined.\";\n\t\t}\n\t\tif(!A.isFinite() || !B.isFinite() || B.isZero()) {\n\t\t\treturn Complex.NaN;\n\t\t}\n\t\tB._re = A._re - B._re * (Math.trunc(A._re / B._re));\n\t\treturn B;\n\t}\n\n\t/**\n\t * Modulo, positive remainder of division.\n\t * - Result has same sign as the Divisor.\n\t * @param {KComplexInputData} number - Divided value (real number only).\n\t * @returns {Complex} A mod B\n\t */\n\tmod(number) {\n\t\tconst A = this;\n\t\tconst B = new Complex(number);\n\t\tif((A._im !== 0) || (B._im !== 0)) {\n\t\t\tthrow \"calculation method is undefined.\";\n\t\t}\n\t\tif(B.isZero()) {\n\t\t\treturn A;\n\t\t}\n\t\tconst ret = A.rem(B);\n\t\tif(!A.equalsState(B)) {\n\t\t\treturn ret.add(B);\n\t\t}\n\t\telse {\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t * Inverse number of this value.\n\t * @returns {Complex} 1 / A\n\t */\n\tinv() {\n\t\tif(this._im === 0) {\n\t\t\treturn new Complex(1.0 / this._re);\n\t\t}\n\t\telse if(this._re === 0) {\n\t\t\treturn new Complex([0, - 1.0 / this._im]);\n\t\t}\n\t\treturn Complex.ONE.div(this);\n\t}\n\n\t// ----------------------\n\t// 他の型に変換用\n\t// ----------------------\n\t\n\t/**\n\t * boolean value.\n\t * @returns {boolean}\n\t */\n\tget booleanValue() {\n\t\treturn !this.isZero() && !this.isNaN();\n\t}\n\n\t/**\n\t * integer value.\n\t * @returns {number}\n\t */\n\tget intValue() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? NaN : (this.isPositiveInfinity() ? Infinity : -Infinity);\n\t\t}\n\t\tconst value = this._re;\n\t\tconst delta = Math.abs(value - Math.trunc(value));\n\t\tif(delta < Number.EPSILON) {\n\t\t\treturn Math.round(value);\n\t\t}\n\t\telse {\n\t\t\treturn Math.trunc(value);\n\t\t}\n\t}\n\n\t/**\n\t * floating point.\n\t * @returns {number}\n\t */\n\tget doubleValue() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? NaN : (this.isPositiveInfinity() ? Infinity : -Infinity);\n\t\t}\n\t\tconst value = this._re;\n\t\tconst delta = Math.abs(value - Math.trunc(value));\n\t\tif(delta < Number.EPSILON) {\n\t\t\treturn Math.round(value);\n\t\t}\n\t\telse {\n\t\t\treturn value;\n\t\t}\n\t}\n\n\t// ----------------------\n\t// konpeito で扱う数値型へ変換\n\t// ----------------------\n\t\n\t/**\n\t * return BigInteger.\n\t * @returns {BigInteger}\n\t */\n\ttoBigInteger() {\n\t\treturn new BigInteger(this.intValue);\n\t}\n\t\n\t/**\n\t * return BigDecimal.\n\t * @param {MathContext} [mc] - MathContext setting after calculation. \n\t * @returns {BigDecimal}\n\t */\n\ttoBigDecimal(mc) {\n\t\tif(mc) {\n\t\t\treturn new BigDecimal([this.doubleValue, mc]);\n\t\t}\n\t\telse {\n\t\t\treturn new BigDecimal(this.doubleValue);\n\t\t}\n\t}\n\t\n\t/**\n\t * return Fraction.\n\t * @returns {Fraction}\n\t */\n\ttoFraction() {\n\t\treturn new Fraction(this.doubleValue);\n\t}\n\t\n\t/**\n\t * return Complex.\n\t * @returns {Complex}\n\t */\n\ttoComplex() {\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * return Matrix.\n\t * @returns {Matrix}\n\t */\n\ttoMatrix() {\n\t\treturn new Matrix(this);\n\t}\n\n\t// ----------------------\n\t// 比較\n\t// ----------------------\n\t\n\t/**\n\t * Equals.\n\t * @param {KComplexInputData} number\n\t * @param {KComplexInputData} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean} A === B\n\t */\n\tequals(number, tolerance) {\n\t\tconst A = this;\n\t\tconst B = Complex._toComplex(number);\n\t\t// 無限大、非数の値も含めて一度確認\n\t\tif(A.isNaN() || B.isNaN()) {\n\t\t\treturn false;\n\t\t}\n\t\tif((A._re === B._re) && (A._im === B._im)) {\n\t\t\treturn true;\n\t\t}\n\t\t// 誤差を含んだ値の比較\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\treturn (Math.abs(A._re - B._re) <  tolerance_) && (Math.abs(A._im - B._im) < tolerance_);\n\t}\n\n\t/**\n\t * Numeric type match.\n\t * @param {KComplexInputData} number \n\t * @returns {boolean}\n\t */\n\tequalsState(number) {\n\t\tconst A = this;\n\t\tconst B = Complex._toComplex(number);\n\t\t/**\n\t\t * @param {Complex} num\n\t\t * @returns {number}\n\t\t */\n\t\tconst getState = function(num) {\n\t\t\tif(num.isZero()) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif(!num.isFinite()) {\n\t\t\t\tif(num.isPositiveInfinity()) {\n\t\t\t\t\treturn 4;\n\t\t\t\t}\n\t\t\t\telse if(num.isNegativeInfinity()) {\n\t\t\t\t\treturn 5;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 3;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn num.isPositive() ? 1 : 2;\n\t\t};\n\t\tconst A_type = getState(A);\n\t\tconst B_type = getState(B);\n\t\treturn A_type === B_type;\n\t}\n\n\t/**\n\t * Compare values.\n\t * @param {KComplexInputData} number\n\t * @param {KComplexInputData} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {number} A > B ? 1 : (A === B ? 0 : -1)\n\t */\n\tcompareTo(number, tolerance) {\n\t\tconst A = this;\n\t\tconst B = Complex._toComplex(number);\n\t\tif(!A.isFinite() || !B.isFinite()) {\n\t\t\tif(A.equals(B)) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse if(\n\t\t\t\tA.isNaN() || B.isNaN() ||\n\t\t\t\t(A.real ===  Infinity && A.imag === -Infinity) ||\n\t\t\t\t(A.real === -Infinity && A.imag ===  Infinity) ||\n\t\t\t\t(B.real ===  Infinity && B.imag === -Infinity) ||\n\t\t\t\t(B.real === -Infinity && B.imag ===  Infinity) ) {\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t\telse if(A.isFinite()) {\n\t\t\t\treturn B.real + B.imag < 0 ? 1 : -1;\n\t\t\t}\n\t\t\telse if(B.isFinite()) {\n\t\t\t\treturn A.real + A.imag > 0 ? 1 : -1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t}\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\tconst a = A.real + A.imag;\n\t\tconst b = B.real + B.imag;\n\t\tif((Math.abs(a - b) <= tolerance_)) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn a > b ? 1 : -1;\n\t}\n\t\n\t/**\n\t * Maximum number.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} max([A, B])\n\t */\n\tmax(number) {\n\t\tconst x = Complex._toComplex(number);\n\t\tif(this.compareTo(x) >= 0) {\n\t\t\treturn this;\n\t\t}\n\t\telse {\n\t\t\treturn x;\n\t\t}\n\t}\n\n\t/**\n\t * Minimum number.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} min([A, B])\n\t */\n\tmin(number) {\n\t\tconst x = Complex._toComplex(number);\n\t\tif(this.compareTo(x) <= 0) {\n\t\t\treturn this;\n\t\t}\n\t\telse {\n\t\t\treturn x;\n\t\t}\n\t}\n\n\t/**\n\t * Clip number within range.\n\t * @param {KComplexInputData} min \n\t * @param {KComplexInputData} max\n\t * @returns {Complex} min(max(x, min), max)\n\t */\n\tclip(min, max) {\n\t\tconst min_ = Complex._toComplex(min);\n\t\tconst max_ = Complex._toComplex(max);\n\t\tconst arg_check = min_.compareTo(max_);\n\t\tif(arg_check === 1) {\n\t\t\tthrow \"clip(min, max) error. (min > max)->(\" + min_ + \" > \" + max_ + \")\";\n\t\t}\n\t\telse if(arg_check === 0) {\n\t\t\treturn min_;\n\t\t}\n\t\tif(this.compareTo(max_) === 1) {\n\t\t\treturn max_;\n\t\t}\n\t\telse if(this.compareTo(min_) === -1) {\n\t\t\treturn min_;\n\t\t}\n\t\treturn this;\n\t}\n\n\t// ----------------------\n\t// 丸め\n\t// ----------------------\n\t\n\t/**\n\t * Floor.\n\t * @returns {Complex} floor(A)\n\t */\n\tfloor() {\n\t\treturn new Complex([Math.floor(this._re), Math.floor(this._im)]);\n\t}\n\n\t/**\n\t * Ceil.\n\t * @returns {Complex} ceil(A)\n\t */\n\tceil() {\n\t\treturn new Complex([Math.ceil(this._re), Math.ceil(this._im)]);\n\t}\n\t\n\t/**\n\t * Rounding to the nearest integer.\n\t * @returns {Complex} round(A)\n\t */\n\tround() {\n\t\treturn new Complex([Math.round(this._re), Math.round(this._im)]);\n\t}\n\n\t/**\n\t * To integer rounded down to the nearest.\n\t * @returns {Complex} fix(A), trunc(A)\n\t */\n\tfix() {\n\t\treturn new Complex([Math.trunc(this._re), Math.trunc(this._im)]);\n\t}\n\n\t/**\n\t * Fraction.\n\t * @returns {Complex} fract(A)\n\t */\n\tfract() {\n\t\treturn new Complex([this._re - Math.floor(this._re), this._im - Math.floor(this._im)]);\n\t}\n\n\t// ----------------------\n\t// 複素数\n\t// ----------------------\n\t\n\t/**\n\t * Absolute value.\n\t * @returns {Complex} abs(A)\n\t */\n\tabs() {\n\t\treturn new Complex(this.norm);\n\t}\n\n\t/**\n\t * Complex conjugate.\n\t * @returns {Complex} real(A) - imag(A)j\n\t */\n\tconj() {\n\t\tif(this._im === 0) {\n\t\t\treturn this;\n\t\t}\n\t\t// 共役複素数\n\t\treturn new Complex([this._re, -this._im]);\n\t}\n\n\t/**\n\t * this * -1\n\t * @returns {Complex} -A\n\t */\n\tnegate() {\n\t\treturn new Complex([-this._re, -this._im]);\n\t}\n\n\t// ----------------------\n\t// 指数\n\t// ----------------------\n\t\n\t/**\n\t * Power function.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} pow(A, B)\n\t */\n\tpow(number) {\n\t\tconst A = this;\n\t\tconst B = new Complex(number);\n\t\t// -2 ^ 0.5 ... 複素数\n\t\t// -2 ^ 1   ... 実数\n\t\t//  2 ^ 0.5 ... 実数\n\t\tif(B.isReal()) {\n\t\t\tif(A.isReal() && (A.isNotNegative() || B.isInteger())) {\n\t\t\t\tB._re = Math.pow(A._re, B._re);\n\t\t\t\treturn B;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst r = Math.pow(A.norm, B._re);\n\t\t\t\tconst s = A.arg * B._re;\n\t\t\t\tB._re = r * Math.cos(s);\n\t\t\t\tB._im = r * Math.sin(s);\n\t\t\t\treturn B;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn B.mul(A.log()).exp();\n\t\t}\n\t}\n\n\t/**\n\t * Square.\n\t * @returns {Complex} pow(A, 2)\n\t */\n\tsquare() {\n\t\tif(this._im === 0.0) {\n\t\t\treturn new Complex(this._re * this._re);\n\t\t}\n\t\treturn this.mul(this);\n\t}\n\n\t/**\n\t * Square root.\n\t * @returns {Complex} sqrt(A)\n\t */\n\tsqrt() {\n\t\tif(this.isReal()) {\n\t\t\tif(this.isNotNegative()) {\n\t\t\t\treturn new Complex(Math.sqrt(this._re));\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new Complex([0, Math.sqrt(-this._re)]);\n\t\t\t}\n\t\t}\n\t\tconst r = Math.sqrt(this.norm);\n\t\tconst s = this.arg * 0.5;\n\t\treturn new Complex([r * Math.cos(s), r * Math.sin(s)]);\n\t}\n\n\t/**\n\t * Cube root.\n\t * @param {KComplexInputData} [n=0] - Value type(0,1,2)\n\t * @returns {Complex} cbrt(A)\n\t */\n\tcbrt(n) {\n\t\tconst type = Complex._toInteger(n !== undefined ? n : 0);\n\t\tconst x = this.log().div(3).exp();\n\t\tif(type === 0) {\n\t\t\treturn x;\n\t\t}\n\t\telse if(type === 1) {\n\t\t\treturn x.mul([-0.5, Math.sqrt(3) * 0.5]);\n\t\t}\n\t\telse {\n\t\t\treturn x.mul([-0.5, - Math.sqrt(3) * 0.5]);\n\t\t}\n\t}\n\n\t/**\n\t * Reciprocal square root.\n\t * @returns {Complex} rsqrt(A)\n\t */\n\trsqrt() {\n\t\tif(this.isReal()) {\n\t\t\tif(this.isNotNegative()) {\n\t\t\t\treturn new Complex(1.0 / Math.sqrt(this._re));\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new Complex([0, - 1.0 / Math.sqrt(-this._re)]);\n\t\t\t}\n\t\t}\n\t\treturn this.sqrt().inv();\n\t}\n\n\t/**\n\t * Logarithmic function.\n\t * @returns {Complex} log(A)\n\t */\n\tlog() {\n\t\tif(this.isReal() && this.isNotNegative()) {\n\t\t\treturn new Complex(Math.log(this._re));\n\t\t}\n\t\t// 負の値が入っているか、もともと複素数が入っている場合は、複素対数関数\n\t\treturn new Complex([Math.log(this.norm), this.arg]);\n\t}\n\n\t/**\n\t * Exponential function.\n\t * @returns {Complex} exp(A)\n\t */\n\texp() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.exp(this._re));\n\t\t}\n\t\t// 複素指数関数\n\t\tconst r = Math.exp(this._re);\n\t\treturn new Complex([r * Math.cos(this._im), r * Math.sin(this._im)]);\n\t}\n\n\t/**\n\t * e^x - 1\n\t * @returns {Complex} expm1(A)\n\t */\n\texpm1() {\n\t\treturn this.exp().sub(1);\n\t}\n\n\t/**\n\t * ln(1 + x)\n\t * @returns {Complex} log1p(A)\n\t */\n\tlog1p() {\n\t\treturn this.add(1).log();\n\t}\n\t\n\t/**\n\t * log_2(x)\n\t * @returns {Complex} log2(A)\n\t */\n\tlog2() {\n\t\treturn this.log().div(Complex.LN2);\n\t\t\n\t}\n\n\t/**\n\t * log_10(x)\n\t * @returns {Complex} log10(A)\n\t */\n\tlog10() {\n\t\treturn this.log().div(Complex.LN10);\n\t}\n\n\t// ----------------------\n\t// 三角関数\n\t// ----------------------\n\t\n\t/**\n\t * Sine function.\n\t * @returns {Complex} sin(A)\n\t */\n\tsin() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.sin(this._re));\n\t\t}\n\t\t// オイラーの公式より\n\t\t// sin x = (e^ix - e^-ex) / 2i\n\t\tconst a = this.mul(Complex.I).exp();\n\t\tconst b = this.mul(Complex.I.negate()).exp();\n\t\treturn a.sub(b).div([0, 2]);\n\t}\n\n\t/**\n\t * Cosine function.\n\t * @returns {Complex} cos(A)\n\t */\n\tcos() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.cos(this._re));\n\t\t}\n\t\t// オイラーの公式より\n\t\t// cos x = (e^ix + e^-ex) / 2\n\t\tconst a = this.mul(Complex.I).exp();\n\t\tconst b = this.mul(Complex.I.negate()).exp();\n\t\treturn a.add(b).div(2);\n\t}\n\n\t/**\n\t * Tangent function.\n\t * @returns {Complex} tan(A)\n\t */\n\ttan() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.tan(this._re));\n\t\t}\n\t\t// 三角関数の相互関係 tan x = sin x / cos x\n\t\treturn this.sin().div(this.cos());\n\t}\n\n\t/**\n\t * Atan (arc tangent) function.\n\t * - Return the values of [-PI/2, PI/2].\n\t * @returns {Complex} atan(A)\n\t */\n\tatan() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.atan(this._re));\n\t\t}\n\t\t// 逆正接 tan-1 x = i/2 log( i+x / i-x )\n\t\treturn Complex.I.div(Complex.TWO).mul(Complex.I.add(this).div(Complex.I.sub(this)).log());\n\t}\n\n\t/**\n\t * Atan (arc tangent) function.\n\t * Return the values of [-PI, PI] .\n\t * Supports only real numbers.\n\t * @param {KComplexInputData} [number] - X\n\t * @returns {Complex} atan2(Y, X)\n\t */\n\tatan2(number) {\n\t\tif(arguments.length === 0) {\n\t\t\treturn new Complex(this.arg);\n\t\t}\n\t\t// y.atan2(x) とする。\n\t\tconst y = this;\n\t\tconst x = Complex._toComplex(number);\n\t\tif(y.isReal() && x.isReal()) {\n\t\t\treturn new Complex(Math.atan2(y._re, x._re));\n\t\t}\n\t\t// 複素数のatan2は未定義である（実装不可能）\n\t\tthrow \"calculation method is undefined.\";\n\t}\n\t\n\t// ----------------------\n\t// 双曲線関数\n\t// ----------------------\n\t\n\t/**\n\t * Arc sine function.\n\t * @returns {Complex} asin(A)\n\t */\n\tasin() {\n\t\t// 逆正弦\n\t\treturn this.mul(Complex.I).add(Complex.ONE.sub(this.square()).sqrt()).log().mul(Complex.MINUS_I);\n\t}\n\n\t/**\n\t * Arc cosine function.\n\t * @returns {Complex} acos(A)\n\t */\n\tacos() {\n\t\t// 逆余弦\n\t\treturn this.add(Complex.I.mul(Complex.ONE.sub(this.square()).sqrt())).log().mul(Complex.MINUS_I);\n\t}\n\t\n\n\t/**\n\t * Hyperbolic sine function.\n\t * @returns {Complex} sinh(A)\n\t */\n\tsinh() {\n\t\t// 双曲線正弦\n\t\tconst y = this.exp();\n\t\treturn y.sub(y.inv()).mul(0.5);\n\t}\n\n\t/**\n\t * Inverse hyperbolic sine function.\n\t * @returns {Complex} asinh(A)\n\t */\n\tasinh() {\n\t\t// 逆双曲線正弦 Math.log(x + Math.sqrt(x * x + 1));\n\t\tif(this.isInfinite()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn this.add(this.mul(this).add(1).sqrt()).log();\n\t}\n\n\t/**\n\t * Hyperbolic cosine function.\n\t * @returns {Complex} cosh(A)\n\t */\n\tcosh() {\n\t\t// 双曲線余弦\n\t\treturn this.exp().add(this.negate().exp()).mul(0.5);\n\t}\n\n\t/**\n\t * Inverse hyperbolic cosine function.\n\t * @returns {Complex} acosh(A)\n\t */\n\tacosh() {\n\t\t// 逆双曲線余弦 Math.log(x + Math.sqrt(x * x - 1));\n\t\t// Octave だと log(0.5+(0.5*0.5-1)^0.5) !== acosh(0.5) になる。\n\t\t// おそらく log(0.5-(0.5*0.5-1)^0.5) の式に切り替わるようになっている\n\t\t// これは2つの値を持っているためだと思われるので合わせてみる\n\t\tif(this.isZero()) {\n\t\t\treturn new Complex([0, Math.PI * 0.5]);\n\t\t}\n\t\tif(this.compareTo(Complex.ONE) >= 1) {\n\t\t\treturn this.add(this.square().sub(1).sqrt()).log();\n\t\t}\n\t\telse {\n\t\t\treturn this.sub(this.square().sub(1).sqrt()).log();\n\t\t}\n\t}\n\n\t/**\n\t * Hyperbolic tangent function.\n\t * @returns {Complex} tanh(A)\n\t */\n\ttanh() {\n\t\t// 双曲線正接\n\t\tif(this.isNaN()) {\n\t\t\treturn Complex.NaN;\n\t\t}\n\t\tconst y =  this.mul(2).exp();\n\t\tif(y.isZero()) {\n\t\t\treturn Complex.MINUS_ONE;\n\t\t}\n\t\telse if(y.isPositiveInfinity()) {\n\t\t\treturn Complex.ONE;\n\t\t}\n\t\treturn y.sub(1).div(y.add(1));\n\t}\n\t\n\t/**\n\t * Inverse hyperbolic tangent function.\n\t * @returns {Complex} atanh(A)\n\t */\n\tatanh() {\n\t\t// 逆双曲線正接\n\t\tif(this.isInfinite() && this.isReal()) {\n\t\t\treturn new Complex([0, Math.PI * 0.5]);\n\t\t}\n\t\treturn this.add(1).div(this.negate().add(1)).log().mul(0.5);\n\t}\n\n\t/**\n\t * Secant function.\n\t * @returns {Complex} sec(A)\n\t */\n\tsec() {\n\t\t// 正割\n\t\treturn this.cos().inv();\n\t}\n\n\t/**\n\t * Reverse secant function.\n\t * @returns {Complex} asec(A)\n\t */\n\tasec() {\n\t\t// 逆正割\n\t\treturn this.inv().acos();\n\t}\n\n\t/**\n\t * Hyperbolic secant function.\n\t * @returns {Complex} sech(A)\n\t */\n\tsech() {\n\t\t// 双曲線正割\n\t\treturn this.exp().add(this.negate().exp()).inv().mul(2);\n\t}\n\n\t/**\n\t * Inverse hyperbolic secant function.\n\t * @returns {Complex} asech(A)\n\t */\n\tasech() {\n\t\t// 逆双曲線正割\n\t\tif(this.isInfinite() && this.isReal()) {\n\t\t\treturn new Complex([0, Math.PI * 0.5]);\n\t\t}\n\t\tif(this.isPositive() || (this.compareTo(Complex.MINUS_ONE) == -1)) {\n\t\t\treturn this.inv().add(this.square().inv().sub(1).sqrt()).log();\n\t\t}\n\t\telse {\n\t\t\treturn this.inv().sub(this.square().inv().sub(1).sqrt()).log();\n\t\t}\n\t}\n\n\t/**\n\t * Cotangent function.\n\t * @returns {Complex} cot(A)\n\t */\n\tcot() {\n\t\t// 余接\n\t\treturn this.tan().inv();\n\t}\n\n\t/**\n\t * Inverse cotangent function.\n\t * @returns {Complex} acot(A)\n\t */\n\tacot() {\n\t\t// 逆余接\n\t\treturn this.inv().atan();\n\t}\n\n\t/**\n\t * Hyperbolic cotangent function.\n\t * @returns {Complex} coth(A)\n\t */\n\tcoth() {\n\t\t// 双曲線余接\n\t\tif(this.isZero()) {\n\t\t\treturn Complex.POSITIVE_INFINITY;\n\t\t}\n\t\treturn this.tanh().inv();\n\t}\n\n\t/**\n\t * Inverse hyperbolic cotangent function.\n\t * @returns {Complex} acoth(A)\n\t */\n\tacoth() {\n\t\t// 逆双曲線余接\n\t\tif(this.isInfinite()) {\n\t\t\treturn Complex.ZERO;\n\t\t}\n\t\treturn this.add(1).div(this.sub(1)).log().mul(0.5);\n\t}\n\n\t/**\n\t * Cosecant function.\n\t * @returns {Complex} csc(A)\n\t */\n\tcsc() {\n\t\t// 余割\n\t\treturn this.sin().inv();\n\t}\n\n\t/**\n\t * Inverse cosecant function.\n\t * @returns {Complex} acsc(A)\n\t */\n\tacsc() {\n\t\t// 逆余割\n\t\treturn this.inv().asin();\n\t}\n\n\t/**\n\t * Hyperbolic cosecant function.\n\t * @returns {Complex} csch(A)\n\t */\n\tcsch() {\n\t\t// 双曲線余割\n\t\treturn this.exp().sub(this.negate().exp()).inv().mul(2);\n\t}\n\n\t/**\n\t * Inverse hyperbolic cosecant function.\n\t * @returns {Complex} acsch(A)\n\t */\n\tacsch() {\n\t\t// 逆双曲線余割\n\t\treturn this.inv().add(this.square().inv().add(1).sqrt()).log();\n\t}\n\n\t// ----------------------\n\t// 信号処理系\n\t// ----------------------\n\t\n\t/**\n\t * Normalized sinc function.\n\t * @returns {Complex} sinc(A)\n\t */\n\tsinc() {\n\t\tif(this.isReal()) {\n\t\t\tif(this._re === 0) {\n\t\t\t\treturn(Complex.ONE);\n\t\t\t}\n\t\t\tconst x = Math.PI * this._re;\n\t\t\treturn new Complex(Math.sin(x) / x);\n\t\t}\n\t\tconst x = this.mul(Complex.PI);\n\t\treturn new Complex( x.sin().div(x) );\n\t}\n\n\t// ----------------------\n\t// 乱数\n\t// ----------------------\n\t\n\t/**\n\t * Create random values with uniform random numbers.\n\t * @param {Random} [random] - Class for creating random numbers.\n\t * @returns {Complex}\n\t */\n\tstatic rand(random) {\n\t\tconst rand = (random !== undefined && random instanceof Random) ? random : random_class;\n\t\treturn new Complex(rand.nextDouble());\n\t}\n\n\t/**\n\t * Create random values with normal distribution.\n\t * @param {Random} [random] - Class for creating random numbers.\n\t * @returns {Complex}\n\t */\n\tstatic randn(random) {\n\t\tconst rand = (random !== undefined && random instanceof Random) ? random : random_class;\n\t\treturn new Complex(rand.nextGaussian());\n\t}\n\n\t// ----------------------\n\t// テスト系\n\t// ----------------------\n\t\n\t/**\n\t * Return true if the value is integer.\n\t * @param {KComplexInputData} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisInteger(tolerance) {\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\treturn this.isReal() && (Math.abs(this._re - Math.trunc(this._re)) < tolerance_);\n\t}\n\n\t/**\n\t * Returns true if the vallue is complex integer (including normal integer).\n\t * @param {KComplexInputData} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean} real(A) === integer && imag(A) === integer\n\t */\n\tisComplexInteger(tolerance) {\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\t// 複素整数\n\t\treturn (Math.abs(this._re - Math.trunc(this._re)) < tolerance_) &&\n\t\t\t\t(Math.abs(this._im - Math.trunc(this._im)) < tolerance_);\n\t}\n\n\t/**\n\t * this === 0\n\t * @param {KComplexInputData} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean} A === 0\n\t */\n\tisZero(tolerance) {\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\treturn (Math.abs(this._re) < tolerance_) && (Math.abs(this._im) < tolerance_);\n\t}\n\n\t/**\n\t * this === 1\n\t * @param {KComplexInputData} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean} A === 1\n\t */\n\tisOne(tolerance) {\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\treturn (Math.abs(this._re - 1.0) < tolerance_) && (Math.abs(this._im) < tolerance_);\n\t}\n\n\t/**\n\t * Returns true if the vallue is complex number (imaginary part is not 0).\n\t * @param {KComplexInputData} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean} imag(A) !== 0\n\t */\n\tisComplex(tolerance) {\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\treturn (Math.abs(this._im) >= tolerance_);\n\t}\n\t\n\t/**\n\t * Return true if the value is real number.\n\t * @param {KComplexInputData} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean} imag(A) === 0\n\t */\n\tisReal(tolerance) {\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\treturn (Math.abs(this._im) < tolerance_);\n\t}\n\n\t/**\n\t * this === NaN\n\t * @returns {boolean} isNaN(A)\n\t */\n\tisNaN() {\n\t\treturn isNaN(this._re) || isNaN(this._im);\n\t}\n\n\t/**\n\t * Return true if this real part of the complex positive.\n\t * @returns {boolean} real(x) > 0\n\t */\n\tisPositive() {\n\t\t// Number.EPSILONは使用しない。どちらにぶれるか不明な点及び\n\t\t// わずかな負の数だった場合に、sqrtでエラーが発生するため\n\t\treturn 0.0 < this._re;\n\t}\n\n\t/**\n\t * real(this) < 0\n\t * @returns {boolean} real(x) < 0\n\t */\n\tisNegative() {\n\t\treturn 0.0 > this._re;\n\t}\n\n\t/**\n\t * real(this) >= 0\n\t * @returns {boolean} real(x) >= 0\n\t */\n\tisNotNegative() {\n\t\treturn 0.0 <= this._re;\n\t}\n\n\t/**\n\t * this === Infinity\n\t * @returns {boolean} isPositiveInfinity(A)\n\t */\n\tisPositiveInfinity() {\n\t\treturn this._re === Number.POSITIVE_INFINITY || this._im === Number.POSITIVE_INFINITY;\n\t}\n\n\t/**\n\t * this === -Infinity\n\t * @returns {boolean} isNegativeInfinity(A)\n\t */\n\tisNegativeInfinity() {\n\t\treturn this._re === Number.NEGATIVE_INFINITY || this._im === Number.NEGATIVE_INFINITY;\n\t}\n\n\t/**\n\t * this === Infinity or -Infinity\n\t * @returns {boolean} isPositiveInfinity(A) || isNegativeInfinity(A)\n\t */\n\tisInfinite() {\n\t\treturn this.isPositiveInfinity() || this.isNegativeInfinity();\n\t}\n\t\n\t/**\n\t * Return true if the value is finite number.\n\t * @returns {boolean} !isNaN(A) && !isInfinite(A)\n\t */\n\tisFinite() {\n\t\treturn !this.isNaN() && !this.isInfinite();\n\t}\n\n\t// ----------------------\n\t// 確率\n\t// ----------------------\n\t\n\t/**\n\t * Log-gamma function.\n\t * - Calculate from real values.\n\t * @returns {Complex}\n\t */\n\tgammaln() {\n\t\treturn new Complex(Probability.gammaln(this._re));\n\t}\n\t\n\t/**\n\t * Gamma function.\n\t * - Calculate from real values.\n\t * @returns {Complex}\n\t */\n\tgamma() {\n\t\treturn new Complex(Probability.gamma(this._re));\n\t}\n\t\n\t/**\n\t * Incomplete gamma function.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} a\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {Complex}\n\t */\n\tgammainc(a, tail) {\n\t\tconst a_ = Complex._toDouble(a);\n\t\treturn new Complex(Probability.gammainc(this._re, a_, tail));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of the gamma distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} k - Shape parameter.\n\t * @param {KComplexInputData} s - Scale parameter.\n\t * @returns {Complex}\n\t */\n\tgampdf(k, s) {\n\t\tconst k_ = Complex._toDouble(k);\n\t\tconst s_ = Complex._toDouble(s);\n\t\treturn new Complex(Probability.gampdf(this._re, k_, s_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of gamma distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} k - Shape parameter.\n\t * @param {KComplexInputData} s - Scale parameter.\n\t * @returns {Complex}\n\t */\n\tgamcdf(k, s) {\n\t\tconst k_ = Complex._toDouble(k);\n\t\tconst s_ = Complex._toDouble(s);\n\t\treturn new Complex(Probability.gamcdf(this._re, k_, s_));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of gamma distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} k - Shape parameter.\n\t * @param {KComplexInputData} s - Scale parameter.\n\t * @returns {Complex}\n\t */\n\tgaminv(k, s) {\n\t\tconst k_ = Complex._toDouble(k);\n\t\tconst s_ = Complex._toDouble(s);\n\t\treturn new Complex(Probability.gaminv(this._re, k_, s_));\n\t}\n\n\t/**\n\t * Beta function.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} y\n\t * @returns {Complex}\n\t */\n\tbeta(y) {\n\t\tconst y_ = Complex._toDouble(y);\n\t\treturn new Complex(Probability.beta(this._re, y_));\n\t}\n\n\t/**\n\t * Incomplete beta function.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} a\n\t * @param {KComplexInputData} b\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {Complex}\n\t */\n\tbetainc(a, b, tail) {\n\t\tconst a_ = Complex._toDouble(a);\n\t\tconst b_ = Complex._toDouble(b);\n\t\treturn new Complex(Probability.betainc(this._re, a_, b_, tail));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of beta distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} a\n\t * @param {KComplexInputData} b\n\t * @returns {Complex}\n\t */\n\tbetapdf(a, b) {\n\t\tconst a_ = Complex._toDouble(a);\n\t\tconst b_ = Complex._toDouble(b);\n\t\treturn new Complex(Probability.betapdf(this._re, a_, b_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of beta distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} a\n\t * @param {KComplexInputData} b\n\t * @returns {Complex}\n\t */\n\tbetacdf(a, b) {\n\t\tconst a_ = Complex._toDouble(a);\n\t\tconst b_ = Complex._toDouble(b);\n\t\treturn new Complex(Probability.betacdf(this._re, a_, b_));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of beta distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} a\n\t * @param {KComplexInputData} b\n\t * @returns {Complex}\n\t */\n\tbetainv(a, b) {\n\t\tconst a_ = Complex._toDouble(a);\n\t\tconst b_ = Complex._toDouble(b);\n\t\treturn new Complex(Probability.betainv(this._re, a_, b_));\n\t}\n\n\t/**\n\t * Factorial function, x!.\n\t * - Calculate from real values.\n\t * @returns {Complex}\n\t */\n\tfactorial() {\n\t\treturn new Complex(Probability.factorial(this._re));\n\t}\n\n\t/**\n\t * Binomial coefficient, number of all combinations, nCk.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} k\n\t * @returns {Complex}\n\t */\n\tnchoosek(k) {\n\t\tconst k_ = Complex._toDouble(k);\n\t\treturn new Complex(Probability.nchoosek(this._re, k_));\n\t}\n\t\n\t/**\n\t * Error function.\n\t * - Calculate from real values.\n\t * @returns {Complex}\n\t */\n\terf() {\n\t\treturn new Complex(Probability.erf(this._re));\n\t}\n\n\t/**\n\t * Complementary error function.\n\t * - Calculate from real values.\n\t * @returns {Complex}\n\t */\n\terfc() {\n\t\treturn new Complex(Probability.erfc(this._re));\n\t}\n\n\t/**\n\t * Inverse function of Error function.\n\t * - Calculate from real values.\n\t * @returns {Complex}\n\t */\n\terfinv() {\n\t\treturn new Complex(Probability.erfinv(this._re));\n\t}\n\n\t/**\n\t * Inverse function of Complementary error function.\n\t * - Calculate from real values.\n\t * @returns {Complex}\n\t */\n\terfcinv() {\n\t\treturn new Complex(Probability.erfcinv(this._re));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of normal distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} [u=0.0] - Average value.\n\t * @param {KComplexInputData} [s=1.0] - Variance value.\n\t * @returns {Complex}\n\t */\n\tnormpdf(u, s) {\n\t\tconst u_ = u !== undefined ? Complex._toDouble(u) : 0.0;\n\t\tconst s_ = s !== undefined ? Complex._toDouble(s) : 1.0;\n\t\treturn new Complex(Probability.normpdf(this._re, u_, s_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of normal distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} [u=0.0] - Average value.\n\t * @param {KComplexInputData} [s=1.0] - Variance value.\n\t * @returns {Complex}\n\t */\n\tnormcdf(u, s) {\n\t\tconst u_ = u !== undefined ? Complex._toDouble(u) : 0.0;\n\t\tconst s_ = s !== undefined ? Complex._toDouble(s) : 1.0;\n\t\treturn new Complex(Probability.normcdf(this._re, u_, s_));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of normal distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} [u=0.0] - Average value.\n\t * @param {KComplexInputData} [s=1.0] - Variance value.\n\t * @returns {Complex}\n\t */\n\tnorminv(u, s) {\n\t\tconst u_ = u !== undefined ? Complex._toDouble(u) : 0.0;\n\t\tconst s_ = s !== undefined ? Complex._toDouble(s) : 1.0;\n\t\treturn new Complex(Probability.norminv(this._re, u_, s_));\n\t}\n\t\n\t/**\n\t * Probability density function (PDF) of binomial distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} n\n\t * @param {KComplexInputData} p\n\t * @returns {Complex}\n\t */\n\tbinopdf(n, p) {\n\t\tconst n_ = Complex._toDouble(n);\n\t\tconst p_ = Complex._toDouble(p);\n\t\treturn new Complex(Probability.binopdf(this._re, n_, p_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of binomial distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} n\n\t * @param {KComplexInputData} p\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {Complex}\n\t */\n\tbinocdf(n, p, tail) {\n\t\tconst n_ = Complex._toDouble(n);\n\t\tconst p_ = Complex._toDouble(p);\n\t\treturn new Complex(Probability.binocdf(this._re, n_, p_, tail));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of binomial distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} n\n\t * @param {KComplexInputData} p\n\t * @returns {Complex}\n\t */\n\tbinoinv(n, p) {\n\t\tconst n_ = Complex._toDouble(n);\n\t\tconst p_ = Complex._toDouble(p);\n\t\treturn new Complex(Probability.binoinv(this._re, n_, p_));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of Poisson distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} lambda\n\t * @returns {Complex}\n\t */\n\tpoisspdf(lambda) {\n\t\tconst lambda_ = Complex._toDouble(lambda);\n\t\treturn new Complex(Probability.poisspdf(this._re, lambda_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Poisson distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} lambda\n\t * @returns {Complex}\n\t */\n\tpoisscdf(lambda) {\n\t\tconst lambda_ = Complex._toDouble(lambda);\n\t\treturn new Complex(Probability.poisscdf(this._re, lambda_));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of Poisson distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} lambda\n\t * @returns {Complex}\n\t */\n\tpoissinv(lambda) {\n\t\tconst lambda_ = Complex._toDouble(lambda);\n\t\treturn new Complex(Probability.poissinv(this._re, lambda_));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of Student's t-distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} v - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\ttpdf(v) {\n\t\tconst v_ = Complex._toDouble(v);\n\t\treturn new Complex(Probability.tpdf(this._re, v_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} v - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\ttcdf(v) {\n\t\tconst v_ = Complex._toDouble(v);\n\t\treturn new Complex(Probability.tcdf(this._re, v_));\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} v - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\ttinv(v) {\n\t\tconst v_ = Complex._toDouble(v);\n\t\treturn new Complex(Probability.tinv(this._re, v_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} v - The degrees of freedom. (DF)\n\t * @param {KComplexInputData} tails - Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)\n\t * @returns {Complex}\n\t */\n\ttdist(v, tails) {\n\t\tconst v_ = Complex._toDouble(v);\n\t\tconst tails_ = Complex._toInteger(tails);\n\t\treturn new Complex(Probability.tdist(this._re, v_, tails_));\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} v - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\ttinv2(v) {\n\t\tconst v_ = Complex._toDouble(v);\n\t\treturn new Complex(Probability.tinv2(this._re, v_));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of chi-square distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} k - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\tchi2pdf(k) {\n\t\tconst k_ = Complex._toDouble(k);\n\t\treturn new Complex(Probability.chi2pdf(this._re, k_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of chi-square distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} k - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\tchi2cdf(k) {\n\t\tconst k_ = Complex._toDouble(k);\n\t\treturn new Complex(Probability.chi2cdf(this._re, k_));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of chi-square distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} k - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\tchi2inv(k) {\n\t\tconst k_ = Complex._toDouble(k);\n\t\treturn new Complex(Probability.chi2inv(this._re, k_));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of F-distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} d1 - The degree of freedom of the molecules.\n\t * @param {KComplexInputData} d2 - The degree of freedom of the denominator\n\t * @returns {Complex}\n\t */\n\tfpdf(d1, d2) {\n\t\tconst d1_ = Complex._toDouble(d1);\n\t\tconst d2_ = Complex._toDouble(d2);\n\t\treturn new Complex(Probability.fpdf(this._re, d1_, d2_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of F-distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} d1 - The degree of freedom of the molecules.\n\t * @param {KComplexInputData} d2 - The degree of freedom of the denominator\n\t * @returns {Complex}\n\t */\n\tfcdf(d1, d2) {\n\t\tconst d1_ = Complex._toDouble(d1);\n\t\tconst d2_ = Complex._toDouble(d2);\n\t\treturn new Complex(Probability.fcdf(this._re, d1_, d2_));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of F-distribution.\n\t * - Calculate from real values.\n\t * @param {KComplexInputData} d1 - The degree of freedom of the molecules.\n\t * @param {KComplexInputData} d2 - The degree of freedom of the denominator\n\t * @returns {Complex}\n\t */\n\tfinv(d1, d2) {\n\t\tconst d1_ = Complex._toDouble(d1);\n\t\tconst d2_ = Complex._toDouble(d2);\n\t\treturn new Complex(Probability.finv(this._re, d1_, d2_));\n\t}\n\n\t// ----------------------\n\t// ビット演算系\n\t// ----------------------\n\t\n\t/**\n\t * Logical AND.\n\t * - Calculated as an integer.\n\t * @param {KComplexInputData} number \n\t * @returns {Complex} A & B\n\t */\n\tand(number) {\n\t\tconst n_src = Math.round(this.real);\n\t\tconst n_tgt = Math.round(Complex._toDouble(number));\n\t\treturn new Complex(n_src & n_tgt);\n\t}\n\n\t/**\n\t * Logical OR.\n\t * - Calculated as an integer.\n\t * @param {KComplexInputData} number \n\t * @returns {Complex} A | B\n\t */\n\tor(number) {\n\t\tconst n_src = Math.round(this.real);\n\t\tconst n_tgt = Math.round(Complex._toDouble(number));\n\t\treturn new Complex(n_src | n_tgt);\n\t}\n\n\t/**\n\t * Logical Exclusive-OR.\n\t * - Calculated as an integer.\n\t * @param {KComplexInputData} number \n\t * @returns {Complex} A ^ B\n\t */\n\txor(number) {\n\t\tconst n_src = Math.round(this.real);\n\t\tconst n_tgt = Math.round(Complex._toDouble(number));\n\t\treturn new Complex(n_src ^ n_tgt);\n\t}\n\n\t/**\n\t * Logical Not. (mutable)\n\t * - Calculated as an integer.\n\t * @returns {Complex} !A\n\t */\n\tnot() {\n\t\tconst n_src = Math.round(this.real);\n\t\treturn new Complex(!n_src);\n\t}\n\t\n\t/**\n\t * this << n\n\t * - Calculated as an integer.\n\t * @param {KComplexInputData} n\n\t * @returns {Complex} A << n\n\t */\n\tshift(n) {\n\t\tconst src = Math.round(this.real);\n\t\tconst number = Math.round(Complex._toDouble(n));\n\t\treturn new Complex(src << number);\n\t}\n\n\t// ----------------------\n\t// gcd, lcm\n\t// ----------------------\n\t\n\t/**\n\t * Euclidean algorithm.\n\t * - Calculated as an integer.\n\t * @param {KComplexInputData} number \n\t * @returns {Complex} gcd(x, y)\n\t */\n\tgcd(number) {\n\t\tconst x = Math.round(this.real);\n\t\tconst y = Math.round(Complex._toDouble(number));\n\t\tconst result = new BigInteger(x).gcd(y);\n\t\treturn new Complex(result);\n\t}\n\n\t/**\n\t * Extended Euclidean algorithm.\n\t * - Calculated as an integer.\n\t * @param {KComplexInputData} number \n\t * @returns {Array<Complex>} [a, b, gcd(x, y)], Result of calculating a*x + b*y = gcd(x, y).\n\t */\n\textgcd(number) {\n\t\tconst x = Math.round(this.real);\n\t\tconst y = Math.round(Complex._toDouble(number));\n\t\tconst result = new BigInteger(x).extgcd(y);\n\t\treturn [new Complex(result[0]), new Complex(result[1]), new Complex(result[2])];\n\t}\n\n\t/**\n\t * Least common multiple.\n\t * - Calculated as an integer.\n\t * @param {KComplexInputData} number \n\t * @returns {Complex} lcm(x, y)\n\t */\n\tlcm(number) {\n\t\tconst x = Math.round(this.real);\n\t\tconst y = Math.round(Complex._toDouble(number));\n\t\tconst result = new BigInteger(x).lcm(y);\n\t\treturn new Complex(result);\n\t}\n\n\t// ----------------------\n\t// mod\n\t// ----------------------\n\n\t/**\n\t * Modular exponentiation.\n\t * - Calculated as an integer.\n\t * @param {KComplexInputData} exponent\n\t * @param {KComplexInputData} m \n\t * @returns {Complex} A^B mod m\n\t */\n\tmodPow(exponent, m) {\n\t\tconst A = Math.round(this.real);\n\t\tconst B = Math.round(Complex._toDouble(exponent));\n\t\tconst m_ = Math.round(Complex._toDouble(m));\n\t\tconst result = new BigInteger(A).modPow(B, m_);\n\t\treturn new Complex(result);\n\t}\n\n\t/**\n\t * Modular multiplicative inverse.\n\t * - Calculated as an integer.\n\t * @param {KComplexInputData} m\n\t * @returns {Complex} A^(-1) mod m\n\t */\n\tmodInverse(m) {\n\t\tconst A = Math.round(this.real);\n\t\tconst m_ = Math.round(Complex._toDouble(m));\n\t\tconst result = new BigInteger(A).modInverse(m_);\n\t\treturn new Complex(result);\n\t}\n\t\n\t// ----------------------\n\t// 素数\n\t// ----------------------\n\t\n\t/**\n\t * Return true if the value is prime number.\n\t * - Calculated as an integer.\n\t * - Calculate up to `2251799813685248(=2^51)`.\n\t * @returns {boolean} - If the calculation range is exceeded, null is returned.\n\t */\n\tisPrime() {\n\t\tconst src = new BigInteger(Math.round(this.real));\n\t\treturn src.isPrime();\n\t}\n\t\n\t/**\n\t * Return true if the value is prime number by Miller-Labin prime number determination method.\n\t * \n\t * Attention : it takes a very long time to process.\n\t * - Calculated as an integer.\n\t * @param {KComplexInputData} [certainty=100] - Repeat count (prime precision).\n\t * @returns {boolean}\n\t */\n\tisProbablePrime(certainty) {\n\t\tconst src = new BigInteger(Math.round(this.real));\n\t\treturn src.isProbablePrime(certainty !== undefined ? Math.round(Complex._toDouble(certainty)) : undefined);\n\t}\n\n\t/**\n\t * Next prime.\n\t * @param {KComplexInputData} [certainty=100] - Repeat count (prime precision).\n\t * @param {KComplexInputData} [search_max=100000] - Search range of next prime.\n\t * @returns {Complex}\n\t */\n\tnextProbablePrime(certainty, search_max) {\n\t\tconst src = new BigInteger(Math.round(this.real));\n\t\tconst p1 = certainty !== undefined ? Math.round(Complex._toDouble(certainty)) : undefined;\n\t\tconst p2 = search_max !== undefined ? Math.round(Complex._toDouble(search_max)) : undefined;\n\t\treturn new Complex(src.nextProbablePrime(p1, p2));\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * 1\n\t * @returns {Complex} 1\n\t */\n\tstatic get ONE() {\n\t\treturn DEFINE.ONE;\n\t}\n\t\n\t/**\n\t * 2\n\t * @returns {Complex} 2\n\t */\n\tstatic get TWO() {\n\t\treturn DEFINE.TWO;\n\t}\n\t\n\t/**\n\t * 10\n\t * @returns {Complex} 10\n\t */\n\tstatic get TEN() {\n\t\treturn DEFINE.TEN;\n\t}\n\t\n\t/**\n\t * 0\n\t * @returns {Complex} 0\n\t */\n\tstatic get ZERO() {\n\t\treturn DEFINE.ZERO;\n\t}\n\n\t/**\n\t * -1\n\t * @returns {Complex} -1\n\t */\n\tstatic get MINUS_ONE() {\n\t\treturn DEFINE.MINUS_ONE;\n\t}\n\n\t/**\n\t * i, j\n\t * @returns {Complex} i\n\t */\n\tstatic get I() {\n\t\treturn DEFINE.I;\n\t}\n\n\t/**\n\t * - i, - j\n\t * @returns {Complex} - i\n\t */\n\tstatic get MINUS_I() {\n\t\treturn DEFINE.MINUS_I;\n\t}\n\n\t/**\n\t * PI.\n\t * @returns {Complex} 3.14...\n\t */\n\tstatic get PI() {\n\t\treturn DEFINE.PI;\n\t}\n\n\t/**\n\t * 0.25 * PI.\n\t * @returns {Complex} 0.78...\n\t */\n\tstatic get QUARTER_PI() {\n\t\treturn DEFINE.QUARTER_PI;\n\t}\n\n\t/**\n\t * 0.5 * PI.\n\t * @returns {Complex} 1.57...\n\t */\n\tstatic get HALF_PI() {\n\t\treturn DEFINE.HALF_PI;\n\t}\n\n\t/**\n\t * 2 * PI.\n\t * @returns {Complex} 6.28...\n\t */\n\tstatic get TWO_PI() {\n\t\treturn DEFINE.TWO_PI;\n\t}\n\n\t/**\n\t * E, Napier's constant.\n\t * @returns {Complex} 2.71...\n\t */\n\tstatic get E() {\n\t\treturn DEFINE.E;\n\t}\n\n\t/**\n\t * log_e(2)\n\t * @returns {Complex} ln(2)\n\t */\n\tstatic get LN2() {\n\t\treturn DEFINE.LN2;\n\t}\n\n\t/**\n\t * log_e(10)\n\t * @returns {Complex} ln(10)\n\t */\n\tstatic get LN10() {\n\t\treturn DEFINE.LN10;\n\t}\n\n\t/**\n\t * log_2(e)\n\t * @returns {Complex} log_2(e)\n\t */\n\tstatic get LOG2E() {\n\t\treturn DEFINE.LOG2E;\n\t}\n\t\n\t/**\n\t * log_10(e)\n\t * @returns {Complex} log_10(e)\n\t */\n\tstatic get LOG10E() {\n\t\treturn DEFINE.LOG10E;\n\t}\n\t\n\t/**\n\t * sqrt(2)\n\t * @returns {Complex} sqrt(2)\n\t */\n\tstatic get SQRT2() {\n\t\treturn DEFINE.SQRT2;\n\t}\n\t\n\t/**\n\t * sqrt(0.5)\n\t * @returns {Complex} sqrt(0.5)\n\t */\n\tstatic get SQRT1_2() {\n\t\treturn DEFINE.SQRT1_2;\n\t}\n\t\n\t/**\n\t * 0.5\n\t * @returns {Complex} 0.5\n\t */\n\tstatic get HALF() {\n\t\treturn DEFINE.HALF;\n\t}\n\n\t/**\n\t * Positive infinity.\n\t * @returns {Complex} Infinity\n\t */\n\tstatic get POSITIVE_INFINITY() {\n\t\treturn DEFINE.POSITIVE_INFINITY;\n\t}\n\t\n\t/**\n\t * Negative Infinity.\n\t * @returns {Complex} -Infinity\n\t */\n\tstatic get NEGATIVE_INFINITY() {\n\t\treturn DEFINE.NEGATIVE_INFINITY;\n\t}\n\n\t/**\n\t * Not a Number.\n\t * @returns {Complex} NaN\n\t */\n\tstatic get NaN() {\n\t\treturn DEFINE.NaN;\n\t}\n\n\t// ----------------------\n\t// 互換性\n\t// ----------------------\n\t\n\t/**\n\t * The positive or negative sign of this number.\n\t * - +1 if positive, -1 if negative, 0 if 0.\n\t * @returns {Complex}\n\t */\n\tsignum() {\n\t\treturn this.sign();\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} A - B\n\t */\n\tsubtract(number) {\n\t\treturn this.sub(number);\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} A * B\n\t */\n\tmultiply(number) {\n\t\treturn this.mul(number);\n\t}\n\n\t/**\n\t * Divide.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} fix(A / B)\n\t */\n\tdivide(number) {\n\t\treturn this.div(number);\n\t}\n\n\t/**\n\t * Remainder of division.\n\t * - Result has same sign as the Dividend.\n\t * @param {KComplexInputData} number\n\t * @returns {Complex} A % B\n\t */\n\tremainder(number) {\n\t\treturn this.rem(number);\n\t}\n\t\n\t/**\n\t * To integer rounded down to the nearest.\n\t * @returns {Complex} fix(A), trunc(A)\n\t */\n\ttrunc() {\n\t\treturn this.fix();\n\t}\n\t\n}\n\n/**\n * Collection of constant values used in the class.\n * @ignore\n */\nconst DEFINE = {\n\n\t/**\n\t * 0\n\t */\n\tZERO : new Complex(0),\n\n\t/**\n\t * 1\n\t */\n\tONE : new Complex(1),\n\n\t/**\n\t * 2\n\t */\n\tTWO : new Complex(2),\n\n\t/**\n\t * 10\n\t */\n\tTEN : new Complex(10),\n\n\t/**\n\t * -1\n\t */\n\tMINUS_ONE : new Complex(-1),\n\n\t/**\n\t * i, j\n\t */\n\tI : new Complex([0, 1]),\n\n\t/**\n\t * - i, - j\n\t */\n\tMINUS_I : new Complex([0, -1]),\n\n\t/**\n\t * PI.\n\t */\n\tPI : new Complex(Math.PI),\n\n\t/**\n\t * 0.25 * PI.\n\t */\n\tQUARTER_PI : new Complex(0.25 * Math.PI),\n\n\t/**\n\t * 0.5 * PI.\n\t */\n\tHALF_PI : new Complex(0.5 * Math.PI),\n\n\t/**\n\t * 2 * PI.\n\t */\n\tTWO_PI : new Complex(2.0 * Math.PI),\n\n\t/**\n\t * E, Napier's constant.\n\t */\n\tE : new Complex(Math.E),\n\n\t/**\n\t * log_e(2)\n\t */\n\tLN2 : new Complex(Math.LN2),\n\n\t/**\n\t * log_e(10)\n\t */\n\tLN10 : new Complex(Math.LN10),\n\n\t/**\n\t * log_2(e)\n\t */\n\tLOG2E : new Complex(Math.LOG2E),\n\n\t/**\n\t * log_10(e)\n\t */\n\tLOG10E : new Complex(Math.LOG10E),\n\n\t/**\n\t * sqrt(2)\n\t */\n\tSQRT2 : new Complex(Math.SQRT2),\n\n\t/**\n\t * sqrt(0.5)\n\t */\n\tSQRT1_2 : new Complex(Math.SQRT1_2),\n\n\t/**\n\t * 0.5\n\t */\n\tHALF : new Complex(0.5),\n\n\t/**\n\t * Positive infinity.\n\t */\n\tPOSITIVE_INFINITY : new Complex(Number.POSITIVE_INFINITY),\n\n\t/**\n\t * Negative Infinity.\n\t */\n\tNEGATIVE_INFINITY : new Complex(Number.NEGATIVE_INFINITY),\n\n\t/**\n\t * Not a Number.\n\t */\n\tNaN : new Complex(Number.NaN)\n};\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/core/Complex.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 466,
    "kind": "typedef",
    "name": "KComplexInputData",
    "memberof": "src/math/core/Complex.js",
    "static": true,
    "longname": "src/math/core/Complex.js~KComplexInputData",
    "access": "public",
    "description": "Complex type argument.\n- Complex\n- number\n- boolean\n- string\n- Array<number>\n- {_re:number,_im:number}\n- {doubleValue:number}\n- {toString:function}\n\nInitialization can be performed as follows.\n- 1200, \"1200\", \"12e2\", \"1.2e3\"\n- \"3 + 4i\", \"4j + 3\", [3, 4].",
    "type": {
      "types": [
        "Complex",
        "number",
        "boolean",
        "string",
        "Array<number>",
        "{_re:number,_im:number}",
        "{doubleValue:number}",
        "{toString:function}"
      ],
      "optional": false,
      "name": "KComplexInputData"
    }
  },
  {
    "__docId__": 467,
    "kind": "variable",
    "name": "random_class",
    "memberof": "src/math/core/Complex.js",
    "static": true,
    "longname": "src/math/core/Complex.js~random_class",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/Complex.js",
    "importStyle": null,
    "description": "Random number generation class used within Complex.",
    "lineNumber": 42,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Random"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 468,
    "kind": "class",
    "name": "ComplexTool",
    "memberof": "src/math/core/Complex.js",
    "static": true,
    "longname": "src/math/core/Complex.js~ComplexTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/Complex.js",
    "importStyle": null,
    "description": "Collection of functions used in Complex.",
    "lineNumber": 48,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "ToComplexFromString",
    "memberof": "src/math/core/Complex.js~ComplexTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~ComplexTool.ToComplexFromString",
    "access": "public",
    "description": "Create data for complex numbers from strings.",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{real : number, imag : number}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Target strings."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{real : number, imag : number}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 470,
    "kind": "class",
    "name": "Complex",
    "memberof": "src/math/core/Complex.js",
    "static": true,
    "longname": "src/math/core/Complex.js~Complex",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/core/Complex.js",
    "importStyle": "Complex",
    "description": "Complex number class. (immutable)",
    "lineNumber": 98,
    "interface": false
  },
  {
    "__docId__": 471,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#constructor",
    "access": "public",
    "description": "Create a complex number.\n\nInitialization can be performed as follows.\n- 1200, \"1200\", \"12e2\", \"1.2e3\"\n- \"3 + 4i\", \"4j + 3\", [3, 4].",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Complex number. See how to use the function."
      }
    ]
  },
  {
    "__docId__": 472,
    "kind": "member",
    "name": "_re",
    "memberof": "src/math/core/Complex.js~Complex",
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#_re",
    "access": "private",
    "description": "The real part of this Comlex.",
    "lineNumber": 119,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 473,
    "kind": "member",
    "name": "_im",
    "memberof": "src/math/core/Complex.js~Complex",
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#_im",
    "access": "private",
    "description": "The imaginary part of this Comlex.",
    "lineNumber": 126,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "create",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.create",
    "access": "public",
    "description": "Create an entity object of this class.",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 489,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.valueOf",
    "access": "public",
    "description": "Convert number to Complex type.",
    "lineNumber": 191,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "_toComplex",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex._toComplex",
    "access": "private",
    "description": "Convert to Complex.\nIf type conversion is unnecessary, return the value as it is.",
    "lineNumber": 202,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 491,
    "kind": "method",
    "name": "_toDouble",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex._toDouble",
    "access": "private",
    "description": "Convert to real number.",
    "lineNumber": 221,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "_toInteger",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex._toInteger",
    "access": "private",
    "description": "Convert to integer.",
    "lineNumber": 240,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#clone",
    "access": "public",
    "description": "Deep copy.",
    "lineNumber": 248,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#toString",
    "access": "public",
    "description": "Convert to string.",
    "lineNumber": 256,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 495,
    "kind": "get",
    "name": "real",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#real",
    "access": "public",
    "description": "The real part of this Comlex.",
    "lineNumber": 299,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} real(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "real(A)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 496,
    "kind": "get",
    "name": "imag",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#imag",
    "access": "public",
    "description": "The imaginary part of this Comlex.",
    "lineNumber": 307,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} imag(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "imag(A)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 497,
    "kind": "get",
    "name": "norm",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#norm",
    "access": "public",
    "description": "norm.",
    "lineNumber": 315,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} |A|"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "|A|"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 498,
    "kind": "get",
    "name": "arg",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#arg",
    "access": "public",
    "description": "The argument of this complex number.",
    "lineNumber": 331,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} arg(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "arg(A)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "getDecimalPosition",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#getDecimalPosition",
    "access": "public",
    "description": "Return number of decimal places for real and imaginary parts.\n- Used to make a string.",
    "lineNumber": 348,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Number of decimal places."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Number of decimal places."
    },
    "params": []
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "sign",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#sign",
    "access": "public",
    "description": "The positive or negative sign of this number.\n- +1 if positive, -1 if negative, 0 if 0.",
    "lineNumber": 375,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#add",
    "access": "public",
    "description": "Add.",
    "lineNumber": 407,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A + B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A + B"
    }
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "sub",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#sub",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 420,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 503,
    "kind": "method",
    "name": "mul",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#mul",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 433,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "dot",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#dot",
    "access": "public",
    "description": "Inner product/Dot product.",
    "lineNumber": 459,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A * conj(B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A * conj(B)"
    }
  },
  {
    "__docId__": 505,
    "kind": "method",
    "name": "div",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#div",
    "access": "public",
    "description": "Divide.",
    "lineNumber": 485,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A / B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A / B"
    }
  },
  {
    "__docId__": 506,
    "kind": "method",
    "name": "rem",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#rem",
    "access": "public",
    "description": "Modulo, positive remainder of division.\n- Result has same sign as the Dividend.",
    "lineNumber": 513,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A rem B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Divided value (real number only)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A rem B"
    }
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "mod",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#mod",
    "access": "public",
    "description": "Modulo, positive remainder of division.\n- Result has same sign as the Divisor.",
    "lineNumber": 532,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A mod B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Divided value (real number only)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A mod B"
    }
  },
  {
    "__docId__": 508,
    "kind": "method",
    "name": "inv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#inv",
    "access": "public",
    "description": "Inverse number of this value.",
    "lineNumber": 554,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 1 / A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "1 / A"
    },
    "params": []
  },
  {
    "__docId__": 509,
    "kind": "get",
    "name": "booleanValue",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#booleanValue",
    "access": "public",
    "description": "boolean value.",
    "lineNumber": 572,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 510,
    "kind": "get",
    "name": "intValue",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#intValue",
    "access": "public",
    "description": "integer value.",
    "lineNumber": 580,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 511,
    "kind": "get",
    "name": "doubleValue",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#doubleValue",
    "access": "public",
    "description": "floating point.",
    "lineNumber": 598,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 512,
    "kind": "method",
    "name": "toBigInteger",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#toBigInteger",
    "access": "public",
    "description": "return BigInteger.",
    "lineNumber": 620,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 513,
    "kind": "method",
    "name": "toBigDecimal",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#toBigDecimal",
    "access": "public",
    "description": "return BigDecimal.",
    "lineNumber": 629,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "MathContext setting after calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 514,
    "kind": "method",
    "name": "toFraction",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#toFraction",
    "access": "public",
    "description": "return Fraction.",
    "lineNumber": 642,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 515,
    "kind": "method",
    "name": "toComplex",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#toComplex",
    "access": "public",
    "description": "return Complex.",
    "lineNumber": 650,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 516,
    "kind": "method",
    "name": "toMatrix",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#toMatrix",
    "access": "public",
    "description": "return Matrix.",
    "lineNumber": 658,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 517,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#equals",
    "access": "public",
    "description": "Equals.",
    "lineNumber": 672,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 518,
    "kind": "method",
    "name": "equalsState",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#equalsState",
    "access": "public",
    "description": "Numeric type match.",
    "lineNumber": 692,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#compareTo",
    "access": "public",
    "description": "Compare values.",
    "lineNumber": 727,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A > B ? 1 : (A === B ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A > B ? 1 : (A === B ? 0 : -1)"
    }
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#max",
    "access": "public",
    "description": "Maximum number.",
    "lineNumber": 766,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#min",
    "access": "public",
    "description": "Minimum number.",
    "lineNumber": 781,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "clip",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#clip",
    "access": "public",
    "description": "Clip number within range.",
    "lineNumber": 797,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} min(max(x, min), max)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "min(max(x, min), max)"
    }
  },
  {
    "__docId__": 523,
    "kind": "method",
    "name": "floor",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#floor",
    "access": "public",
    "description": "Floor.",
    "lineNumber": 824,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} floor(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "floor(A)"
    },
    "params": []
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "ceil",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#ceil",
    "access": "public",
    "description": "Ceil.",
    "lineNumber": 832,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} ceil(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "ceil(A)"
    },
    "params": []
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "round",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#round",
    "access": "public",
    "description": "Rounding to the nearest integer.",
    "lineNumber": 840,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} round(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "round(A)"
    },
    "params": []
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "fix",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#fix",
    "access": "public",
    "description": "To integer rounded down to the nearest.",
    "lineNumber": 848,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} fix(A), trunc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "fix(A), trunc(A)"
    },
    "params": []
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "fract",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#fract",
    "access": "public",
    "description": "Fraction.",
    "lineNumber": 856,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} fract(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "fract(A)"
    },
    "params": []
  },
  {
    "__docId__": 528,
    "kind": "method",
    "name": "abs",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#abs",
    "access": "public",
    "description": "Absolute value.",
    "lineNumber": 868,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} abs(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "abs(A)"
    },
    "params": []
  },
  {
    "__docId__": 529,
    "kind": "method",
    "name": "conj",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#conj",
    "access": "public",
    "description": "Complex conjugate.",
    "lineNumber": 876,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} real(A) - imag(A)j"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "real(A) - imag(A)j"
    },
    "params": []
  },
  {
    "__docId__": 530,
    "kind": "method",
    "name": "negate",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#negate",
    "access": "public",
    "description": "this * -1",
    "lineNumber": 888,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} -A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A"
    },
    "params": []
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "pow",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#pow",
    "access": "public",
    "description": "Power function.",
    "lineNumber": 901,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} pow(A, B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "pow(A, B)"
    }
  },
  {
    "__docId__": 532,
    "kind": "method",
    "name": "square",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#square",
    "access": "public",
    "description": "Square.",
    "lineNumber": 929,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} pow(A, 2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "pow(A, 2)"
    },
    "params": []
  },
  {
    "__docId__": 533,
    "kind": "method",
    "name": "sqrt",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#sqrt",
    "access": "public",
    "description": "Square root.",
    "lineNumber": 940,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sqrt(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sqrt(A)"
    },
    "params": []
  },
  {
    "__docId__": 534,
    "kind": "method",
    "name": "cbrt",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#cbrt",
    "access": "public",
    "description": "Cube root.",
    "lineNumber": 959,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} cbrt(A)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "n",
        "description": "Value type(0,1,2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "cbrt(A)"
    }
  },
  {
    "__docId__": 535,
    "kind": "method",
    "name": "rsqrt",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#rsqrt",
    "access": "public",
    "description": "Reciprocal square root.",
    "lineNumber": 977,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} rsqrt(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "rsqrt(A)"
    },
    "params": []
  },
  {
    "__docId__": 536,
    "kind": "method",
    "name": "log",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#log",
    "access": "public",
    "description": "Logarithmic function.",
    "lineNumber": 993,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} log(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "log(A)"
    },
    "params": []
  },
  {
    "__docId__": 537,
    "kind": "method",
    "name": "exp",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#exp",
    "access": "public",
    "description": "Exponential function.",
    "lineNumber": 1005,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} exp(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "exp(A)"
    },
    "params": []
  },
  {
    "__docId__": 538,
    "kind": "method",
    "name": "expm1",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#expm1",
    "access": "public",
    "description": "e^x - 1",
    "lineNumber": 1018,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} expm1(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "expm1(A)"
    },
    "params": []
  },
  {
    "__docId__": 539,
    "kind": "method",
    "name": "log1p",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#log1p",
    "access": "public",
    "description": "ln(1 + x)",
    "lineNumber": 1026,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} log1p(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "log1p(A)"
    },
    "params": []
  },
  {
    "__docId__": 540,
    "kind": "method",
    "name": "log2",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#log2",
    "access": "public",
    "description": "log_2(x)",
    "lineNumber": 1034,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} log2(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "log2(A)"
    },
    "params": []
  },
  {
    "__docId__": 541,
    "kind": "method",
    "name": "log10",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#log10",
    "access": "public",
    "description": "log_10(x)",
    "lineNumber": 1043,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} log10(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "log10(A)"
    },
    "params": []
  },
  {
    "__docId__": 542,
    "kind": "method",
    "name": "sin",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#sin",
    "access": "public",
    "description": "Sine function.",
    "lineNumber": 1055,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sin(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sin(A)"
    },
    "params": []
  },
  {
    "__docId__": 543,
    "kind": "method",
    "name": "cos",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#cos",
    "access": "public",
    "description": "Cosine function.",
    "lineNumber": 1070,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} cos(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "cos(A)"
    },
    "params": []
  },
  {
    "__docId__": 544,
    "kind": "method",
    "name": "tan",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#tan",
    "access": "public",
    "description": "Tangent function.",
    "lineNumber": 1085,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} tan(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "tan(A)"
    },
    "params": []
  },
  {
    "__docId__": 545,
    "kind": "method",
    "name": "atan",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#atan",
    "access": "public",
    "description": "Atan (arc tangent) function.\n- Return the values of [-PI/2, PI/2].",
    "lineNumber": 1098,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} atan(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "atan(A)"
    },
    "params": []
  },
  {
    "__docId__": 546,
    "kind": "method",
    "name": "atan2",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#atan2",
    "access": "public",
    "description": "Atan (arc tangent) function.\nReturn the values of [-PI, PI] .\nSupports only real numbers.",
    "lineNumber": 1113,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} atan2(Y, X)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "number",
        "description": "X"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "atan2(Y, X)"
    }
  },
  {
    "__docId__": 547,
    "kind": "method",
    "name": "asin",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#asin",
    "access": "public",
    "description": "Arc sine function.",
    "lineNumber": 1135,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} asin(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "asin(A)"
    },
    "params": []
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "acos",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#acos",
    "access": "public",
    "description": "Arc cosine function.",
    "lineNumber": 1144,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} acos(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "acos(A)"
    },
    "params": []
  },
  {
    "__docId__": 549,
    "kind": "method",
    "name": "sinh",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#sinh",
    "access": "public",
    "description": "Hyperbolic sine function.",
    "lineNumber": 1154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sinh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sinh(A)"
    },
    "params": []
  },
  {
    "__docId__": 550,
    "kind": "method",
    "name": "asinh",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#asinh",
    "access": "public",
    "description": "Inverse hyperbolic sine function.",
    "lineNumber": 1164,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} asinh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "asinh(A)"
    },
    "params": []
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "cosh",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#cosh",
    "access": "public",
    "description": "Hyperbolic cosine function.",
    "lineNumber": 1176,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} cosh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "cosh(A)"
    },
    "params": []
  },
  {
    "__docId__": 552,
    "kind": "method",
    "name": "acosh",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#acosh",
    "access": "public",
    "description": "Inverse hyperbolic cosine function.",
    "lineNumber": 1185,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} acosh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "acosh(A)"
    },
    "params": []
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "tanh",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#tanh",
    "access": "public",
    "description": "Hyperbolic tangent function.",
    "lineNumber": 1205,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} tanh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "tanh(A)"
    },
    "params": []
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "atanh",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#atanh",
    "access": "public",
    "description": "Inverse hyperbolic tangent function.",
    "lineNumber": 1224,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} atanh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "atanh(A)"
    },
    "params": []
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "sec",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#sec",
    "access": "public",
    "description": "Secant function.",
    "lineNumber": 1236,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sec(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sec(A)"
    },
    "params": []
  },
  {
    "__docId__": 556,
    "kind": "method",
    "name": "asec",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#asec",
    "access": "public",
    "description": "Reverse secant function.",
    "lineNumber": 1245,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} asec(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "asec(A)"
    },
    "params": []
  },
  {
    "__docId__": 557,
    "kind": "method",
    "name": "sech",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#sech",
    "access": "public",
    "description": "Hyperbolic secant function.",
    "lineNumber": 1254,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sech(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sech(A)"
    },
    "params": []
  },
  {
    "__docId__": 558,
    "kind": "method",
    "name": "asech",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#asech",
    "access": "public",
    "description": "Inverse hyperbolic secant function.",
    "lineNumber": 1263,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} asech(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "asech(A)"
    },
    "params": []
  },
  {
    "__docId__": 559,
    "kind": "method",
    "name": "cot",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#cot",
    "access": "public",
    "description": "Cotangent function.",
    "lineNumber": 1280,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} cot(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "cot(A)"
    },
    "params": []
  },
  {
    "__docId__": 560,
    "kind": "method",
    "name": "acot",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#acot",
    "access": "public",
    "description": "Inverse cotangent function.",
    "lineNumber": 1289,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} acot(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "acot(A)"
    },
    "params": []
  },
  {
    "__docId__": 561,
    "kind": "method",
    "name": "coth",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#coth",
    "access": "public",
    "description": "Hyperbolic cotangent function.",
    "lineNumber": 1298,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} coth(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "coth(A)"
    },
    "params": []
  },
  {
    "__docId__": 562,
    "kind": "method",
    "name": "acoth",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#acoth",
    "access": "public",
    "description": "Inverse hyperbolic cotangent function.",
    "lineNumber": 1310,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} acoth(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "acoth(A)"
    },
    "params": []
  },
  {
    "__docId__": 563,
    "kind": "method",
    "name": "csc",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#csc",
    "access": "public",
    "description": "Cosecant function.",
    "lineNumber": 1322,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} csc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "csc(A)"
    },
    "params": []
  },
  {
    "__docId__": 564,
    "kind": "method",
    "name": "acsc",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#acsc",
    "access": "public",
    "description": "Inverse cosecant function.",
    "lineNumber": 1331,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} acsc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "acsc(A)"
    },
    "params": []
  },
  {
    "__docId__": 565,
    "kind": "method",
    "name": "csch",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#csch",
    "access": "public",
    "description": "Hyperbolic cosecant function.",
    "lineNumber": 1340,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} csch(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "csch(A)"
    },
    "params": []
  },
  {
    "__docId__": 566,
    "kind": "method",
    "name": "acsch",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#acsch",
    "access": "public",
    "description": "Inverse hyperbolic cosecant function.",
    "lineNumber": 1349,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} acsch(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "acsch(A)"
    },
    "params": []
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "sinc",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#sinc",
    "access": "public",
    "description": "Normalized sinc function.",
    "lineNumber": 1362,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sinc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sinc(A)"
    },
    "params": []
  },
  {
    "__docId__": 568,
    "kind": "method",
    "name": "rand",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.rand",
    "access": "public",
    "description": "Create random values with uniform random numbers.",
    "lineNumber": 1383,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": true,
        "name": "random",
        "description": "Class for creating random numbers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 569,
    "kind": "method",
    "name": "randn",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.randn",
    "access": "public",
    "description": "Create random values with normal distribution.",
    "lineNumber": 1393,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": true,
        "name": "random",
        "description": "Class for creating random numbers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 570,
    "kind": "method",
    "name": "isInteger",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isInteger",
    "access": "public",
    "description": "Return true if the value is integer.",
    "lineNumber": 1407,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 571,
    "kind": "method",
    "name": "isComplexInteger",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isComplexInteger",
    "access": "public",
    "description": "Returns true if the vallue is complex integer (including normal integer).",
    "lineNumber": 1417,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(A) === integer && imag(A) === integer"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(A) === integer && imag(A) === integer"
    }
  },
  {
    "__docId__": 572,
    "kind": "method",
    "name": "isZero",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isZero",
    "access": "public",
    "description": "this === 0",
    "lineNumber": 1429,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === 0"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === 0"
    }
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "isOne",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isOne",
    "access": "public",
    "description": "this === 1",
    "lineNumber": 1439,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === 1"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === 1"
    }
  },
  {
    "__docId__": 574,
    "kind": "method",
    "name": "isComplex",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isComplex",
    "access": "public",
    "description": "Returns true if the vallue is complex number (imaginary part is not 0).",
    "lineNumber": 1449,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} imag(A) !== 0"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "imag(A) !== 0"
    }
  },
  {
    "__docId__": 575,
    "kind": "method",
    "name": "isReal",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isReal",
    "access": "public",
    "description": "Return true if the value is real number.",
    "lineNumber": 1459,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} imag(A) === 0"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "imag(A) === 0"
    }
  },
  {
    "__docId__": 576,
    "kind": "method",
    "name": "isNaN",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isNaN",
    "access": "public",
    "description": "this === NaN",
    "lineNumber": 1468,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isNaN(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isNaN(A)"
    },
    "params": []
  },
  {
    "__docId__": 577,
    "kind": "method",
    "name": "isPositive",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isPositive",
    "access": "public",
    "description": "Return true if this real part of the complex positive.",
    "lineNumber": 1476,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(x) > 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(x) > 0"
    },
    "params": []
  },
  {
    "__docId__": 578,
    "kind": "method",
    "name": "isNegative",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isNegative",
    "access": "public",
    "description": "real(this) < 0",
    "lineNumber": 1486,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(x) < 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(x) < 0"
    },
    "params": []
  },
  {
    "__docId__": 579,
    "kind": "method",
    "name": "isNotNegative",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isNotNegative",
    "access": "public",
    "description": "real(this) >= 0",
    "lineNumber": 1494,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(x) >= 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(x) >= 0"
    },
    "params": []
  },
  {
    "__docId__": 580,
    "kind": "method",
    "name": "isPositiveInfinity",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isPositiveInfinity",
    "access": "public",
    "description": "this === Infinity",
    "lineNumber": 1502,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isPositiveInfinity(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isPositiveInfinity(A)"
    },
    "params": []
  },
  {
    "__docId__": 581,
    "kind": "method",
    "name": "isNegativeInfinity",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isNegativeInfinity",
    "access": "public",
    "description": "this === -Infinity",
    "lineNumber": 1510,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isNegativeInfinity(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isNegativeInfinity(A)"
    },
    "params": []
  },
  {
    "__docId__": 582,
    "kind": "method",
    "name": "isInfinite",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isInfinite",
    "access": "public",
    "description": "this === Infinity or -Infinity",
    "lineNumber": 1518,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isPositiveInfinity(A) || isNegativeInfinity(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isPositiveInfinity(A) || isNegativeInfinity(A)"
    },
    "params": []
  },
  {
    "__docId__": 583,
    "kind": "method",
    "name": "isFinite",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isFinite",
    "access": "public",
    "description": "Return true if the value is finite number.",
    "lineNumber": 1526,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} !isNaN(A) && !isInfinite(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "!isNaN(A) && !isInfinite(A)"
    },
    "params": []
  },
  {
    "__docId__": 584,
    "kind": "method",
    "name": "gammaln",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#gammaln",
    "access": "public",
    "description": "Log-gamma function.\n- Calculate from real values.",
    "lineNumber": 1539,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 585,
    "kind": "method",
    "name": "gamma",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#gamma",
    "access": "public",
    "description": "Gamma function.\n- Calculate from real values.",
    "lineNumber": 1548,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 586,
    "kind": "method",
    "name": "gammainc",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#gammainc",
    "access": "public",
    "description": "Incomplete gamma function.\n- Calculate from real values.",
    "lineNumber": 1559,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 587,
    "kind": "method",
    "name": "gampdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#gampdf",
    "access": "public",
    "description": "Probability density function (PDF) of the gamma distribution.\n- Calculate from real values.",
    "lineNumber": 1571,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 588,
    "kind": "method",
    "name": "gamcdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#gamcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of gamma distribution.\n- Calculate from real values.",
    "lineNumber": 1584,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 589,
    "kind": "method",
    "name": "gaminv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#gaminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of gamma distribution.\n- Calculate from real values.",
    "lineNumber": 1597,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 590,
    "kind": "method",
    "name": "beta",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#beta",
    "access": "public",
    "description": "Beta function.\n- Calculate from real values.",
    "lineNumber": 1609,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 591,
    "kind": "method",
    "name": "betainc",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#betainc",
    "access": "public",
    "description": "Incomplete beta function.\n- Calculate from real values.",
    "lineNumber": 1622,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 592,
    "kind": "method",
    "name": "betapdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#betapdf",
    "access": "public",
    "description": "Probability density function (PDF) of beta distribution.\n- Calculate from real values.",
    "lineNumber": 1635,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 593,
    "kind": "method",
    "name": "betacdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#betacdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of beta distribution.\n- Calculate from real values.",
    "lineNumber": 1648,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 594,
    "kind": "method",
    "name": "betainv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#betainv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of beta distribution.\n- Calculate from real values.",
    "lineNumber": 1661,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 595,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#factorial",
    "access": "public",
    "description": "Factorial function, x!.\n- Calculate from real values.",
    "lineNumber": 1672,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 596,
    "kind": "method",
    "name": "nchoosek",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#nchoosek",
    "access": "public",
    "description": "Binomial coefficient, number of all combinations, nCk.\n- Calculate from real values.",
    "lineNumber": 1682,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 597,
    "kind": "method",
    "name": "erf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#erf",
    "access": "public",
    "description": "Error function.\n- Calculate from real values.",
    "lineNumber": 1692,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 598,
    "kind": "method",
    "name": "erfc",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#erfc",
    "access": "public",
    "description": "Complementary error function.\n- Calculate from real values.",
    "lineNumber": 1701,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 599,
    "kind": "method",
    "name": "erfinv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#erfinv",
    "access": "public",
    "description": "Inverse function of Error function.\n- Calculate from real values.",
    "lineNumber": 1710,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 600,
    "kind": "method",
    "name": "erfcinv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#erfcinv",
    "access": "public",
    "description": "Inverse function of Complementary error function.\n- Calculate from real values.",
    "lineNumber": 1719,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 601,
    "kind": "method",
    "name": "normpdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#normpdf",
    "access": "public",
    "description": "Probability density function (PDF) of normal distribution.\n- Calculate from real values.",
    "lineNumber": 1730,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 602,
    "kind": "method",
    "name": "normcdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#normcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of normal distribution.\n- Calculate from real values.",
    "lineNumber": 1743,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 603,
    "kind": "method",
    "name": "norminv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#norminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of normal distribution.\n- Calculate from real values.",
    "lineNumber": 1756,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 604,
    "kind": "method",
    "name": "binopdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#binopdf",
    "access": "public",
    "description": "Probability density function (PDF) of binomial distribution.\n- Calculate from real values.",
    "lineNumber": 1769,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 605,
    "kind": "method",
    "name": "binocdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#binocdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of binomial distribution.\n- Calculate from real values.",
    "lineNumber": 1783,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 606,
    "kind": "method",
    "name": "binoinv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#binoinv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of binomial distribution.\n- Calculate from real values.",
    "lineNumber": 1796,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 607,
    "kind": "method",
    "name": "poisspdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#poisspdf",
    "access": "public",
    "description": "Probability density function (PDF) of Poisson distribution.\n- Calculate from real values.",
    "lineNumber": 1808,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 608,
    "kind": "method",
    "name": "poisscdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#poisscdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Poisson distribution.\n- Calculate from real values.",
    "lineNumber": 1819,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 609,
    "kind": "method",
    "name": "poissinv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#poissinv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of Poisson distribution.\n- Calculate from real values.",
    "lineNumber": 1830,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 610,
    "kind": "method",
    "name": "tpdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#tpdf",
    "access": "public",
    "description": "Probability density function (PDF) of Student's t-distribution.\n- Calculate from real values.",
    "lineNumber": 1841,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 611,
    "kind": "method",
    "name": "tcdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#tcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution.\n- Calculate from real values.",
    "lineNumber": 1852,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 612,
    "kind": "method",
    "name": "tinv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#tinv",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution.\n- Calculate from real values.",
    "lineNumber": 1863,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 613,
    "kind": "method",
    "name": "tdist",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#tdist",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.\n- Calculate from real values.",
    "lineNumber": 1875,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "tails",
        "description": "Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 614,
    "kind": "method",
    "name": "tinv2",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#tinv2",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.\n- Calculate from real values.",
    "lineNumber": 1887,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 615,
    "kind": "method",
    "name": "chi2pdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#chi2pdf",
    "access": "public",
    "description": "Probability density function (PDF) of chi-square distribution.\n- Calculate from real values.",
    "lineNumber": 1898,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 616,
    "kind": "method",
    "name": "chi2cdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#chi2cdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of chi-square distribution.\n- Calculate from real values.",
    "lineNumber": 1909,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 617,
    "kind": "method",
    "name": "chi2inv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#chi2inv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of chi-square distribution.\n- Calculate from real values.",
    "lineNumber": 1920,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 618,
    "kind": "method",
    "name": "fpdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#fpdf",
    "access": "public",
    "description": "Probability density function (PDF) of F-distribution.\n- Calculate from real values.",
    "lineNumber": 1932,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 619,
    "kind": "method",
    "name": "fcdf",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#fcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of F-distribution.\n- Calculate from real values.",
    "lineNumber": 1945,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 620,
    "kind": "method",
    "name": "finv",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#finv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of F-distribution.\n- Calculate from real values.",
    "lineNumber": 1958,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 621,
    "kind": "method",
    "name": "and",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#and",
    "access": "public",
    "description": "Logical AND.\n- Calculated as an integer.",
    "lineNumber": 1974,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A & B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A & B"
    }
  },
  {
    "__docId__": 622,
    "kind": "method",
    "name": "or",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#or",
    "access": "public",
    "description": "Logical OR.\n- Calculated as an integer.",
    "lineNumber": 1986,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A | B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A | B"
    }
  },
  {
    "__docId__": 623,
    "kind": "method",
    "name": "xor",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#xor",
    "access": "public",
    "description": "Logical Exclusive-OR.\n- Calculated as an integer.",
    "lineNumber": 1998,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A ^ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A ^ B"
    }
  },
  {
    "__docId__": 624,
    "kind": "method",
    "name": "not",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#not",
    "access": "public",
    "description": "Logical Not. (mutable)\n- Calculated as an integer.",
    "lineNumber": 2009,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} !A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "!A"
    },
    "params": []
  },
  {
    "__docId__": 625,
    "kind": "method",
    "name": "shift",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#shift",
    "access": "public",
    "description": "this << n\n- Calculated as an integer.",
    "lineNumber": 2020,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A << n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A << n"
    }
  },
  {
    "__docId__": 626,
    "kind": "method",
    "name": "gcd",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#gcd",
    "access": "public",
    "description": "Euclidean algorithm.\n- Calculated as an integer.",
    "lineNumber": 2036,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} gcd(x, y)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "gcd(x, y)"
    }
  },
  {
    "__docId__": 627,
    "kind": "method",
    "name": "extgcd",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#extgcd",
    "access": "public",
    "description": "Extended Euclidean algorithm.\n- Calculated as an integer.",
    "lineNumber": 2049,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Complex>} [a, b, gcd(x, y)], Result of calculating a*x + b*y = gcd(x, y)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Complex>"
      ],
      "spread": false,
      "description": "[a, b, gcd(x, y)], Result of calculating a*x + b*y = gcd(x, y)."
    }
  },
  {
    "__docId__": 628,
    "kind": "method",
    "name": "lcm",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#lcm",
    "access": "public",
    "description": "Least common multiple.\n- Calculated as an integer.",
    "lineNumber": 2062,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} lcm(x, y)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "lcm(x, y)"
    }
  },
  {
    "__docId__": 629,
    "kind": "method",
    "name": "modPow",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#modPow",
    "access": "public",
    "description": "Modular exponentiation.\n- Calculated as an integer.",
    "lineNumber": 2080,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A^B mod m"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exponent",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A^B mod m"
    }
  },
  {
    "__docId__": 630,
    "kind": "method",
    "name": "modInverse",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#modInverse",
    "access": "public",
    "description": "Modular multiplicative inverse.\n- Calculated as an integer.",
    "lineNumber": 2094,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A^(-1) mod m"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A^(-1) mod m"
    }
  },
  {
    "__docId__": 631,
    "kind": "method",
    "name": "isPrime",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isPrime",
    "access": "public",
    "description": "Return true if the value is prime number.\n- Calculated as an integer.\n- Calculate up to `2251799813685248(=2^51)`.",
    "lineNumber": 2111,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - If the calculation range is exceeded, null is returned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "If the calculation range is exceeded, null is returned."
    },
    "params": []
  },
  {
    "__docId__": 632,
    "kind": "method",
    "name": "isProbablePrime",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#isProbablePrime",
    "access": "public",
    "description": "Return true if the value is prime number by Miller-Labin prime number determination method.\n\nAttention : it takes a very long time to process.\n- Calculated as an integer.",
    "lineNumber": 2124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "certainty",
        "description": "Repeat count (prime precision)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 633,
    "kind": "method",
    "name": "nextProbablePrime",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#nextProbablePrime",
    "access": "public",
    "description": "Next prime.",
    "lineNumber": 2135,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "certainty",
        "description": "Repeat count (prime precision)."
      },
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100000",
        "defaultRaw": 100000,
        "name": "search_max",
        "description": "Search range of next prime."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 634,
    "kind": "get",
    "name": "ONE",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.ONE",
    "access": "public",
    "description": "1",
    "lineNumber": 2150,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 635,
    "kind": "get",
    "name": "TWO",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.TWO",
    "access": "public",
    "description": "2",
    "lineNumber": 2158,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "2"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 636,
    "kind": "get",
    "name": "TEN",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.TEN",
    "access": "public",
    "description": "10",
    "lineNumber": 2166,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 10"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "10"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 637,
    "kind": "get",
    "name": "ZERO",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.ZERO",
    "access": "public",
    "description": "0",
    "lineNumber": 2174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "0"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 638,
    "kind": "get",
    "name": "MINUS_ONE",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.MINUS_ONE",
    "access": "public",
    "description": "-1",
    "lineNumber": 2182,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} -1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 639,
    "kind": "get",
    "name": "I",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.I",
    "access": "public",
    "description": "i, j",
    "lineNumber": 2190,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} i"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "i"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 640,
    "kind": "get",
    "name": "MINUS_I",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.MINUS_I",
    "access": "public",
    "description": "- i, - j",
    "lineNumber": 2198,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} - i"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "i"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 641,
    "kind": "get",
    "name": "PI",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.PI",
    "access": "public",
    "description": "PI.",
    "lineNumber": 2206,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 3.14..."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "3.14..."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 642,
    "kind": "get",
    "name": "QUARTER_PI",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.QUARTER_PI",
    "access": "public",
    "description": "0.25 * PI.",
    "lineNumber": 2214,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 0.78..."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "0.78..."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 643,
    "kind": "get",
    "name": "HALF_PI",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.HALF_PI",
    "access": "public",
    "description": "0.5 * PI.",
    "lineNumber": 2222,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 1.57..."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "1.57..."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 644,
    "kind": "get",
    "name": "TWO_PI",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.TWO_PI",
    "access": "public",
    "description": "2 * PI.",
    "lineNumber": 2230,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 6.28..."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "6.28..."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 645,
    "kind": "get",
    "name": "E",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.E",
    "access": "public",
    "description": "E, Napier's constant.",
    "lineNumber": 2238,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 2.71..."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "2.71..."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 646,
    "kind": "get",
    "name": "LN2",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.LN2",
    "access": "public",
    "description": "log_e(2)",
    "lineNumber": 2246,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} ln(2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "ln(2)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 647,
    "kind": "get",
    "name": "LN10",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.LN10",
    "access": "public",
    "description": "log_e(10)",
    "lineNumber": 2254,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} ln(10)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "ln(10)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 648,
    "kind": "get",
    "name": "LOG2E",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.LOG2E",
    "access": "public",
    "description": "log_2(e)",
    "lineNumber": 2262,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} log_2(e)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "log_2(e)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 649,
    "kind": "get",
    "name": "LOG10E",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.LOG10E",
    "access": "public",
    "description": "log_10(e)",
    "lineNumber": 2270,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} log_10(e)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "log_10(e)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 650,
    "kind": "get",
    "name": "SQRT2",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.SQRT2",
    "access": "public",
    "description": "sqrt(2)",
    "lineNumber": 2278,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sqrt(2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sqrt(2)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 651,
    "kind": "get",
    "name": "SQRT1_2",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.SQRT1_2",
    "access": "public",
    "description": "sqrt(0.5)",
    "lineNumber": 2286,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sqrt(0.5)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sqrt(0.5)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 652,
    "kind": "get",
    "name": "HALF",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.HALF",
    "access": "public",
    "description": "0.5",
    "lineNumber": 2294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 0.5"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "0.5"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 653,
    "kind": "get",
    "name": "POSITIVE_INFINITY",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.POSITIVE_INFINITY",
    "access": "public",
    "description": "Positive infinity.",
    "lineNumber": 2302,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} Infinity"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "Infinity"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 654,
    "kind": "get",
    "name": "NEGATIVE_INFINITY",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.NEGATIVE_INFINITY",
    "access": "public",
    "description": "Negative Infinity.",
    "lineNumber": 2310,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} -Infinity"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "Infinity"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 655,
    "kind": "get",
    "name": "NaN",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Complex.js~Complex.NaN",
    "access": "public",
    "description": "Not a Number.",
    "lineNumber": 2318,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} NaN"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "NaN"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 656,
    "kind": "method",
    "name": "signum",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#signum",
    "access": "public",
    "description": "The positive or negative sign of this number.\n- +1 if positive, -1 if negative, 0 if 0.",
    "lineNumber": 2331,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 657,
    "kind": "method",
    "name": "subtract",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#subtract",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 2340,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 658,
    "kind": "method",
    "name": "multiply",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#multiply",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 2349,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 659,
    "kind": "method",
    "name": "divide",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#divide",
    "access": "public",
    "description": "Divide.",
    "lineNumber": 2358,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} fix(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "fix(A / B)"
    }
  },
  {
    "__docId__": 660,
    "kind": "method",
    "name": "remainder",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#remainder",
    "access": "public",
    "description": "Remainder of division.\n- Result has same sign as the Dividend.",
    "lineNumber": 2368,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A % B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KComplexInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A % B"
    }
  },
  {
    "__docId__": 661,
    "kind": "method",
    "name": "trunc",
    "memberof": "src/math/core/Complex.js~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Complex.js~Complex#trunc",
    "access": "public",
    "description": "To integer rounded down to the nearest.",
    "lineNumber": 2376,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} fix(A), trunc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "fix(A), trunc(A)"
    },
    "params": []
  },
  {
    "__docId__": 662,
    "kind": "variable",
    "name": "DEFINE",
    "memberof": "src/math/core/Complex.js",
    "static": true,
    "longname": "src/math/core/Complex.js~DEFINE",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/Complex.js",
    "importStyle": null,
    "description": "Collection of constant values used in the class.",
    "lineNumber": 2386,
    "ignore": true,
    "type": {
      "types": [
        "{\"ZERO\": *, \"ONE\": *, \"TWO\": *, \"TEN\": *, \"MINUS_ONE\": *, \"I\": *, \"MINUS_I\": *, \"PI\": *, \"QUARTER_PI\": *, \"HALF_PI\": *, \"TWO_PI\": *, \"E\": *, \"LN2\": *, \"LN10\": *, \"LOG2E\": *, \"LOG10E\": *, \"SQRT2\": *, \"SQRT1_2\": *, \"HALF\": *, \"POSITIVE_INFINITY\": *, \"NEGATIVE_INFINITY\": *, \"NaN\": *}"
      ]
    }
  },
  {
    "__docId__": 663,
    "kind": "file",
    "name": "src/math/core/context/MathContext.js",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\nimport RoundingMode, {RoundingModeEntity} from \"./RoundingMode.js\";\n\n/**\n * Configuration class for BigDecimal (immutable).\n */\nexport default class MathContext {\n\n\t/**\n\t * Create BigDecimal configuration.\n\t * @param {string|number|MathContext} precision_or_name - Precision. Or String output by MathContext.toString.\n\t * @param {RoundingModeEntity} [roundingMode=RoundingMode.HALF_UP] - RoundingMode.\n\t */\n\tconstructor(precision_or_name, roundingMode) {\n\n\t\t/**\n\t\t * The precision of this BigDecimal.\n\t\t * @type {number}\n\t\t * @private\n\t\t */\n\t\tthis.precision = 0;\n\t\t\n\t\t/**\n\t\t * Method of rounding.\n\t\t * @type {RoundingModeEntity}\n\t\t * @private\n\t\t */\n\t\tthis.roundingMode = roundingMode === undefined ? RoundingMode.HALF_UP : roundingMode;\n\n\t\tif(typeof precision_or_name === \"number\") {\n\t\t\tthis.precision = precision_or_name;\n\t\t}\n\t\telse if(precision_or_name instanceof MathContext) {\n\t\t\tthis.roundingMode = roundingMode === undefined ? precision_or_name.roundingMode : roundingMode;\n\t\t\tthis.precision = precision_or_name.precision;\n\t\t}\n\t\telse if(typeof precision_or_name === \"string\") {\n\t\t\tlet buff;\n\t\t\tbuff = precision_or_name.match(/precision=\\d+/);\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0].substring(\"precision=\".length, buff[0].length);\n\t\t\t\tthis.precision = parseInt(buff, 10);\n\t\t\t}\n\t\t\tbuff = precision_or_name.match(/roundingMode=\\w+/);\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0].substring(\"roundingMode=\".length, buff[0].length);\n\t\t\t\tthis.roundingMode = RoundingMode.valueOf(buff);\n\t\t\t}\t\n\t\t}\n\t\tif(this.precision < 0) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t}\n\t\n\t/**\n\t * Create BigDecimal configuration.\n\t * @param {string|number|MathContext} precision_or_name - Precision. Or String output by MathContext.toString.\n\t * @param {RoundingModeEntity} [roundingMode=RoundingMode.HALF_UP] - RoundingMode.\n\t * @returns {MathContext}\n\t */\n\tstatic create(precision_or_name, roundingMode) {\n\t\tif(precision_or_name instanceof MathContext) {\n\t\t\treturn precision_or_name;\n\t\t}\n\t\treturn new MathContext(precision_or_name, roundingMode);\n\t}\n\n\t/**\n\t * The precision of this BigDecimal.\n\t * @returns {number}\n\t */\n\tgetPrecision() {\n\t\treturn this.precision;\n\t}\n\n\t/**\n\t * Method of rounding.\n\t * @returns {RoundingModeEntity}\n\t */\n\tgetRoundingMode() {\n\t\treturn this.roundingMode;\n\t}\n\n\t/**\n\t * Equals.\n\t * @param {MathContext} x - Number to compare.\n\t * @returns {boolean}\n\t */\n\tequals(x) {\n\t\tif(x instanceof MathContext) {\n\t\t\tif(x.toString() === this.toString()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Convert to string.\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn (\"precision=\" + this.precision + \" roundingMode=\" + this.roundingMode.toString());\n\t}\n\n\t/**\n\t * Increase in the precision of x.\n\t * - If the setting has no precision limit, do not change.\n\t * @param {number} [x=1]\n\t * @returns {MathContext}\n\t */\n\tincreasePrecision(x) {\n\t\tif(this.precision === 0) {\n\t\t\treturn this;\n\t\t}\n\t\tconst new_precision = this.precision + (x === undefined ? 1 : x);\n\t\treturn new MathContext(Math.max(1, new_precision), this.roundingMode);\n\t}\n\t\n\t/**\n\t * Decrease in the precision of x.\n\t * - If the setting has no precision limit, do not change.\n\t * @param {number} [x=1]\n\t * @returns {MathContext}\n\t */\n\tdecreasePrecision(x) {\n\t\tif(this.precision === 0) {\n\t\t\treturn this;\n\t\t}\n\t\tconst new_precision = this.precision - (x === undefined ? 1 : x);\n\t\treturn new MathContext(Math.max(1, new_precision), this.roundingMode);\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * No decimal point limit.\n\t * However, an error occurs in the case of cyclic fraction in division.\n\t * @returns {MathContext}\n\t */\n\tstatic get UNLIMITED() {\n\t\treturn DEFINE.UNLIMITED;\n\t}\n\n\t/**\n\t * 32-bit floating point.\n\t * - Significand precision: 23 bits\n\t * - Equivalent of the C language float.\n\t * @returns {MathContext}\n\t */\n\tstatic get DECIMAL32() {\n\t\treturn DEFINE.DECIMAL32;\n\t}\n\n\n\t/**\n\t * 64-bit floating point.\n\t * - Significand precision: 52 bits\n\t * - Equivalent of the C language double.\n\t * @returns {MathContext}\n\t */\n\tstatic get DECIMAL64() {\n\t\treturn DEFINE.DECIMAL64;\n\t}\n\n\t/**\n\t * 128-bit floating point.\n\t * - Significand precision: 112 bits\n\t * - Equivalent of the C language long double.\n\t * @returns {MathContext}\n\t */\n\tstatic get DECIMAL128() {\n\t\treturn DEFINE.DECIMAL128;\n\t}\n\n\t/**\n\t * 256-bit floating point.\n\t * - Significand precision: 237 bits\n\t * @type {MathContext}\n\t */\n\tstatic get DECIMAL256() {\n\t\treturn DEFINE.DECIMAL256;\n\t}\n\n}\n\n/**\n * Collection of constant values used in the class.\n * @ignore\n */\nconst DEFINE = {\n\n\t/**\n\t * No decimal point limit.\n\t * However, an error occurs in the case of cyclic fraction in division.\n\t * @type {MathContext}\n\t */\n\tUNLIMITED\t: new MathContext(0,\tRoundingMode.HALF_UP),\n\n\t/**\n\t * 32-bit floating point.\n\t * - Significand precision: 23 bits\n\t * - Equivalent of the C language float.\n\t * @type {MathContext}\n\t */\n\tDECIMAL32\t: new MathContext(7,\tRoundingMode.HALF_EVEN),\n\n\t/**\n\t * 64-bit floating point.\n\t * - Significand precision: 52 bits\n\t * - Equivalent of the C language double.\n\t * @type {MathContext}\n\t */\n\tDECIMAL64\t: new MathContext(16,\tRoundingMode.HALF_EVEN),\n\n\t/**\n\t * 128-bit floating point.\n\t * - Significand precision: 112 bits\n\t * - Equivalent of the C language long double.\n\t * @type {MathContext}\n\t */\n\tDECIMAL128\t: new MathContext(34,\tRoundingMode.HALF_EVEN),\n\n\t/**\n\t * 256-bit floating point.\n\t * - Significand precision: 237 bits\n\t * @type {MathContext}\n\t */\n\tDECIMAL256\t: new MathContext(72,\tRoundingMode.HALF_EVEN)\n};\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/core/context/MathContext.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 664,
    "kind": "class",
    "name": "MathContext",
    "memberof": "src/math/core/context/MathContext.js",
    "static": true,
    "longname": "src/math/core/context/MathContext.js~MathContext",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/core/context/MathContext.js",
    "importStyle": "MathContext",
    "description": "Configuration class for BigDecimal (immutable).",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 665,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/core/context/MathContext.js~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/context/MathContext.js~MathContext#constructor",
    "access": "public",
    "description": "Create BigDecimal configuration.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "MathContext"
        ],
        "spread": false,
        "optional": false,
        "name": "precision_or_name",
        "description": "Precision. Or String output by MathContext.toString."
      },
      {
        "nullable": null,
        "types": [
          "RoundingModeEntity"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "RoundingMode.HALF_UP",
        "defaultRaw": "RoundingMode.HALF_UP",
        "name": "roundingMode",
        "description": "RoundingMode."
      }
    ]
  },
  {
    "__docId__": 666,
    "kind": "member",
    "name": "precision",
    "memberof": "src/math/core/context/MathContext.js~MathContext",
    "static": false,
    "longname": "src/math/core/context/MathContext.js~MathContext#precision",
    "access": "private",
    "description": "The precision of this BigDecimal.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 667,
    "kind": "member",
    "name": "roundingMode",
    "memberof": "src/math/core/context/MathContext.js~MathContext",
    "static": false,
    "longname": "src/math/core/context/MathContext.js~MathContext#roundingMode",
    "access": "private",
    "description": "Method of rounding.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 673,
    "kind": "method",
    "name": "create",
    "memberof": "src/math/core/context/MathContext.js~MathContext",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/MathContext.js~MathContext.create",
    "access": "public",
    "description": "Create BigDecimal configuration.",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "MathContext"
        ],
        "spread": false,
        "optional": false,
        "name": "precision_or_name",
        "description": "Precision. Or String output by MathContext.toString."
      },
      {
        "nullable": null,
        "types": [
          "RoundingModeEntity"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "RoundingMode.HALF_UP",
        "defaultRaw": "RoundingMode.HALF_UP",
        "name": "roundingMode",
        "description": "RoundingMode."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 674,
    "kind": "method",
    "name": "getPrecision",
    "memberof": "src/math/core/context/MathContext.js~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/context/MathContext.js~MathContext#getPrecision",
    "access": "public",
    "description": "The precision of this BigDecimal.",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 675,
    "kind": "method",
    "name": "getRoundingMode",
    "memberof": "src/math/core/context/MathContext.js~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/context/MathContext.js~MathContext#getRoundingMode",
    "access": "public",
    "description": "Method of rounding.",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 676,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/core/context/MathContext.js~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/context/MathContext.js~MathContext#equals",
    "access": "public",
    "description": "Equals.",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Number to compare."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 677,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/core/context/MathContext.js~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/context/MathContext.js~MathContext#toString",
    "access": "public",
    "description": "Convert to string.",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 678,
    "kind": "method",
    "name": "increasePrecision",
    "memberof": "src/math/core/context/MathContext.js~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/context/MathContext.js~MathContext#increasePrecision",
    "access": "public",
    "description": "Increase in the precision of x.\n- If the setting has no precision limit, do not change.",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 679,
    "kind": "method",
    "name": "decreasePrecision",
    "memberof": "src/math/core/context/MathContext.js~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/context/MathContext.js~MathContext#decreasePrecision",
    "access": "public",
    "description": "Decrease in the precision of x.\n- If the setting has no precision limit, do not change.",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 680,
    "kind": "get",
    "name": "UNLIMITED",
    "memberof": "src/math/core/context/MathContext.js~MathContext",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/MathContext.js~MathContext.UNLIMITED",
    "access": "public",
    "description": "No decimal point limit.\nHowever, an error occurs in the case of cyclic fraction in division.",
    "lineNumber": 151,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 681,
    "kind": "get",
    "name": "DECIMAL32",
    "memberof": "src/math/core/context/MathContext.js~MathContext",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/MathContext.js~MathContext.DECIMAL32",
    "access": "public",
    "description": "32-bit floating point.\n- Significand precision: 23 bits\n- Equivalent of the C language float.",
    "lineNumber": 161,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 682,
    "kind": "get",
    "name": "DECIMAL64",
    "memberof": "src/math/core/context/MathContext.js~MathContext",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/MathContext.js~MathContext.DECIMAL64",
    "access": "public",
    "description": "64-bit floating point.\n- Significand precision: 52 bits\n- Equivalent of the C language double.",
    "lineNumber": 172,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 683,
    "kind": "get",
    "name": "DECIMAL128",
    "memberof": "src/math/core/context/MathContext.js~MathContext",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/MathContext.js~MathContext.DECIMAL128",
    "access": "public",
    "description": "128-bit floating point.\n- Significand precision: 112 bits\n- Equivalent of the C language long double.",
    "lineNumber": 182,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 684,
    "kind": "get",
    "name": "DECIMAL256",
    "memberof": "src/math/core/context/MathContext.js~MathContext",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/MathContext.js~MathContext.DECIMAL256",
    "access": "public",
    "description": "256-bit floating point.\n- Significand precision: 237 bits",
    "lineNumber": 191,
    "type": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 685,
    "kind": "variable",
    "name": "DEFINE",
    "memberof": "src/math/core/context/MathContext.js",
    "static": true,
    "longname": "src/math/core/context/MathContext.js~DEFINE",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/context/MathContext.js",
    "importStyle": null,
    "description": "Collection of constant values used in the class.",
    "lineNumber": 201,
    "ignore": true,
    "type": {
      "types": [
        "{\"UNLIMITED\": *, \"DECIMAL32\": *, \"DECIMAL64\": *, \"DECIMAL128\": *, \"DECIMAL256\": *}"
      ]
    }
  },
  {
    "__docId__": 686,
    "kind": "file",
    "name": "src/math/core/context/RoundingMode.js",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * Base class for rounding mode for BigDecimal.\n */\nexport class RoundingModeEntity {\n\t\n\t/**\n\t * Get rounding mode name in upper case English.\n\t * @returns {string} Rounding method name.\n\t */\n\tstatic toString() {\n\t\treturn \"NONE\";\n\t}\n\n\t/**\n\t * Numeric value to add.\n\t * It is rounded when this value is added.\n\t * @param {number} x - Rounding value. When specified as an integer, the first digit is rounded.\n\t * @returns {number} Numeric value to add.\n\t */\n\tstatic getAddNumber(x) {\n\t\treturn 0;\n\t}\n\n}\n\n/**\n * Directed rounding to an integer.\n * Round towards positive infinity if positive, negative infinity if negative.\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_UP extends RoundingModeEntity {\n\n\t/**\n\t * Get rounding mode name in upper case English.\n\t * @returns {string} Rounding method name.\n\t */\n\tstatic toString() {\n\t\treturn \"UP\";\n\t}\n\n\t/**\n\t * Numeric value to add.\n\t * It is rounded when this value is added.\n\t * @param {number} x - Rounding value. When specified as an integer, the first digit is rounded.\n\t * @returns {number} Numeric value to add.\n\t */\n\tstatic getAddNumber(x) {\n\t\tconst y = x % 10;\n\t\tif(y === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(y > 0) {\n\t\t\treturn 10 - y;\n\t\t}\n\t\telse {\n\t\t\treturn (-(10 + y));\n\t\t}\n\t}\n\n}\n\n/**\n * Directed rounding to an integer.\n * Round towards 0.\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_DOWN extends RoundingModeEntity {\n\n\t/**\n\t * Get rounding mode name in upper case English.\n\t * @returns {string} Rounding method name.\n\t */\n\tstatic toString() {\n\t\treturn \"DOWN\";\n\t}\n\n\t/**\n\t * Numeric value to add.\n\t * It is rounded when this value is added.\n\t * @param {number} x - Rounding value. When specified as an integer, the first digit is rounded.\n\t * @returns {number} Numeric value to add.\n\t */\n\tstatic getAddNumber(x) {\n\t\treturn -(x % 10);\n\t}\n\n}\n\n/**\n * Directed rounding to an integer.\n * Round up to positive infinity.\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_CEILING extends RoundingModeEntity {\n\n\t/**\n\t * Get rounding mode name in upper case English.\n\t * @returns {string} Rounding method name.\n\t */\n\tstatic toString() {\n\t\treturn \"CEILING\";\n\t}\n\n\t/**\n\t * Numeric value to add.\n\t * It is rounded when this value is added.\n\t * @param {number} x - Rounding value. When specified as an integer, the first digit is rounded.\n\t * @returns {number} Numeric value to add.\n\t */\n\tstatic getAddNumber(x) {\n\t\tconst y = x % 10;\n\t\tif(y === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(y > 0) {\n\t\t\treturn 10 - y;\n\t\t}\n\t\telse {\n\t\t\treturn -y;\n\t\t}\n\t}\n\n}\n\n/**\n * Directed rounding to an integer.\n * Round down to negative infinity.\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_FLOOR extends RoundingModeEntity {\n\n\t/**\n\t * Get rounding mode name in upper case English.\n\t * @returns {string} Rounding method name.\n\t */\n\tstatic toString() {\n\t\treturn \"FLOOR\";\n\t}\n\n\t/**\n\t * Numeric value to add.\n\t * It is rounded when this value is added.\n\t * @param {number} x - Rounding value. When specified as an integer, the first digit is rounded.\n\t * @returns {number} Numeric value to add.\n\t */\n\tstatic getAddNumber(x) {\n\t\tconst y = x % 10;\n\t\tif(y === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(y > 0) {\n\t\t\treturn -y;\n\t\t}\n\t\telse {\n\t\t\treturn(-(10 + y));\n\t\t}\n\t}\n\n}\n\n/**\n * Rounding to the nearest integer.\n * Round half towards positive infinity.\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_HALF_UP extends RoundingModeEntity {\n\n\t/**\n\t * Get rounding mode name in upper case English.\n\t * @returns {string} Rounding method name.\n\t */\n\tstatic toString() {\n\t\treturn \"HALF_UP\";\n\t}\n\n\t/**\n\t * Numeric value to add.\n\t * It is rounded when this value is added.\n\t * @param {number} x - Rounding value. When specified as an integer, the first digit is rounded.\n\t * @returns {number} Numeric value to add.\n\t */\n\tstatic getAddNumber(x) {\n\t\tconst y = x % 10;\n\t\tconst sign = y >= 0 ? 1 : -1;\n\t\tif(Math.abs(y) < 5) {\n\t\t\treturn (y * -1);\n\t\t}\n\t\telse {\n\t\t\treturn (sign * (10 - Math.abs(y)));\n\t\t}\n\t}\n\n}\n\n/**\n * Rounding to the nearest integer.\n * Round half towards negative infinity.\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_HALF_DOWN extends RoundingModeEntity {\n\n\t/**\n\t * Get rounding mode name in upper case English.\n\t * @returns {string} Rounding method name.\n\t */\n\tstatic toString() {\n\t\treturn \"HALF_DOWN\";\n\t}\n\n\t/**\n\t * Numeric value to add.\n\t * It is rounded when this value is added.\n\t * @param {number} x - Rounding value. When specified as an integer, the first digit is rounded.\n\t * @returns {number} Numeric value to add.\n\t */\n\tstatic getAddNumber(x) {\n\t\tconst y = x % 10;\n\t\tconst sign = y >= 0 ? 1 : -1;\n\t\tif(Math.abs(y) < 6) {\n\t\t\treturn (y * -1);\n\t\t}\n\t\telse {\n\t\t\treturn (sign * (10 - Math.abs(y)));\n\t\t}\n\t}\n\n}\n\n/**\n * Rounding to the nearest integer\n * Round to the nearest side. If the median, round to the even side.\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_HALF_EVEN extends RoundingModeEntity {\n\n\t/**\n\t * Get rounding mode name in upper case English.\n\t * @returns {string} Rounding method name.\n\t */\n\tstatic toString() {\n\t\treturn \"HALF_EVEN\";\n\t}\n\n\t/**\n\t * Numeric value to add.\n\t * It is rounded when this value is added.\n\t * @param {number} x - Rounding value. When specified as an integer, the first digit is rounded.\n\t * @returns {number} Numeric value to add.\n\t */\n\tstatic getAddNumber(x) {\n\t\tlet y = x % 100;\n\t\tlet sign, even;\n\t\tif(y < 0) {\n\t\t\tsign = -1;\n\t\t\teven = Math.ceil(y / 10) & 1;\n\t\t}\n\t\telse {\n\t\t\tsign = 1;\n\t\t\teven = Math.floor(y / 10) & 1;\n\t\t}\n\t\tlet center;\n\t\tif(even === 1) {\n\t\t\tcenter = 5;\n\t\t}\n\t\telse {\n\t\t\tcenter = 6;\n\t\t}\n\t\ty = y % 10;\n\t\tif(Math.abs(y) < center) {\n\t\t\treturn (y * -1);\n\t\t}\n\t\telse {\n\t\t\treturn (sign * (10 - Math.abs(y)));\n\t\t}\n\t}\n\n}\n\n/**\n * Do not round.\n * Error if you need to round it.\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_UNNECESSARY extends RoundingModeEntity {\n\n\t/**\n\t * Get rounding mode name in upper case English.\n\t * @returns {string} Rounding method name.\n\t */\n\tstatic toString() {\n\t\treturn \"UNNECESSARY\";\n\t}\n\n\t/**\n\t * Numeric value to add.\n\t * It is rounded when this value is added.\n\t * @param {number} x - Rounding value. When specified as an integer, the first digit is rounded.\n\t * @returns {number} Numeric value to add.\n\t */\n\tstatic getAddNumber(x) {\n\t\tconst y = x % 10;\n\t\tif(y === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t}\n\n}\n\n/**\n * Rounding mode class for BigDecimal.\n */\nexport default class RoundingMode {\n\n\t/**\n\t * Get rounding class represented by specified string.\n\t * @param {string|RoundingModeEntity|Object} name - Mode name.\n\t * @returns {typeof RoundingModeEntity}\n\t */\n\tstatic valueOf(name) {\n\t\tlet check_string;\n\t\tif(typeof name === \"string\") {\n\t\t\tcheck_string = name;\n\t\t}\n\t\telse if(name instanceof Object) {\n\t\t\tcheck_string = name.toString();\n\t\t}\n\t\telse {\n\t\t\tthrow \"Unsupported argument \" + name;\n\t\t}\n\t\tconst modetype = [\n\t\t\tRoundingMode_UP,\n\t\t\tRoundingMode_DOWN,\n\t\t\tRoundingMode_FLOOR,\n\t\t\tRoundingMode_CEILING,\n\t\t\tRoundingMode_HALF_UP,\n\t\t\tRoundingMode_HALF_DOWN,\n\t\t\tRoundingMode_HALF_EVEN,\n\t\t\tRoundingMode_UNNECESSARY\n\t\t];\n\t\tconst upper_name = check_string.toUpperCase();\n\t\tfor(let i = 0; i < modetype.length; i++) {\n\t\t\tif(modetype[i].toString() === upper_name) {\n\t\t\t\treturn modetype[i];\n\t\t\t}\n\t\t}\n\t\tthrow \"IllegalArgumentException : \" + check_string;\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * Directed rounding to an integer.\n\t * Round towards positive infinity if positive, negative infinity if negative.\n\t * @returns {typeof RoundingModeEntity}\n\t */\n\tstatic get UP() {\n\t\treturn RoundingMode_UP;\n\t}\n\n\t/**\n\t * Directed rounding to an integer.\n\t * Round towards 0.\n\t * @returns {typeof RoundingModeEntity}\n\t */\n\tstatic get DOWN() {\n\t\treturn RoundingMode_DOWN;\n\t}\n\n\t/**\n\t * Directed rounding to an integer.\n\t * Round up to positive infinity.\n\t * @returns {typeof RoundingModeEntity}\n\t */\n\tstatic get CEILING() {\n\t\treturn RoundingMode_CEILING;\n\t}\n\n\t/**\n\t * Directed rounding to an integer.\n\t * Round down to negative infinity.\n\t * @returns {typeof RoundingModeEntity}\n\t */\n\tstatic get FLOOR() {\n\t\treturn RoundingMode_FLOOR;\n\t}\n\n\t/**\n\t * Rounding to the nearest integer.\n\t * Round half towards positive infinity.\n\t * @returns {typeof RoundingModeEntity}\n\t */\n\tstatic get HALF_UP() {\n\t\treturn RoundingMode_HALF_UP;\n\t}\n\n\t/**\n\t * Rounding to the nearest integer.\n\t * Round half towards negative infinity.\n\t * @returns {typeof RoundingModeEntity}\n\t */\n\tstatic get HALF_DOWN() {\n\t\treturn RoundingMode_HALF_DOWN;\n\t}\n\n\t/**\n\t * Rounding to the nearest integer\n\t * Round to the nearest side. If the median, round to the even side.\n\t * @returns {typeof RoundingModeEntity}\n\t */\n\tstatic get HALF_EVEN() {\n\t\treturn RoundingMode_HALF_EVEN;\n\t}\n\n\t/**\n\t * Do not round.\n\t * Error if you need to round it.\n\t * @returns {typeof RoundingModeEntity}\n\t */\n\tstatic get UNNECESSARY() {\n\t\treturn RoundingMode_UNNECESSARY;\n\t}\n\n}\n\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/core/context/RoundingMode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 687,
    "kind": "class",
    "name": "RoundingModeEntity",
    "memberof": "src/math/core/context/RoundingMode.js",
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingModeEntity",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/core/context/RoundingMode.js",
    "importStyle": "{RoundingModeEntity}",
    "description": "Base class for rounding mode for BigDecimal.",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 688,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingModeEntity",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingModeEntity.toString",
    "access": "public",
    "description": "Get rounding mode name in upper case English.",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Rounding method name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rounding method name."
    },
    "params": []
  },
  {
    "__docId__": 689,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingModeEntity",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingModeEntity.getAddNumber",
    "access": "public",
    "description": "Numeric value to add.\nIt is rounded when this value is added.",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Numeric value to add."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Rounding value. When specified as an integer, the first digit is rounded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Numeric value to add."
    }
  },
  {
    "__docId__": 690,
    "kind": "class",
    "name": "RoundingMode_UP",
    "memberof": "src/math/core/context/RoundingMode.js",
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_UP",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/context/RoundingMode.js",
    "importStyle": null,
    "description": "Directed rounding to an integer.\nRound towards positive infinity if positive, negative infinity if negative.",
    "lineNumber": 41,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 691,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode_UP",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_UP.toString",
    "access": "public",
    "description": "Get rounding mode name in upper case English.",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Rounding method name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rounding method name."
    },
    "params": []
  },
  {
    "__docId__": 692,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode_UP",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_UP.getAddNumber",
    "access": "public",
    "description": "Numeric value to add.\nIt is rounded when this value is added.",
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Numeric value to add."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Rounding value. When specified as an integer, the first digit is rounded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Numeric value to add."
    }
  },
  {
    "__docId__": 693,
    "kind": "class",
    "name": "RoundingMode_DOWN",
    "memberof": "src/math/core/context/RoundingMode.js",
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_DOWN",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/context/RoundingMode.js",
    "importStyle": null,
    "description": "Directed rounding to an integer.\nRound towards 0.",
    "lineNumber": 77,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 694,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode_DOWN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_DOWN.toString",
    "access": "public",
    "description": "Get rounding mode name in upper case English.",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Rounding method name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rounding method name."
    },
    "params": []
  },
  {
    "__docId__": 695,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode_DOWN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_DOWN.getAddNumber",
    "access": "public",
    "description": "Numeric value to add.\nIt is rounded when this value is added.",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Numeric value to add."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Rounding value. When specified as an integer, the first digit is rounded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Numeric value to add."
    }
  },
  {
    "__docId__": 696,
    "kind": "class",
    "name": "RoundingMode_CEILING",
    "memberof": "src/math/core/context/RoundingMode.js",
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_CEILING",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/context/RoundingMode.js",
    "importStyle": null,
    "description": "Directed rounding to an integer.\nRound up to positive infinity.",
    "lineNumber": 104,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 697,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode_CEILING",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_CEILING.toString",
    "access": "public",
    "description": "Get rounding mode name in upper case English.",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Rounding method name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rounding method name."
    },
    "params": []
  },
  {
    "__docId__": 698,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode_CEILING",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_CEILING.getAddNumber",
    "access": "public",
    "description": "Numeric value to add.\nIt is rounded when this value is added.",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Numeric value to add."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Rounding value. When specified as an integer, the first digit is rounded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Numeric value to add."
    }
  },
  {
    "__docId__": 699,
    "kind": "class",
    "name": "RoundingMode_FLOOR",
    "memberof": "src/math/core/context/RoundingMode.js",
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_FLOOR",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/context/RoundingMode.js",
    "importStyle": null,
    "description": "Directed rounding to an integer.\nRound down to negative infinity.",
    "lineNumber": 140,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 700,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode_FLOOR",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_FLOOR.toString",
    "access": "public",
    "description": "Get rounding mode name in upper case English.",
    "lineNumber": 146,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Rounding method name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rounding method name."
    },
    "params": []
  },
  {
    "__docId__": 701,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode_FLOOR",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_FLOOR.getAddNumber",
    "access": "public",
    "description": "Numeric value to add.\nIt is rounded when this value is added.",
    "lineNumber": 156,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Numeric value to add."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Rounding value. When specified as an integer, the first digit is rounded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Numeric value to add."
    }
  },
  {
    "__docId__": 702,
    "kind": "class",
    "name": "RoundingMode_HALF_UP",
    "memberof": "src/math/core/context/RoundingMode.js",
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_HALF_UP",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/context/RoundingMode.js",
    "importStyle": null,
    "description": "Rounding to the nearest integer.\nRound half towards positive infinity.",
    "lineNumber": 176,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 703,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode_HALF_UP",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_HALF_UP.toString",
    "access": "public",
    "description": "Get rounding mode name in upper case English.",
    "lineNumber": 182,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Rounding method name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rounding method name."
    },
    "params": []
  },
  {
    "__docId__": 704,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode_HALF_UP",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_HALF_UP.getAddNumber",
    "access": "public",
    "description": "Numeric value to add.\nIt is rounded when this value is added.",
    "lineNumber": 192,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Numeric value to add."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Rounding value. When specified as an integer, the first digit is rounded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Numeric value to add."
    }
  },
  {
    "__docId__": 705,
    "kind": "class",
    "name": "RoundingMode_HALF_DOWN",
    "memberof": "src/math/core/context/RoundingMode.js",
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_HALF_DOWN",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/context/RoundingMode.js",
    "importStyle": null,
    "description": "Rounding to the nearest integer.\nRound half towards negative infinity.",
    "lineNumber": 210,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 706,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode_HALF_DOWN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_HALF_DOWN.toString",
    "access": "public",
    "description": "Get rounding mode name in upper case English.",
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Rounding method name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rounding method name."
    },
    "params": []
  },
  {
    "__docId__": 707,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode_HALF_DOWN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_HALF_DOWN.getAddNumber",
    "access": "public",
    "description": "Numeric value to add.\nIt is rounded when this value is added.",
    "lineNumber": 226,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Numeric value to add."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Rounding value. When specified as an integer, the first digit is rounded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Numeric value to add."
    }
  },
  {
    "__docId__": 708,
    "kind": "class",
    "name": "RoundingMode_HALF_EVEN",
    "memberof": "src/math/core/context/RoundingMode.js",
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_HALF_EVEN",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/context/RoundingMode.js",
    "importStyle": null,
    "description": "Rounding to the nearest integer\nRound to the nearest side. If the median, round to the even side.",
    "lineNumber": 244,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 709,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode_HALF_EVEN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_HALF_EVEN.toString",
    "access": "public",
    "description": "Get rounding mode name in upper case English.",
    "lineNumber": 250,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Rounding method name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rounding method name."
    },
    "params": []
  },
  {
    "__docId__": 710,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode_HALF_EVEN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_HALF_EVEN.getAddNumber",
    "access": "public",
    "description": "Numeric value to add.\nIt is rounded when this value is added.",
    "lineNumber": 260,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Numeric value to add."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Rounding value. When specified as an integer, the first digit is rounded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Numeric value to add."
    }
  },
  {
    "__docId__": 711,
    "kind": "class",
    "name": "RoundingMode_UNNECESSARY",
    "memberof": "src/math/core/context/RoundingMode.js",
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_UNNECESSARY",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/context/RoundingMode.js",
    "importStyle": null,
    "description": "Do not round.\nError if you need to round it.",
    "lineNumber": 294,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 712,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode_UNNECESSARY",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_UNNECESSARY.toString",
    "access": "public",
    "description": "Get rounding mode name in upper case English.",
    "lineNumber": 300,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Rounding method name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rounding method name."
    },
    "params": []
  },
  {
    "__docId__": 713,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode_UNNECESSARY",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode_UNNECESSARY.getAddNumber",
    "access": "public",
    "description": "Numeric value to add.\nIt is rounded when this value is added.",
    "lineNumber": 310,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Numeric value to add."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Rounding value. When specified as an integer, the first digit is rounded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Numeric value to add."
    }
  },
  {
    "__docId__": 714,
    "kind": "class",
    "name": "RoundingMode",
    "memberof": "src/math/core/context/RoundingMode.js",
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/core/context/RoundingMode.js",
    "importStyle": "RoundingMode",
    "description": "Rounding mode class for BigDecimal.",
    "lineNumber": 325,
    "interface": false
  },
  {
    "__docId__": 715,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode.valueOf",
    "access": "public",
    "description": "Get rounding class represented by specified string.",
    "lineNumber": 332,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingModeEntity}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "RoundingModeEntity",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Mode name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 716,
    "kind": "get",
    "name": "UP",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode.UP",
    "access": "public",
    "description": "Directed rounding to an integer.\nRound towards positive infinity if positive, negative infinity if negative.",
    "lineNumber": 371,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 717,
    "kind": "get",
    "name": "DOWN",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode.DOWN",
    "access": "public",
    "description": "Directed rounding to an integer.\nRound towards 0.",
    "lineNumber": 380,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 718,
    "kind": "get",
    "name": "CEILING",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode.CEILING",
    "access": "public",
    "description": "Directed rounding to an integer.\nRound up to positive infinity.",
    "lineNumber": 389,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 719,
    "kind": "get",
    "name": "FLOOR",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode.FLOOR",
    "access": "public",
    "description": "Directed rounding to an integer.\nRound down to negative infinity.",
    "lineNumber": 398,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 720,
    "kind": "get",
    "name": "HALF_UP",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode.HALF_UP",
    "access": "public",
    "description": "Rounding to the nearest integer.\nRound half towards positive infinity.",
    "lineNumber": 407,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 721,
    "kind": "get",
    "name": "HALF_DOWN",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode.HALF_DOWN",
    "access": "public",
    "description": "Rounding to the nearest integer.\nRound half towards negative infinity.",
    "lineNumber": 416,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 722,
    "kind": "get",
    "name": "HALF_EVEN",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode.HALF_EVEN",
    "access": "public",
    "description": "Rounding to the nearest integer\nRound to the nearest side. If the median, round to the even side.",
    "lineNumber": 425,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 723,
    "kind": "get",
    "name": "UNNECESSARY",
    "memberof": "src/math/core/context/RoundingMode.js~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/context/RoundingMode.js~RoundingMode.UNNECESSARY",
    "access": "public",
    "description": "Do not round.\nError if you need to round it.",
    "lineNumber": 434,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 724,
    "kind": "file",
    "name": "src/math/core/Fraction.js",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Polyfill from \"../tools/Polyfill.js\";\nimport BigInteger from \"./BigInteger.js\";\nimport BigDecimal from \"./BigDecimal.js\";\nimport MathContext from \"./context/MathContext.js\";\nimport Complex from \"./Complex.js\";\nimport Matrix from \"./Matrix.js\";\n\n/**\n * Fraction type argument.\n * - Fraction\n * - BigInteger\n * - BigDecimal\n * - number\n * - boolean\n * - string\n * - Array<KBigIntegerInputData>\n * - {numerator:KBigIntegerInputData,denominator:KBigIntegerInputData}\n * - {doubleValue:number}\n * - {toString:function}\n * \n * Initialization can be performed as follows.\n * - 10, \"10\", \"10/1\", \"10.0/1.0\", [\"10\", \"1\"], [10, 1]\n * - 0.01, \"0.01\", \"0.1e-1\", \"1/100\", [1, 100], [2, 200], [\"2\", \"200\"]\n * - \"1/3\", \"0.[3]\", \"0.(3)\", \"0.'3'\", \"0.\"3\"\", [1, 3], [2, 6]\n * - \"3.555(123)\" = 3.555123123123..., \"147982 / 41625\"\n * @typedef {Fraction|BigInteger|BigDecimal|number|boolean|string|Array<import(\"./BigInteger.js\").KBigIntegerInputData>|{numerator:import(\"./BigInteger.js\").KBigIntegerInputData,denominator:import(\"./BigInteger.js\").KBigIntegerInputData}|{doubleValue:number}|{toString:function}} KFractionInputData\n */\n\n/**\n * Collection of functions used in Fraction.\n * @ignore\n */\nclass FractionTool {\n\n\t/**\n\t * Create data for Fraction from strings.\n\t * @param ntext {string}\n\t * @return {Fraction}\n\t */\n\tstatic to_fraction_data_from_number_string(ntext) {\n\t\tlet scale = 0;\n\t\tlet buff;\n\t\tlet is_negate = false;\n\t\t// 正規化\n\t\tlet text = ntext.replace(/\\s/g, \"\").toLowerCase();\n\t\t// +-の符号があるか\n\t\tconst number_text = [];\n\t\tbuff = text.match(/^[+-]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tif(buff.indexOf(\"-\") !== -1) {\n\t\t\t\tis_negate = true;\n\t\t\t\tnumber_text.push(\"-\");\n\t\t\t}\n\t\t}\n\t\t// 整数部があるか\n\t\tbuff = text.match(/^[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tnumber_text.push(buff);\n\t\t}\n\t\t// 浮動小数点の計算がない場合はここで完了\n\t\tif(text.length === 0) {\n\t\t\treturn new Fraction([new BigInteger([number_text.join(\"\"), 10]), BigInteger.ONE]);\n\t\t}\n\t\t// 巡回小数点指定があるか\n\t\tlet cyclic_decimal = null;\n\t\tif(/[()'\"[\\]]/.test(text)) {\n\t\t\tconst match_data = text.match(/([^.]*)\\.(\\d*)[(['\"](\\d+)[)\\]'\"](.*)/);\n\t\t\tif(match_data === null) {\n\t\t\t\tthrow \"Fraction Unsupported argument \" + text;\n\t\t\t}\n\t\t\t// 巡回少数の場所\n\t\t\tconst cyclic_decimal_scale = match_data[2].length;\n\t\t\tconst cyclic_decimal_text = match_data[3];\n\t\t\t// 巡回少数以外を抽出\n\t\t\tif(cyclic_decimal_scale === 0) {\n\t\t\t\ttext = match_data[1] + match_data[4];\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttext = match_data[1] + \".\" + match_data[2] + match_data[4];\n\t\t\t}\n\n\t\t\tconst numerator = new BigInteger([cyclic_decimal_text, 10]);\n\t\t\tconst denominator_string = [];\n\t\t\tfor(let i = 0; i < cyclic_decimal_text.length; i++) {\n\t\t\t\tdenominator_string.push(\"9\");\n\t\t\t}\n\t\t\tconst denominator = new BigInteger([denominator_string.join(\"\"), 10]);\n\t\t\tcyclic_decimal = new Fraction([numerator, denominator]);\n\t\t\tcyclic_decimal = cyclic_decimal.scaleByPowerOfTen(-cyclic_decimal_scale);\n\t\t}\n\t\t// 小数部があるか\n\t\tbuff = text.match(/^\\.[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tbuff = buff.substr(1);\n\t\t\tscale = scale + buff.length;\n\t\t\tnumber_text.push(buff);\n\t\t}\n\t\t// 指数表記があるか\n\t\tbuff = text.match(/^e[+-]?[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0].substr(1);\n\t\t\tscale = scale - parseInt(buff, 10);\n\t\t}\n\n\t\tlet f = null;\n\t\t{\n\t\t\tlet numerator = null;\n\t\t\tlet denominator = null;\n\t\t\t// 出力用の文字を作成\n\t\t\tif(scale === 0) {\n\t\t\t\tnumerator = new BigInteger([number_text.join(\"\"), 10]);\n\t\t\t\tdenominator = BigInteger.ONE;\n\t\t\t}\n\t\t\tif(scale < 0) {\n\t\t\t\tfor(let i = 0; i < -scale; i++) {\n\t\t\t\t\tnumber_text.push(\"0\");\n\t\t\t\t}\n\t\t\t\tnumerator = new BigInteger([number_text.join(\"\"), 10]);\n\t\t\t\tdenominator = BigInteger.ONE;\n\t\t\t}\n\t\t\telse if(scale > 0) {\n\t\t\t\tnumerator = new BigInteger([number_text.join(\"\"), 10]);\n\t\t\t\tconst denominator_string = [\"1\"];\n\t\t\t\tfor(let i = 0; i < scale; i++) {\n\t\t\t\t\tdenominator_string.push(\"0\");\n\t\t\t\t}\n\t\t\t\tdenominator = new BigInteger([denominator_string.join(\"\"), 10]);\n\t\t\t}\n\t\t\tf = new Fraction([numerator, denominator]);\n\t\t}\n\t\tif(cyclic_decimal) {\n\t\t\tif(!is_negate) {\n\t\t\t\tf = f.add(cyclic_decimal);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tf = f.sub(cyclic_decimal);\n\t\t\t}\n\t\t}\n\t\treturn f;\n\t}\n\n\t/**\n\t * Create data for Fraction from fractional string.\n\t * @param ntext {string}\n\t * @return {Fraction}\n\t */\n\tstatic to_fraction_data_from_fraction_string(ntext) {\n\t\t// 特殊な状態\n\t\tif(/nan|inf/i.test(ntext)) {\n\t\t\tconst ret = new Fraction();\n\t\t\tret.denominator = BigInteger.ONE;\n\t\t\tif(/nan/i.test(ntext)) {\n\t\t\t\tret.numerator = BigInteger.NaN;\n\t\t\t}\n\t\t\telse if(!/-/.test(ntext)) {\n\t\t\t\tret.numerator = BigInteger.POSITIVE_INFINITY;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tret.numerator = BigInteger.NEGATIVE_INFINITY;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t\tif(ntext.indexOf(\"/\") === -1) {\n\t\t\treturn FractionTool.to_fraction_data_from_number_string(ntext);\n\t\t}\n\t\telse {\n\t\t\tconst fraction_value = ntext.split(\"/\");\n\t\t\tconst numerator_value = FractionTool.to_fraction_data_from_number_string(fraction_value[0]);\n\t\t\tconst denominator_value = FractionTool.to_fraction_data_from_number_string(fraction_value[1]);\n\t\t\treturn numerator_value.div(denominator_value);\n\t\t}\n\t}\n\n\t/**\n\t * Create data for Fraction from number.\n\t * @param number {number|boolean}\n\t * @return {Fraction}\n\t */\n\tstatic to_fraction_data_from_number(number) {\n\t\tconst value = typeof number !== \"boolean\" ? number : (number ? 1 : 0);\n\t\tlet numerator = null;\n\t\tlet denominator = null;\n\t\tif(!isFinite(value)) {\n\t\t\tconst ret = new Fraction();\n\t\t\tret.denominator = BigInteger.ONE;\n\t\t\tif(value === Infinity) {\n\t\t\t\tret.numerator = BigInteger.POSITIVE_INFINITY;\n\t\t\t}\n\t\t\telse if(value === - Infinity) {\n\t\t\t\tret.numerator = BigInteger.NEGATIVE_INFINITY;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tret.numerator = BigInteger.NaN;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t\t// 整数\n\t\telse if(value === Math.floor(value)) {\n\t\t\tnumerator = new BigInteger(value);\n\t\t\tdenominator = BigInteger.ONE;\n\t\t}\n\t\t// 浮動小数\n\t\telse {\n\t\t\tlet scale = Math.trunc(Math.log(Math.abs(value)) / Math.log(10));\n\t\t\tlet x = value / Math.pow(10, scale);\n\t\t\t// スケールを逆にする\n\t\t\tscale = - scale;\n\t\t\tfor(let i = 0; i < 14; i++) {\n\t\t\t\tx = x * 10;\n\t\t\t\tscale = scale + 1;\n\t\t\t\tif(Math.abs(x - Math.round(x)) <= Number.EPSILON) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 最も下の桁は四捨五入する\n\t\t\tx = Math.round(x * 1e14) / 1e14;\n\t\t\tif(scale <= 0) {\n\t\t\t\tnumerator = new BigInteger(value);\n\t\t\t\tdenominator = BigInteger.ONE;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnumerator = new BigInteger(x);\n\t\t\t\tconst denominator_string = [\"1\"];\n\t\t\t\tfor(let i = 0; i < scale; i++) {\n\t\t\t\t\tdenominator_string.push(\"0\");\n\t\t\t\t}\n\t\t\t\tdenominator = new BigInteger([denominator_string.join(\"\"), 10]);\n\t\t\t}\n\t\t}\n\t\treturn new Fraction([numerator, denominator]);\n\t}\n\n\t/**\n\t * Normalization.\n\t * - Reduce fraction using gcd.\n\t * - Add the sign to the numerator.\n\t * - If the number is zero, the denominator is one.\n\t * @param value {Fraction}\n\t * @returns {void}\n\t */\n\tstatic normalization(value) {\n\t\tif(value.denominator.equals(BigInteger.ONE)) {\n\t\t\treturn;\n\t\t}\n\t\tif(value.denominator.equals(BigInteger.MINUS_ONE)) {\n\t\t\tvalue.numerator = value.numerator.negate();\n\t\t\tvalue.denominator = BigInteger.ONE;\n\t\t\treturn;\n\t\t}\n\t\tif(value.numerator.equals(BigInteger.ZERO)) {\n\t\t\tvalue.denominator = BigInteger.ONE;\n\t\t\treturn;\n\t\t}\n\t\tconst gcd = value.numerator.gcd(value.denominator);\n\t\tlet numerator = value.numerator.div(gcd);\n\t\tlet denominator = value.denominator.div(gcd);\n\t\tif(denominator.sign() < 0) {\n\t\t\tnumerator = numerator.negate();\n\t\t\tdenominator = denominator.negate();\n\t\t}\n\t\tvalue.numerator = numerator;\n\t\tvalue.denominator = denominator;\n\t}\n\n}\n\n/**\n * Fraction class (immutable).\n */\nexport default class Fraction {\n\n\t/**\n\t * Create an fraction.\n\t * \n\t * Initialization can be performed as follows.\n\t * - 10, \"10\", \"10/1\", \"10.0/1.0\", [\"10\", \"1\"], [10, 1]\n\t * - 0.01, \"0.01\", \"0.1e-1\", \"1/100\", [1, 100], [2, 200], [\"2\", \"200\"]\n\t * - \"1/3\", \"0.[3]\", \"0.(3)\", \"0.'3'\", \"0.\"3\"\", [1, 3], [2, 6]\n\t * - \"3.555(123)\" = 3.555123123123..., \"147982 / 41625\"\n\t * @param {KFractionInputData} [number] - Fraction data. See how to use the function.\n\t */\n\tconstructor(number) {\n\t\t\n\t\t// 分子\n\t\t/**\n\t\t * numerator\n\t\t * @type {BigInteger}\n\t\t */\n\t\tthis.numerator = null;\n\n\t\t// 分母\n\t\t/**\n\t\t * denominator\n\t\t * @type {BigInteger}\n\t\t */\n\t\tthis.denominator = null;\n\n\t\tif(arguments.length === 0) {\n\t\t\tthis.numerator = BigInteger.ZERO;\n\t\t\tthis.denominator = BigInteger.ONE;\n\t\t}\n\t\telse if(arguments.length === 1) {\n\t\t\tlet is_normalization = false;\n\t\t\tif((typeof number === \"number\") || (typeof number === \"boolean\")) {\n\t\t\t\tconst x = FractionTool.to_fraction_data_from_number(number);\n\t\t\t\tthis.numerator = x.numerator;\n\t\t\t\tthis.denominator = x.denominator;\n\t\t\t}\n\t\t\telse if(typeof number === \"string\") {\n\t\t\t\tconst x = FractionTool.to_fraction_data_from_fraction_string(number);\n\t\t\t\tthis.numerator = x.numerator;\n\t\t\t\tthis.denominator = x.denominator;\n\t\t\t}\n\t\t\telse if(number instanceof BigInteger) {\n\t\t\t\tthis.numerator = number;\n\t\t\t\tthis.denominator = BigInteger.ONE;\n\t\t\t}\n\t\t\telse if(number instanceof Fraction) {\n\t\t\t\tthis.numerator = number.numerator;\n\t\t\t\tthis.denominator = number.denominator;\n\t\t\t}\n\t\t\telse if((number instanceof Array) && (number.length === 2)) {\n\t\t\t\tthis.numerator = (number[0] instanceof BigInteger) ? number[0] : new BigInteger(number[0]);\n\t\t\t\tthis.denominator = (number[1] instanceof BigInteger) ? number[1] : new BigInteger(number[1]);\n\t\t\t\tis_normalization = true;\n\t\t\t}\n\t\t\telse if(number instanceof BigDecimal) {\n\t\t\t\tconst bigint = number.unscaledValue();\n\t\t\t\tif(!bigint.isFinite()) {\n\t\t\t\t\tthis.numerator = bigint;\n\t\t\t\t\tthis.denominator = BigInteger.ONE;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst value = new Fraction(number.unscaledValue());\n\t\t\t\t\tconst x = value.scaleByPowerOfTen(-number.scale());\n\t\t\t\t\tthis.numerator = x.numerator;\n\t\t\t\t\tthis.denominator = x.denominator;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(typeof number === \"object\") {\n\t\t\t\tif(\"doubleValue\" in number) {\n\t\t\t\t\tconst x = FractionTool.to_fraction_data_from_number(number.doubleValue);\n\t\t\t\t\tthis.numerator = x.numerator;\n\t\t\t\t\tthis.denominator = x.denominator;\n\t\t\t\t}\n\t\t\t\telse if((\"numerator\" in number) && (\"denominator\" in number)) {\n\t\t\t\t\tthis.numerator = (number.numerator instanceof BigInteger) ? number.numerator : new BigInteger(number.numerator);\n\t\t\t\t\tthis.denominator = (number.denominator instanceof BigInteger) ? number.denominator : new BigInteger(number.denominator);\n\t\t\t\t\tis_normalization = true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst x1 = FractionTool.to_fraction_data_from_fraction_string(number.toString());\n\t\t\t\t\tthis.numerator = x1.numerator;\n\t\t\t\t\tthis.denominator = x1.denominator;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow \"Fraction Unsupported argument \" + number;\n\t\t\t}\n\t\t\tif(is_normalization) {\n\t\t\t\tFractionTool.normalization(this);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow \"Fraction Unsupported argument \" + number;\n\t\t}\n\t}\n\n\t/**\n\t * Create an entity object of this class.\n\t * @param {KFractionInputData} number \n\t * @returns {Fraction}\n\t */\n\tstatic create(number) {\n\t\tif(number instanceof Fraction) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new Fraction(number);\n\t\t}\n\t}\n\n\t/**\n\t * Convert number to Fraction type.\n\t * @param {KFractionInputData} number \n\t * @returns {Fraction}\n\t */\n\tstatic valueOf(number) {\n\t\treturn Fraction.create(number);\n\t}\n\n\t/**\n\t * Convert to Fraction.\n\t * @param {KFractionInputData} number \n\t * @returns {Fraction}\n\t * @private\n\t */\n\tstatic _toFraction(number) {\n\t\tif(number instanceof Fraction) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new Fraction(number);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to real number.\n\t * @param {KFractionInputData} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toFloat(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn number;\n\t\t}\n\t\telse if(number instanceof Fraction) {\n\t\t\treturn number.doubleValue;\n\t\t}\n\t\telse {\n\t\t\treturn (new Fraction(number)).doubleValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert to integer.\n\t * @param {KFractionInputData} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toInteger(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn Math.trunc(number);\n\t\t}\n\t\telse if(number instanceof Fraction) {\n\t\t\treturn number.intValue;\n\t\t}\n\t\telse {\n\t\t\treturn (new Fraction(number)).intValue;\n\t\t}\n\t}\n\n\t/**\n\t * Deep copy.\n\t * @returns {Fraction} \n\t */\n\tclone() {\n\t\treturn new Fraction(this);\n\t}\n\n\t/**\n\t * Absolute value.\n\t * @returns {Fraction} abs(A)\n\t */\n\tabs() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNegativeInfinity() ? Fraction.POSITIVE_INFINITY : this;\n\t\t}\n\t\tif(this.sign() >= 0) {\n\t\t\treturn this;\n\t\t}\n\t\treturn this.negate();\n\t}\n\n\t/**\n\t * this * -1\n\t * @returns {Fraction} -A\n\t */\n\tnegate() {\n\t\tif(!this.isFinite()) {\n\t\t\tif(this.isPositiveInfinity()) {\n\t\t\t\treturn Fraction.NEGATIVE_INFINITY;\n\t\t\t}\n\t\t\telse if(this.isNegativeInfinity()) {\n\t\t\t\treturn Fraction.POSITIVE_INFINITY;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\treturn new Fraction([this.numerator.negate(), this.denominator]);\n\t}\n\n\t/**\n\t * The positive or negative sign of this number.\n\t * - +1 if positive, -1 if negative, 0 if 0.\n\t * @returns {number}\n\t */\n\tsign() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? NaN : (this.isPositiveInfinity() ? 1 : -1);\n\t\t}\n\t\treturn this.numerator.sign();\n\t}\n\t\n\t/**\n\t * Convert to string.\n\t * @returns {string} \n\t */\n\ttoString() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? \"NaN\" : (this.isPositiveInfinity() ? \"Infinity\" : \"-Infinity\");\n\t\t}\n\t\treturn this.numerator.toString() + \" / \" + this.denominator.toString();\n\t}\n\n\t// ----------------------\n\t// 四則演算\n\t// ----------------------\n\t\n\t/**\n\t * Add.\n\t * @param {KFractionInputData} num\n\t * @return {Fraction} A + B\n\t */\n\tadd(num) {\n\t\tconst x = this;\n\t\tconst y = Fraction._toFraction(num);\n\t\tif(!x.isFinite() || !y.isFinite()) {\n\t\t\tif(x.isNaN() || y.isNaN() || (x.isInfinite() && y.isInfinite() && !x.equalsState(y))) {\n\t\t\t\treturn Fraction.NaN;\n\t\t\t}\n\t\t\telse if(x.isPositiveInfinity() || y.isPositiveInfinity()) {\n\t\t\t\treturn Fraction.POSITIVE_INFINITY;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Fraction.NEGATIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\tlet f;\n\t\tif(x.isInteger() && y.isInteger()) {\n\t\t\tf = new Fraction([ x.numerator.add(y.numerator), BigInteger.ONE]);\n\t\t}\n\t\telse {\n\t\t\tf = new Fraction([\n\t\t\t\tx.numerator.mul(y.denominator).add(y.numerator.mul(x.denominator)),\n\t\t\t\tx.denominator.mul(y.denominator)\n\t\t\t]);\n\t\t}\n\t\treturn f;\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {KFractionInputData} num\n\t * @return {Fraction} A - B\n\t */\n\tsub(num) {\n\t\tconst x = this;\n\t\tconst y = Fraction._toFraction(num);\n\t\tif(!x.isFinite() || !y.isFinite()) {\n\t\t\tif(x.isNaN() || y.isNaN() || x.equalsState(y)) {\n\t\t\t\treturn Fraction.NaN;\n\t\t\t}\n\t\t\telse if(x.isNegativeInfinity() || y.isPositiveInfinity()) {\n\t\t\t\treturn Fraction.NEGATIVE_INFINITY;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Fraction.POSITIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\tlet f;\n\t\tif(x.isInteger() && y.isInteger()) {\n\t\t\tf = new Fraction([ x.numerator.sub(y.numerator), BigInteger.ONE]);\n\t\t}\n\t\telse {\n\t\t\tf = new Fraction([\n\t\t\t\tx.numerator.mul(y.denominator).sub(y.numerator.mul(x.denominator)),\n\t\t\t\tx.denominator.mul(y.denominator)\n\t\t\t]);\n\t\t}\n\t\treturn f;\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {KFractionInputData} num\n\t * @return {Fraction} A * B\n\t */\n\tmul(num) {\n\t\tconst x = this;\n\t\tconst y = Fraction._toFraction(num);\n\t\tif(!x.isFinite() || !y.isFinite()) {\n\t\t\tif(x.isNaN() || y.isNaN() || (x.isZero() || y.isZero())) {\n\t\t\t\treturn Fraction.NaN;\n\t\t\t}\n\t\t\telse if(x.sign() * y.sign() > 0) {\n\t\t\t\treturn Fraction.POSITIVE_INFINITY;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Fraction.NEGATIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\tlet f;\n\t\tif(x.isInteger() && y.isInteger()) {\n\t\t\tf = new Fraction([ x.numerator.mul(y.numerator), BigInteger.ONE]);\n\t\t}\n\t\telse {\n\t\t\tf = new Fraction([ x.numerator.mul(y.numerator), x.denominator.mul(y.denominator) ]);\n\t\t}\n\t\treturn f;\n\t}\n\n\t/**\n\t * Divide.\n\t * @param {KFractionInputData} num\n\t * @return {Fraction} A / B\n\t */\n\tdiv(num) {\n\t\tconst x = this;\n\t\tconst y = Fraction._toFraction(num);\n\t\tif(!x.isFinite() || !y.isFinite()) {\n\t\t\tif(x.isNaN() || y.isNaN() || (x.isInfinite() && y.isInfinite())) {\n\t\t\t\treturn Fraction.NaN;\n\t\t\t}\n\t\t\telse if(x.isInfinite()) {\n\t\t\t\tif(x.sign() * y.sign() >= 0) {\n\t\t\t\t\treturn Fraction.POSITIVE_INFINITY;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn Fraction.NEGATIVE_INFINITY;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Fraction.ZERO;\n\t\t\t}\n\t\t}\n\t\telse if(y.isZero()) {\n\t\t\tif(x.isZero()) {\n\t\t\t\treturn Fraction.NaN;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn x.sign() >= 0 ? Fraction.POSITIVE_INFINITY : Fraction.NEGATIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\tlet f;\n\t\tif(x.isInteger() && y.isInteger()) {\n\t\t\tf = new Fraction([ x.numerator, y.numerator]);\n\t\t}\n\t\telse {\n\t\t\tf = new Fraction([ x.numerator.mul(y.denominator), y.numerator.mul(x.denominator)]);\n\t\t}\n\t\treturn f;\n\t}\n\n\t/**\n\t * Inverse number of this value.\n\t * @return {Fraction} 1 / A\n\t */\n\tinv() {\n\t\t{\n\t\t\tif(!this.isFinite()) {\n\t\t\t\treturn this.isNaN() ? Fraction.NaN : Fraction.ZERO;\n\t\t\t}\n\t\t\tif(this.isZero()) {\n\t\t\t\treturn Fraction.NaN;\n\t\t\t}\n\t\t}\n\t\treturn new Fraction([ this.denominator, this.numerator]);\n\t}\n\n\t/**\n\t * Modulo, positive remainder of division.\n\t * - Result has same sign as the Dividend.\n\t * @param {KFractionInputData} num\n\t * @return {Fraction} A rem B\n\t */\n\trem(num) {\n\t\tconst x = this;\n\t\tconst y = Fraction._toFraction(num);\n\t\tif(!x.isFinite() || !y.isFinite() || y.isZero()) {\n\t\t\treturn Fraction.NaN;\n\t\t}\n\t\t// x - y * fix(x/y)\n\t\treturn x.sub(y.mul(x.div(y).fix()));\n\t}\n\n\t/**\n\t * Modulo, positive remainder of division.\n\t * - Result has same sign as the Divisor.\n\t * @param {KFractionInputData} num\n\t * @returns {Fraction} A mod B\n\t */\n\tmod(num) {\n\t\tconst x = this;\n\t\tconst y = Fraction._toFraction(num);\n\t\tif(y.isZero()) {\n\t\t\treturn x;\n\t\t}\n\t\tconst ret = x.rem(y);\n\t\tif(!x.equalsState(y)) {\n\t\t\treturn ret.add(y);\n\t\t}\n\t\telse {\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t * Power function.\n\t * - Supports only integers.\n\t * @param {KFractionInputData} num\n\t * @returns {Fraction} pow(A, B)\n\t */\n\tpow(num) {\n\t\tconst x = this;\n\t\tconst y = Fraction._toFraction(num);\n\t\t{\n\t\t\tif(x.isNaN() || y.isNaN()) {\n\t\t\t\treturn Fraction.NaN;\n\t\t\t}\n\t\t\tif(y.isZero()) {\n\t\t\t\treturn Fraction.ONE;\n\t\t\t}\n\t\t\telse if(x.isZero()) {\n\t\t\t\treturn Fraction.ZERO;\n\t\t\t}\n\t\t\telse if(x.isOne()) {\n\t\t\t\treturn Fraction.ONE;\n\t\t\t}\n\t\t\telse if(x.isInfinite()) {\n\t\t\t\tif(x.isPositiveInfinity()) {\n\t\t\t\t\treturn Fraction.POSITIVE_INFINITY;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(y.isPositiveInfinity()) {\n\t\t\t\t\t\treturn Fraction.NaN;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn new Fraction(Infinity * Math.pow(-1, Math.round(y.doubleValue)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(y.isInfinite()) {\n\t\t\t\tif(x.isNegative()) {\n\t\t\t\t\t// 複素数\n\t\t\t\t\treturn Fraction.NaN;\n\t\t\t\t}\n\t\t\t\tif(x.compareTo(Fraction.ONE) < 0) {\n\t\t\t\t\tif(y.isPositiveInfinity()) {\n\t\t\t\t\t\treturn Fraction.ZERO;\n\t\t\t\t\t}\n\t\t\t\t\telse if(y.isNegativeInfinity()) {\n\t\t\t\t\t\treturn Fraction.POSITIVE_INFINITY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(y.isPositiveInfinity()) {\n\t\t\t\t\t\treturn Fraction.POSITIVE_INFINITY;\n\t\t\t\t\t}\n\t\t\t\t\telse if(y.isNegativeInfinity()) {\n\t\t\t\t\t\treturn Fraction.ZERO;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst numerator = x.numerator.pow(y.intValue);\n\t\tconst denominator = x.denominator.pow(y.intValue);\n\t\treturn new Fraction([ numerator, denominator ]);\n\t}\n\n\t// ----------------------\n\t// その他の演算\n\t// ----------------------\n\t\n\t/**\n\t * Factorial function, x!.\n\t * - Supports only integers.\n\t * @returns {Fraction} n!\n\t */\n\tfactorial() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new Fraction([this.toBigInteger().factorial(), Fraction.ONE]);\n\t}\n\n\t/**\n\t * Multiply a multiple of ten.\n\t * - Supports only integers.\n\t * @param {KFractionInputData} n\n\t * @returns {Fraction}\n\t */\n\tscaleByPowerOfTen(n) {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this;\n\t\t}\n\t\tconst scale = Fraction._toInteger(n);\n\t\tif(scale === 0) {\n\t\t\treturn this;\n\t\t}\n\t\tlet f;\n\t\tif(scale > 0) {\n\t\t\tf = new Fraction([ this.numerator.scaleByPowerOfTen(scale), this.denominator]);\n\t\t}\n\t\telse if(scale < 0) {\n\t\t\tf = new Fraction([ this.numerator, this.denominator.scaleByPowerOfTen(-scale)]);\n\t\t}\n\t\treturn f;\n\t}\n\n\t// ----------------------\n\t// 他の型に変換用\n\t// ----------------------\n\t\n\t/**\n\t * boolean value.\n\t * @returns {boolean}\n\t */\n\tget booleanValue() {\n\t\treturn this.numerator.booleanValue;\n\t}\n\n\t/**\n\t * integer value.\n\t * @returns {number}\n\t */\n\tget intValue() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? NaN : (this.isPositiveInfinity() ? Infinity : -Infinity);\n\t\t}\n\t\tif(this.isInteger()) {\n\t\t\treturn Math.trunc(this.numerator.doubleValue);\n\t\t}\n\t\treturn Math.trunc(this.doubleValue);\n\t}\n\n\t/**\n\t * floating point.\n\t * @returns {number}\n\t */\n\tget doubleValue() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn this.isNaN() ? NaN : (this.isPositiveInfinity() ? Infinity : -Infinity);\n\t\t}\n\t\tif(this.isInteger()) {\n\t\t\treturn this.numerator.doubleValue;\n\t\t}\n\t\tconst x = new BigDecimal([this.numerator, MathContext.UNLIMITED]);\n\t\tconst y = new BigDecimal([this.denominator, MathContext.UNLIMITED]);\n\t\treturn x.div(y, {context : MathContext.DECIMAL64}).doubleValue;\n\t}\n\n\t// ----------------------\n\t// konpeito で扱う数値型へ変換\n\t// ----------------------\n\t\n\t/**\n\t * return BigInteger.\n\t * @returns {BigInteger}\n\t */\n\ttoBigInteger() {\n\t\treturn new BigInteger(this.fix().numerator);\n\t}\n\t\n\t/**\n\t * return BigDecimal.\n\t * @param {MathContext} [mc] - MathContext setting after calculation. \n\t * @returns {BigDecimal}\n\t */\n\ttoBigDecimal(mc) {\n\t\tif(!this.isFinite()) {\n\t\t\treturn new BigDecimal(this.doubleValue);\n\t\t}\n\t\tif(this.isInteger()) {\n\t\t\treturn new BigDecimal(this.numerator);\n\t\t}\n\t\tconst x = new BigDecimal([this.numerator, MathContext.UNLIMITED]);\n\t\tconst y = new BigDecimal([this.denominator, MathContext.UNLIMITED]);\n\t\tif(mc) {\n\t\t\treturn x.div(y, {context: mc});\n\t\t}\n\t\telse {\n\t\t\treturn x.div(y, {context: BigDecimal.getDefaultContext()});\n\t\t}\n\t}\n\t\n\t/**\n\t * return Fraction.\n\t * @returns {Fraction}\n\t */\n\ttoFraction() {\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * return Complex.\n\t * @returns {Complex}\n\t */\n\ttoComplex() {\n\t\treturn new Complex(this);\n\t}\n\t\n\t/**\n\t * return Matrix.\n\t * @returns {Matrix}\n\t */\n\ttoMatrix() {\n\t\treturn new Matrix(this);\n\t}\n\n\t// ----------------------\n\t// 比較\n\t// ----------------------\n\t\n\t/**\n\t * Equals.\n\t * @param {KFractionInputData} num\n\t * @returns {boolean} A === B\n\t */\n\tequals(num) {\n\t\tconst x = this;\n\t\tconst y = Fraction._toFraction(num);\n\t\tif(!x.isFinite() || !y.isFinite()) {\n\t\t\tif(x.isNaN() || y.isNaN()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(x.equalsState(y)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn x.numerator.equals(y.numerator) && x.denominator.equals(y.denominator);\n\t}\n\n\t/**\n\t * Numeric type match.\n\t * @param {KFractionInputData} number \n\t * @returns {boolean}\n\t */\n\tequalsState(number) {\n\t\tconst x = this;\n\t\tconst y = Fraction._toFraction(number);\n\t\treturn x.numerator.equalsState(y.numerator);\n\t}\n\n\t/**\n\t * Compare values.\n\t * @param {KFractionInputData} num\n\t * @returns {number} A > B ? 1 : (A === B ? 0 : -1)\n\t */\n\tcompareTo(num) {\n\t\tconst x = this;\n\t\tconst y = Fraction._toFraction(num);\n\t\tif(!x.isFinite() || !y.isFinite()) {\n\t\t\treturn x.numerator.compareTo(y.numerator);\n\t\t}\n\t\treturn x.sub(y).sign();\n\t}\n\n\t/**\n\t * Maximum number.\n\t * @param {KFractionInputData} number\n\t * @returns {Fraction} max([A, B])\n\t */\n\tmax(number) {\n\t\tconst val = Fraction._toFraction(number);\n\t\tif(this.isNaN() || val.isNaN()) {\n\t\t\treturn Fraction.NaN;\n\t\t}\n\t\tif(this.compareTo(val) >= 0) {\n\t\t\treturn this;\n\t\t}\n\t\telse {\n\t\t\treturn val;\n\t\t}\n\t}\n\n\t/**\n\t * Minimum number.\n\t * @param {KFractionInputData} number\n\t * @returns {Fraction} min([A, B])\n\t */\n\tmin(number) {\n\t\tconst val = Fraction._toFraction(number);\n\t\tif(this.isNaN() || val.isNaN()) {\n\t\t\treturn Fraction.NaN;\n\t\t}\n\t\tif(this.compareTo(val) >= 0) {\n\t\t\treturn val;\n\t\t}\n\t\telse {\n\t\t\treturn this;\n\t\t}\n\t}\n\n\t/**\n\t * Clip number within range.\n\t * @param {KFractionInputData} min \n\t * @param {KFractionInputData} max\n\t * @returns {Fraction} min(max(x, min), max)\n\t */\n\tclip(min, max) {\n\t\tconst min_ = Fraction._toFraction(min);\n\t\tconst max_ = Fraction._toFraction(max);\n\t\tif(this.isNaN() || min_.isNaN() || max_.isNaN()) {\n\t\t\treturn Fraction.NaN;\n\t\t}\n\t\tconst arg_check = min_.compareTo(max_);\n\t\tif(arg_check === 1) {\n\t\t\tthrow \"clip(min, max) error. (min > max)->(\" + min_ + \" > \" + max_ + \")\";\n\t\t}\n\t\telse if(arg_check === 0) {\n\t\t\treturn min_;\n\t\t}\n\t\tif(this.compareTo(max_) === 1) {\n\t\t\treturn max_;\n\t\t}\n\t\telse if(this.compareTo(min_) === -1) {\n\t\t\treturn min_;\n\t\t}\n\t\treturn this;\n\t}\n\n\t// ----------------------\n\t// 丸め\n\t// ----------------------\n\t\n\t/**\n\t * Floor.\n\t * @returns {Fraction} floor(A)\n\t */\n\tfloor() {\n\t\tif(this.isInteger() || !this.isFinite()) {\n\t\t\treturn this;\n\t\t}\n\t\tconst x = this.fix();\n\t\tif(this.sign() > 0) {\n\t\t\treturn x;\n\t\t}\n\t\telse {\n\t\t\treturn new Fraction([x.numerator.sub(BigInteger.ONE), Fraction.ONE]);\n\t\t}\n\t}\n\n\t/**\n\t * Ceil.\n\t * @returns {Fraction} ceil(A)\n\t */\n\tceil() {\n\t\tif(this.isInteger() || !this.isFinite()) {\n\t\t\treturn this;\n\t\t}\n\t\tconst x = this.fix();\n\t\tif(this.sign() > 0) {\n\t\t\treturn new Fraction([x.numerator.add(BigInteger.ONE), Fraction.ONE]);\n\t\t}\n\t\telse {\n\t\t\treturn x;\n\t\t}\n\t}\n\t\n\t/**\n\t * Rounding to the nearest integer.\n\t * @returns {Fraction} round(A)\n\t */\n\tround() {\n\t\tif(this.isInteger() || !this.isFinite()) {\n\t\t\treturn this;\n\t\t}\n\t\tconst x = this.floor();\n\t\tconst fract = this.sub(x);\n\t\tif(fract.compareTo(Fraction.HALF) >= 0) {\n\t\t\treturn new Fraction([x.numerator.add(BigInteger.ONE), Fraction.ONE]);\n\t\t}\n\t\telse {\n\t\t\treturn x;\n\t\t}\n\t}\n\n\t/**\n\t * To integer rounded down to the nearest.\n\t * @returns {Fraction} fix(A), trunc(A)\n\t */\n\tfix() {\n\t\tif(this.isInteger() || !this.isFinite()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new Fraction([this.numerator.div(this.denominator), Fraction.ONE]);\n\t}\n\n\t/**\n\t * Fraction.\n\t * @returns {Fraction} fract(A)\n\t */\n\tfract() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn Fraction.NaN;\n\t\t}\n\t\tif(this.isInteger()) {\n\t\t\treturn Fraction.ZERO;\n\t\t}\n\t\treturn this.sub(this.floor());\n\t}\n\n\t// ----------------------\n\t// テスト系\n\t// ----------------------\n\t\n\t/**\n\t * Return true if the value is integer.\n\t * @return {boolean}\n\t */\n\tisInteger() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.denominator.equals(BigInteger.ONE);\n\t}\n\n\t/**\n\t * this === 0\n\t * @return {boolean} A === 0\n\t */\n\tisZero() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.numerator.isZero();\n\t}\n\n\t/**\n\t * this === 1\n\t * @return {boolean} A === 1\n\t */\n\tisOne() {\n\t\tif(!this.isFinite()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.numerator.equals(BigInteger.ONE) && this.denominator.equals(BigInteger.ONE);\n\t}\n\n\t/**\n\t * this > 0\n\t * @returns {boolean}\n\t */\n\tisPositive() {\n\t\treturn this.numerator.isPositive();\n\t}\n\n\t/**\n\t * this < 0\n\t * @returns {boolean}\n\t */\n\tisNegative() {\n\t\treturn this.numerator.isNegative();\n\t}\n\n\t/**\n\t * this >= 0\n\t * @returns {boolean}\n\t */\n\tisNotNegative() {\n\t\treturn this.numerator.isNotNegative();\n\t}\n\t\n\t/**\n\t * this === NaN\n\t * @returns {boolean} isNaN(A)\n\t */\n\tisNaN() {\n\t\treturn this.numerator.isNaN();\n\t}\n\t\n\t/**\n\t * this === Infinity\n\t * @returns {boolean} isPositiveInfinity(A)\n\t */\n\tisPositiveInfinity() {\n\t\treturn this.numerator.isPositiveInfinity();\n\t}\n\n\t/**\n\t * this === -Infinity\n\t * @returns {boolean} isNegativeInfinity(A)\n\t */\n\tisNegativeInfinity() {\n\t\treturn this.numerator.isNegativeInfinity();\n\t}\n\n\t/**\n\t * this === Infinity or -Infinity\n\t * @returns {boolean} isPositiveInfinity(A) || isNegativeInfinity(A)\n\t */\n\tisInfinite() {\n\t\treturn this.numerator.isInfinite();\n\t}\n\t\n\t/**\n\t * Return true if the value is finite number.\n\t * @returns {boolean} !isNaN(A) && !isInfinite(A)\n\t */\n\tisFinite() {\n\t\treturn this.numerator.isFinite();\n\t}\n\n\t// ----------------------\n\t// ビット演算系\n\t// ----------------------\n\t\n\t/**\n\t * Logical AND.\n\t * - Calculated as an integer.\n\t * @param {KFractionInputData} number \n\t * @returns {Fraction} A & B\n\t */\n\tand(number) {\n\t\tconst n_src = this;\n\t\tconst n_tgt = Fraction._toFraction(number);\n\t\tconst src\t= n_src.round().toBigInteger();\n\t\tconst tgt\t= n_tgt.round().toBigInteger();\n\t\treturn new Fraction(src.and(tgt));\n\t}\n\n\t/**\n\t * Logical OR.\n\t * - Calculated as an integer.\n\t * @param {KFractionInputData} number \n\t * @returns {Fraction} A | B\n\t */\n\tor(number) {\n\t\tconst n_src = this;\n\t\tconst n_tgt = Fraction._toFraction(number);\n\t\tconst src\t= n_src.round().toBigInteger();\n\t\tconst tgt\t= n_tgt.round().toBigInteger();\n\t\treturn new Fraction(src.or(tgt));\n\t}\n\n\t/**\n\t * Logical Exclusive-OR.\n\t * - Calculated as an integer.\n\t * @param {KFractionInputData} number \n\t * @returns {Fraction} A ^ B\n\t */\n\txor(number) {\n\t\tconst n_src = this;\n\t\tconst n_tgt = Fraction._toFraction(number);\n\t\tconst src\t= n_src.round().toBigInteger();\n\t\tconst tgt\t= n_tgt.round().toBigInteger();\n\t\treturn new Fraction(src.xor(tgt));\n\t}\n\n\t/**\n\t * Logical Not. (mutable)\n\t * - Calculated as an integer.\n\t * @returns {Fraction} !A\n\t */\n\tnot() {\n\t\tconst n_src = this;\n\t\tconst src\t= n_src.round().toBigInteger();\n\t\treturn new Fraction(src.not());\n\t}\n\t\n\t/**\n\t * this << n\n\t * - Calculated as an integer.\n\t * @param {KFractionInputData} n\n\t * @returns {Fraction} A << n\n\t */\n\tshift(n) {\n\t\tconst src\t\t= this.round().toBigInteger();\n\t\tconst number\t= Fraction._toInteger(n);\n\t\treturn new Fraction(src.shift(number));\n\t}\n\n\t// ----------------------\n\t// gcd, lcm\n\t// ----------------------\n\t\n\t/**\n\t * Euclidean algorithm.\n\t * - Calculated as an integer.\n\t * @param {KFractionInputData} number \n\t * @returns {Fraction} gcd(x, y)\n\t */\n\tgcd(number) {\n\t\tconst x = this.round().toBigInteger();\n\t\tconst y = Fraction._toFraction(number).toBigInteger();\n\t\tconst result = x.gcd(y);\n\t\treturn new Fraction(result);\n\t}\n\n\t/**\n\t * Extended Euclidean algorithm.\n\t * - Calculated as an integer.\n\t * @param {KFractionInputData} number \n\t * @returns {Array<Fraction>} [a, b, gcd(x, y)], Result of calculating a*x + b*y = gcd(x, y).\n\t */\n\textgcd(number) {\n\t\tconst x = this.round().toBigInteger();\n\t\tconst y = Fraction._toFraction(number).toBigInteger();\n\t\tconst result = x.extgcd(y);\n\t\treturn [new Fraction(result[0]), new Fraction(result[1]), new Fraction(result[2])];\n\t}\n\n\t/**\n\t * Least common multiple.\n\t * - Calculated as an integer.\n\t * @param {KFractionInputData} number \n\t * @returns {Fraction} lcm(x, y)\n\t */\n\tlcm(number) {\n\t\tconst x = this.round().toBigInteger();\n\t\tconst y = Fraction._toFraction(number).toBigInteger();\n\t\tconst result = x.lcm(y);\n\t\treturn new Fraction(result);\n\t}\n\n\t// ----------------------\n\t// mod\n\t// ----------------------\n\n\t/**\n\t * Modular exponentiation.\n\t * - Calculated as an integer.\n\t * @param {KFractionInputData} exponent\n\t * @param {KFractionInputData} m \n\t * @returns {Fraction} A^B mod m\n\t */\n\tmodPow(exponent, m) {\n\t\tconst A = this.round().toBigInteger();\n\t\tconst B = Fraction._toFraction(exponent).toBigInteger();\n\t\tconst m_ = Fraction._toFraction(m).toBigInteger();\n\t\tconst result = A.modPow(B, m_);\n\t\treturn new Fraction(result);\n\t}\n\n\t/**\n\t * Modular multiplicative inverse.\n\t * - Calculated as an integer.\n\t * @param {KFractionInputData} m\n\t * @returns {Fraction} A^(-1) mod m\n\t */\n\tmodInverse(m) {\n\t\tconst A = this.round().toBigInteger();\n\t\tconst m_ = Fraction._toFraction(m).toBigInteger();\n\t\tconst result = A.modInverse(m_);\n\t\treturn new Fraction(result);\n\t}\n\t\n\t// ----------------------\n\t// 素数\n\t// ----------------------\n\t\n\t/**\n\t * Return true if the value is prime number.\n\t * - Calculated as an integer.\n\t * - Calculate up to `2251799813685248(=2^51)`.\n\t * @returns {boolean} - If the calculation range is exceeded, null is returned.\n\t */\n\tisPrime() {\n\t\tconst src = this.round().toBigInteger();\n\t\treturn src.isPrime();\n\t}\n\t\n\t/**\n\t * Return true if the value is prime number by Miller-Labin prime number determination method.\n\t * \n\t * Attention : it takes a very long time to process.\n\t * - Calculated as an integer.\n\t * @param {KFractionInputData} [certainty=100] - Repeat count (prime precision).\n\t * @returns {boolean}\n\t */\n\tisProbablePrime(certainty) {\n\t\tconst src = this.round().toBigInteger();\n\t\treturn src.isProbablePrime(certainty !== undefined ? Fraction._toInteger(certainty) : undefined);\n\t}\n\n\t/**\n\t * Next prime.\n\t * @param {KFractionInputData} [certainty=100] - Repeat count (prime precision).\n\t * @param {KFractionInputData} [search_max=100000] - Search range of next prime.\n\t * @returns {Fraction}\n\t */\n\tnextProbablePrime(certainty, search_max) {\n\t\tconst src = this.round().toBigInteger();\n\t\tconst p1 = certainty !== undefined ? Fraction._toInteger(certainty) : undefined;\n\t\tconst p2 = search_max !== undefined ? Fraction._toInteger(search_max) : undefined;\n\t\treturn new Fraction(src.nextProbablePrime(p1, p2));\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * -1\n\t * @returns {Fraction} -1\n\t */\n\tstatic get MINUS_ONE() {\n\t\tif(DEFINE.MINUS_ONE === null) {\n\t\t\tDEFINE.MINUS_ONE = new Fraction([BigInteger.MINUS_ONE, BigInteger.ONE]);\n\t\t}\n\t\treturn DEFINE.MINUS_ONE;\n\t}\n\n\t/**\n\t * 0\n\t * @returns {Fraction} 0\n\t */\n\tstatic get ZERO() {\n\t\tif(DEFINE.ZERO === null) {\n\t\t\tDEFINE.ZERO = new Fraction([BigInteger.ZERO, BigInteger.ONE]);\n\t\t}\n\t\treturn DEFINE.ZERO;\n\t}\n\n\t/**\n\t * 0.5\n\t * @returns {Fraction} 0.5\n\t */\n\tstatic get HALF() {\n\t\tif(DEFINE.HALF === null) {\n\t\t\tDEFINE.HALF = new Fraction([BigInteger.ONE, BigInteger.TWO]);\n\t\t}\n\t\treturn DEFINE.HALF;\n\t}\n\t\n\t/**\n\t * 1\n\t * @returns {Fraction} 1\n\t */\n\tstatic get ONE() {\n\t\tif(DEFINE.ONE === null) {\n\t\t\tDEFINE.ONE = new Fraction([BigInteger.ONE, BigInteger.ONE]);\n\t\t}\n\t\treturn DEFINE.ONE;\n\t}\n\t\n\t/**\n\t * 2\n\t * @returns {Fraction} 2\n\t */\n\tstatic get TWO() {\n\t\tif(DEFINE.TWO === null) {\n\t\t\tDEFINE.TWO = new Fraction([BigInteger.TWO, BigInteger.ONE]);\n\t\t}\n\t\treturn DEFINE.TWO;\n\t}\n\t\n\t/**\n\t * 10\n\t * @returns {Fraction} 10\n\t */\n\tstatic get TEN() {\n\t\tif(DEFINE.TEN === null) {\n\t\t\tDEFINE.TEN = new Fraction([BigInteger.TEN, BigInteger.ONE]);\n\t\t}\n\t\treturn DEFINE.TEN;\n\t}\n\n\t/**\n\t * Positive infinity.\n\t * @returns {Fraction} Infinity\n\t */\n\tstatic get POSITIVE_INFINITY() {\n\t\tif(DEFINE.POSITIVE_INFINITY === null) {\n\t\t\tDEFINE.POSITIVE_INFINITY = new Fraction(Number.POSITIVE_INFINITY);\n\t\t}\n\t\treturn DEFINE.POSITIVE_INFINITY;\n\t}\n\t\n\t/**\n\t * Negative Infinity.\n\t * @returns {Fraction} -Infinity\n\t */\n\tstatic get NEGATIVE_INFINITY() {\n\t\tif(DEFINE.NEGATIVE_INFINITY === null) {\n\t\t\tDEFINE.NEGATIVE_INFINITY = new Fraction(Number.NEGATIVE_INFINITY);\n\t\t}\n\t\treturn DEFINE.NEGATIVE_INFINITY;\n\t}\n\n\t/**\n\t * Not a Number.\n\t * @returns {Fraction} NaN\n\t */\n\tstatic get NaN() {\n\t\tif(DEFINE.NaN === null) {\n\t\t\tDEFINE.NaN = new Fraction(Number.NaN);\n\t\t}\n\t\treturn DEFINE.NaN;\n\t}\n\t\n\t// ----------------------\n\t// 互換性\n\t// ----------------------\n\t\n\t/**\n\t * The positive or negative sign of this number.\n\t * - +1 if positive, -1 if negative, 0 if 0.\n\t * @returns {number}\n\t */\n\tsignum() {\n\t\treturn this.sign();\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {KFractionInputData} number\n\t * @returns {Fraction} A - B\n\t */\n\tsubtract(number) {\n\t\treturn this.sub(number);\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {KFractionInputData} number\n\t * @returns {Fraction} A * B\n\t */\n\tmultiply(number) {\n\t\treturn this.mul(number);\n\t}\n\n\t/**\n\t * Divide.\n\t * @param {KFractionInputData} number\n\t * @returns {Fraction} fix(A / B)\n\t */\n\tdivide(number) {\n\t\treturn this.div(number);\n\t}\n\n\t/**\n\t * Remainder of division.\n\t * - Result has same sign as the Dividend.\n\t * @param {KFractionInputData} number\n\t * @returns {Fraction} A % B\n\t */\n\tremainder(number) {\n\t\treturn this.rem(number);\n\t}\n\n}\n\n/**\n * Collection of constant values used in the class.\n * @ignore\n */\nconst DEFINE = {\n\n\t/**\n\t * -1\n\t * @type {any}\n\t */\n\tMINUS_ONE : null,\n\n\t/**\n\t * 0\n\t * @type {any}\n\t */\n\tZERO : null,\n\t\n\t/**\n\t * 1\n\t * @type {any}\n\t */\n\tONE : null,\n\n\t/**\n\t * 0.5\n\t * @type {any}\n\t */\n\tHALF : null,\n\n\t/**\n\t * 2\n\t * @type {any}\n\t */\n\tTWO : null,\n\n\t/**\n\t * 10\n\t * @type {any}\n\t */\n\tTEN : null,\n\t\n\t/**\n\t * Positive infinity.\n\t * @type {any}\n\t */\n\tPOSITIVE_INFINITY : null,\n\n\t/**\n\t * Negative Infinity.\n\t * @type {any}\n\t */\n\tNEGATIVE_INFINITY : null,\n\n\t/**\n\t * Not a Number.\n\t * @type {any}\n\t */\n\tNaN : null,\n\n};\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/core/Fraction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 725,
    "kind": "typedef",
    "name": "KFractionInputData",
    "memberof": "src/math/core/Fraction.js",
    "static": true,
    "longname": "src/math/core/Fraction.js~KFractionInputData",
    "access": "public",
    "description": "Fraction type argument.\n- Fraction\n- BigInteger\n- BigDecimal\n- number\n- boolean\n- string\n- Array<KBigIntegerInputData>\n- {numerator:KBigIntegerInputData,denominator:KBigIntegerInputData}\n- {doubleValue:number}\n- {toString:function}\n\nInitialization can be performed as follows.\n- 10, \"10\", \"10/1\", \"10.0/1.0\", [\"10\", \"1\"], [10, 1]\n- 0.01, \"0.01\", \"0.1e-1\", \"1/100\", [1, 100], [2, 200], [\"2\", \"200\"]\n- \"1/3\", \"0.[3]\", \"0.(3)\", \"0.'3'\", \"0.\"3\"\", [1, 3], [2, 6]\n- \"3.555(123)\" = 3.555123123123..., \"147982 / 41625\"",
    "type": {
      "types": [
        "Fraction",
        "BigInteger",
        "BigDecimal",
        "number",
        "boolean",
        "string",
        "Array<import(\"./BigInteger.js\").KBigIntegerInputData>",
        "{numerator:import(\"./BigInteger.js\").KBigIntegerInputData,denominator:import(\"./BigInteger.js\").KBigIntegerInputData}",
        "{doubleValue:number}",
        "{toString:function}"
      ],
      "optional": false,
      "name": "KFractionInputData"
    }
  },
  {
    "__docId__": 726,
    "kind": "class",
    "name": "FractionTool",
    "memberof": "src/math/core/Fraction.js",
    "static": true,
    "longname": "src/math/core/Fraction.js~FractionTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/Fraction.js",
    "importStyle": null,
    "description": "Collection of functions used in Fraction.",
    "lineNumber": 43,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 727,
    "kind": "method",
    "name": "to_fraction_data_from_number_string",
    "memberof": "src/math/core/Fraction.js~FractionTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Fraction.js~FractionTool.to_fraction_data_from_number_string",
    "access": "public",
    "description": "Create data for Fraction from strings.",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ntext",
        "description": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 728,
    "kind": "method",
    "name": "to_fraction_data_from_fraction_string",
    "memberof": "src/math/core/Fraction.js~FractionTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Fraction.js~FractionTool.to_fraction_data_from_fraction_string",
    "access": "public",
    "description": "Create data for Fraction from fractional string.",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ntext",
        "description": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 729,
    "kind": "method",
    "name": "to_fraction_data_from_number",
    "memberof": "src/math/core/Fraction.js~FractionTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Fraction.js~FractionTool.to_fraction_data_from_number",
    "access": "public",
    "description": "Create data for Fraction from number.",
    "lineNumber": 195,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "{number|boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 730,
    "kind": "method",
    "name": "normalization",
    "memberof": "src/math/core/Fraction.js~FractionTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Fraction.js~FractionTool.normalization",
    "access": "public",
    "description": "Normalization.\n- Reduce fraction using gcd.\n- Add the sign to the numerator.\n- If the number is zero, the denominator is one.",
    "lineNumber": 257,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "{Fraction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 731,
    "kind": "class",
    "name": "Fraction",
    "memberof": "src/math/core/Fraction.js",
    "static": true,
    "longname": "src/math/core/Fraction.js~Fraction",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/core/Fraction.js",
    "importStyle": "Fraction",
    "description": "Fraction class (immutable).",
    "lineNumber": 286,
    "interface": false
  },
  {
    "__docId__": 732,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#constructor",
    "access": "public",
    "description": "Create an fraction.\n\nInitialization can be performed as follows.\n- 10, \"10\", \"10/1\", \"10.0/1.0\", [\"10\", \"1\"], [10, 1]\n- 0.01, \"0.01\", \"0.1e-1\", \"1/100\", [1, 100], [2, 200], [\"2\", \"200\"]\n- \"1/3\", \"0.[3]\", \"0.(3)\", \"0.'3'\", \"0.\"3\"\", [1, 3], [2, 6]\n- \"3.555(123)\" = 3.555123123123..., \"147982 / 41625\"",
    "lineNumber": 298,
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "number",
        "description": "Fraction data. See how to use the function."
      }
    ]
  },
  {
    "__docId__": 733,
    "kind": "member",
    "name": "numerator",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#numerator",
    "access": "public",
    "description": "numerator",
    "lineNumber": 305,
    "type": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 734,
    "kind": "member",
    "name": "denominator",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#denominator",
    "access": "public",
    "description": "denominator",
    "lineNumber": 312,
    "type": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 757,
    "kind": "method",
    "name": "create",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Fraction.js~Fraction.create",
    "access": "public",
    "description": "Create an entity object of this class.",
    "lineNumber": 390,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 758,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Fraction.js~Fraction.valueOf",
    "access": "public",
    "description": "Convert number to Fraction type.",
    "lineNumber": 404,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 759,
    "kind": "method",
    "name": "_toFraction",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Fraction.js~Fraction._toFraction",
    "access": "private",
    "description": "Convert to Fraction.",
    "lineNumber": 414,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 760,
    "kind": "method",
    "name": "_toFloat",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Fraction.js~Fraction._toFloat",
    "access": "private",
    "description": "Convert to real number.",
    "lineNumber": 429,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 761,
    "kind": "method",
    "name": "_toInteger",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Fraction.js~Fraction._toInteger",
    "access": "private",
    "description": "Convert to integer.",
    "lineNumber": 447,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 762,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#clone",
    "access": "public",
    "description": "Deep copy.",
    "lineNumber": 463,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 763,
    "kind": "method",
    "name": "abs",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#abs",
    "access": "public",
    "description": "Absolute value.",
    "lineNumber": 471,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} abs(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "abs(A)"
    },
    "params": []
  },
  {
    "__docId__": 764,
    "kind": "method",
    "name": "negate",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#negate",
    "access": "public",
    "description": "this * -1",
    "lineNumber": 485,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} -A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "A"
    },
    "params": []
  },
  {
    "__docId__": 765,
    "kind": "method",
    "name": "sign",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#sign",
    "access": "public",
    "description": "The positive or negative sign of this number.\n- +1 if positive, -1 if negative, 0 if 0.",
    "lineNumber": 505,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 766,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#toString",
    "access": "public",
    "description": "Convert to string.",
    "lineNumber": 516,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 767,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#add",
    "access": "public",
    "description": "Add.",
    "lineNumber": 532,
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "A + B"
    }
  },
  {
    "__docId__": 768,
    "kind": "method",
    "name": "sub",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#sub",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 564,
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 769,
    "kind": "method",
    "name": "mul",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#mul",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 596,
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 770,
    "kind": "method",
    "name": "div",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#div",
    "access": "public",
    "description": "Divide.",
    "lineNumber": 625,
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "A / B"
    }
  },
  {
    "__docId__": 771,
    "kind": "method",
    "name": "inv",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#inv",
    "access": "public",
    "description": "Inverse number of this value.",
    "lineNumber": 666,
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "1 / A"
    },
    "params": []
  },
  {
    "__docId__": 772,
    "kind": "method",
    "name": "rem",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#rem",
    "access": "public",
    "description": "Modulo, positive remainder of division.\n- Result has same sign as the Dividend.",
    "lineNumber": 684,
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "A rem B"
    }
  },
  {
    "__docId__": 773,
    "kind": "method",
    "name": "mod",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#mod",
    "access": "public",
    "description": "Modulo, positive remainder of division.\n- Result has same sign as the Divisor.",
    "lineNumber": 700,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} A mod B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "A mod B"
    }
  },
  {
    "__docId__": 774,
    "kind": "method",
    "name": "pow",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#pow",
    "access": "public",
    "description": "Power function.\n- Supports only integers.",
    "lineNumber": 721,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} pow(A, B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "pow(A, B)"
    }
  },
  {
    "__docId__": 775,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#factorial",
    "access": "public",
    "description": "Factorial function, x!.\n- Supports only integers.",
    "lineNumber": 787,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} n!"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "n!"
    },
    "params": []
  },
  {
    "__docId__": 776,
    "kind": "method",
    "name": "scaleByPowerOfTen",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#scaleByPowerOfTen",
    "access": "public",
    "description": "Multiply a multiple of ten.\n- Supports only integers.",
    "lineNumber": 800,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 777,
    "kind": "get",
    "name": "booleanValue",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#booleanValue",
    "access": "public",
    "description": "boolean value.",
    "lineNumber": 826,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 778,
    "kind": "get",
    "name": "intValue",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#intValue",
    "access": "public",
    "description": "integer value.",
    "lineNumber": 834,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 779,
    "kind": "get",
    "name": "doubleValue",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#doubleValue",
    "access": "public",
    "description": "floating point.",
    "lineNumber": 848,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 780,
    "kind": "method",
    "name": "toBigInteger",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#toBigInteger",
    "access": "public",
    "description": "return BigInteger.",
    "lineNumber": 868,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 781,
    "kind": "method",
    "name": "toBigDecimal",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#toBigDecimal",
    "access": "public",
    "description": "return BigDecimal.",
    "lineNumber": 877,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "MathContext setting after calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 782,
    "kind": "method",
    "name": "toFraction",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#toFraction",
    "access": "public",
    "description": "return Fraction.",
    "lineNumber": 898,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 783,
    "kind": "method",
    "name": "toComplex",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#toComplex",
    "access": "public",
    "description": "return Complex.",
    "lineNumber": 906,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 784,
    "kind": "method",
    "name": "toMatrix",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#toMatrix",
    "access": "public",
    "description": "return Matrix.",
    "lineNumber": 914,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 785,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#equals",
    "access": "public",
    "description": "Equals.",
    "lineNumber": 927,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 786,
    "kind": "method",
    "name": "equalsState",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#equalsState",
    "access": "public",
    "description": "Numeric type match.",
    "lineNumber": 949,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 787,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#compareTo",
    "access": "public",
    "description": "Compare values.",
    "lineNumber": 960,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A > B ? 1 : (A === B ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A > B ? 1 : (A === B ? 0 : -1)"
    }
  },
  {
    "__docId__": 788,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#max",
    "access": "public",
    "description": "Maximum number.",
    "lineNumber": 974,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 789,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#min",
    "access": "public",
    "description": "Minimum number.",
    "lineNumber": 992,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 790,
    "kind": "method",
    "name": "clip",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#clip",
    "access": "public",
    "description": "Clip number within range.",
    "lineNumber": 1011,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} min(max(x, min), max)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "min(max(x, min), max)"
    }
  },
  {
    "__docId__": 791,
    "kind": "method",
    "name": "floor",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#floor",
    "access": "public",
    "description": "Floor.",
    "lineNumber": 1041,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} floor(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "floor(A)"
    },
    "params": []
  },
  {
    "__docId__": 792,
    "kind": "method",
    "name": "ceil",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#ceil",
    "access": "public",
    "description": "Ceil.",
    "lineNumber": 1058,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} ceil(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "ceil(A)"
    },
    "params": []
  },
  {
    "__docId__": 793,
    "kind": "method",
    "name": "round",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#round",
    "access": "public",
    "description": "Rounding to the nearest integer.",
    "lineNumber": 1075,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} round(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "round(A)"
    },
    "params": []
  },
  {
    "__docId__": 794,
    "kind": "method",
    "name": "fix",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#fix",
    "access": "public",
    "description": "To integer rounded down to the nearest.",
    "lineNumber": 1093,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} fix(A), trunc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "fix(A), trunc(A)"
    },
    "params": []
  },
  {
    "__docId__": 795,
    "kind": "method",
    "name": "fract",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#fract",
    "access": "public",
    "description": "Fraction.",
    "lineNumber": 1104,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} fract(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "fract(A)"
    },
    "params": []
  },
  {
    "__docId__": 796,
    "kind": "method",
    "name": "isInteger",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#isInteger",
    "access": "public",
    "description": "Return true if the value is integer.",
    "lineNumber": 1122,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 797,
    "kind": "method",
    "name": "isZero",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#isZero",
    "access": "public",
    "description": "this === 0",
    "lineNumber": 1133,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === 0"
    },
    "params": []
  },
  {
    "__docId__": 798,
    "kind": "method",
    "name": "isOne",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#isOne",
    "access": "public",
    "description": "this === 1",
    "lineNumber": 1144,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === 1"
    },
    "params": []
  },
  {
    "__docId__": 799,
    "kind": "method",
    "name": "isPositive",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#isPositive",
    "access": "public",
    "description": "this > 0",
    "lineNumber": 1155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 800,
    "kind": "method",
    "name": "isNegative",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#isNegative",
    "access": "public",
    "description": "this < 0",
    "lineNumber": 1163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 801,
    "kind": "method",
    "name": "isNotNegative",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#isNotNegative",
    "access": "public",
    "description": "this >= 0",
    "lineNumber": 1171,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 802,
    "kind": "method",
    "name": "isNaN",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#isNaN",
    "access": "public",
    "description": "this === NaN",
    "lineNumber": 1179,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isNaN(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isNaN(A)"
    },
    "params": []
  },
  {
    "__docId__": 803,
    "kind": "method",
    "name": "isPositiveInfinity",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#isPositiveInfinity",
    "access": "public",
    "description": "this === Infinity",
    "lineNumber": 1187,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isPositiveInfinity(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isPositiveInfinity(A)"
    },
    "params": []
  },
  {
    "__docId__": 804,
    "kind": "method",
    "name": "isNegativeInfinity",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#isNegativeInfinity",
    "access": "public",
    "description": "this === -Infinity",
    "lineNumber": 1195,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isNegativeInfinity(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isNegativeInfinity(A)"
    },
    "params": []
  },
  {
    "__docId__": 805,
    "kind": "method",
    "name": "isInfinite",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#isInfinite",
    "access": "public",
    "description": "this === Infinity or -Infinity",
    "lineNumber": 1203,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isPositiveInfinity(A) || isNegativeInfinity(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isPositiveInfinity(A) || isNegativeInfinity(A)"
    },
    "params": []
  },
  {
    "__docId__": 806,
    "kind": "method",
    "name": "isFinite",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#isFinite",
    "access": "public",
    "description": "Return true if the value is finite number.",
    "lineNumber": 1211,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} !isNaN(A) && !isInfinite(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "!isNaN(A) && !isInfinite(A)"
    },
    "params": []
  },
  {
    "__docId__": 807,
    "kind": "method",
    "name": "and",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#and",
    "access": "public",
    "description": "Logical AND.\n- Calculated as an integer.",
    "lineNumber": 1225,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} A & B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "A & B"
    }
  },
  {
    "__docId__": 808,
    "kind": "method",
    "name": "or",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#or",
    "access": "public",
    "description": "Logical OR.\n- Calculated as an integer.",
    "lineNumber": 1239,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} A | B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "A | B"
    }
  },
  {
    "__docId__": 809,
    "kind": "method",
    "name": "xor",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#xor",
    "access": "public",
    "description": "Logical Exclusive-OR.\n- Calculated as an integer.",
    "lineNumber": 1253,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} A ^ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "A ^ B"
    }
  },
  {
    "__docId__": 810,
    "kind": "method",
    "name": "not",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#not",
    "access": "public",
    "description": "Logical Not. (mutable)\n- Calculated as an integer.",
    "lineNumber": 1266,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} !A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "!A"
    },
    "params": []
  },
  {
    "__docId__": 811,
    "kind": "method",
    "name": "shift",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#shift",
    "access": "public",
    "description": "this << n\n- Calculated as an integer.",
    "lineNumber": 1278,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} A << n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "A << n"
    }
  },
  {
    "__docId__": 812,
    "kind": "method",
    "name": "gcd",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#gcd",
    "access": "public",
    "description": "Euclidean algorithm.\n- Calculated as an integer.",
    "lineNumber": 1294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} gcd(x, y)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "gcd(x, y)"
    }
  },
  {
    "__docId__": 813,
    "kind": "method",
    "name": "extgcd",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#extgcd",
    "access": "public",
    "description": "Extended Euclidean algorithm.\n- Calculated as an integer.",
    "lineNumber": 1307,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Fraction>} [a, b, gcd(x, y)], Result of calculating a*x + b*y = gcd(x, y)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Fraction>"
      ],
      "spread": false,
      "description": "[a, b, gcd(x, y)], Result of calculating a*x + b*y = gcd(x, y)."
    }
  },
  {
    "__docId__": 814,
    "kind": "method",
    "name": "lcm",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#lcm",
    "access": "public",
    "description": "Least common multiple.\n- Calculated as an integer.",
    "lineNumber": 1320,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} lcm(x, y)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "lcm(x, y)"
    }
  },
  {
    "__docId__": 815,
    "kind": "method",
    "name": "modPow",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#modPow",
    "access": "public",
    "description": "Modular exponentiation.\n- Calculated as an integer.",
    "lineNumber": 1338,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} A^B mod m"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exponent",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "A^B mod m"
    }
  },
  {
    "__docId__": 816,
    "kind": "method",
    "name": "modInverse",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#modInverse",
    "access": "public",
    "description": "Modular multiplicative inverse.\n- Calculated as an integer.",
    "lineNumber": 1352,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} A^(-1) mod m"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "A^(-1) mod m"
    }
  },
  {
    "__docId__": 817,
    "kind": "method",
    "name": "isPrime",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#isPrime",
    "access": "public",
    "description": "Return true if the value is prime number.\n- Calculated as an integer.\n- Calculate up to `2251799813685248(=2^51)`.",
    "lineNumber": 1369,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - If the calculation range is exceeded, null is returned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "If the calculation range is exceeded, null is returned."
    },
    "params": []
  },
  {
    "__docId__": 818,
    "kind": "method",
    "name": "isProbablePrime",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#isProbablePrime",
    "access": "public",
    "description": "Return true if the value is prime number by Miller-Labin prime number determination method.\n\nAttention : it takes a very long time to process.\n- Calculated as an integer.",
    "lineNumber": 1382,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "certainty",
        "description": "Repeat count (prime precision)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 819,
    "kind": "method",
    "name": "nextProbablePrime",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#nextProbablePrime",
    "access": "public",
    "description": "Next prime.",
    "lineNumber": 1393,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "certainty",
        "description": "Repeat count (prime precision)."
      },
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100000",
        "defaultRaw": 100000,
        "name": "search_max",
        "description": "Search range of next prime."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 820,
    "kind": "get",
    "name": "MINUS_ONE",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Fraction.js~Fraction.MINUS_ONE",
    "access": "public",
    "description": "-1",
    "lineNumber": 1408,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} -1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 821,
    "kind": "get",
    "name": "ZERO",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Fraction.js~Fraction.ZERO",
    "access": "public",
    "description": "0",
    "lineNumber": 1419,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "0"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 822,
    "kind": "get",
    "name": "HALF",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Fraction.js~Fraction.HALF",
    "access": "public",
    "description": "0.5",
    "lineNumber": 1430,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} 0.5"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "0.5"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 823,
    "kind": "get",
    "name": "ONE",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Fraction.js~Fraction.ONE",
    "access": "public",
    "description": "1",
    "lineNumber": 1441,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} 1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 824,
    "kind": "get",
    "name": "TWO",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Fraction.js~Fraction.TWO",
    "access": "public",
    "description": "2",
    "lineNumber": 1452,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} 2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "2"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 825,
    "kind": "get",
    "name": "TEN",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Fraction.js~Fraction.TEN",
    "access": "public",
    "description": "10",
    "lineNumber": 1463,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} 10"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "10"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 826,
    "kind": "get",
    "name": "POSITIVE_INFINITY",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Fraction.js~Fraction.POSITIVE_INFINITY",
    "access": "public",
    "description": "Positive infinity.",
    "lineNumber": 1474,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} Infinity"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "Infinity"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 827,
    "kind": "get",
    "name": "NEGATIVE_INFINITY",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Fraction.js~Fraction.NEGATIVE_INFINITY",
    "access": "public",
    "description": "Negative Infinity.",
    "lineNumber": 1485,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} -Infinity"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "Infinity"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 828,
    "kind": "get",
    "name": "NaN",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Fraction.js~Fraction.NaN",
    "access": "public",
    "description": "Not a Number.",
    "lineNumber": 1496,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} NaN"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "NaN"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 829,
    "kind": "method",
    "name": "signum",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#signum",
    "access": "public",
    "description": "The positive or negative sign of this number.\n- +1 if positive, -1 if negative, 0 if 0.",
    "lineNumber": 1512,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 830,
    "kind": "method",
    "name": "subtract",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#subtract",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 1521,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 831,
    "kind": "method",
    "name": "multiply",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#multiply",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 1530,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 832,
    "kind": "method",
    "name": "divide",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#divide",
    "access": "public",
    "description": "Divide.",
    "lineNumber": 1539,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} fix(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "fix(A / B)"
    }
  },
  {
    "__docId__": 833,
    "kind": "method",
    "name": "remainder",
    "memberof": "src/math/core/Fraction.js~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Fraction.js~Fraction#remainder",
    "access": "public",
    "description": "Remainder of division.\n- Result has same sign as the Dividend.",
    "lineNumber": 1549,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} A % B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KFractionInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "A % B"
    }
  },
  {
    "__docId__": 834,
    "kind": "variable",
    "name": "DEFINE",
    "memberof": "src/math/core/Fraction.js",
    "static": true,
    "longname": "src/math/core/Fraction.js~DEFINE",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/Fraction.js",
    "importStyle": null,
    "description": "Collection of constant values used in the class.",
    "lineNumber": 1559,
    "ignore": true,
    "type": {
      "types": [
        "{\"MINUS_ONE\": *, \"ZERO\": *, \"ONE\": *, \"HALF\": *, \"TWO\": *, \"TEN\": *, \"POSITIVE_INFINITY\": *, \"NEGATIVE_INFINITY\": *, \"NaN\": *}"
      ]
    }
  },
  {
    "__docId__": 835,
    "kind": "file",
    "name": "src/math/core/Matrix.js",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Polyfill from \"../tools/Polyfill.js\";\nimport LinearAlgebra from \"./tools/LinearAlgebra.js\";\nimport Statistics from \"./tools/Statistics.js\";\nimport Signal from \"./tools/Signal.js\";\nimport Complex from \"./Complex.js\";\nimport Random from \"./tools/Random.js\";\nimport BigInteger from \"./BigInteger.js\";\nimport BigDecimal from \"./BigDecimal.js\";\nimport Fraction from \"./Fraction.js\";\nimport MathContext from \"./context/MathContext.js\";\n\n/**\n * Matrix type argument.\n * - Matrix\n * - Complex\n * - number\n * - string\n * - Array<string|number|Complex|Matrix>\n * - Array<Array<string|number|Complex|Matrix>>\n * - {doubleValue:number}\n * - {toString:function}\n * \n * Initialization can be performed as follows.\n * - 10, \"10\", \"3 + 4j\", \"[ 1 ]\", \"[1, 2, 3]\", \"[1 2 3]\", [1, 2, 3],\n * - [[1, 2], [3, 4]], \"[1 2; 3 4]\", \"[1+2i 3+4i]\",\n * - \"[1:10]\", \"[1:2:3]\" (MATLAB / Octave / Scilab compatible).\n * @typedef {Matrix|Complex|number|string|Array<string|number|Complex|Matrix>|Array<Array<string|number|Complex|Matrix>>|{doubleValue:number}|{toString:function}} KMatrixInputData\n */\n\n/**\n * Collection of calculation settings for matrix.\n * - Available options vary depending on the method.\n * @typedef {Object} KMatrixSettings\n * @property {?string|?number} [dimension=\"auto\"] Calculation direction. 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\".\n * @property {Object} [correction] Correction value. For statistics. 0(unbiased), 1(sample).\n */\n\n/**\n * Collection of functions used in Matrix.\n * @ignore\n */\nclass MatrixTool {\n\n\t/**\n\t * Create actual values from data specifying matrix position.\n\t * @param {any} data - A value indicating the position in a matrix.\n\t * @param {number} max - Length to initialize. (Used when \":\" is specified at matrix creation.)\n\t * @param {number} geta - Offset at initialization. (Used when \":\" is specified at matrix creation.)\n\t * @returns {Array<number>}\n\t */\n\tstatic toPositionArrayFromObject(data, max, geta) {\n\t\tif(typeof data === \"string\") {\n\t\t\tconst array_or_string = MatrixTool.toArrayFromString(data);\n\t\t\tif(array_or_string === \":\") {\n\t\t\t\t// : が指定された場合\n\t\t\t\tconst y = new Array(max);\n\t\t\t\tfor(let i = 0; i < max; i++) {\n\t\t\t\t\ty[i] =  i + geta;\n\t\t\t\t}\n\t\t\t\treturn y;\n\t\t\t}\n\t\t\telse if(array_or_string instanceof Array) {\n\t\t\t\t// 複素数の配列から中身を取り出す\n\t\t\t\tconst y = array_or_string;\n\t\t\t\tconst num_y = new Array(y.length);\n\t\t\t\tfor(let i = 0; i < y.length; i++) {\n\t\t\t\t\tnum_y[i] = Math.trunc(y[i].real);\n\t\t\t\t}\n\t\t\t\treturn num_y;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow \"toArrayFromString[\" + data + \"][\" + array_or_string + \"]\";\n\t\t\t}\n\t\t}\n\t\tlet t_data = data;\n\t\tif(!(t_data instanceof Matrix) && !(t_data instanceof Complex) && !((typeof t_data === \"number\"))) {\n\t\t\t// @ts-ignore\n\t\t\tt_data = Matrix._toMatrix(t_data);\n\t\t}\n\t\tif(t_data instanceof Matrix) {\n\t\t\tif(!t_data.isVector()) {\n\t\t\t\tthrow \"getMatrix argument \" + t_data;\n\t\t\t}\n\t\t\tconst len = t_data.length;\n\t\t\tconst y = new Array(t_data.length);\n\t\t\tif(t_data.isRow()) {\n\t\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\ty[i] = Math.trunc(t_data.matrix_array[0][i].real);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(t_data.isColumn()) {\n\t\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\ty[i] = Math.trunc(t_data.matrix_array[i][0].real);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\t// @ts-ignore\n\t\treturn [ Matrix._toInteger(t_data) ];\n\t}\n\n\t/**\n\t * A match function that can also extract strings excluding matched strings.\n\t * @param {string} text - Search target.\n\t * @param {RegExp} regexp - Regular expression.\n\t * @returns {Array<Object<boolean, string>>}\n\t */\n\tstatic match2(text, regexp) {\n\t\t// 対象ではないregexpの情報以外も抽出match\n\t\t// つまり \"1a2b\" で \\d を抽出すると、次のように抽出される\n\t\t// [false \"1\"]\n\t\t// [true \"a\"]\n\t\t// [false \"2\"]\n\t\t// [true \"b\"]\n\t\t// 0 ... 一致したかどうか\n\t\t// 1 ... 一致した文字列、あるいは一致していない文字列\n\t\tconst output = [];\n\t\tlet search_target = text;\n\t\tfor(let x = 0; x < 1000; x++) {\n\t\t\tconst match = search_target.match(regexp);\n\t\t\tif(match === null) {\n\t\t\t\tif(search_target.length) {\n\t\t\t\t\toutput.push([ false, search_target ]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(match.index > 0) {\n\t\t\t\toutput.push([ false, search_target.substr(0, match.index) ]);\n\t\t\t}\n\t\t\toutput.push([ true, match[0] ]);\n\t\t\tsearch_target = search_target.substr(match.index + match[0].length);\n\t\t}\n\t\treturn output;\n\t}\n\t\n\t/**\n\t * Removed front and back brackets when enclosed by brackets.\n\t * - Return null if the string has no brackets.\n\t * @param {string} text - String to be processed.\n\t * @returns {{text : string, is_transpose : boolean}|null} String after brackets removal or null.\n\t */\n\tstatic trimBracket(text) {\n\t\tlet input_text = text;\n\t\tlet is_transpose = false;\n\t\t// 後ろに'が付いているかどうか検知(転置行列用)\n\t\tif(/'$/.test(input_text)) {\n\t\t\tconst dash_text = input_text.match(/(\\s*')*$/g)[0];\n\t\t\tconst dash_count = (dash_text.split(\"'\").length - 1);\n\t\t\tis_transpose = (dash_count % 2) === 1;\n\t\t\tinput_text = input_text.substring(0, input_text.length - dash_text.length);\n\t\t}\n\t\t// 前後に[]があるか確認\n\t\tif( !(/^\\[/).test(input_text) || !(/\\]$/).test(input_text)) {\n\t\t\treturn null;\n\t\t}\n\t\t// 前後の[]を除去\n\t\treturn {\n\t\t\ttext : input_text.substring(1, input_text.length - 1),\n\t\t\tis_transpose : is_transpose\n\t\t};\n\t}\n\n\t/**\n\t * Create Matrix type data from string data defined in JSON.\n\t * - For example, \"[xx,xx,xx], [xx,xx,xx]\"\n\t * @param {string} text - String to be processed.\n\t * @returns {Array<Array<Complex>>} Internal array used by Matrix type.\n\t */\n\tstatic toMatrixArrayFromStringForArrayJSON(text) {\n\t\tconst matrix_array = [];\n\t\t// さらにブランケット内を抽出\n\t\tlet rows = text.match(/\\[[^\\]]+\\]/g);\n\t\tif(rows === null) {\n\t\t\t// ブランケットがない場合は、1行行列である\n\t\t\trows = [text];\n\t\t}\n\t\t// 各ブランケット内を列ごとに調査\n\t\tfor(let row_count = 0; row_count < rows.length; row_count++) {\n\t\t\tconst row = rows[row_count];\n\t\t\tconst column_array = row.substring(1, row.length - 1).split(\",\");\n\t\t\tconst rows_array = [];\n\t\t\tfor(let col_count = 0; col_count < column_array.length; col_count++) {\n\t\t\t\tconst column = column_array[col_count];\n\t\t\t\trows_array[col_count] = new Complex(column);\n\t\t\t}\n\t\t\tmatrix_array[row_count] = rows_array;\n\t\t}\n\t\treturn matrix_array;\n\t}\n\n\t/**\n\t * Create a numeric array from initial values, difference values, and final values.\n\t * @param {Complex} from - Start value.\n\t * @param {Complex} delta - Delta.\n\t * @param {Complex} to - End value.\n\t * @param {boolean} [is_include_last_number=true] - Whether to include the last value.\n\t * @returns {Array<Complex>}\n\t */\n\tstatic InterpolationCalculation(from, delta, to, is_include_last_number) {\n\t\tconst FromIsGreaterThanTo = from.compareTo(to);\n\t\tconst is_include_last_number_ = is_include_last_number !== undefined ? is_include_last_number : true;\n\t\tif(FromIsGreaterThanTo === 0) {\n\t\t\treturn [from];\n\t\t}\n\t\tif(delta.isZero()) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\t// delta が負のため、どれだけたしても to にならない。\n\t\tif(delta.isNegative() && (FromIsGreaterThanTo === -1)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\t// FromIsGreaterThanTo\n\t\t// +1 from の方が大きい。下に減算タイプ\n\t\t// -1 to の方が大きい。上に加算タイプ\n\t\tconst rows_array = [];\n\t\tlet num = from;\n\t\trows_array[0] = num;\n\t\tfor(let i = 1; i < 0x10000; i++) {\n\t\t\tnum = num.add(delta);\n\t\t\tif(is_include_last_number_) {\n\t\t\t\tif(to.compareTo(num) === FromIsGreaterThanTo) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif((to.compareTo(num) * FromIsGreaterThanTo) >= 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\trows_array[i] = num;\n\t\t}\n\t\treturn rows_array;\n\t}\n\n\t/**\n\t * Create an array of numbers from data separated by match2.\n\t * @param {Array<Object<boolean, string>>} match2_string - Data separated by \"toArrayFromString\".\n\t * @returns {Array<Complex>}\n\t */\n\tstatic toArrayFromMatch2String(match2_string) {\n\t\tconst xs = match2_string;\n\t\tconst rows_array = [];\n\t\tfor(let i = 0; i < xs.length; i++) {\n\t\t\tconst xx = xs[i];\n\t\t\tif(!xx[0]) {\n\t\t\t\t// 一致していないデータであれば次へ\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// 「:記法」 1:3 なら 1,2,3。 1:2:9 なら 1:3:5:7:9\n\t\t\tif((i < xs.length - 2) && !xs[i + 1][0] && /:/.test(xs[i + 1][1])) {\n\t\t\t\tlet from, delta, to;\n\t\t\t\tif((i < xs.length - 4) && !xs[i + 3][0] && /:/.test(xs[i + 3][1])) {\n\t\t\t\t\tfrom = new Complex(xx[1]);\n\t\t\t\t\tdelta = new Complex(xs[i + 2][1]);\n\t\t\t\t\tto = new Complex(xs[i + 4][1]);\n\t\t\t\t\ti += 4;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfrom = new Complex(xx[1]);\n\t\t\t\t\tdelta = Complex.ONE;\n\t\t\t\t\tto = new Complex(xs[i + 2][1]);\n\t\t\t\t\ti += 2;\n\t\t\t\t}\n\t\t\t\tconst ip_array = MatrixTool.InterpolationCalculation(from, delta, to, true);\n\t\t\t\tfor(let j = 0; j < ip_array.length; j++) {\n\t\t\t\t\trows_array.push(ip_array[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\trows_array.push(new Complex(xx[1]));\n\t\t\t}\n\t\t}\n\n\t\treturn rows_array;\n\t}\n\n\t/**\n\t * Convert string to row part of matrix type matrix data.\n\t * Estimate the matrix by extracting parts like numbers.\n\t * @param {string} row_text - A string describing one row of the matrix.\n\t * @returns {Array<Complex>|string}\n\t */\n\tstatic toArrayFromString(row_text) {\n\t\t// 「:」のみ記載されていないかの確認\n\t\tif(row_text.trim() === \":\") {\n\t\t\treturn \":\";\n\t\t}\n\t\tconst str = row_text.toLowerCase().replace(/infinity|inf/g, \"1e100000\");\n\t\t// 左が実数（強制）で右が複素数（任意）タイプ\n\t\tconst reg1 = /[+-]? *(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))( *[+-] *[- ]?(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))?[ij])?/;\n\t\t// 左が複素数（強制）で右が実数（任意）タイプ\n\t\tconst reg2 = /[+-]? *(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))?[ij]( *[+] *[- ]?(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan)))?/;\n\t\t// reg2優先で検索\n\t\tconst reg3 = new RegExp(\"(\" + reg2.source + \")|(\" + reg1.source + \")\", \"i\");\n\t\t// 問題として 1 - -jが通る\n\t\treturn MatrixTool.toArrayFromMatch2String(MatrixTool.match2(str, reg3));\n\t}\n\n\t/**\n\t * Create Matrix type data from string data defined by character string with space separation etc.\n\t * @param {string} text - Strings to analyze.\n\t * @returns {Array<Array<Complex>>} Internal array used by Matrix type.\n\t */\n\tstatic toMatrixArrayFromStringForArraySPACE(text) {\n\t\t// 行ごとを抽出して\n\t\tconst rows = text.split(\";\");\n\t\tconst matrix_array = new Array(rows.length);\n\t\tfor(let row_count = 0; row_count < rows.length; row_count++) {\n\t\t\t// 各行の文字を解析\n\t\t\tmatrix_array[row_count] = MatrixTool.toArrayFromString(rows[row_count]);\n\t\t}\n\t\treturn matrix_array;\n\t}\n\n\t/**\n\t * Create Matrix type data composed of string data for matrix.\n\t * @param {string} text - Strings to analyze.\n\t * @returns {Array<Array<Complex>>} Internal array used by Matrix type.\n\t */\n\tstatic toMatrixArrayFromStringInBracket(text) {\n\t\t// ブラケットの中にブラケットがある＝JSON形式\n\t\tif(/[[\\]]/.test(text)) {\n\t\t\treturn MatrixTool.toMatrixArrayFromStringForArrayJSON(text);\n\t\t}\n\t\t// それ以外(MATLAB, Octave, Scilab)\n\t\telse {\n\t\t\treturn MatrixTool.toMatrixArrayFromStringForArraySPACE(text);\n\t\t}\n\t}\n\n\t/**\n\t * Create Matrix type data from string data.\n\t * @param {string} text - Strings to analyze.\n\t * @returns {Array<Array<Complex>>} Internal array used by Matrix type.\n\t */\n\tstatic toMatrixArrayFromString(text) {\n\t\t// 前後のスペースを除去\n\t\tconst trimtext = text.replace(/^\\s*|\\s*$/g, \"\");\n\t\t// ブランケットを外す\n\t\tconst withoutBracket = MatrixTool.trimBracket(trimtext);\n\t\tif(withoutBracket) {\n\t\t\t// 配列用の初期化\n\t\t\tlet array_data = MatrixTool.toMatrixArrayFromStringInBracket(withoutBracket.text);\n\t\t\t// 転置が必要なら転置させる\n\t\t\tif(withoutBracket.is_transpose) {\n\t\t\t\t// @ts-ignore\n\t\t\t\tarray_data = (new Matrix(array_data)).T().matrix_array;\n\t\t\t}\n\t\t\treturn array_data;\n\t\t}\n\t\telse {\n\t\t\t// スカラー用の初期化\n\t\t\treturn [[new Complex(text)]];\n\t\t}\n\t}\n\n\t/**\n\t * Returns true if Matrix type internal data is correct as matrix data.\n\t * @param {Array<Array<Complex>>} m_array\n\t * @returns {boolean} \n\t */\n\tstatic isCorrectMatrixArray(m_array) {\n\t\tif(m_array.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tconst num = m_array[0].length;\n\t\tif(num === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tfor(let i = 1; i < m_array.length; i++) {\n\t\t\tif(m_array[i].length !== num) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\n/**\n * Complex matrix class. (immutable)\n */\nexport default class Matrix {\n\t\n\t/**\n\t * Create a complex matrix.\n\t * Initialization can be performed as follows.\n\t * - 10, \"10\", \"3 + 4j\", \"[ 1 ]\", \"[1, 2, 3]\", \"[1 2 3]\", [1, 2, 3],\n\t * - [[1, 2], [3, 4]], \"[1 2; 3 4]\", \"[1+2i 3+4i]\",\n\t * - \"[1:10]\", \"[1:2:3]\" (MATLAB / Octave / Scilab compatible).\n\t * @param {KMatrixInputData} number - Complex matrix. See how to use the function.\n\t */\n\tconstructor(number) {\n\t\tlet matrix_array = null;\n\t\tlet is_check_string = false;\n\t\tif(arguments.length === 1) {\n\t\t\tconst obj = number;\n\t\t\t// 行列型なら中身をディープコピーする\n\t\t\tif(obj instanceof Matrix) {\n\t\t\t\tmatrix_array = new Array(obj.row_length);\n\t\t\t\tfor(let i = 0; i < obj.row_length; i++) {\n\t\t\t\t\tmatrix_array[i] = new Array(obj.column_length);\n\t\t\t\t\tfor(let j = 0; j < obj.column_length; j++) {\n\t\t\t\t\t\tmatrix_array[i][j] = obj.matrix_array[i][j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 複素数型なら1要素の行列\n\t\t\telse if(obj instanceof Complex) {\n\t\t\t\tmatrix_array = [[obj]];\n\t\t\t}\n\t\t\t// 行列の場合は中身を解析していく\n\t\t\telse if(obj instanceof Array) {\n\t\t\t\tmatrix_array = [];\n\t\t\t\tfor(let row_count = 0; row_count < obj.length; row_count++) {\n\t\t\t\t\t// 毎行ごと調査\n\t\t\t\t\tconst row = obj[row_count];\n\t\t\t\t\t// 各行の要素が配列の場合は、配列内配列のため再度for文で調べていく\n\t\t\t\t\tif(row instanceof Array) {\n\t\t\t\t\t\tconst rows_array = new Array(row.length);\n\t\t\t\t\t\t// 1行を調査する\n\t\t\t\t\t\tfor(let col_count = 0; col_count < row.length; col_count++) {\n\t\t\t\t\t\t\tconst column = row[col_count];\n\t\t\t\t\t\t\t// 1要素が複素数ならそのまま代入\n\t\t\t\t\t\t\tif(column instanceof Complex) {\n\t\t\t\t\t\t\t\trows_array[col_count] = column;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// 1要素が行列なら、中身を抽出して代入\n\t\t\t\t\t\t\telse if(column instanceof Matrix) {\n\t\t\t\t\t\t\t\tif(!column.isScalar()) {\n\t\t\t\t\t\t\t\t\tthrow \"Matrix in matrix\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trows_array[col_count] = column.scalar;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// それ以外の場合は、複素数クラスのコンストラクタに判断させる\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\trows_array[col_count] = new Complex(column);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatrix_array[row_count] = rows_array;\n\t\t\t\t\t}\n\t\t\t\t\t// 1つの値のみ宣言の場合は、中の配列を行ベクトルとして定義する\n\t\t\t\t\telse {\n\t\t\t\t\t\t// 行ベクトルの初期化\n\t\t\t\t\t\tif(row_count === 0) {\n\t\t\t\t\t\t\tmatrix_array[0] = new Array(obj.length);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 1要素が複素数ならそのまま代入\n\t\t\t\t\t\tif(row instanceof Complex) {\n\t\t\t\t\t\t\tmatrix_array[0][row_count] = row;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 1要素が行列なら、中身を抽出して代入\n\t\t\t\t\t\telse if(row instanceof Matrix) {\n\t\t\t\t\t\t\tif(!row.isScalar()) {\n\t\t\t\t\t\t\t\tthrow \"Matrix in matrix\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmatrix_array[0][row_count] = row.scalar;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// それ以外の場合は、複素数クラスのコンストラクタに判断させる\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tmatrix_array[0][row_count] = new Complex(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 文字列の場合は、文字列解析を行う\n\t\t\telse if(typeof obj === \"string\") {\n\t\t\t\tis_check_string = true;\n\t\t\t\tmatrix_array = MatrixTool.toMatrixArrayFromString(obj);\n\t\t\t}\n\t\t\t// 数値化できる場合\n\t\t\telse if((obj instanceof Object) && (\"doubleValue\" in obj)) {\n\t\t\t\tmatrix_array = [[new Complex(obj.doubleValue)]];\n\t\t\t}\n\t\t\t// 文字列変換できる場合は返還後に、文字列解析を行う\n\t\t\telse if(obj instanceof Object) {\n\t\t\t\tis_check_string = true;\n\t\t\t\tmatrix_array = MatrixTool.toMatrixArrayFromString(obj.toString());\n\t\t\t}\n\t\t\t// 単純なビルトインの数値など\n\t\t\telse {\n\t\t\t\tmatrix_array = [[new Complex(obj)]];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow \"Matrix : Many arguments [\" + arguments.length + \"]\";\n\t\t}\n\t\tif(is_check_string) {\n\t\t\t// 文字列データの解析の場合、\":\" データが紛れていないかを確認する。\n\t\t\t// 紛れていたらその行は削除する。\n\t\t\tfor(let row = 0; row < matrix_array.length; row++) {\n\t\t\t\tif(matrix_array[row] === \":\") {\n\t\t\t\t\tmatrix_array.splice(row--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!MatrixTool.isCorrectMatrixArray(matrix_array)) {\n\t\t\tconsole.log(matrix_array);\n\t\t\tthrow \"new Matrix IllegalArgumentException\";\n\t\t}\n\t\t\n\t\t/**\n\t\t * An array of elements in the matrix.\n\t\t * @private\n\t\t * @type {Array<Array<Complex>>}\n\t\t */\n\t\tthis.matrix_array = matrix_array;\n\n\t\t/**\n\t\t * The number of rows in a matrix.\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.row_length = this.matrix_array.length;\n\t\t\n\t\t/**\n\t\t * The number of columns in a matrix.\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.column_length = this.matrix_array[0].length;\n\n\t\t/**\n\t\t * A cache that records data converted to a string.\n\t\t * @private\n\t\t * @type {string}\n\t\t */\n\t\tthis.string_cash = null;\n\t}\n\n\t/**\n\t * Create an entity object of this class.\n\t * @param {KMatrixInputData} number\n\t * @returns {Matrix}\n\t */\n\tstatic create(number) {\n\t\tif((arguments.length === 1) && (number instanceof Matrix)) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new Matrix(number);\n\t\t}\n\t}\n\t\n\t/**\n\t * Convert number to Matrix type.\n\t * @param {KMatrixInputData} number\n\t * @returns {Matrix}\n\t */\n\tstatic valueOf(number) {\n\t\treturn Matrix.create(number);\n\t}\n\n\t/**\n\t * Convert to Matrix.\n\t * If type conversion is unnecessary, return the value as it is.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix}\n\t * @private\n\t */\n\tstatic _toMatrix(number) {\n\t\tif(number instanceof Matrix) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new Matrix(number);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to Complex.\n\t * If type conversion is unnecessary, return the value as it is.\n\t * @param {KMatrixInputData} number \n\t * @returns {Complex}\n\t * @private\n\t */\n\tstatic _toComplex(number) {\n\t\tif(number instanceof Complex) {\n\t\t\treturn number;\n\t\t}\n\t\tconst M = Matrix._toMatrix(number);\n\t\tif(M.isScalar()) {\n\t\t\treturn M.scalar;\n\t\t}\n\t\telse {\n\t\t\tthrow \"not scalar. [\" + number + \"]\";\n\t\t}\n\t}\n\n\t/**\n\t * Convert to real number.\n\t * @param {KMatrixInputData} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toDouble(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn number;\n\t\t}\n\t\tconst x = Matrix._toComplex(number);\n\t\tif(x.isReal()) {\n\t\t\treturn x.real;\n\t\t}\n\t\telse {\n\t\t\tthrow \"not support complex numbers.\";\n\t\t}\n\t}\n\n\t/**\n\t * Convert to integer.\n\t * @param {KMatrixInputData} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toInteger(number) {\n\t\treturn Math.trunc(Matrix._toDouble(number));\n\t}\n\n\t/**\n\t * Delete cache.\n\t */\n\t_clearCash() {\n\t\tif(this.string_cash) {\n\t\t\tdelete this.string_cash;\n\t\t}\n\t}\n\n\t/**\n\t * Deep copy.\n\t * @returns {Matrix}\n\t */\n\tclone() {\n\t\treturn new Matrix(this.matrix_array);\n\t}\n\n\t/**\n\t * Convert to string.\n\t * @returns {string} \n\t */\n\ttoString() {\n\t\tif(this.string_cash) {\n\t\t\treturn this.string_cash;\n\t\t}\n\t\tconst exp_turn_point = 9;\n\t\tconst exp_turn_num = Math.pow(10, exp_turn_point);\n\t\tconst exp_point = 4;\n\t\tlet isDrawImag = false;\n\t\tlet isDrawExp = false;\n\t\tlet draw_decimal_position = 0;\n\n\t\t// 行列を確認して表示するための表示方法の確認する\n\t\tthis._each(\n\t\t\tfunction(num, row, col) {\n\t\t\t\tif(!num.isReal()) {\n\t\t\t\t\tisDrawImag = true;\n\t\t\t\t}\n\t\t\t\tif(Number.isFinite(num.real)) {\n\t\t\t\t\tif(Math.abs(num.real) >= exp_turn_num) {\n\t\t\t\t\t\tisDrawExp = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(Number.isFinite(num.imag)) {\n\t\t\t\t\tif(Math.abs(num.imag) >= exp_turn_num) {\n\t\t\t\t\t\tisDrawExp = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdraw_decimal_position = Math.max(draw_decimal_position, num.getDecimalPosition());\n\t\t\t}\n\t\t);\n\n\t\tif(draw_decimal_position > 0) {\n\t\t\tdraw_decimal_position = exp_point;\n\t\t}\n\n\t\t// 文字列データを作成とともに、最大の長さを記録する\n\t\tlet str_max = 0;\n\n\t\t/**\n\t\t * @type {Array<{re_sign : string, re_str : string, im_sign : string, im_str : string}>}\n\t\t */\n\t\tconst draw_buff = [];\n\n\t\t// 数値データを文字列にする関数（eの桁がある場合は中身は3桁にする）\n\t\t/**\n\t\t * @type {function(number): string }\n\t\t */\n\t\tconst toStrFromFloat = function(number) {\n\t\t\tconst str = !isDrawExp ? number.toFixed(draw_decimal_position) : number.toExponential(exp_point);\n\t\t\tif(/inf/i.test(str)) {\n\t\t\t\tif(number === Number.POSITIVE_INFINITY) {\n\t\t\t\t\treturn \"Inf\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn \"-Inf\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(/nan/i.test(str)) {\n\t\t\t\treturn \"NaN\";\n\t\t\t}\n\t\t\telse if(!isDrawExp) {\n\t\t\t\treturn str;\n\t\t\t}\n\t\t\tconst split = str.split(\"e\");\n\t\t\tlet exp_text = split[1];\n\t\t\tif(exp_text.length === 2) {\n\t\t\t\texp_text = exp_text.substr(0, 1) + \"00\" + exp_text.substr(1);\n\t\t\t}\n\t\t\telse if(exp_text.length === 3) {\n\t\t\t\texp_text = exp_text.substr(0, 1) + \"0\" + exp_text.substr(1);\n\t\t\t}\n\t\t\treturn split[0] + \"e\" + exp_text;\n\t\t};\n\t\tthis._each(\n\t\t\tfunction(num) {\n\t\t\t\tconst data = {};\n\t\t\t\tlet real = num.real;\n\t\t\t\tdata.re_sign = real < 0 ? \"-\" : \" \";\n\t\t\t\treal = Math.abs(real);\n\t\t\t\tdata.re_str = toStrFromFloat(real);\n\t\t\t\tstr_max = Math.max(str_max, data.re_str.length + 1);\n\t\t\t\tif(isDrawImag) {\n\t\t\t\t\tlet imag = num.imag;\n\t\t\t\t\tdata.im_sign = imag < 0 ? \"-\" : \"+\";\n\t\t\t\t\timag = Math.abs(imag);\n\t\t\t\t\tdata.im_str = toStrFromFloat(imag);\n\t\t\t\t\tstr_max = Math.max(str_max, data.im_str.length + 1);\n\t\t\t\t}\n\t\t\t\tdraw_buff.push(data);\n\t\t\t}\n\t\t);\n\n\t\t// 右寄せ用関数\n\t\t/**\n\t\t * @type {function(string, number): string }\n\t\t */\n\t\tconst right = function(text, length) {\n\t\t\tconst space = \"                                        \";\n\t\t\treturn space.substr(0, length - text.length) + text;\n\t\t};\n\n\t\t// 出力用文字列を作成する\n\t\t/**\n\t\t * @type {Array<string>}\n\t\t */\n\t\tconst output = [];\n\t\tconst that = this;\n\t\tthis._each(\n\t\t\tfunction(num, row, col) {\n\t\t\t\tconst data = draw_buff.shift();\n\t\t\t\tlet text = right(data.re_sign + data.re_str, str_max);\n\t\t\t\tif(isDrawImag) {\n\t\t\t\t\ttext += \" \" + data.im_sign + right(data.im_str, str_max) + \"i\";\n\t\t\t\t}\n\t\t\t\toutput.push(text);\n\t\t\t\toutput.push((col < that.column_length - 1) ? \" \" : \"\\n\");\n\t\t\t}\n\t\t);\n\n\t\tthis.string_cash = output.join(\"\");\n\n\t\treturn this.string_cash;\n\t}\n\n\t/**\n\t * Convert to string in one line.\n\t * @returns {string} \n\t */\n\ttoOneLineString() {\n\t\tif(this.isScalar()) {\n\t\t\treturn this.scalar.toString();\n\t\t}\n\t\tlet output = \"[ \";\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\toutput += this.matrix_array[row][col].toString();\n\t\t\t\tif(col < this.column_length - 1) {\n\t\t\t\t\toutput += \", \";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(row < this.row_length - 1) {\n\t\t\t\t\t\toutput += \"; \";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\toutput += \" ]\";\n\t\treturn output;\n\t}\n\n\t/**\n\t * Equals.\n\t * @param {KMatrixInputData} number\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean} A === B\n\t */\n\tequals(number, tolerance) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif((M1.row_length !== M2.row_length) || (M1.column_length !== M2.column_length)) {\n\t\t\treturn false;\n\t\t}\n\t\tif((M1.row_length === 1) && (M1.column_length ===1)) {\n\t\t\treturn M1.scalar.equals(M2.scalar, tolerance);\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tif(!x1[row][col].equals(x2[row][col], tolerance)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Array of real parts of elements in matrix.\n\t * @returns {Array<Array<number>>}\n\t */\n\tgetNumberMatrixArray() {\n\t\tconst y = new Array(this.row_length);\n\t\tfor(let i = 0; i < this.row_length; i++) {\n\t\t\ty[i] = new Array(this.column_length);\n\t\t\tfor(let j = 0; j < this.column_length; j++) {\n\t\t\t\ty[i][j] = this.matrix_array[i][j].real;\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\t\n\t/**\n\t * Complex array of complex numbers of each element of the matrix.\n\t * @returns {Array<Array<Complex>>}\n\t */\n\tgetComplexMatrixArray() {\n\t\tconst y = new Array(this.row_length);\n\t\tfor(let i = 0; i < this.row_length; i++) {\n\t\t\ty[i] = new Array(this.column_length);\n\t\t\tfor(let j = 0; j < this.column_length; j++) {\n\t\t\t\ty[i][j] = this.matrix_array[i][j];\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\t\n\t/**\n\t * Perform the same process on all elements in the matrix. (mutable)\n\t * @param {function(Complex, number, number): any } eachfunc - Function(num, row, col)\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_each(eachfunc) {\n\t\tlet isclearcash = false;\n\t\t// 行優先ですべての値に対して指定した関数を実行する。内容を書き換える可能性もある\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tconst ret = eachfunc(this.matrix_array[row][col], row, col);\n\t\t\t\tif(ret === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(ret instanceof Complex) {\n\t\t\t\t\tthis.matrix_array[row][col] = ret;\n\t\t\t\t}\n\t\t\t\telse if(ret instanceof Matrix) {\n\t\t\t\t\tthis.matrix_array[row][col] = ret.scalar;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.matrix_array[row][col] = new Complex(ret);\n\t\t\t\t}\n\t\t\t\tisclearcash = true;\n\t\t\t}\n\t\t}\n\t\tif(isclearcash) {\n\t\t\tthis._clearCash();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Perform the same process on all elements in the matrix.\n\t * @param {function(Complex, number, number): ?Object } eachfunc - Function(num, row, col)\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tcloneMatrixDoEachCalculation(eachfunc) {\n\t\treturn this.clone()._each(eachfunc);\n\t}\n\n\t/**\n\t * Create Matrix with specified initialization for each element in matrix.\n\t * @param {function(number, number): ?Object } eachfunc - Function(row, col)\n\t * @param {KMatrixInputData} dimension - Number of dimensions or rows.\n\t * @param {KMatrixInputData} [column_length=dimension] - Number of columns.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tstatic createMatrixDoEachCalculation(eachfunc, dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 3)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\tconst y_row_length = Matrix._toInteger(dimension);\n\t\tconst y_column_length = column_length ? Matrix._toInteger(column_length) : y_row_length;\n\t\tconst y = new Array(y_row_length);\n\t\tfor(let row = 0; row < y_row_length; row++) {\n\t\t\ty[row] = new Array(y_column_length);\n\t\t\tfor(let col = 0; col < y_column_length; col++) {\n\t\t\t\tconst ret = eachfunc(row, col);\n\t\t\t\tif(ret === undefined) {\n\t\t\t\t\ty[row][col] = Complex.ZERO;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ty[row][col] = Matrix._toComplex(ret);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Treat the columns of the matrix as vectors and execute the same process.\n\t * - If the matrix is a row vector, it performs the same processing for the row vector.\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\teachVectorAuto(array_function) {\n\t\tif(this.isRow()) {\n\t\t\t// 1行であれば、その1行に対して処理を行う\n\t\t\tconst row_array = new Array(this.row_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\trow_array[col] = this.matrix_array[0][col];\n\t\t\t}\n\t\t\treturn new Matrix(array_function(row_array));\n\t\t}\n\t\telse {\n\t\t\tconst y = Matrix.ZERO;\n\t\t\ty._resize(1, this.column_length);\n\t\t\t// 1列、行列であれば、列ごとに処理を行う\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tconst col_array = new Array(this.row_length);\n\t\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\t\tcol_array[row] = this.matrix_array[row][col];\n\t\t\t\t}\n\t\t\t\tconst col_output = array_function(col_array);\n\t\t\t\ty._resize(Math.max(y.row_length, col_output.length), y.column_length);\n\t\t\t\tfor(let row = 0; row < col_output.length; row++) {\n\t\t\t\t\ty.matrix_array[row][col] = col_output[row];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t}\n\n\t/**\n\t * Treat the rows and columns of the matrix as vectors and perform the same processing.\n\t * 1. First run the same process for the row.\n\t * 2. Finally perform the same processing for the column.\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\teachVectorBoth(array_function) {\n\t\tconst y1 = Matrix.ZERO;\n\t\t// 行ごとに処理を行う\n\t\ty1._resize(this.row_length, 1);\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tconst row_array = new Array(this.column_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\trow_array[col] = this.matrix_array[row][col];\n\t\t\t}\n\t\t\tconst row_output = array_function(row_array);\n\t\t\ty1._resize(y1.row_length, Math.max(y1.column_length, row_output.length));\n\t\t\tfor(let col = 0; col < row_output.length; col++) {\n\t\t\t\ty1.matrix_array[row][col] = row_output[col];\n\t\t\t}\n\t\t}\n\t\tconst y2 = Matrix.ZERO;\n\t\t// 列ごとに処理を行う\n\t\ty2._resize(1, y1.column_length);\n\t\tfor(let col = 0; col < y1.column_length; col++) {\n\t\t\tconst col_array = new Array(y1.row_length);\n\t\t\tfor(let row = 0; row < y1.row_length; row++) {\n\t\t\t\tcol_array[row] = y1.matrix_array[row][col];\n\t\t\t}\n\t\t\tconst col_output = array_function(col_array);\n\t\t\ty2._resize(Math.max(y2.row_length, col_output.length), y2.column_length);\n\t\t\tfor(let row = 0; row < col_output.length; row++) {\n\t\t\t\ty2.matrix_array[row][col] = col_output[row];\n\t\t\t}\n\t\t}\n\t\treturn y2;\n\t}\n\n\t/**\n\t * Treat the rows of the matrix as vectors and execute the same process.\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\teachVectorRow(array_function) {\n\t\tconst y = Matrix.ZERO;\n\t\t// 行ごとに処理を行う\n\t\ty._resize(this.row_length, 1);\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tconst row_array = new Array(this.column_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\trow_array[col] = this.matrix_array[row][col];\n\t\t\t}\n\t\t\tconst row_output = array_function(row_array);\n\t\t\ty._resize(y.row_length, Math.max(y.column_length, row_output.length));\n\t\t\tfor(let col = 0; col < row_output.length; col++) {\n\t\t\t\ty.matrix_array[row][col] = row_output[col];\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Treat the columns of the matrix as vectors and execute the same process.\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\teachVectorColumn(array_function) {\n\t\tconst y = Matrix.ZERO;\n\t\t// 列ごとに処理を行う\n\t\ty._resize(1, this.column_length);\n\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\tconst col_array = new Array(this.row_length);\n\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\tcol_array[row] = this.matrix_array[row][col];\n\t\t\t}\n\t\t\tconst col_output = array_function(col_array);\n\t\t\ty._resize(Math.max(y.row_length, col_output.length), y.column_length);\n\t\t\tfor(let row = 0; row < col_output.length; row++) {\n\t\t\t\ty.matrix_array[row][col] = col_output[row];\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Treat the rows and columns of the matrix as vectors and perform the same processing.\n\t * The arguments of the method can switch the direction of the matrix to be executed.\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @param {string|number} [dimension=\"auto\"] - 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\"\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\teachVector(array_function, dimension) {\n\t\tlet target = dimension !== undefined ? dimension : \"auto\";\n\t\tif(typeof target === \"string\") {\n\t\t\ttarget = target.toLocaleLowerCase();\n\t\t}\n\t\telse if(typeof target !== \"number\") {\n\t\t\ttarget = Matrix._toInteger(target);\n\t\t}\n\t\tif((target === \"auto\") || (target === 0)) {\n\t\t\treturn this.eachVectorAuto(array_function);\n\t\t}\n\t\telse if((target === \"row\") || (target === 1)) {\n\t\t\treturn this.eachVectorRow(array_function);\n\t\t}\n\t\telse if((target === \"column\") || (target === 2)) {\n\t\t\treturn this.eachVectorColumn(array_function);\n\t\t}\n\t\telse if((target === \"both\") || (target === 3)) {\n\t\t\treturn this.eachVectorBoth(array_function);\n\t\t}\n\t\telse {\n\t\t\tthrow \"eachVector argument \" + dimension;\n\t\t}\n\t}\n\n\t/**\n\t * Extract the specified part of the matrix.\n\t * @param {KMatrixInputData} row - A vector containing the row numbers to extract from this matrix. If you specify \":\" select all rows.\n\t * @param {KMatrixInputData} col - A vector containing the column numbers to extract from this matrix. If you specify \":\" select all columns.\n\t * @param {boolean} [isUpOffset=false] - Set offset of matrix position to 1 with true.\n\t * @returns {Matrix} \n\t */\n\tgetMatrix(row, col, isUpOffset=false) {\n\t\tconst geta = isUpOffset ? 1 : 0 ;\n\t\tconst row_array = MatrixTool.toPositionArrayFromObject(row, this.row_length, geta);\n\t\tconst col_array = MatrixTool.toPositionArrayFromObject(col, this.column_length, geta);\n\t\tconst x = this.matrix_array;\n\t\tconst y = new Array(row_array.length);\n\t\tfor(let row = 0; row < row_array.length; row++) {\n\t\t\tconst y_row = new Array(col_array.length);\n\t\t\tfor(let col = 0; col < col_array.length; col++) {\n\t\t\t\ty_row[col] = x[row_array[row] - geta][col_array[col] - geta];\n\t\t\t}\n\t\t\ty[row] = y_row;\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Change specified element in matrix.\n\t * @param {KMatrixInputData} row - A vector containing the row numbers to replace in this matrix. If you specify \":\" select all rows.\n\t * @param {KMatrixInputData} col - A vector containing the column numbers to replace in this matrix. If you specify \":\" select all columns.\n\t * @param {KMatrixInputData} replace - Matrix to be replaced.\n\t * @param {boolean} [isUpOffset=false] - Set offset of matrix position to 1 with true.\n\t * @returns {Matrix} \n\t */\n\tsetMatrix(row, col, replace, isUpOffset=false) {\n\t\tconst geta = isUpOffset ? 1 : 0 ;\n\t\tconst row_array = MatrixTool.toPositionArrayFromObject(row, this.row_length, geta);\n\t\tconst col_array = MatrixTool.toPositionArrayFromObject(col, this.column_length, geta);\n\t\tconst Y = new Matrix(this);\n\t\tconst y = Y.matrix_array;\n\t\tconst X = Matrix._toMatrix(replace);\n\t\tconst x = X.matrix_array;\n\t\tfor(let row = 0; row < row_array.length; row++) {\n\t\t\tfor(let col = 0; col < col_array.length; col++) {\n\t\t\t\ty[row_array[row] - geta][col_array[col] - geta] = x[row % X.row_length][col % X.column_length];\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Returns the specified element in the matrix.\n\t * Each element of the matrix is composed of complex numbers.\n\t * @param {KMatrixInputData} row_or_pos - If this is a matrix, the row number. If this is a vector, the address.\n\t * @param {KMatrixInputData} [col] - If this is a matrix, the column number.\n\t * @returns {Complex} \n\t */\n\tgetComplex(row_or_pos, col) {\n\t\tlet row_or_pos_scalar = null;\n\t\tlet col_scalar = null;\n\t\tif(arguments.length === 1) {\n\t\t\trow_or_pos_scalar = Matrix._toInteger(row_or_pos);\n\t\t}\n\t\telse if(arguments.length === 2) {\n\t\t\trow_or_pos_scalar = Matrix._toInteger(row_or_pos);\n\t\t\tcol_scalar = Matrix._toInteger(col);\n\t\t}\n\t\tif(this.isRow()) {\n\t\t\treturn this.matrix_array[0][row_or_pos_scalar];\n\t\t}\n\t\telse if(this.isColumn()) {\n\t\t\treturn this.matrix_array[row_or_pos_scalar][0];\n\t\t}\n\t\telse {\n\t\t\treturn this.matrix_array[row_or_pos_scalar][col_scalar];\n\t\t}\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 他の型に変換用\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t\n\t/**\n\t * Boolean value of the first element of the matrix.\n\t * @returns {boolean}\n\t */\n\tget booleanValue() {\n\t\treturn this.matrix_array[0][0].booleanValue;\n\t}\n\n\t/**\n\t * Integer value of the first element of the matrix.\n\t * @returns {number}\n\t */\n\tget intValue() {\n\t\treturn this.matrix_array[0][0].intValue;\n\t}\n\n\t/**\n\t * Real value of first element of the matrix.\n\t * @returns {number}\n\t */\n\tget doubleValue() {\n\t\treturn this.matrix_array[0][0].doubleValue;\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// konpeito で扱う数値型へ変換\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * return BigInteger.\n\t * @returns {BigInteger}\n\t */\n\ttoBigInteger() {\n\t\treturn new BigInteger(this.intValue);\n\t}\n\t\n\t/**\n\t * return BigDecimal.\n\t * @param {MathContext} [mc] - MathContext setting after calculation. \n\t * @returns {BigDecimal}\n\t */\n\ttoBigDecimal(mc) {\n\t\tif(mc) {\n\t\t\treturn new BigDecimal([this.doubleValue, mc]);\n\t\t}\n\t\telse {\n\t\t\treturn new BigDecimal(this.doubleValue);\n\t\t}\n\t}\n\t\n\t/**\n\t * return Fraction.\n\t * @returns {Fraction}\n\t */\n\ttoFraction() {\n\t\treturn new Fraction(this.doubleValue);\n\t}\n\t\n\t/**\n\t * return Complex.\n\t * @returns {Complex}\n\t */\n\ttoComplex() {\n\t\treturn this.scalar;\n\t}\n\t\n\t/**\n\t * return Matrix.\n\t * @returns {Matrix}\n\t */\n\ttoMatrix() {\n\t\treturn this;\n\t}\n\t\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の基本操作、基本情報の取得\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t\n\t/**\n\t * First element of this matrix.\n\t * @returns {Complex}\n\t */\n\tget scalar() {\n\t\treturn this.matrix_array[0][0];\n\t}\n\n\t/**\n\t * Maximum size of rows or columns in the matrix.\n\t * @returns {number}\n\t */\n\tget length() {\n\t\treturn this.row_length > this.column_length ? this.row_length : this.column_length;\n\t}\n\n\t/**\n\t * Number of columns in the matrix.\n\t * @returns {number}\n\t */\n\tget width() {\n\t\treturn this.column_length;\n\t}\n\n\t/**\n\t * Number of rows in matrix.\n\t * @returns {number}\n\t */\n\tget height() {\n\t\treturn this.row_length;\n\t}\n\n\t/**\n\t * 1-norm.\n\t * @returns {number}\n\t */\n\tget norm1() {\n\t\treturn LinearAlgebra.norm(this, 1);\n\t}\n\t\n\t/**\n\t * 2-norm.\n\t * @returns {number}\n\t */\n\tget norm2() {\n\t\treturn LinearAlgebra.norm(this, 2);\n\t}\n\n\t/**\n\t * p-norm.\n\t * @param {KMatrixInputData} [p=2]\n\t * @returns {number}\n\t */\n\tnorm(p) {\n\t\treturn LinearAlgebra.norm(this, p);\n\t}\n\n\t/**\n\t * Condition number of the matrix\n\t * @param {KMatrixInputData} [p=2]\n\t * @returns {number}\n\t */\n\tcond(p) {\n\t\treturn LinearAlgebra.cond(this, p);\n\t}\n\n\t/**\n\t * Inverse condition number.\n\t * @returns {number}\n\t */\n\trcond() {\n\t\treturn LinearAlgebra.rcond(this);\n\t}\n\n\t/**\n\t * Rank.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {number} rank(A)\n\t */\n\trank(tolerance) {\n\t\treturn LinearAlgebra.rank(this, tolerance);\n\t}\n\n\t/**\n\t * Trace of a matrix.\n\t * Sum of diagonal elements.\n\t * @returns {Complex} trace(A)\n\t */\n\ttrace() {\n\t\treturn LinearAlgebra.trace(this);\n\t}\n\n\t/**\n\t * Determinant.\n\t * @returns {Matrix} |A|\n\t */\n\tdet() {\n\t\treturn LinearAlgebra.det(this);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の作成関係\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t\n\t/**\n\t * Creates a matrix composed of the specified number.\n\t * @param {KMatrixInputData} number - Value after initialization.\n\t * @param {KMatrixInputData} dimension - Number of dimensions or rows.\n\t * @param {KMatrixInputData} [column_length] - Number of columns.\n\t * @returns {Matrix}\n\t */\n\tstatic memset(number, dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 3)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\tconst M = Matrix._toMatrix(number);\n\t\tif(!M.isScalar()) {\n\t\t\tconst x = M.matrix_array;\n\t\t\tconst x_row_length = M.row_length;\n\t\t\tconst x_column_length = M.column_length;\n\t\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\t\treturn x[row % x_row_length][col % x_column_length];\n\t\t\t}, dimension, column_length);\n\t\t}\n\t\telse {\n\t\t\tconst x = M.scalar;\n\t\t\treturn Matrix.createMatrixDoEachCalculation(function() {\n\t\t\t\treturn x;\n\t\t\t}, dimension, column_length);\n\t\t}\n\t}\n\n\t/**\n\t * Return identity matrix.\n\t * @param {KMatrixInputData} dimension - Number of dimensions or rows.\n\t * @param {KMatrixInputData} [column_length] - Number of columns.\n\t * @returns {Matrix}\n\t */\n\tstatic eye(dimension, column_length) {\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn row === col ? Complex.ONE : Complex.ZERO;\n\t\t}, dimension, column_length);\n\t}\n\t\n\t/**\n\t * Create zero matrix.\n\t * @param {KMatrixInputData} dimension - Number of dimensions or rows.\n\t * @param {KMatrixInputData} [column_length] - Number of columns.\n\t * @returns {Matrix}\n\t */\n\tstatic zeros(dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 2)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\treturn Matrix.memset(Complex.ZERO, dimension, column_length);\n\t}\n\n\t/**\n\t * Create a matrix of all ones.\n\t * @param {KMatrixInputData} dimension - Number of dimensions or rows.\n\t * @param {KMatrixInputData} [column_length] - Number of columns.\n\t * @returns {Matrix}\n\t */\n\tstatic ones(dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 2)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\treturn Matrix.memset(Complex.ONE, dimension, column_length);\n\t}\n\n\t/**\n\t * If matrix, generate diagonal column vector.\n\t * If vector, generate a matrix with diagonal elements.\n\t * @returns {Matrix} Matrix or vector created. See how to use the function.\n\t */\n\tdiag() {\n\t\tif(this.isVector()) {\n\t\t\t// 行列を作成\n\t\t\tconst M = this;\n\t\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\t\tif(row === col) {\n\t\t\t\t\treturn M.getComplex(row);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn Complex.ZERO;\n\t\t\t\t}\n\t\t\t}, this.length);\n\t\t}\n\t\telse {\n\t\t\t// 列ベクトルを作成\n\t\t\tconst len = Math.min(this.row_length, this.column_length);\n\t\t\tconst y = new Array(len);\n\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\ty[i] = new Array(1);\n\t\t\t\ty[i][0] = this.matrix_array[i][i];\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 比較や判定\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Return true if the matrix is scalar.\n\t * @returns {boolean}\n\t */\n\tisScalar() {\n\t\treturn this.row_length === 1 && this.column_length == 1;\n\t}\n\t\n\t/**\n\t * Return true if the matrix is row vector.\n\t * @returns {boolean}\n\t */\n\tisRow() {\n\t\treturn this.row_length === 1;\n\t}\n\t\n\t/**\n\t * Return true if the matrix is column vector.\n\t * @returns {boolean}\n\t */\n\tisColumn() {\n\t\treturn this.column_length === 1;\n\t}\n\n\t/**\n\t * Return true if the matrix is vector.\n\t * @returns {boolean}\n\t */\n\tisVector() {\n\t\treturn this.row_length === 1 || this.column_length === 1;\n\t}\n\n\t/**\n\t * Return true if the value is not scalar.\n\t * @returns {boolean}\n\t */\n\tisMatrix() {\n\t\treturn this.row_length !== 1 && this.column_length !== 1;\n\t}\n\n\t/**\n\t * Return true if the matrix is square matrix.\n\t * @returns {boolean}\n\t */\n\tisSquare() {\n\t\treturn this.row_length === this.column_length;\n\t}\n\n\t/**\n\t * Return true if the matrix is real matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisReal(tolerance) {\n\t\tlet is_real = true;\n\t\tthis._each(function(num){\n\t\t\tif(is_real && (num.isComplex(tolerance))) {\n\t\t\t\tis_real = false;\n\t\t\t}\n\t\t});\n\t\treturn is_real;\n\t}\n\n\t/**\n\t * Return true if the matrix is complex matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisComplex(tolerance) {\n\t\treturn !this.isReal(tolerance);\n\t}\n\n\t/**\n\t * Return true if the matrix is zero matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisZeros(tolerance) {\n\t\tlet is_zeros = true;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tthis._each(function(num){\n\t\t\tif(is_zeros && (!num.isZero(tolerance_))) {\n\t\t\t\tis_zeros = false;\n\t\t\t}\n\t\t});\n\t\treturn is_zeros;\n\t}\n\n\t/**\n\t * Return true if the matrix is identity matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisIdentity(tolerance) {\n\t\tlet is_identity = true;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_identity) {\n\t\t\t\tif(row === col) {\n\t\t\t\t\tif(!num.isOne(tolerance_)) {\n\t\t\t\t\t\tis_identity = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(!num.isZero(tolerance_)) {\n\t\t\t\t\t\tis_identity = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn is_identity;\n\t}\n\n\t/**\n\t * Return true if the matrix is diagonal matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisDiagonal(tolerance) {\n\t\tlet is_diagonal = true;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_diagonal && (row !== col) && (!num.isZero(tolerance_))) {\n\t\t\t\tis_diagonal = false;\n\t\t\t}\n\t\t});\n\t\treturn is_diagonal;\n\t}\n\t\n\t/**\n\t * Return true if the matrix is tridiagonal matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisTridiagonal(tolerance) {\n\t\tlet is_tridiagonal = true;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_tridiagonal && (Math.abs(row - col) > 1) && (!num.isZero(tolerance_))) {\n\t\t\t\tis_tridiagonal = false;\n\t\t\t}\n\t\t});\n\t\treturn is_tridiagonal;\n\t}\n\n\t/**\n\t * Return true if the matrix is regular matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisRegular(tolerance) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\t// ランクが行列の次元と等しいかどうかで判定\n\t\t// det(M) != 0 でもよいが、時間がかかる可能性があるので\n\t\t// 誤差は自動で計算など本当はもうすこし良い方法を考える必要がある\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\treturn (this.rank(tolerance_) === this.row_length);\n\t}\n\n\t/**\n\t * Return true if the matrix is orthogonal matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisOrthogonal(tolerance) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\treturn (this.mul(this.transpose()).isIdentity(tolerance_));\n\t}\n\n\t/**\n\t * Return true if the matrix is unitary matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisUnitary(tolerance) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\treturn (this.mul(this.ctranspose()).isIdentity(tolerance_));\n\t}\n\n\t/**\n\t * Return true if the matrix is symmetric matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisSymmetric(tolerance) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = row + 1; col < this.column_length; col++) {\n\t\t\t\tif(!this.matrix_array[row][col].equals(this.matrix_array[col][row], tolerance_)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Return true if the matrix is hermitian matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisHermitian(tolerance) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = row; col < this.column_length; col++) {\n\t\t\t\tif(row === col) {\n\t\t\t\t\tif(!this.matrix_array[row][col].isReal(tolerance_)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(!this.matrix_array[row][col].equals(this.matrix_array[col][row].conj(), tolerance_)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Return true if the matrix is upper triangular matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisTriangleUpper(tolerance) {\n\t\tlet is_upper = true;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_upper && (row > col) && (!num.isZero(tolerance_))) {\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t});\n\t\treturn is_upper;\n\t}\n\n\t/**\n\t * Return true if the matrix is  lower triangular matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisTriangleLower(tolerance) {\n\t\tlet is_lower = true;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_lower && (row < col) && (!num.isZero(tolerance_))) {\n\t\t\t\tis_lower = false;\n\t\t\t}\n\t\t});\n\t\treturn is_lower;\n\t}\n\n\t/**\n\t * Return true if the matrix is permutation matrix.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisPermutation(tolerance) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tconst is_row = new Array(this.row_length);\n\t\tconst is_col = new Array(this.column_length);\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tconst target = this.matrix_array[row][col];\n\t\t\t\tif(target.isOne(tolerance_)) {\n\t\t\t\t\tif(!is_row[row] && !is_col[col]) {\n\t\t\t\t\t\tis_row[row] = 1;\n\t\t\t\t\t\tis_col[col] = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(!target.isZero(tolerance_)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(let i = 0;i < this.row_length; i++) {\n\t\t\tif(is_row[i] === undefined || is_col[i] === undefined) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Number of rows and columns of matrix.\n\t * @param {?string|?number} [dimension] direction. 1/\"row\", 2/\"column\"\n\t * @returns {Matrix} [row_length, column_length]\n\t */\n\tsize(dimension) {\n\t\tif(dimension !== undefined) {\n\t\t\tlet target = dimension;\n\t\t\tif(typeof target === \"string\") {\n\t\t\t\ttarget = target.toLocaleLowerCase();\n\t\t\t}\n\t\t\telse if(typeof target !== \"number\") {\n\t\t\t\ttarget = Matrix._toInteger(target);\n\t\t\t}\n\t\t\tif((target === \"row\") || (target === 1)) {\n\t\t\t\treturn new Matrix(this.row_length);\n\t\t\t}\n\t\t\telse if((target === \"column\") || (target === 2)) {\n\t\t\t\treturn new Matrix(this.column_length);\n\t\t\t}\n\t\t}\n\t\t// 行列のサイズを取得\n\t\treturn new Matrix([[this.row_length, this.column_length]]);\n\t}\n\n\t/**\n\t * Compare values.\n\t * - Return value between scalars is of type Number.\n\t * - Return value between matrices is type Matrix.\n\t * @param {KMatrixInputData} number \n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {number|Matrix} A > B ? 1 : (A === B ? 0 : -1)\n\t */\n\tcompareTo(number, tolerance) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\t// ※スカラー同士の場合は、実数を返す\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn M1.scalar.compareTo(M2.scalar, tolerance);\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].compareTo(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 四則演算\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t\n\t/**\n\t * Add.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A + B\n\t */\n\tadd(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif((M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].add(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A - B\n\t */\n\tsub(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif((M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].sub(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * Multiply.\n\t * - Use `dotmul` if you want to use `mul` for each element.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A * B\n\t */\n\tmul(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn new Matrix(M1.scalar.mul(M2.scalar));\n\t\t}\n\t\tif(M1.isScalar()) {\n\t\t\tconst y = new Array(M2.row_length);\n\t\t\tfor(let row = 0; row < M2.row_length; row++) {\n\t\t\t\ty[row] = new Array(M2.column_length);\n\t\t\t\tfor(let col = 0; col < M2.column_length; col++) {\n\t\t\t\t\ty[row][col] = M1.scalar.mul(x2[row][col]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\telse if(M2.isScalar()) {\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\ty[row] = new Array(M1.column_length);\n\t\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\t\ty[row][col] = x1[row][col].mul(M2.scalar);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\tif(M1.column_length !== M2.row_length) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\t{\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\ty[row] = new Array(M2.column_length);\n\t\t\t\tfor(let col = 0; col < M2.column_length; col++) {\n\t\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\t\tfor(let i = 0; i < M1.column_length; i++) {\n\t\t\t\t\t\tsum = sum.add(x1[row][i].mul(x2[i][col]));\n\t\t\t\t\t}\n\t\t\t\t\ty[row][col] = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t}\n\n\t/**\n\t * Divide.\n\t * - Use `dotdiv` if you want to use `div` for each element.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A / B\n\t */\n\tdiv(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tconst x1 = M1.matrix_array;\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn new Matrix(M1.scalar.div(M2.scalar));\n\t\t}\n\t\tif(M2.isScalar()) {\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\ty[row] = new Array(M1.column_length);\n\t\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\t\ty[row][col] = x1[row][col].div(M2.scalar);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\tif(M2.row_length === M2.column_length) {\n\t\t\tconst tolerance = 1.0e-10;\n\t\t\tconst det = M2.det().scalar.norm;\n\t\t\tif(det > tolerance) {\n\t\t\t\t// ランク落ちしていないので通常の逆行列を使用する\n\t\t\t\treturn this.mul(M2.inv());\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// ランク落ちしているので疑似逆行列を使用する\n\t\t\t\treturn this.mul(M2.pinv());\n\t\t\t}\n\t\t}\n\t\tif(M1.column_length !== M2.column_length) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tthrow \"warning\";\n\t}\n\n\t/**\n\t * Inverse matrix of this matrix.\n\t * - Use `dotinv` if you want to use `inv` for each element.\n\t * @returns {Matrix} A^-1\n\t */\n\tinv() {\n\t\treturn LinearAlgebra.inv(this);\n\t}\n\n\t/**\n\t * Multiplication for each element of matrix.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A .* B\n\t */\n\tdotmul(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif(!M1.isScalar() && !M2.isScalar() && (M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].mul(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * Division for each element of matrix.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A ./ B\n\t */\n\tdotdiv(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif(!M1.isScalar() && !M2.isScalar() && (M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].div(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * Inverse of each element of matrix.\n\t * @returns {Matrix} 1 ./ A\n\t */\n\tdotinv() {\n\t\tconst M1 = this;\n\t\tconst x1 = M1.matrix_array;\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row][col].inv();\n\t\t}, M1.row_length, M1.column_length);\n\t}\n\n\t/**\n\t * Multiplication for each element of matrix.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A .* B\n\t * @deprecated use the dotmul.\n\t */\n\tnmul(number) {\n\t\treturn this.dotmul(number);\n\t}\n\n\t/**\n\t * Division for each element of matrix.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A ./ B\n\t * @deprecated use the dotdiv.\n\t */\n\tndiv(number) {\n\t\treturn this.dotdiv(number);\n\t}\n\n\t/**\n\t * Inverse of each element of matrix.\n\t * @returns {Matrix} 1 ./ A\n\t * @deprecated use the dotinv.\n\t */\n\tninv() {\n\t\treturn this.dotinv();\n\t}\n\n\t/**\n\t * Power function for each element of the matrix.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A .^ B\n\t * @deprecated use the dotpow.\n\t */\n\tnpow(number) {\n\t\treturn this.dotpow(number);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 余り\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Modulo, positive remainder of division for each element of matrix.\n\t * - Result has same sign as the Dividend.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A .rem B\n\t */\n\trem(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif(!M1.isScalar() && !M2.isScalar() && (M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].rem(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * Modulo, positive remainder of division for each element of matrix.\n\t * - Result has same sign as the Divisor.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A .mod B\n\t */\n\tmod(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif(!M1.isScalar() && !M2.isScalar() && (M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].mod(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\t\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// Complexのメソッドにある機能\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Real part of each element.\n\t * @returns {Matrix} real(A)\n\t */\n\treal() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.real);\n\t\t});\n\t}\n\t\n\t/**\n\t * Imaginary part of each element of the matrix.\n\t * @returns {Matrix} imag(A)\n\t */\n\timag() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.imag);\n\t\t});\n\t}\n\n\t/**\n\t * The argument of each element of matrix.\n\t * @returns {Matrix} arg(A)\n\t */\n\targ() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.arg);\n\t\t});\n\t}\n\n\t/**\n\t * The positive or negative signs of each element of the matrix.\n\t * - +1 if positive, -1 if negative, 0 if 0, norm if complex number.\n\t * @returns {Matrix}\n\t */\n\tsign() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.sign());\n\t\t});\n\t}\n\n\t/**\n\t * Floor.\n\t * @returns {Matrix} floor(A)\n\t */\n\tfloor() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.floor();\n\t\t});\n\t}\n\n\t/**\n\t * Ceil.\n\t * @returns {Matrix} ceil(A)\n\t */\n\tceil() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.ceil();\n\t\t});\n\t}\n\n\t/**\n\t * Rounding to the nearest integer.\n\t * @returns {Matrix} round(A)\n\t */\n\tround() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.round();\n\t\t});\n\t}\n\n\t/**\n\t * To integer rounded down to the nearest.\n\t * @returns {Matrix} fix(A), trunc(A)\n\t */\n\tfix() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.fix();\n\t\t});\n\t}\n\n\t/**\n\t * Fraction.\n\t * @returns {Matrix} fract(A)\n\t */\n\tfract() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.fract();\n\t\t});\n\t}\n\n\t/**\n\t * Absolute value.\n\t * @returns {Matrix} abs(A)\n\t */\n\tabs() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.abs();\n\t\t});\n\t}\n\n\t/**\n\t * Complex conjugate matrix.\n\t * @returns {Matrix} real(A) - imag(A)j\n\t */\n\tconj() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.conj();\n\t\t});\n\t}\n\n\t/**\n\t * this * -1\n\t * @returns {Matrix} -A\n\t */\n\tnegate() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.negate();\n\t\t});\n\t}\n\n\t// ----------------------\n\t// 指数\n\t// ----------------------\n\t\n\t/**\n\t * Power function.\n\t * - Unless the matrix is a scalar value, only integers are supported.\n\t * - Use `dotpow` if you want to use `pow` for each element. A real number can be specified.\n\t * @param {KMatrixInputData} number - 整数\n\t * @returns {Matrix} pow(A, B)\n\t */\n\tpow(number) {\n\t\tif(this.isScalar()) {\n\t\t\treturn new Matrix(this.scalar.pow(Matrix._toDouble(number)));\n\t\t}\n\t\telse {\n\t\t\tif(!this.isSquare()) {\n\t\t\t\tthrow \"not square \" + this;\n\t\t\t}\n\t\t\tlet n = Matrix._toInteger(number);\n\t\t\tif(n < 0) {\n\t\t\t\tthrow \"error negative number \" + n;\n\t\t\t}\n\t\t\tlet x, y;\n\t\t\tx = this.clone();\n\t\t\ty = Matrix.eye(this.length);\n\t\t\twhile(n !== 0) {\n\t\t\t\tif((n & 1) !== 0) {\n\t\t\t\t\ty = y.mul(x);\n\t\t\t\t}\n\t\t\t\tx = x.mul(x);\n\t\t\t\tn >>>= 1;\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t}\n\n\t/**\n\t * Power function for each element of the matrix.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A .^ B\n\t */\n\tdotpow(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif(!M1.isScalar() && !M2.isScalar() && (M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].pow(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * Square root.\n\t * @returns {Matrix} sqrt(A)\n\t */\n\tsqrt() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sqrt();\n\t\t});\n\t}\n\n\t/**\n\t * Cube root.\n\t * @returns {Matrix} sqrt(A)\n\t */\n\tcbrt() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.cbrt();\n\t\t});\n\t}\n\n\t/**\n\t * Reciprocal square root.\n\t * @returns {Matrix} rsqrt(A)\n\t */\n\trsqrt() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.rsqrt();\n\t\t});\n\t}\n\n\t/**\n\t * Logarithmic function.\n\t * @returns {Matrix} log(A)\n\t */\n\tlog() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.log();\n\t\t});\n\t}\n\n\t/**\n\t * Exponential function.\n\t * @returns {Matrix} exp(A)\n\t */\n\texp() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.exp();\n\t\t});\n\t}\n\n\t/**\n\t * e^x - 1\n\t * @returns {Matrix} expm1(A)\n\t */\n\texpm1() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.expm1();\n\t\t});\n\t}\n\n\t/**\n\t * ln(1 + x)\n\t * @returns {Matrix} log1p(A)\n\t */\n\tlog1p() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.log1p();\n\t\t});\n\t}\n\t\n\t/**\n\t * log_2(x)\n\t * @returns {Matrix} log2(A)\n\t */\n\tlog2() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.log2();\n\t\t});\n\t}\n\n\t/**\n\t * log_10(x)\n\t * @returns {Matrix} log10(A)\n\t */\n\tlog10() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.log10();\n\t\t});\n\t}\n\n\t// ----------------------\n\t// 三角関数\n\t// ----------------------\n\t\n\t/**\n\t * Sine function.\n\t * @returns {Matrix} sin(A)\n\t */\n\tsin() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sin();\n\t\t});\n\t}\n\n\t/**\n\t * Cosine function.\n\t * @returns {Matrix} cos(A)\n\t */\n\tcos() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.cos();\n\t\t});\n\t}\n\n\t/**\n\t * Tangent function.\n\t * @returns {Matrix} tan(A)\n\t */\n\ttan() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tan();\n\t\t});\n\t}\n\t\n\t/**\n\t * Atan (arc tangent) function.\n\t * - Return the values of [-PI/2, PI/2].\n\t * @returns {Matrix} atan(A)\n\t */\n\tatan() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.atan();\n\t\t});\n\t}\n\n\t/**\n\t * Atan (arc tangent) function.\n\t * - Return the values of [-PI, PI].\n\t * - Supports only real numbers.\n\t * @param {KMatrixInputData} number - X\n\t * @returns {Matrix} atan2(Y, X)\n\t */\n\tatan2(number) {\n\t\tconst X = Matrix._toComplex(number);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.atan2(X);\n\t\t});\n\t}\n\n\t// ----------------------\n\t// 双曲線関数\n\t// ----------------------\n\t\n\t/**\n\t * Arc sine function.\n\t * @returns {Matrix} asin(A)\n\t */\n\tasin() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.asin();\n\t\t});\n\t}\n\n\t/**\n\t * Arc cosine function.\n\t * @returns {Matrix} acos(A)\n\t */\n\tacos() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.acos();\n\t\t});\n\t}\n\t\n\t/**\n\t * Hyperbolic sine function.\n\t * @returns {Matrix} sinh(A)\n\t */\n\tsinh() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sinh();\n\t\t});\n\t}\n\n\t/**\n\t * Inverse hyperbolic sine function.\n\t * @returns {Matrix} asinh(A)\n\t */\n\tasinh() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.asinh();\n\t\t});\n\t}\n\n\t/**\n\t * Hyperbolic cosine function.\n\t * @returns {Matrix} cosh(A)\n\t */\n\tcosh() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.cosh();\n\t\t});\n\t}\n\n\t/**\n\t * Inverse hyperbolic cosine function.\n\t * @returns {Matrix} acosh(A)\n\t */\n\tacosh() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.acosh();\n\t\t});\n\t}\n\n\t/**\n\t * Hyperbolic tangent function.\n\t * @returns {Matrix} tanh(A)\n\t */\n\ttanh() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tanh();\n\t\t});\n\t}\n\t\n\t/**\n\t * Inverse hyperbolic tangent function.\n\t * @returns {Matrix} atanh(A)\n\t */\n\tatanh() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.atanh();\n\t\t});\n\t}\n\n\t/**\n\t * Secant function.\n\t * @returns {Matrix} sec(A)\n\t */\n\tsec() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sec();\n\t\t});\n\t}\n\n\t/**\n\t * Reverse secant function.\n\t * @returns {Matrix} asec(A)\n\t */\n\tasec() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.asec();\n\t\t});\n\t}\n\n\t/**\n\t * Hyperbolic secant function.\n\t * @returns {Matrix} sech(A)\n\t */\n\tsech() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sech();\n\t\t});\n\t}\n\n\t/**\n\t * Inverse hyperbolic secant function.\n\t * @returns {Matrix} asech(A)\n\t */\n\tasech() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.asech();\n\t\t});\n\t}\n\n\t/**\n\t * Cotangent function.\n\t * @returns {Matrix} cot(A)\n\t */\n\tcot() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.cot();\n\t\t});\n\t}\n\n\t/**\n\t * Inverse cotangent function.\n\t * @returns {Matrix} acot(A)\n\t */\n\tacot() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.acot();\n\t\t});\n\t}\n\n\t/**\n\t * Hyperbolic cotangent function.\n\t * @returns {Matrix} coth(A)\n\t */\n\tcoth() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.coth();\n\t\t});\n\t}\n\n\t/**\n\t * Inverse hyperbolic cotangent function.\n\t * @returns {Matrix} acoth(A)\n\t */\n\tacoth() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.acoth();\n\t\t});\n\t}\n\n\t/**\n\t * Cosecant function.\n\t * @returns {Matrix} csc(A)\n\t */\n\tcsc() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.csc();\n\t\t});\n\t}\n\n\t/**\n\t * Inverse cosecant function.\n\t * @returns {Matrix} acsc(A)\n\t */\n\tacsc() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.acsc();\n\t\t});\n\t}\n\n\t/**\n\t * Hyperbolic cosecant function.\n\t * @returns {Matrix} csch(A)\n\t */\n\tcsch() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.csch();\n\t\t});\n\t}\n\n\t/**\n\t * Inverse hyperbolic cosecant function.\n\t * @returns {Matrix} acsch(A)\n\t */\n\tacsch() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.acsch();\n\t\t});\n\t}\n\n\t// ----------------------\n\t// 信号処理系\n\t// ----------------------\n\t\n\t/**\n\t * Normalized sinc function.\n\t * @returns {Matrix} sinc(A)\n\t */\n\tsinc() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sinc();\n\t\t});\n\t}\n\t\n\t// ----------------------\n\t// 乱数\n\t// ----------------------\n\t\n\t/**\n\t * Generate a matrix composed of random values with uniform random numbers.\n\t * @param {KMatrixInputData} dimension - Number of dimensions or rows.\n\t * @param {KMatrixInputData} [column_length] - Number of columns.\n\t * @param {Random} [random] - Class for creating random numbers.\n\t * @returns {Matrix}\n\t */\n\tstatic rand(dimension, column_length, random) {\n\t\treturn Matrix.createMatrixDoEachCalculation(function() {\n\t\t\treturn Complex.rand(random);\n\t\t}, dimension, column_length);\n\t}\n\n\t/**\n\t * Generate a matrix composed of random values with normal distribution.\n\t * @param {KMatrixInputData} dimension - Number of dimensions or rows.\n\t * @param {KMatrixInputData} [column_length] - Number of columns.\n\t * @param {Random} [random] - Class for creating random numbers.\n\t * @returns {Matrix}\n\t */\n\tstatic randn(dimension, column_length, random) {\n\t\treturn Matrix.createMatrixDoEachCalculation(function() {\n\t\t\treturn Complex.randn(random);\n\t\t}, dimension, column_length);\n\t}\n\n\t// ----------------------\n\t// テスト系\n\t// ----------------------\n\t\n\t/**\n\t * Test if each element of the matrix is integer.\n\t * - 1 if true, 0 if false.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestInteger(tolerance) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isInteger(tolerance) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * Test if each element of the matrix is complex integer.\n\t * - 1 if true, 0 if false.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestComplexInteger(tolerance) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isComplexInteger(tolerance) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * real(this) === 0\n\t * - 1 if true, 0 if false.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestZero(tolerance) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isZero(tolerance) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * real(this) === 1\n\t * - 1 if true, 0 if false.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestOne(tolerance) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isOne(tolerance) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\t\n\t/**\n\t * Test if each element of the matrix is complex.\n\t * - 1 if true, 0 if false.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestComplex(tolerance) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isComplex(tolerance) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * Test if each element of the matrix is real.\n\t * - 1 if true, 0 if false.\n\t * @param {KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestReal(tolerance) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isReal(tolerance) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * Test if each element of the matrix is NaN.\n\t * - 1 if true, 0 if false.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestNaN() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isNaN() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * real(this) > 0\n\t * - 1 if true, 0 if false.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestPositive() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isPositive() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * real(this) < 0\n\t * - 1 if true, 0 if false.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestNegative() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isNegative() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * real(this) >= 0\n\t * - 1 if true, 0 if false.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestNotNegative() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isNotNegative() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * Test if each element of the matrix is positive infinite.\n\t * - 1 if true, 0 if false.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestPositiveInfinity() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isPositiveInfinity() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\t\n\t/**\n\t * Test if each element of the matrix is negative infinite.\n\t * - 1 if true, 0 if false.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestNegativeInfinity() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isNegativeInfinity() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\t\n\t/**\n\t * Test if each element of the matrix is infinite.\n\t * - 1 if true, 0 if false.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestInfinite() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isInfinite() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\t\n\t/**\n\t * Test if each element of the matrix is finite.\n\t * - 1 if true, 0 if false.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestFinite() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isFinite() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の計算でよく使用する処理。\n\t// メソッド内部の処理を記述する際に使用している。\n\t// 他から使用する場合は注意が必要である。\n\t// 前提条件があるメソッド、ミュータブルとなっている。\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Rotate matrix 90 degrees clockwise. (mutable)\n\t * @param {KMatrixInputData} rot_90_count - Number of times rotated by 90 degrees.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_rot90(rot_90_count) {\n\t\tconst count = Matrix._toInteger(rot_90_count);\n\t\tlet rot_type = 1;\n\t\tif(arguments.length === 1) {\n\t\t\trot_type = ((count % 4) + 4) % 4;\n\t\t}\n\t\tif(rot_type === 0) {\n\t\t\treturn this;\n\t\t}\n\t\t// バックアップ\n\t\tconst x = new Array(this.row_length);\n\t\tfor(let i = 0; i < this.row_length; i++) {\n\t\t\tx[i] = new Array(this.column_length);\n\t\t\tfor(let j = 0; j < this.column_length; j++) {\n\t\t\t\tx[i][j] = this.matrix_array[i][j];\n\t\t\t}\n\t\t}\n\t\tconst y = this.matrix_array;\n\t\tif(rot_type === 1) {\n\t\t\t// 90度回転\n\t\t\ty.splice(this.column_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tif(col < this.row_length) {\n\t\t\t\t\ty[col].splice(this.row_length);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ty[col] = new Array(this.row_length);\n\t\t\t\t}\n\t\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\t\ty[col][row] = x[this.row_length - row - 1][col];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(rot_type === 2) {\n\t\t\t// 180度回転\n\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\t\ty[row][col] = x[this.row_length - row - 1][this.column_length - col - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(rot_type === 3) {\n\t\t\t// 270度回転\n\t\t\ty.splice(this.column_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tif(col < this.row_length) {\n\t\t\t\t\ty[col].splice(this.row_length);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ty[col] = new Array(this.row_length);\n\t\t\t\t}\n\t\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\t\ty[col][row] = x[row][this.column_length - col - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.row_length = y.length;\n\t\tthis.column_length = y[0].length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Rotate matrix 90 degrees clockwise.\n\t * @param {KMatrixInputData} rot_90_count - Number of times rotated by 90 degrees.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\trot90(rot_90_count) {\n\t\treturn this.clone()._rot90(rot_90_count);\n\t}\n\n\t/**\n\t * Change the size of the matrix. (mutable)\n\t * Initialized with 0 when expanding.\n\t * @param {KMatrixInputData} new_row_length - Number of rows of matrix to resize.\n\t * @param {KMatrixInputData} new_column_length - Number of columns of matrix to resize.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_resize(new_row_length, new_column_length) {\n\t\tconst row_length\t= Matrix._toInteger(new_row_length);\n\t\tconst column_length\t= Matrix._toInteger(new_column_length);\n\t\tif((row_length === this.row_length) && (column_length === this.column_length)) {\n\t\t\treturn this;\n\t\t}\n\t\tif((row_length <= 0) || (column_length <= 0)) {\n\t\t\tthrow \"_resize\";\n\t\t}\n\t\tconst row_max = Math.max(this.row_length, row_length);\n\t\tconst col_max = Math.max(this.column_length, column_length);\n\t\tconst y = this.matrix_array;\n\t\t// 大きくなった行と列に対してゼロで埋める\n\t\tfor(let row = 0; row < row_max; row++) {\n\t\t\tif(row >= this.row_length) {\n\t\t\t\ty[row] = new Array(col_max);\n\t\t\t}\n\t\t\tfor(let col = 0; col < col_max; col++) {\n\t\t\t\tif((row >= this.row_length) || (col >= this.column_length)) {\n\t\t\t\t\ty[row][col] = Complex.ZERO;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// 小さくなった行と列を削除する\n\t\tif(this.row_length > row_length) {\n\t\t\ty.splice(row_length);\n\t\t}\n\t\tif(this.column_length > column_length) {\n\t\t\tfor(let row = 0; row < y.length; row++) {\n\t\t\t\ty[row].splice(column_length);\n\t\t\t}\n\t\t}\n\t\tthis.row_length = row_length;\n\t\tthis.column_length = column_length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Change the size of the matrix.\n\t * Initialized with 0 when expanding.\n\t * @param {KMatrixInputData} row_length - Number of rows of matrix to resize.\n\t * @param {KMatrixInputData} column_length - Number of columns of matrix to resize.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tresize(row_length, column_length) {\n\t\treturn this.clone()._resize(row_length, column_length);\n\t}\n\n\t/**\n\t * Remove the row in this matrix. (mutable)\n\t * @param {KMatrixInputData} delete_row_index - Number of row of matrix to delete.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_deleteRow(delete_row_index) {\n\t\tconst row_index\t= Matrix._toInteger(delete_row_index);\n\t\tif((this.row_length === 1) || (this.row_length <= row_index)) {\n\t\t\tthrow \"_deleteRow\";\n\t\t}\n\t\tthis.matrix_array.splice(row_index, 1);\n\t\tthis.row_length--;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Remove the column in this matrix. (mutable)\n\t * @param {KMatrixInputData} delete_column_index - Number of column of matrix to delete.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_deleteColumn(delete_column_index) {\n\t\tconst column_index\t= Matrix._toInteger(delete_column_index);\n\t\tif((this.column_length === 1) || (this.column_length <= column_index)) {\n\t\t\tthrow \"_deleteColumn\";\n\t\t}\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tthis.matrix_array[row].splice(column_index, 1);\n\t\t}\n\t\tthis.column_length--;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove the row in this matrix.\n\t * @param {KMatrixInputData} delete_row_index - Number of row of matrix to delete.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tdeleteRow(delete_row_index) {\n\t\treturn this.clone()._deleteRow(delete_row_index);\n\t}\n\n\t/**\n\t * Remove the column in this matrix.\n\t * @param {KMatrixInputData} delete_column_index - Number of column of matrix to delete.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tdeleteColumn(delete_column_index) {\n\t\treturn this.clone()._deleteColumn(delete_column_index);\n\t}\n\n\t/**\n\t * Swap rows in the matrix. (mutable)\n\t * @param {KMatrixInputData} exchange_row_index1 - Number 1 of row of matrix to exchange.\n\t * @param {KMatrixInputData} exchange_row_index2 - Number 2 of row of matrix to exchange.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_exchangeRow(exchange_row_index1, exchange_row_index2) {\n\t\tconst row_index1\t= Matrix._toInteger(exchange_row_index1);\n\t\tconst row_index2\t= Matrix._toInteger(exchange_row_index2);\n\t\tif((this.row_length === 1) || (this.row_length <= row_index1) || (this.row_length <= row_index2)) {\n\t\t\tthrow \"_exchangeRow\";\n\t\t}\n\t\tif(row_index1 === row_index2) {\n\t\t\treturn this;\n\t\t}\n\t\tconst swap = this.matrix_array[row_index1];\n\t\tthis.matrix_array[row_index1] = this.matrix_array[row_index2];\n\t\tthis.matrix_array[row_index2] = swap;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Swap columns in the matrix. (mutable)\n\t * @param {KMatrixInputData} exchange_column_index1 - Number 1 of column of matrix to exchange.\n\t * @param {KMatrixInputData} exchange_column_index2 - Number 2 of column of matrix to exchange.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_exchangeColumn(exchange_column_index1, exchange_column_index2) {\n\t\tconst column_index1\t= Matrix._toInteger(exchange_column_index1);\n\t\tconst column_index2\t= Matrix._toInteger(exchange_column_index2);\n\t\tif((this.column_length === 1) || (this.column_length <= column_index1) || (this.column_length <= column_index2)) {\n\t\t\tthrow \"_exchangeColumn\";\n\t\t}\n\t\tif(column_index1 === column_index2) {\n\t\t\treturn this;\n\t\t}\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tconst swap = this.matrix_array[row][column_index1];\n\t\t\tthis.matrix_array[row][column_index1] = this.matrix_array[row][column_index2];\n\t\t\tthis.matrix_array[row][column_index2] = swap;\n\t\t}\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Swap rows in the matrix.\n\t * @param {KMatrixInputData} exchange_row_index1 - Number 1 of row of matrix to exchange.\n\t * @param {KMatrixInputData} exchange_row_index2 - Number 2 of row of matrix to exchange.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\texchangeRow(exchange_row_index1, exchange_row_index2) {\n\t\treturn this.clone()._exchangeRow(exchange_row_index1, exchange_row_index2);\n\t}\n\n\t/**\n\t * Swap columns in the matrix.\n\t * @param {KMatrixInputData} exchange_column_index1 - Number 1 of column of matrix to exchange.\n\t * @param {KMatrixInputData} exchange_column_index2 - Number 2 of column of matrix to exchange.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\texchangeColumn(exchange_column_index1, exchange_column_index2) {\n\t\treturn this.clone()._exchangeColumn(exchange_column_index1, exchange_column_index2);\n\t}\n\n\t/**\n\t * Combine matrix to the right of this matrix. (mutable)\n\t * @param {KMatrixInputData} left_matrix - Matrix to combine.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_concatRight(left_matrix) {\n\t\tconst M = Matrix._toMatrix(left_matrix);\n\t\tif(this.row_length != M.row_length) {\n\t\t\tthrow \"_concatRight\";\n\t\t}\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\tthis.matrix_array[row].push(M.matrix_array[row][col]);\n\t\t\t}\n\t\t}\n\t\tthis.column_length += M.column_length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Combine matrix to the bottom of this matrix. (mutable)\n\t * @param {KMatrixInputData} bottom_matrix - Matrix to combine.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_concatBottom(bottom_matrix) {\n\t\tconst M = Matrix._toMatrix(bottom_matrix);\n\t\tif(this.column_length != M.column_length) {\n\t\t\tthrow \"_concatBottom\";\n\t\t}\n\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\tthis.matrix_array.push(M.matrix_array[row]);\n\t\t}\n\t\tthis.row_length += M.row_length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Combine matrix to the right of this matrix.\n\t * @param {KMatrixInputData} left_matrix - Matrix to combine.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tconcatRight(left_matrix) {\n\t\treturn this.clone()._concatRight(left_matrix);\n\t}\n\n\t/**\n\t * Combine matrix to the bottom of this matrix.\n\t * @param {KMatrixInputData} bottom_matrix - Matrix to combine.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tconcatBottom(bottom_matrix) {\n\t\treturn this.clone()._concatBottom(bottom_matrix);\n\t}\n\n\t/**\n\t * Clip each element of matrix to specified range.\n\t * @param {KMatrixInputData} min \n\t * @param {KMatrixInputData} max \n\t * @returns {Matrix} min(max(x, min), max)\n\t */\n\tclip(min, max) {\n\t\tconst MIN = Matrix._toMatrix(min);\n\t\tconst MAX = Matrix._toMatrix(max);\n\t\tconst x_min = MIN.matrix_array;\n\t\tconst x_max = MAX.matrix_array;\n\t\treturn this.cloneMatrixDoEachCalculation(\n\t\t\tfunction(num, row, col) {\n\t\t\t\tconst d_min = x_min[row % MIN.row_length][col % MIN.column_length];\n\t\t\t\tconst d_max = x_max[row % MAX.row_length][col % MAX.column_length];\n\t\t\t\treturn num.clip(d_min, d_max);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * Create row vector with specified initial value, step value, end condition.\n\t * @param {KMatrixInputData} start_or_stop \n\t * @param {KMatrixInputData} [stop]\n\t * @param {KMatrixInputData} [step=1] \n\t * @returns {Matrix}\n\t */\n\tstatic arange(start_or_stop, stop, step) {\n\t\tconst from  = stop !== undefined ? Matrix._toComplex(start_or_stop) : Complex.ZERO;\n\t\tconst to    = stop !== undefined ? Matrix._toComplex(stop) : Matrix._toComplex(start_or_stop);\n\t\tconst delta = step !== undefined ? Matrix._toComplex(step) : Complex.ONE;\n\t\treturn new Matrix(MatrixTool.InterpolationCalculation(from, delta, to, false));\n\t}\n\n\t/**\n\t * Circular shift.\n\t * @param {KMatrixInputData} shift_size \n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tcircshift(shift_size, type) {\n\t\tconst shift = Matrix._toInteger(shift_size);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tconst y = new Array(data.length);\n\t\t\tlet from = ((- shift % data.length) + data.length) % data.length;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = data[from++];\n\t\t\t\tif(from === data.length) {\n\t\t\t\t\tfrom = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn this.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Circular shift.\n\t * @param {KMatrixInputData} shift_size \n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\troll(shift_size, type) {\n\t\treturn this.circshift(shift_size, type);\n\t}\n\n\t/**\n\t * Change the shape of the matrix.\n\t * The number of elements in the matrix doesn't increase or decrease.\n\t * @param {KMatrixInputData} row_length - Number of rows of matrix to reshape.\n\t * @param {KMatrixInputData} column_length - Number of columns of matrix to reshape.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\treshape(row_length, column_length) {\n\t\tconst new_row_length = Matrix._toInteger(row_length);\n\t\tconst new_column_length = Matrix._toInteger(column_length);\n\t\tconst this_size = this.row_length * this.column_length;\n\t\tconst new_size = new_row_length * new_column_length;\n\t\tif(this_size !== new_size) {\n\t\t\tthrow \"reshape error. (this_size !== new_size)->(\" + this_size + \" !== \" + new_size + \")\";\n\t\t}\n\t\tconst m = this.matrix_array;\n\t\tlet m_col = 0;\n\t\tlet m_row = 0;\n\t\tconst y = new Array(new_row_length);\n\t\tfor(let row = 0; row < new_row_length; row++) {\n\t\t\ty[row] = new Array(new_column_length);\n\t\t\tfor(let col = 0; col < new_column_length; col++) {\n\t\t\t\ty[row][col] = m[m_row][m_col];\n\t\t\t\tm_col++;\n\t\t\t\tif(m_col === this.column_length) {\n\t\t\t\t\tm_col = 0;\n\t\t\t\t\tm_row++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Flip this matrix left and right.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tfliplr() {\n\t\treturn this.flip({dimension : \"row\"});\n\t}\n\n\t/**\n\t * Flip this matrix up and down.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tflipud() {\n\t\treturn this.flip({dimension : \"column\"});\n\t}\n\n\t/**\n\t * Flip this matrix.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tflip(type) {\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0, j = data.length - 1; i < data.length; i++, j--) {\n\t\t\t\ty[i] = data[j];\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn this.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Index sort.\n\t * - Sorts by row when setting index by row vector to the argument.\n\t * - Sorts by column when setting index by column vector to the argument.\n\t * @param {KMatrixInputData} v - Vector with index. (See the description of this function)\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tindexsort(v) {\n\t\tconst V = Matrix._toMatrix(v);\n\t\tif(V.isMatrix()) {\n\t\t\tthrow \"argsort error. argsort is not vector. (\" + V.toOneLineString + \")\";\n\t\t}\n\t\tlet is_transpose = false;\n\t\tlet target_array = null;\n\t\tlet index_array = null;\n\t\tif(V.isRow()) {\n\t\t\tif(this.column_length !== V.column_length) {\n\t\t\t\tthrow \"argsort error. (this_size !== new_size)->(\" + this.column_length + \" !== \" + V.column_length + \")\";\n\t\t\t}\n\t\t\t// 列をインデックスソートする\n\t\t\tis_transpose = true;\n\t\t\ttarget_array = this.transpose().matrix_array;\n\t\t\tindex_array = V.matrix_array[0];\n\t\t}\n\t\tif(V.isColumn()) {\n\t\t\tif(this.row_length !== V.row_length) {\n\t\t\t\tthrow \"argsort error. (this_size !== new_size)->(\" + this.row_length + \" !== \" + V.row_length + \")\";\n\t\t\t}\n\t\t\t// 行をインデックスソートする\n\t\t\ttarget_array = this.matrix_array;\n\t\t\tindex_array = V.transpose().matrix_array[0];\n\t\t}\n\t\t// データを付け替える\n\t\tconst sort_data = new Array(index_array.length);\n\t\tfor(let i = 0; i < index_array.length; i++) {\n\t\t\tsort_data[i] = {\n\t\t\t\tindex : index_array[i],\n\t\t\t\tdata : target_array[i]\n\t\t\t};\n\t\t}\n\t\t/**\n\t\t * 比較関数を作成\n\t\t * @type {function({index : Complex}, {index : Complex}): number }\n\t\t */\n\t\tconst compare = function(a, b) {\n\t\t\treturn a.index.compareTo(b.index);\n\t\t};\n\t\t{\n\t\t\t/**\n\t\t\t * @type {Array<{index : Complex}>}\n\t\t\t */\n\t\t\tconst temp = [];\n\t\t\t/**\n\t\t\t * ソート関数（安定マージソート）\n\t\t\t * @param {Array<{index : Complex}>} elements \n\t\t\t * @param {number} first \n\t\t\t * @param {number} last \n\t\t\t * @param {function({index : Complex}, {index : Complex}): number} cmp_function \n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tconst sort = function(elements, first, last, cmp_function) { \n\t\t\t\tif(first < last) {\n\t\t\t\t\tconst middle = Math.floor((first + last) / 2);\n\t\t\t\t\tsort(elements, first, middle, cmp_function);\n\t\t\t\t\tsort(elements, middle + 1, last, cmp_function);\n\t\t\t\t\tlet p = 0, i, j, k;\n\t\t\t\t\tfor(i = first; i <= middle; i++) {\n\t\t\t\t\t\ttemp[p++] = elements[i];\n\t\t\t\t\t}\n\t\t\t\t\ti = middle + 1;\n\t\t\t\t\tj = 0;\n\t\t\t\t\tk = first;\n\t\t\t\t\twhile((i <= last) && (j < p)) {\n\t\t\t\t\t\tif(cmp_function(elements[i], temp[j]) >= 0) {\n\t\t\t\t\t\t\telements[k++] = temp[j++];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\telements[k++] = elements[i++];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\twhile(j < p) {\n\t\t\t\t\t\telements[k++] = temp[j++];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t};\n\t\t\tsort(sort_data, 0, sort_data.length - 1, compare);\n\t\t}\n\t\t// 行列を組み立てなおす\n\t\tconst y = new Array(index_array.length);\n\t\tfor(let i = 0; i < index_array.length; i++) {\n\t\t\ty[i] = sort_data[i].data;\n\t\t}\n\t\t// 行列を作成する\n\t\tconst Y = new Matrix(y);\n\t\tif(!is_transpose) {\n\t\t\treturn Y;\n\t\t}\n\t\telse {\n\t\t\treturn Y.transpose();\n\t\t}\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の一般計算\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Transpose a matrix.\n\t * @returns {Matrix} A^T\n\t */\n\ttranspose() {\n\t\tconst y = new Array(this.column_length);\n\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\ty[col] = new Array(this.row_length);\n\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\ty[col][row] = this.matrix_array[row][col];\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Hermitian transpose.\n\t * @returns {Matrix} A^T\n\t */\n\tctranspose() {\n\t\treturn this.transpose().conj();\n\t}\n\n\t/**\n\t * Hermitian transpose.\n\t * @returns {Matrix} A^T\n\t */\n\tT() {\n\t\treturn this.ctranspose();\n\t}\n\n\t/**\n\t * Inner product/Dot product.\n\t * @param {KMatrixInputData} number \n\t * @param {KMatrixInputData} [dimension=1] - Dimension of matrix used for calculation. (1 or 2)\n\t * @returns {Matrix} A・B\n\t */\n\tinner(number, dimension=1) {\n\t\treturn LinearAlgebra.inner(this, number, dimension);\n\t}\n\t\n\t/**\n\t * LUP decomposition.\n\t * - P'*L*U=A\n\t * - P is permutation matrix.\n\t * - L is lower triangular matrix.\n\t * - U is upper triangular matrix.\n\t * @returns {{P: Matrix, L: Matrix, U: Matrix}} {L, U, P}\n\t */\n\tlup() {\n\t\treturn LinearAlgebra.lup(this);\n\t}\n\n\t/**\n\t * LU decomposition.\n\t * - L*U=A\n\t * - L is lower triangular matrix.\n\t * - U is upper triangular matrix.\n\t * @returns {{L: Matrix, U: Matrix}} {L, U}\n\t */\n\tlu() {\n\t\treturn LinearAlgebra.lu(this);\n\t}\n\n\t/**\n\t * Solving a system of linear equations to be Ax = B\n\t * @param {KMatrixInputData} number - B\n\t * @returns {Matrix} x\n\t */\n\tlinsolve(number) {\n\t\treturn LinearAlgebra.linsolve(this, number);\n\t}\n\n\t/**\n\t * QR decomposition.\n\t * - Q*R=A\n\t * - Q is orthonormal matrix.\n\t * - R is upper triangular matrix.\n\t * @returns {{Q: Matrix, R: Matrix}} {Q, R}\n\t */\n\tqr() {\n\t\treturn LinearAlgebra.qr(this);\n\t}\n\n\t/**\n\t * Tridiagonalization of symmetric matrix.\n\t * - Don't support complex numbers.\n\t * - P*H*P'=A\n\t * - P is orthonormal matrix.\n\t * - H is tridiagonal matrix.\n\t * - The eigenvalues of H match the eigenvalues of A.\n\t * @returns {{P: Matrix, H: Matrix}} {P, H}\n\t */\n\ttridiagonalize() {\n\t\treturn LinearAlgebra.tridiagonalize(this);\n\t}\n\n\t/**\n\t * Eigendecomposition of symmetric matrix.\n\t * - Don't support complex numbers.\n\t * - V*D*V'=A.\n\t * - V is orthonormal matrix. and columns of V are the right eigenvectors.\n\t * - D is a matrix containing the eigenvalues on the diagonal component.\n\t * @returns {{V: Matrix, D: Matrix}} {D, V}\n\t */\n\teig() {\n\t\treturn LinearAlgebra.eig(this);\n\t}\n\n\t/**\n\t * Singular Value Decomposition (SVD).\n\t * - U*S*V'=A\n\t * - U and V are orthonormal matrices.\n\t * - S is a matrix with singular values in the diagonal.\n\t * @returns {{U: Matrix, S: Matrix, V: Matrix}} U*S*V'=A\n\t */\n\tsvd() {\n\t\treturn LinearAlgebra.svd(this);\n\t}\n\n\t/**\n\t * Pseudo-inverse matrix.\n\t * @returns {Matrix} A^+\n\t */\n\tpinv() {\n\t\treturn LinearAlgebra.pinv(this);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// probability 確率計算用\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Log-gamma function.\n\t * - Calculate from real values.\n\t * @returns {Matrix}\n\t */\n\tgammaln() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gammaln();\n\t\t});\n\t}\n\n\t/**\n\t * Gamma function.\n\t * - Calculate from real values.\n\t * @returns {Matrix}\n\t */\n\tgamma() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gamma();\n\t\t});\n\t}\n\n\t/**\n\t * Incomplete gamma function.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} a\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {Matrix}\n\t */\n\tgammainc(a, tail) {\n\t\tconst a_ = Matrix._toDouble(a);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gammainc(a_, tail);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of the gamma distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} k - Shape parameter.\n\t * @param {KMatrixInputData} s - Scale parameter.\n\t * @returns {Matrix}\n\t */\n\tgampdf(k, s) {\n\t\tconst k_ = Matrix._toDouble(k);\n\t\tconst s_ = Matrix._toDouble(s);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gampdf(k_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of gamma distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} k - Shape parameter.\n\t * @param {KMatrixInputData} s - Scale parameter.\n\t * @returns {Matrix}\n\t */\n\tgamcdf(k, s) {\n\t\tconst k_ = Matrix._toDouble(k);\n\t\tconst s_ = Matrix._toDouble(s);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gamcdf(k_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of gamma distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} k - Shape parameter.\n\t * @param {KMatrixInputData} s - Scale parameter.\n\t * @returns {Matrix}\n\t */\n\tgaminv(k, s) {\n\t\tconst k_ = Matrix._toDouble(k);\n\t\tconst s_ = Matrix._toDouble(s);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gaminv(k_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * Beta function.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} y\n\t * @returns {Matrix}\n\t */\n\tbeta(y) {\n\t\tconst y_ = Matrix._toDouble(y);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.beta(y_);\n\t\t});\n\t}\n\t\n\t/**\n\t * Incomplete beta function.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} a\n\t * @param {KMatrixInputData} b\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {Matrix}\n\t */\n\tbetainc(a, b, tail) {\n\t\tconst a_ = Matrix._toDouble(a);\n\t\tconst b_ = Matrix._toDouble(b);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.betainc(a_, b_, tail);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of beta distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} a\n\t * @param {KMatrixInputData} b\n\t * @returns {Matrix}\n\t */\n\tbetacdf(a, b) {\n\t\tconst a_ = Matrix._toDouble(a);\n\t\tconst b_ = Matrix._toDouble(b);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.betacdf(a_, b_);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of beta distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} a\n\t * @param {KMatrixInputData} b\n\t * @returns {Matrix}\n\t */\n\tbetapdf(a, b) {\n\t\tconst a_ = Matrix._toDouble(a);\n\t\tconst b_ = Matrix._toDouble(b);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.betapdf(a_, b_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of beta distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} a\n\t * @param {KMatrixInputData} b\n\t * @returns {Matrix}\n\t */\n\tbetainv(a, b) {\n\t\tconst a_ = Matrix._toDouble(a);\n\t\tconst b_ = Matrix._toDouble(b);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.betainv(a_, b_);\n\t\t});\n\t}\n\n\t/**\n\t * Factorial function, x!.\n\t * - Calculate from real values.\n\t * @returns {Matrix}\n\t */\n\tfactorial() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.factorial();\n\t\t});\n\t}\n\t\n\t/**\n\t * Binomial coefficient, number of all combinations, nCk.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} k\n\t * @returns {Matrix}\n\t */\n\tnchoosek(k) {\n\t\tconst k_ = Matrix._toDouble(k);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.nchoosek(k_);\n\t\t});\n\t}\n\t\n\t/**\n\t * Error function.\n\t * - Calculate from real values.\n\t * @returns {Matrix}\n\t */\n\terf() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.erf();\n\t\t});\n\t}\n\n\t/**\n\t * Complementary error function.\n\t * - Calculate from real values.\n\t * @returns {Matrix}\n\t */\n\terfc() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.erfc();\n\t\t});\n\t}\n\t\n\t/**\n\t * Inverse function of Error function.\n\t * - Calculate from real values.\n\t * @returns {Matrix}\n\t */\n\terfinv() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.erfinv();\n\t\t});\n\t}\n\t\n\t/**\n\t * Inverse function of Complementary error function.\n\t * - Calculate from real values.\n\t * @returns {Matrix}\n\t */\n\terfcinv() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.erfcinv();\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of normal distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} [u=0.0] - Average value.\n\t * @param {KMatrixInputData} [s=1.0] - Variance value.\n\t * @returns {Matrix}\n\t */\n\tnormpdf(u, s) {\n\t\tconst u_ = u !== undefined ? Matrix._toDouble(u) : 0.0;\n\t\tconst s_ = s !== undefined ? Matrix._toDouble(s) : 1.0;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.normpdf(u_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of normal distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} [u=0.0] - Average value.\n\t * @param {KMatrixInputData} [s=1.0] - Variance value.\n\t * @returns {Matrix}\n\t */\n\tnormcdf(u, s) {\n\t\tconst u_ = u !== undefined ? Matrix._toDouble(u) : 0.0;\n\t\tconst s_ = s !== undefined ? Matrix._toDouble(s) : 1.0;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.normcdf(u_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of normal distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} [u=0.0] - Average value.\n\t * @param {KMatrixInputData} [s=1.0] - Variance value.\n\t * @returns {Matrix}\n\t */\n\tnorminv(u, s) {\n\t\tconst u_ = u !== undefined ? Matrix._toDouble(u) : 0.0;\n\t\tconst s_ = s !== undefined ? Matrix._toDouble(s) : 1.0;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.norminv(u_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of binomial distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} n\n\t * @param {KMatrixInputData} p\n\t * @returns {Matrix}\n\t */\n\tbinopdf(n, p) {\n\t\tconst n_ = Matrix._toDouble(n);\n\t\tconst p_ = Matrix._toDouble(p);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.binopdf(n_, p_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of binomial distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} n\n\t * @param {KMatrixInputData} p\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {Matrix}\n\t */\n\tbinocdf(n, p, tail) {\n\t\tconst n_ = Matrix._toDouble(n);\n\t\tconst p_ = Matrix._toDouble(p);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.binocdf(n_, p_, tail);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of binomial distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} n\n\t * @param {KMatrixInputData} p\n\t * @returns {Matrix}\n\t */\n\tbinoinv(n, p) {\n\t\tconst n_ = Matrix._toDouble(n);\n\t\tconst p_ = Matrix._toDouble(p);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.binoinv(n_, p_);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of Poisson distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} lambda\n\t * @returns {Matrix}\n\t */\n\tpoisspdf(lambda) {\n\t\tconst lambda_ = Matrix._toDouble(lambda);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.poisspdf(lambda_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Poisson distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} lambda\n\t * @returns {Matrix}\n\t */\n\tpoisscdf(lambda) {\n\t\tconst lambda_ = Matrix._toDouble(lambda);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.poisscdf(lambda_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of Poisson distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} lambda\n\t * @returns {Matrix}\n\t */\n\tpoissinv(lambda) {\n\t\tconst lambda_ = Matrix._toDouble(lambda);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.poissinv(lambda_);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of Student's t-distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} v - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\ttpdf(v) {\n\t\tconst v_ = Matrix._toDouble(v);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tpdf(v_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} v - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\ttcdf(v) {\n\t\tconst v_ = Matrix._toDouble(v);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tcdf(v_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} v - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\ttinv(v) {\n\t\tconst v_ = Matrix._toDouble(v);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tinv(v_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} v - The degrees of freedom. (DF)\n\t * @param {KMatrixInputData} tails - Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)\n\t * @returns {Matrix}\n\t */\n\ttdist(v, tails) {\n\t\tconst v_ = Matrix._toDouble(v);\n\t\tconst tails_ = Matrix._toDouble(tails);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tdist(v_, tails_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} v - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\ttinv2(v) {\n\t\tconst v_ = Matrix._toDouble(v);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tinv2(v_);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of chi-square distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} k - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\tchi2pdf(k) {\n\t\tconst k_ = Matrix._toDouble(k);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.chi2pdf(k_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of chi-square distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} k - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\tchi2cdf(k) {\n\t\tconst k_ = Matrix._toDouble(k);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.chi2cdf(k_);\n\t\t});\n\t}\n\t\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of chi-square distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} k - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\tchi2inv(k) {\n\t\tconst k_ = Matrix._toDouble(k);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.chi2inv(k_);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of F-distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} d1 - The degree of freedom of the molecules.\n\t * @param {KMatrixInputData} d2 - The degree of freedom of the denominator\n\t * @returns {Matrix}\n\t */\n\tfpdf(d1, d2) {\n\t\tconst d1_ = Matrix._toDouble(d1);\n\t\tconst d2_ = Matrix._toDouble(d2);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.fpdf(d1_, d2_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of F-distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} d1 - The degree of freedom of the molecules.\n\t * @param {KMatrixInputData} d2 - The degree of freedom of the denominator\n\t * @returns {Matrix}\n\t */\n\tfcdf(d1, d2) {\n\t\tconst d1_ = Matrix._toDouble(d1);\n\t\tconst d2_ = Matrix._toDouble(d2);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.fcdf(d1_, d2_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of F-distribution.\n\t * - Calculate from real values.\n\t * @param {KMatrixInputData} d1 - The degree of freedom of the molecules.\n\t * @param {KMatrixInputData} d2 - The degree of freedom of the denominator\n\t * @returns {Matrix}\n\t */\n\tfinv(d1, d2) {\n\t\tconst d1_ = Matrix._toDouble(d1);\n\t\tconst d2_ = Matrix._toDouble(d2);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.finv(d1_, d2_);\n\t\t});\n\t}\n\n\t// ----------------------\n\t// ビット演算系\n\t// ----------------------\n\t\n\t/**\n\t * Logical AND.\n\t * - Calculated as an integer.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A & B\n\t */\n\tand(number) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.and(Matrix._toDouble(number));\n\t\t});\n\t}\n\n\t/**\n\t * Logical OR.\n\t * - Calculated as an integer.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A | B\n\t */\n\tor(number) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.or(Matrix._toDouble(number));\n\t\t});\n\t}\n\n\t/**\n\t * Logical Exclusive-OR.\n\t * - Calculated as an integer.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} A ^ B\n\t */\n\txor(number) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.xor(Matrix._toDouble(number));\n\t\t});\n\t}\n\n\t/**\n\t * Logical Not. (mutable)\n\t * - Calculated as an integer.\n\t * @returns {Matrix} !A\n\t */\n\tnot() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.not();\n\t\t});\n\t}\n\t\n\t/**\n\t * this << n\n\t * - Calculated as an integer.\n\t * @param {KMatrixInputData} n\n\t * @returns {Matrix} A << n\n\t */\n\tshift(n) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.shift(Matrix._toDouble(n));\n\t\t});\n\t}\n\n\t// ----------------------\n\t// gcd, lcm\n\t// ----------------------\n\t\n\t/**\n\t * Euclidean algorithm.\n\t * - Calculated as an integer.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} gcd(x, y)\n\t */\n\tgcd(number) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gcd(Matrix._toDouble(number));\n\t\t});\n\t}\n\n\t/**\n\t * Extended Euclidean algorithm.\n\t * - Calculated as an integer.\n\t * @param {KMatrixInputData} number \n\t * @returns {Array<Matrix>} [a, b, gcd(x, y)], Result of calculating a*x + b*y = gcd(x, y).\n\t */\n\textgcd(number) {\n\t\tif(!this.isScalar()) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\tconst x = this.scalar;\n\t\tconst y = Matrix._toDouble(number);\n\t\tconst result =x.extgcd(y);\n\t\treturn [new Matrix(result[0]), new Matrix(result[1]), new Matrix(result[2])];\n\t}\n\n\t/**\n\t * Least common multiple.\n\t * - Calculated as an integer.\n\t * @param {KMatrixInputData} number \n\t * @returns {Matrix} lcm(x, y)\n\t */\n\tlcm(number) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.lcm(Matrix._toDouble(number));\n\t\t});\n\t}\n\n\t// ----------------------\n\t// mod\n\t// ----------------------\n\n\t/**\n\t * Modular exponentiation.\n\t * - Calculated as an integer.\n\t * @param {KMatrixInputData} exponent\n\t * @param {KMatrixInputData} m \n\t * @returns {Matrix} A^B mod m\n\t */\n\tmodPow(exponent, m) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.modPow(Matrix._toDouble(exponent), Matrix._toDouble(m));\n\t\t});\n\t}\n\n\t/**\n\t * Modular multiplicative inverse.\n\t * - Calculated as an integer.\n\t * @param {KMatrixInputData} m\n\t * @returns {Matrix} A^(-1) mod m\n\t */\n\tmodInverse(m) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.modInverse(Matrix._toDouble(m));\n\t\t});\n\t}\n\t\n\t// ----------------------\n\t// 素数\n\t// ----------------------\n\t\n\t/**\n\t * Test if each element of the matrix is prime number.\n\t * - 1 if true, 0 if false.\n\t * - Calculated as an integer.\n\t * - Calculate up to `2251799813685248(=2^51)`.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestPrime() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isPrime() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\t\n\t/**\n\t * Test if each element of the matrix is prime number by Miller-Labin prime number determination method.\n\t * - 1 if true, 0 if false.\n\t * Attention : it takes a very long time to process.\n\t * - Calculated as an integer.\n\t * @param {KMatrixInputData} [certainty=100] - Repeat count (prime precision).\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestProbablePrime(certainty) {\n\t\tconst p1 = certainty !== undefined ? Math.round(Matrix._toDouble(certainty)) : undefined;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isProbablePrime(p1) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * Next prime.\n\t * @param {KMatrixInputData} [certainty=100] - Repeat count (prime precision).\n\t * @param {KMatrixInputData} [search_max=100000] - Search range of next prime.\n\t * @returns {Matrix}\n\t */\n\tnextProbablePrime(certainty, search_max) {\n\t\tconst p1 = certainty !== undefined ? Math.round(Matrix._toDouble(certainty)) : undefined;\n\t\tconst p2 = search_max !== undefined ? Math.round(Matrix._toDouble(search_max)) : undefined;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.nextProbablePrime(p1, p2);\n\t\t});\n\t}\n\t\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// statistics 統計計算用\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Maximum number.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix} max([A, B])\n\t */\n\tmax(type) {\n\t\treturn Statistics.max(this, type);\n\t}\n\t\n\t/**\n\t * Minimum number.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix} min([A, B])\n\t */\n\tmin(type) {\n\t\treturn Statistics.min(this, type);\n\t}\n\t\n\t/**\n\t * Sum.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tsum(type) {\n\t\treturn Statistics.sum(this, type);\n\t}\n\n\t/**\n\t * Arithmetic average.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tmean(type) {\n\t\treturn Statistics.mean(this, type);\n\t}\n\n\t/**\n\t * Product of array elements.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tprod(type) {\n\t\treturn Statistics.prod(this, type);\n\t}\n\n\t/**\n\t * Geometric mean.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tgeomean(type) {\n\t\treturn Statistics.geomean(this, type);\n\t}\n\n\t/**\n\t * Median.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tmedian(type) {\n\t\treturn Statistics.median(this, type);\n\t}\n\n\t/**\n\t * Mode.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tmode(type) {\n\t\treturn Statistics.mode(this, type);\n\t}\n\n\t/**\n\t * Moment.\n\t * - Moment of order n. Equivalent to the definition of variance at 2.\n\t * @param {number} nth_order\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tmoment(nth_order, type) {\n\t\treturn Statistics.moment(this, nth_order, type);\n\t}\n\n\t/**\n\t * Variance.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tvar(type) {\n\t\treturn Statistics.var(this, type);\n\t}\n\n\t/**\n\t * Standard deviation.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstd(type) {\n\t\treturn Statistics.std(this, type);\n\t}\n\n\t/**\n\t * Mean absolute deviation.\n\t * - The \"algorithm\" can choose \"0/mean\"(default) and \"1/median\".\n\t * @param {?string|?number} [algorithm]\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tmad(algorithm, type) {\n\t\treturn Statistics.mad(this, algorithm, type);\n\t}\n\n\t/**\n\t * Skewness.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tskewness(type) {\n\t\treturn Statistics.skewness(this, type);\n\t}\n\n\t/**\n\t * Covariance matrix or Covariance value.\n\t * - Get a variance-covariance matrix from 1 matrix.\n\t * - Get a covariance from 2 vectors.\n\t * @param {KMatrixSettings|KMatrixInputData} [y_or_type]\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tcov(y_or_type, type) {\n\t\treturn Statistics.cov(this, y_or_type, type);\n\t}\n\n\t/**\n\t * The samples are standardize to a mean value of 0, standard deviation of 1.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstandardization(type) {\n\t\treturn Statistics.standardization(this, type);\n\t}\n\n\t/**\n\t * Correlation matrix or Correlation coefficient.\n\t * - Get a correlation matrix from 1 matrix.\n\t * - Get a correlation coefficient from 2 vectors.\n\t * @param {KMatrixSettings|KMatrixInputData} [y_or_type]\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tcorrcoef(y_or_type, type) {\n\t\treturn Statistics.corrcoef(this, y_or_type, type);\n\t}\n\n\t/**\n\t * Sort.\n\t * - The \"order\" can choose \"ascend\"(default) and \"descend\".\n\t * @param {string} [order]\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tsort(order, type) {\n\t\treturn Statistics.sort(this, order, type);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// signal 信号処理用\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Discrete Fourier transform (DFT).\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix} fft(x)\n\t */\n\tfft(type) {\n\t\treturn Signal.fft(this, type);\n\t}\n\n\t/**\n\t * Inverse discrete Fourier transform (IDFT).\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix} ifft(x)\n\t */\n\tifft(type) {\n\t\treturn Signal.ifft(this, type);\n\t}\n\n\t/**\n\t * Power spectral density.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix} abs(fft(x)).^2\n\t */\n\tpowerfft(type) {\n\t\treturn Signal.powerfft(this, type);\n\t}\n\n\t/**\n\t * Discrete cosine transform (DCT-II, DCT).\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix} dct(x)\n\t */\n\tdct(type) {\n\t\treturn Signal.dct(this, type);\n\t}\n\n\t/**\n\t * Inverse discrete cosine transform (DCT-III, IDCT).\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix} idct(x)\n\t */\n\tidct(type) {\n\t\treturn Signal.idct(this, type);\n\t}\n\n\t/**\n\t * Discrete two-dimensional Fourier transform (2D DFT).\n\t * @returns {Matrix}\n\t */\n\tfft2() {\n\t\treturn Signal.fft2(this);\n\t}\n\n\t/**\n\t * Inverse discrete two-dimensional Fourier transform (2D IDFT).\n\t * @returns {Matrix}\n\t */\n\tifft2() {\n\t\treturn Signal.ifft2(this);\n\t}\n\n\t/**\n\t * Discrete two-dimensional cosine transform (2D DCT).\n\t * @returns {Matrix}\n\t */\n\tdct2() {\n\t\treturn Signal.dct2(this);\n\t}\n\n\t/**\n\t * Inverse discrete two-dimensional cosine transform (2D IDCT).\n\t * @returns {Matrix}\n\t */\n\tidct2() {\n\t\treturn Signal.idct2(this);\n\t}\n\n\t/**\n\t * Convolution integral, Polynomial multiplication.\n\t * @param {KMatrixInputData} number\n\t * @returns {Matrix}\n\t */\n\tconv(number) {\n\t\treturn Signal.conv(this, number);\n\t}\n\n\t/**\n\t * ACF(Autocorrelation function), cros-correlation function.\n\t * - If the argument is omitted, it is calculated by the autocorrelation function.\n\t * @param {KMatrixInputData} [number] - Matrix to calculate the correlation.\n\t * @returns {Matrix}\n\t */\n\txcorr(number) {\n\t\treturn Signal.xcorr(this, number);\n\t}\n\n\t/**\n\t * Create window function for signal processing.\n\t * The following window functions are available.\n\t * - \"rectangle\": Rectangular window\n\t * - \"hann\": Hann/Hanning window.\n\t * - \"hamming\": Hamming window.\n\t * - \"blackman\": Blackman window.\n\t * - \"blackmanharris\": Blackman-Harris window.\n\t * - \"blackmannuttall\": Blackman-Nuttall window.\n\t * - \"flattop\": Flat top window.\n\t * - \"sin\", Half cycle sine window.\n\t * - \"vorbis\", Vorbis window.\n\t * @param {string} name - Window function name.\n\t * @param {KMatrixInputData} size - Window length\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\" (default) , 1/\"periodic\"\n\t * @returns {Matrix} Column vector.\n\t */\n\tstatic window(name, size, periodic) {\n\t\treturn Signal.window(name, size, periodic);\n\t}\n\n\t/**\n\t * Hann (Hanning) window.\n\t * @param {KMatrixInputData} size - Window length\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\" (default) , 1/\"periodic\"\n\t * @returns {Matrix} Column vector.\n\t */\n\tstatic hann(size, periodic) {\n\t\treturn Signal.hann(size, periodic);\n\t}\n\t\n\t/**\n\t * Hamming window.\n\t * @param {KMatrixInputData} size - Window length\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\" (default) , 1/\"periodic\"\n\t * @returns {Matrix} Column vector.\n\t */\n\tstatic hamming(size, periodic) {\n\t\treturn Signal.hamming(size, periodic);\n\t}\n\t\n\t/**\n\t * FFT shift.\n\t * Circular shift beginning at the center of the signal.\n\t * @param {KMatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tfftshift(type) {\n\t\treturn Signal.fftshift(this, type);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 定数\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t\n\t/**\n\t * 1\n\t * @returns {Matrix} 1\n\t */\n\tstatic get ONE() {\n\t\treturn new Matrix(1);\n\t}\n\t\n\t/**\n\t * 2\n\t * @returns {Matrix} 2\n\t */\n\tstatic get TWO() {\n\t\treturn new Matrix(2);\n\t}\n\t\n\t/**\n\t * 10\n\t * @returns {Matrix} 10\n\t */\n\tstatic get TEN() {\n\t\treturn new Matrix(10);\n\t}\n\t\n\t/**\n\t * 0\n\t * @returns {Matrix} 0\n\t */\n\tstatic get ZERO() {\n\t\treturn new Matrix(0);\n\t}\n\n\t/**\n\t * -1\n\t * @returns {Matrix} -1\n\t */\n\tstatic get MINUS_ONE() {\n\t\treturn new Matrix(-1);\n\t}\n\n\t/**\n\t * i, j\n\t * @returns {Matrix} i\n\t */\n\tstatic get I() {\n\t\treturn new Matrix(Complex.I);\n\t}\n\n\t/**\n\t * PI.\n\t * @returns {Matrix} 3.14...\n\t */\n\tstatic get PI() {\n\t\treturn new Matrix(Math.PI);\n\t}\n\n\t/**\n\t * 0.25 * PI.\n\t * @returns {Matrix} 0.78...\n\t */\n\tstatic get QUARTER_PI() {\n\t\treturn new Matrix(0.25 * Math.PI);\n\t}\n\n\t/**\n\t * 0.5 * PI.\n\t * @returns {Matrix} 1.57...\n\t */\n\tstatic get HALF_PI() {\n\t\treturn new Matrix(0.5 * Math.PI);\n\t}\n\n\t/**\n\t * 2 * PI.\n\t * @returns {Matrix} 6.28...\n\t */\n\tstatic get TWO_PI() {\n\t\treturn new Matrix(2.0 * Math.PI);\n\t}\n\n\t/**\n\t * E, Napier's constant.\n\t * @returns {Matrix} 2.71...\n\t */\n\tstatic get E() {\n\t\treturn new Matrix(Math.E);\n\t}\n\n\t/**\n\t * log_e(2)\n\t * @returns {Matrix} ln(2)\n\t */\n\tstatic get LN2() {\n\t\treturn new Matrix(Math.LN2);\n\t}\n\n\t/**\n\t * log_e(10)\n\t * @returns {Matrix} ln(10)\n\t */\n\tstatic get LN10() {\n\t\treturn new Matrix(Math.LN10);\n\t}\n\n\t/**\n\t * log_2(e)\n\t * @returns {Matrix} log_2(e)\n\t */\n\tstatic get LOG2E() {\n\t\treturn new Matrix(Math.LOG2E);\n\t}\n\t\n\t/**\n\t * log_10(e)\n\t * @returns {Matrix} log_10(e)\n\t */\n\tstatic get LOG10E() {\n\t\treturn new Matrix(Math.LOG10E);\n\t}\n\t\n\t/**\n\t * sqrt(2)\n\t * @returns {Matrix} sqrt(2)\n\t */\n\tstatic get SQRT2() {\n\t\treturn new Matrix(Math.SQRT2);\n\t}\n\t\n\t/**\n\t * sqrt(0.5)\n\t * @returns {Matrix} sqrt(0.5)\n\t */\n\tstatic get SQRT1_2() {\n\t\treturn new Matrix(Math.SQRT1_2);\n\t}\n\t\n\t/**\n\t * 0.5\n\t * @returns {Matrix} 0.5\n\t */\n\tstatic get HALF() {\n\t\treturn new Matrix(0.5);\n\t}\n\n\t/**\n\t * Positive infinity.\n\t * @returns {Matrix} Infinity\n\t */\n\tstatic get POSITIVE_INFINITY() {\n\t\treturn new Matrix(Number.POSITIVE_INFINITY);\n\t}\n\t\n\t/**\n\t * Negative Infinity.\n\t * @returns {Matrix} -Infinity\n\t */\n\tstatic get NEGATIVE_INFINITY() {\n\t\treturn new Matrix(Number.NEGATIVE_INFINITY);\n\t}\n\n\t/**\n\t * Not a Number.\n\t * @returns {Matrix} NaN\n\t */\n\tstatic get NaN() {\n\t\treturn new Matrix(Number.NaN);\n\t}\n\n\t// ----------------------\n\t// 互換性\n\t// ----------------------\n\t\n\t/**\n\t * The positive or negative sign of this number.\n\t * - +1 if positive, -1 if negative, 0 if 0.\n\t * @returns {Matrix}\n\t */\n\tsignum() {\n\t\treturn this.sign();\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {KMatrixInputData} number\n\t * @returns {Matrix} A - B\n\t */\n\tsubtract(number) {\n\t\treturn this.sub(number);\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {KMatrixInputData} number\n\t * @returns {Matrix} A * B\n\t */\n\tmultiply(number) {\n\t\treturn this.mul(number);\n\t}\n\n\t/**\n\t * Divide.\n\t * @param {KMatrixInputData} number\n\t * @returns {Matrix} fix(A / B)\n\t */\n\tdivide(number) {\n\t\treturn this.div(number);\n\t}\n\n\t/**\n\t * Remainder of division.\n\t * - Result has same sign as the Dividend.\n\t * @param {KMatrixInputData} number\n\t * @returns {Matrix} A % B\n\t */\n\tremainder(number) {\n\t\treturn this.rem(number);\n\t}\n\t\n\t/**\n\t * To integer rounded down to the nearest.\n\t * @returns {Matrix} fix(A), trunc(A)\n\t */\n\ttrunc() {\n\t\treturn this.fix();\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/core/Matrix.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 836,
    "kind": "typedef",
    "name": "KMatrixInputData",
    "memberof": "src/math/core/Matrix.js",
    "static": true,
    "longname": "src/math/core/Matrix.js~KMatrixInputData",
    "access": "public",
    "description": "Matrix type argument.\n- Matrix\n- Complex\n- number\n- string\n- Array<string|number|Complex|Matrix>\n- Array<Array<string|number|Complex|Matrix>>\n- {doubleValue:number}\n- {toString:function}\n\nInitialization can be performed as follows.\n- 10, \"10\", \"3 + 4j\", \"[ 1 ]\", \"[1, 2, 3]\", \"[1 2 3]\", [1, 2, 3],\n- [[1, 2], [3, 4]], \"[1 2; 3 4]\", \"[1+2i 3+4i]\",\n- \"[1:10]\", \"[1:2:3]\" (MATLAB / Octave / Scilab compatible).",
    "type": {
      "types": [
        "Matrix|Complex|number|string|Array<string|number|Complex|Matrix>|Array<Array<string|number|Complex|Matrix>>|{doubleValue:number}|{toString:function}"
      ],
      "optional": false,
      "name": "KMatrixInputData"
    }
  },
  {
    "__docId__": 837,
    "kind": "typedef",
    "name": "KMatrixSettings",
    "memberof": "src/math/core/Matrix.js",
    "static": true,
    "longname": "src/math/core/Matrix.js~KMatrixSettings",
    "access": "public",
    "description": "Collection of calculation settings for matrix.\n- Available options vary depending on the method.",
    "properties": [
      {
        "nullable": true,
        "types": [
          "string",
          "?number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"auto\"",
        "defaultRaw": "auto",
        "name": "dimension",
        "description": "Calculation direction. 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\"."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "correction",
        "description": "Correction value. For statistics. 0(unbiased), 1(sample)."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "KMatrixSettings"
    }
  },
  {
    "__docId__": 838,
    "kind": "class",
    "name": "MatrixTool",
    "memberof": "src/math/core/Matrix.js",
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/Matrix.js",
    "importStyle": null,
    "description": "Collection of functions used in Matrix.",
    "lineNumber": 52,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 839,
    "kind": "method",
    "name": "toPositionArrayFromObject",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.toPositionArrayFromObject",
    "access": "public",
    "description": "Create actual values from data specifying matrix position.",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "A value indicating the position in a matrix."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "Length to initialize. (Used when \":\" is specified at matrix creation.)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "geta",
        "description": "Offset at initialization. (Used when \":\" is specified at matrix creation.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 840,
    "kind": "method",
    "name": "match2",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.match2",
    "access": "public",
    "description": "A match function that can also extract strings excluding matched strings.",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object<boolean, string>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Search target."
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "regexp",
        "description": "Regular expression."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object<boolean, string>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 841,
    "kind": "method",
    "name": "trimBracket",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.trimBracket",
    "access": "public",
    "description": "Removed front and back brackets when enclosed by brackets.\n- Return null if the string has no brackets.",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{text : string, is_transpose : boolean}|null} String after brackets removal or null."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "String to be processed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{text : string, is_transpose : boolean}|null"
      ],
      "spread": false,
      "description": "String after brackets removal or null."
    }
  },
  {
    "__docId__": 842,
    "kind": "method",
    "name": "toMatrixArrayFromStringForArrayJSON",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.toMatrixArrayFromStringForArrayJSON",
    "access": "public",
    "description": "Create Matrix type data from string data defined in JSON.\n- For example, \"[xx,xx,xx], [xx,xx,xx]\"",
    "lineNumber": 181,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>} Internal array used by Matrix type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "String to be processed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": "Internal array used by Matrix type."
    }
  },
  {
    "__docId__": 843,
    "kind": "method",
    "name": "InterpolationCalculation",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.InterpolationCalculation",
    "access": "public",
    "description": "Create a numeric array from initial values, difference values, and final values.",
    "lineNumber": 211,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Complex>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "Start value."
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "delta",
        "description": "Delta."
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "End value."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "is_include_last_number",
        "description": "Whether to include the last value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Complex>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 844,
    "kind": "method",
    "name": "toArrayFromMatch2String",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.toArrayFromMatch2String",
    "access": "public",
    "description": "Create an array of numbers from data separated by match2.",
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Complex>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Object<boolean, string>>"
        ],
        "spread": false,
        "optional": false,
        "name": "match2_string",
        "description": "Data separated by \"toArrayFromString\"."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Complex>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 845,
    "kind": "method",
    "name": "toArrayFromString",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.toArrayFromString",
    "access": "public",
    "description": "Convert string to row part of matrix type matrix data.\nEstimate the matrix by extracting parts like numbers.",
    "lineNumber": 295,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Complex>|string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "row_text",
        "description": "A string describing one row of the matrix."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Complex>",
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 846,
    "kind": "method",
    "name": "toMatrixArrayFromStringForArraySPACE",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.toMatrixArrayFromStringForArraySPACE",
    "access": "public",
    "description": "Create Matrix type data from string data defined by character string with space separation etc.",
    "lineNumber": 316,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>} Internal array used by Matrix type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Strings to analyze."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": "Internal array used by Matrix type."
    }
  },
  {
    "__docId__": 847,
    "kind": "method",
    "name": "toMatrixArrayFromStringInBracket",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.toMatrixArrayFromStringInBracket",
    "access": "public",
    "description": "Create Matrix type data composed of string data for matrix.",
    "lineNumber": 332,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>} Internal array used by Matrix type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Strings to analyze."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": "Internal array used by Matrix type."
    }
  },
  {
    "__docId__": 848,
    "kind": "method",
    "name": "toMatrixArrayFromString",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.toMatrixArrayFromString",
    "access": "public",
    "description": "Create Matrix type data from string data.",
    "lineNumber": 348,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>} Internal array used by Matrix type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Strings to analyze."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": "Internal array used by Matrix type."
    }
  },
  {
    "__docId__": 849,
    "kind": "method",
    "name": "isCorrectMatrixArray",
    "memberof": "src/math/core/Matrix.js~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~MatrixTool.isCorrectMatrixArray",
    "access": "public",
    "description": "Returns true if Matrix type internal data is correct as matrix data.",
    "lineNumber": 374,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<Complex>>"
        ],
        "spread": false,
        "optional": false,
        "name": "m_array",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 850,
    "kind": "class",
    "name": "Matrix",
    "memberof": "src/math/core/Matrix.js",
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/core/Matrix.js",
    "importStyle": "Matrix",
    "description": "Complex matrix class. (immutable)",
    "lineNumber": 394,
    "interface": false
  },
  {
    "__docId__": 851,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#constructor",
    "access": "public",
    "description": "Create a complex matrix.\nInitialization can be performed as follows.\n- 10, \"10\", \"3 + 4j\", \"[ 1 ]\", \"[1, 2, 3]\", \"[1 2 3]\", [1, 2, 3],\n- [[1, 2], [3, 4]], \"[1 2; 3 4]\", \"[1+2i 3+4i]\",\n- \"[1:10]\", \"[1:2:3]\" (MATLAB / Octave / Scilab compatible).",
    "lineNumber": 404,
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Complex matrix. See how to use the function."
      }
    ]
  },
  {
    "__docId__": 852,
    "kind": "member",
    "name": "matrix_array",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#matrix_array",
    "access": "private",
    "description": "An array of elements in the matrix.",
    "lineNumber": 518,
    "type": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 853,
    "kind": "member",
    "name": "row_length",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#row_length",
    "access": "private",
    "description": "The number of rows in a matrix.",
    "lineNumber": 525,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 854,
    "kind": "member",
    "name": "column_length",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#column_length",
    "access": "private",
    "description": "The number of columns in a matrix.",
    "lineNumber": 532,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 855,
    "kind": "member",
    "name": "string_cash",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#string_cash",
    "access": "private",
    "description": "A cache that records data converted to a string.",
    "lineNumber": 539,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 856,
    "kind": "method",
    "name": "create",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.create",
    "access": "public",
    "description": "Create an entity object of this class.",
    "lineNumber": 547,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 857,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.valueOf",
    "access": "public",
    "description": "Convert number to Matrix type.",
    "lineNumber": 561,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 858,
    "kind": "method",
    "name": "_toMatrix",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix._toMatrix",
    "access": "private",
    "description": "Convert to Matrix.\nIf type conversion is unnecessary, return the value as it is.",
    "lineNumber": 572,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 859,
    "kind": "method",
    "name": "_toComplex",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix._toComplex",
    "access": "private",
    "description": "Convert to Complex.\nIf type conversion is unnecessary, return the value as it is.",
    "lineNumber": 588,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 860,
    "kind": "method",
    "name": "_toDouble",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix._toDouble",
    "access": "private",
    "description": "Convert to real number.",
    "lineNumber": 607,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 861,
    "kind": "method",
    "name": "_toInteger",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix._toInteger",
    "access": "private",
    "description": "Convert to integer.",
    "lineNumber": 626,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 862,
    "kind": "method",
    "name": "_clearCash",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_clearCash",
    "access": "private",
    "description": "Delete cache.",
    "lineNumber": 633,
    "params": [],
    "return": null
  },
  {
    "__docId__": 863,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#clone",
    "access": "public",
    "description": "Deep copy.",
    "lineNumber": 643,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 864,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#toString",
    "access": "public",
    "description": "Convert to string.",
    "lineNumber": 651,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 866,
    "kind": "method",
    "name": "toOneLineString",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#toOneLineString",
    "access": "public",
    "description": "Convert to string in one line.",
    "lineNumber": 779,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 867,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#equals",
    "access": "public",
    "description": "Equals.",
    "lineNumber": 807,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 868,
    "kind": "method",
    "name": "getNumberMatrixArray",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#getNumberMatrixArray",
    "access": "public",
    "description": "Array of real parts of elements in matrix.",
    "lineNumber": 832,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<number>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<number>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 869,
    "kind": "method",
    "name": "getComplexMatrixArray",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#getComplexMatrixArray",
    "access": "public",
    "description": "Complex array of complex numbers of each element of the matrix.",
    "lineNumber": 847,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 870,
    "kind": "method",
    "name": "_each",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_each",
    "access": "private",
    "description": "Perform the same process on all elements in the matrix. (mutable)",
    "lineNumber": 864,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Complex, number, number): any "
        ],
        "spread": false,
        "optional": false,
        "name": "eachfunc",
        "description": "Function(num, row, col)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 871,
    "kind": "method",
    "name": "cloneMatrixDoEachCalculation",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#cloneMatrixDoEachCalculation",
    "access": "public",
    "description": "Perform the same process on all elements in the matrix.",
    "lineNumber": 896,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Complex, number, number): ?Object "
        ],
        "spread": false,
        "optional": false,
        "name": "eachfunc",
        "description": "Function(num, row, col)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 872,
    "kind": "method",
    "name": "createMatrixDoEachCalculation",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.createMatrixDoEachCalculation",
    "access": "public",
    "description": "Create Matrix with specified initialization for each element in matrix.",
    "lineNumber": 907,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(number, number): ?Object "
        ],
        "spread": false,
        "optional": false,
        "name": "eachfunc",
        "description": "Function(row, col)"
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "dimension",
        "defaultRaw": "dimension",
        "name": "column_length",
        "description": "Number of columns."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 873,
    "kind": "method",
    "name": "eachVectorAuto",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#eachVectorAuto",
    "access": "public",
    "description": "Treat the columns of the matrix as vectors and execute the same process.\n- If the matrix is a row vector, it performs the same processing for the row vector.",
    "lineNumber": 935,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 874,
    "kind": "method",
    "name": "eachVectorBoth",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#eachVectorBoth",
    "access": "public",
    "description": "Treat the rows and columns of the matrix as vectors and perform the same processing.\n1. First run the same process for the row.\n2. Finally perform the same processing for the column.",
    "lineNumber": 970,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 875,
    "kind": "method",
    "name": "eachVectorRow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#eachVectorRow",
    "access": "public",
    "description": "Treat the rows of the matrix as vectors and execute the same process.",
    "lineNumber": 1007,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 876,
    "kind": "method",
    "name": "eachVectorColumn",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#eachVectorColumn",
    "access": "public",
    "description": "Treat the columns of the matrix as vectors and execute the same process.",
    "lineNumber": 1030,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 877,
    "kind": "method",
    "name": "eachVector",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#eachVector",
    "access": "public",
    "description": "Treat the rows and columns of the matrix as vectors and perform the same processing.\nThe arguments of the method can switch the direction of the matrix to be executed.",
    "lineNumber": 1055,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"auto\"",
        "defaultRaw": "auto",
        "name": "dimension",
        "description": "0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 878,
    "kind": "method",
    "name": "getMatrix",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#getMatrix",
    "access": "public",
    "description": "Extract the specified part of the matrix.",
    "lineNumber": 1087,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "A vector containing the row numbers to extract from this matrix. If you specify \":\" select all rows."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "col",
        "description": "A vector containing the column numbers to extract from this matrix. If you specify \":\" select all columns."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "isUpOffset",
        "description": "Set offset of matrix position to 1 with true."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 879,
    "kind": "method",
    "name": "setMatrix",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#setMatrix",
    "access": "public",
    "description": "Change specified element in matrix.",
    "lineNumber": 1111,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "A vector containing the row numbers to replace in this matrix. If you specify \":\" select all rows."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "col",
        "description": "A vector containing the column numbers to replace in this matrix. If you specify \":\" select all columns."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "replace",
        "description": "Matrix to be replaced."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "isUpOffset",
        "description": "Set offset of matrix position to 1 with true."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 880,
    "kind": "method",
    "name": "getComplex",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#getComplex",
    "access": "public",
    "description": "Returns the specified element in the matrix.\nEach element of the matrix is composed of complex numbers.",
    "lineNumber": 1134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "row_or_pos",
        "description": "If this is a matrix, the row number. If this is a vector, the address."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "col",
        "description": "If this is a matrix, the column number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 881,
    "kind": "get",
    "name": "booleanValue",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#booleanValue",
    "access": "public",
    "description": "Boolean value of the first element of the matrix.",
    "lineNumber": 1163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 882,
    "kind": "get",
    "name": "intValue",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#intValue",
    "access": "public",
    "description": "Integer value of the first element of the matrix.",
    "lineNumber": 1171,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 883,
    "kind": "get",
    "name": "doubleValue",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#doubleValue",
    "access": "public",
    "description": "Real value of first element of the matrix.",
    "lineNumber": 1179,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 884,
    "kind": "method",
    "name": "toBigInteger",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#toBigInteger",
    "access": "public",
    "description": "return BigInteger.",
    "lineNumber": 1191,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 885,
    "kind": "method",
    "name": "toBigDecimal",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#toBigDecimal",
    "access": "public",
    "description": "return BigDecimal.",
    "lineNumber": 1200,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "MathContext setting after calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 886,
    "kind": "method",
    "name": "toFraction",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#toFraction",
    "access": "public",
    "description": "return Fraction.",
    "lineNumber": 1213,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 887,
    "kind": "method",
    "name": "toComplex",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#toComplex",
    "access": "public",
    "description": "return Complex.",
    "lineNumber": 1221,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 888,
    "kind": "method",
    "name": "toMatrix",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#toMatrix",
    "access": "public",
    "description": "return Matrix.",
    "lineNumber": 1229,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 889,
    "kind": "get",
    "name": "scalar",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#scalar",
    "access": "public",
    "description": "First element of this matrix.",
    "lineNumber": 1241,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 890,
    "kind": "get",
    "name": "length",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#length",
    "access": "public",
    "description": "Maximum size of rows or columns in the matrix.",
    "lineNumber": 1249,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 891,
    "kind": "get",
    "name": "width",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#width",
    "access": "public",
    "description": "Number of columns in the matrix.",
    "lineNumber": 1257,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 892,
    "kind": "get",
    "name": "height",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#height",
    "access": "public",
    "description": "Number of rows in matrix.",
    "lineNumber": 1265,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 893,
    "kind": "get",
    "name": "norm1",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#norm1",
    "access": "public",
    "description": "1-norm.",
    "lineNumber": 1273,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 894,
    "kind": "get",
    "name": "norm2",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#norm2",
    "access": "public",
    "description": "2-norm.",
    "lineNumber": 1281,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 895,
    "kind": "method",
    "name": "norm",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#norm",
    "access": "public",
    "description": "p-norm.",
    "lineNumber": 1290,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 896,
    "kind": "method",
    "name": "cond",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#cond",
    "access": "public",
    "description": "Condition number of the matrix",
    "lineNumber": 1299,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 897,
    "kind": "method",
    "name": "rcond",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#rcond",
    "access": "public",
    "description": "Inverse condition number.",
    "lineNumber": 1307,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 898,
    "kind": "method",
    "name": "rank",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#rank",
    "access": "public",
    "description": "Rank.",
    "lineNumber": 1316,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} rank(A)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "rank(A)"
    }
  },
  {
    "__docId__": 899,
    "kind": "method",
    "name": "trace",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#trace",
    "access": "public",
    "description": "Trace of a matrix.\nSum of diagonal elements.",
    "lineNumber": 1325,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} trace(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "trace(A)"
    },
    "params": []
  },
  {
    "__docId__": 900,
    "kind": "method",
    "name": "det",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#det",
    "access": "public",
    "description": "Determinant.",
    "lineNumber": 1333,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} |A|"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "|A|"
    },
    "params": []
  },
  {
    "__docId__": 901,
    "kind": "method",
    "name": "memset",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.memset",
    "access": "public",
    "description": "Creates a matrix composed of the specified number.",
    "lineNumber": 1348,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Value after initialization."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "Number of columns."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 902,
    "kind": "method",
    "name": "eye",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.eye",
    "access": "public",
    "description": "Return identity matrix.",
    "lineNumber": 1375,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "Number of columns."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 903,
    "kind": "method",
    "name": "zeros",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.zeros",
    "access": "public",
    "description": "Create zero matrix.",
    "lineNumber": 1387,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "Number of columns."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 904,
    "kind": "method",
    "name": "ones",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.ones",
    "access": "public",
    "description": "Create a matrix of all ones.",
    "lineNumber": 1400,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "Number of columns."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 905,
    "kind": "method",
    "name": "diag",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#diag",
    "access": "public",
    "description": "If matrix, generate diagonal column vector.\nIf vector, generate a matrix with diagonal elements.",
    "lineNumber": 1412,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix or vector created. See how to use the function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix or vector created. See how to use the function."
    },
    "params": []
  },
  {
    "__docId__": 906,
    "kind": "method",
    "name": "isScalar",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isScalar",
    "access": "public",
    "description": "Return true if the matrix is scalar.",
    "lineNumber": 1445,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 907,
    "kind": "method",
    "name": "isRow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isRow",
    "access": "public",
    "description": "Return true if the matrix is row vector.",
    "lineNumber": 1453,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 908,
    "kind": "method",
    "name": "isColumn",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isColumn",
    "access": "public",
    "description": "Return true if the matrix is column vector.",
    "lineNumber": 1461,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 909,
    "kind": "method",
    "name": "isVector",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isVector",
    "access": "public",
    "description": "Return true if the matrix is vector.",
    "lineNumber": 1469,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 910,
    "kind": "method",
    "name": "isMatrix",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isMatrix",
    "access": "public",
    "description": "Return true if the value is not scalar.",
    "lineNumber": 1477,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 911,
    "kind": "method",
    "name": "isSquare",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isSquare",
    "access": "public",
    "description": "Return true if the matrix is square matrix.",
    "lineNumber": 1485,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 912,
    "kind": "method",
    "name": "isReal",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isReal",
    "access": "public",
    "description": "Return true if the matrix is real matrix.",
    "lineNumber": 1494,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 913,
    "kind": "method",
    "name": "isComplex",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isComplex",
    "access": "public",
    "description": "Return true if the matrix is complex matrix.",
    "lineNumber": 1509,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 914,
    "kind": "method",
    "name": "isZeros",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isZeros",
    "access": "public",
    "description": "Return true if the matrix is zero matrix.",
    "lineNumber": 1518,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 915,
    "kind": "method",
    "name": "isIdentity",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isIdentity",
    "access": "public",
    "description": "Return true if the matrix is identity matrix.",
    "lineNumber": 1534,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 916,
    "kind": "method",
    "name": "isDiagonal",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isDiagonal",
    "access": "public",
    "description": "Return true if the matrix is diagonal matrix.",
    "lineNumber": 1559,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 917,
    "kind": "method",
    "name": "isTridiagonal",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isTridiagonal",
    "access": "public",
    "description": "Return true if the matrix is tridiagonal matrix.",
    "lineNumber": 1575,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 918,
    "kind": "method",
    "name": "isRegular",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isRegular",
    "access": "public",
    "description": "Return true if the matrix is regular matrix.",
    "lineNumber": 1591,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 919,
    "kind": "method",
    "name": "isOrthogonal",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isOrthogonal",
    "access": "public",
    "description": "Return true if the matrix is orthogonal matrix.",
    "lineNumber": 1607,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 920,
    "kind": "method",
    "name": "isUnitary",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isUnitary",
    "access": "public",
    "description": "Return true if the matrix is unitary matrix.",
    "lineNumber": 1620,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 921,
    "kind": "method",
    "name": "isSymmetric",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isSymmetric",
    "access": "public",
    "description": "Return true if the matrix is symmetric matrix.",
    "lineNumber": 1633,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 922,
    "kind": "method",
    "name": "isHermitian",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isHermitian",
    "access": "public",
    "description": "Return true if the matrix is hermitian matrix.",
    "lineNumber": 1653,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 923,
    "kind": "method",
    "name": "isTriangleUpper",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isTriangleUpper",
    "access": "public",
    "description": "Return true if the matrix is upper triangular matrix.",
    "lineNumber": 1678,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 924,
    "kind": "method",
    "name": "isTriangleLower",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isTriangleLower",
    "access": "public",
    "description": "Return true if the matrix is  lower triangular matrix.",
    "lineNumber": 1694,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 925,
    "kind": "method",
    "name": "isPermutation",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#isPermutation",
    "access": "public",
    "description": "Return true if the matrix is permutation matrix.",
    "lineNumber": 1710,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 926,
    "kind": "method",
    "name": "size",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#size",
    "access": "public",
    "description": "Number of rows and columns of matrix.",
    "lineNumber": 1747,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} [row_length, column_length]"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "string",
          "?number"
        ],
        "spread": false,
        "optional": true,
        "name": "dimension",
        "description": "direction. 1/\"row\", 2/\"column\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "[row_length, column_length]"
    }
  },
  {
    "__docId__": 927,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#compareTo",
    "access": "public",
    "description": "Compare values.\n- Return value between scalars is of type Number.\n- Return value between matrices is type Matrix.",
    "lineNumber": 1775,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number|Matrix} A > B ? 1 : (A === B ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "Matrix"
      ],
      "spread": false,
      "description": "A > B ? 1 : (A === B ? 0 : -1)"
    }
  },
  {
    "__docId__": 928,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#add",
    "access": "public",
    "description": "Add.",
    "lineNumber": 1800,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A + B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A + B"
    }
  },
  {
    "__docId__": 929,
    "kind": "method",
    "name": "sub",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sub",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 1820,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 930,
    "kind": "method",
    "name": "mul",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#mul",
    "access": "public",
    "description": "Multiply.\n- Use `dotmul` if you want to use `mul` for each element.",
    "lineNumber": 1841,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 931,
    "kind": "method",
    "name": "div",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#div",
    "access": "public",
    "description": "Divide.\n- Use `dotdiv` if you want to use `div` for each element.",
    "lineNumber": 1894,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A / B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A / B"
    }
  },
  {
    "__docId__": 932,
    "kind": "method",
    "name": "inv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#inv",
    "access": "public",
    "description": "Inverse matrix of this matrix.\n- Use `dotinv` if you want to use `inv` for each element.",
    "lineNumber": 1934,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^-1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^-1"
    },
    "params": []
  },
  {
    "__docId__": 933,
    "kind": "method",
    "name": "dotmul",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#dotmul",
    "access": "public",
    "description": "Multiplication for each element of matrix.",
    "lineNumber": 1943,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A .* B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A .* B"
    }
  },
  {
    "__docId__": 934,
    "kind": "method",
    "name": "dotdiv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#dotdiv",
    "access": "public",
    "description": "Division for each element of matrix.",
    "lineNumber": 1963,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A ./ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A ./ B"
    }
  },
  {
    "__docId__": 935,
    "kind": "method",
    "name": "dotinv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#dotinv",
    "access": "public",
    "description": "Inverse of each element of matrix.",
    "lineNumber": 1982,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 ./ A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 ./ A"
    },
    "params": []
  },
  {
    "__docId__": 936,
    "kind": "method",
    "name": "nmul",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#nmul",
    "access": "public",
    "description": "Multiplication for each element of matrix.",
    "lineNumber": 1996,
    "deprecated": "use the dotmul.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A .* B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A .* B"
    }
  },
  {
    "__docId__": 937,
    "kind": "method",
    "name": "ndiv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#ndiv",
    "access": "public",
    "description": "Division for each element of matrix.",
    "lineNumber": 2006,
    "deprecated": "use the dotdiv.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A ./ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A ./ B"
    }
  },
  {
    "__docId__": 938,
    "kind": "method",
    "name": "ninv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#ninv",
    "access": "public",
    "description": "Inverse of each element of matrix.",
    "lineNumber": 2015,
    "deprecated": "use the dotinv.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 ./ A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 ./ A"
    },
    "params": []
  },
  {
    "__docId__": 939,
    "kind": "method",
    "name": "npow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#npow",
    "access": "public",
    "description": "Power function for each element of the matrix.",
    "lineNumber": 2025,
    "deprecated": "use the dotpow.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A .^ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A .^ B"
    }
  },
  {
    "__docId__": 940,
    "kind": "method",
    "name": "rem",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#rem",
    "access": "public",
    "description": "Modulo, positive remainder of division for each element of matrix.\n- Result has same sign as the Dividend.",
    "lineNumber": 2039,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A .rem B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A .rem B"
    }
  },
  {
    "__docId__": 941,
    "kind": "method",
    "name": "mod",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#mod",
    "access": "public",
    "description": "Modulo, positive remainder of division for each element of matrix.\n- Result has same sign as the Divisor.",
    "lineNumber": 2060,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A .mod B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A .mod B"
    }
  },
  {
    "__docId__": 942,
    "kind": "method",
    "name": "real",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#real",
    "access": "public",
    "description": "Real part of each element.",
    "lineNumber": 2083,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} real(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "real(A)"
    },
    "params": []
  },
  {
    "__docId__": 943,
    "kind": "method",
    "name": "imag",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#imag",
    "access": "public",
    "description": "Imaginary part of each element of the matrix.",
    "lineNumber": 2093,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} imag(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "imag(A)"
    },
    "params": []
  },
  {
    "__docId__": 944,
    "kind": "method",
    "name": "arg",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#arg",
    "access": "public",
    "description": "The argument of each element of matrix.",
    "lineNumber": 2103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} arg(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "arg(A)"
    },
    "params": []
  },
  {
    "__docId__": 945,
    "kind": "method",
    "name": "sign",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sign",
    "access": "public",
    "description": "The positive or negative signs of each element of the matrix.\n- +1 if positive, -1 if negative, 0 if 0, norm if complex number.",
    "lineNumber": 2114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 946,
    "kind": "method",
    "name": "floor",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#floor",
    "access": "public",
    "description": "Floor.",
    "lineNumber": 2124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} floor(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "floor(A)"
    },
    "params": []
  },
  {
    "__docId__": 947,
    "kind": "method",
    "name": "ceil",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#ceil",
    "access": "public",
    "description": "Ceil.",
    "lineNumber": 2134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} ceil(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "ceil(A)"
    },
    "params": []
  },
  {
    "__docId__": 948,
    "kind": "method",
    "name": "round",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#round",
    "access": "public",
    "description": "Rounding to the nearest integer.",
    "lineNumber": 2144,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} round(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "round(A)"
    },
    "params": []
  },
  {
    "__docId__": 949,
    "kind": "method",
    "name": "fix",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#fix",
    "access": "public",
    "description": "To integer rounded down to the nearest.",
    "lineNumber": 2154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} fix(A), trunc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "fix(A), trunc(A)"
    },
    "params": []
  },
  {
    "__docId__": 950,
    "kind": "method",
    "name": "fract",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#fract",
    "access": "public",
    "description": "Fraction.",
    "lineNumber": 2164,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} fract(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "fract(A)"
    },
    "params": []
  },
  {
    "__docId__": 951,
    "kind": "method",
    "name": "abs",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#abs",
    "access": "public",
    "description": "Absolute value.",
    "lineNumber": 2174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} abs(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "abs(A)"
    },
    "params": []
  },
  {
    "__docId__": 952,
    "kind": "method",
    "name": "conj",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#conj",
    "access": "public",
    "description": "Complex conjugate matrix.",
    "lineNumber": 2184,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} real(A) - imag(A)j"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "real(A) - imag(A)j"
    },
    "params": []
  },
  {
    "__docId__": 953,
    "kind": "method",
    "name": "negate",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#negate",
    "access": "public",
    "description": "this * -1",
    "lineNumber": 2194,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} -A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A"
    },
    "params": []
  },
  {
    "__docId__": 954,
    "kind": "method",
    "name": "pow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#pow",
    "access": "public",
    "description": "Power function.\n- Unless the matrix is a scalar value, only integers are supported.\n- Use `dotpow` if you want to use `pow` for each element. A real number can be specified.",
    "lineNumber": 2211,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} pow(A, B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "整数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "pow(A, B)"
    }
  },
  {
    "__docId__": 955,
    "kind": "method",
    "name": "dotpow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#dotpow",
    "access": "public",
    "description": "Power function for each element of the matrix.",
    "lineNumber": 2242,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A .^ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A .^ B"
    }
  },
  {
    "__docId__": 956,
    "kind": "method",
    "name": "sqrt",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sqrt",
    "access": "public",
    "description": "Square root.",
    "lineNumber": 2261,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sqrt(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sqrt(A)"
    },
    "params": []
  },
  {
    "__docId__": 957,
    "kind": "method",
    "name": "cbrt",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#cbrt",
    "access": "public",
    "description": "Cube root.",
    "lineNumber": 2271,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sqrt(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sqrt(A)"
    },
    "params": []
  },
  {
    "__docId__": 958,
    "kind": "method",
    "name": "rsqrt",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#rsqrt",
    "access": "public",
    "description": "Reciprocal square root.",
    "lineNumber": 2281,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} rsqrt(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "rsqrt(A)"
    },
    "params": []
  },
  {
    "__docId__": 959,
    "kind": "method",
    "name": "log",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#log",
    "access": "public",
    "description": "Logarithmic function.",
    "lineNumber": 2291,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} log(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "log(A)"
    },
    "params": []
  },
  {
    "__docId__": 960,
    "kind": "method",
    "name": "exp",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#exp",
    "access": "public",
    "description": "Exponential function.",
    "lineNumber": 2301,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} exp(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "exp(A)"
    },
    "params": []
  },
  {
    "__docId__": 961,
    "kind": "method",
    "name": "expm1",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#expm1",
    "access": "public",
    "description": "e^x - 1",
    "lineNumber": 2311,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} expm1(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "expm1(A)"
    },
    "params": []
  },
  {
    "__docId__": 962,
    "kind": "method",
    "name": "log1p",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#log1p",
    "access": "public",
    "description": "ln(1 + x)",
    "lineNumber": 2321,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} log1p(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "log1p(A)"
    },
    "params": []
  },
  {
    "__docId__": 963,
    "kind": "method",
    "name": "log2",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#log2",
    "access": "public",
    "description": "log_2(x)",
    "lineNumber": 2331,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} log2(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "log2(A)"
    },
    "params": []
  },
  {
    "__docId__": 964,
    "kind": "method",
    "name": "log10",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#log10",
    "access": "public",
    "description": "log_10(x)",
    "lineNumber": 2341,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} log10(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "log10(A)"
    },
    "params": []
  },
  {
    "__docId__": 965,
    "kind": "method",
    "name": "sin",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sin",
    "access": "public",
    "description": "Sine function.",
    "lineNumber": 2355,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sin(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sin(A)"
    },
    "params": []
  },
  {
    "__docId__": 966,
    "kind": "method",
    "name": "cos",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#cos",
    "access": "public",
    "description": "Cosine function.",
    "lineNumber": 2365,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} cos(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "cos(A)"
    },
    "params": []
  },
  {
    "__docId__": 967,
    "kind": "method",
    "name": "tan",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#tan",
    "access": "public",
    "description": "Tangent function.",
    "lineNumber": 2375,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} tan(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "tan(A)"
    },
    "params": []
  },
  {
    "__docId__": 968,
    "kind": "method",
    "name": "atan",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#atan",
    "access": "public",
    "description": "Atan (arc tangent) function.\n- Return the values of [-PI/2, PI/2].",
    "lineNumber": 2386,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} atan(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "atan(A)"
    },
    "params": []
  },
  {
    "__docId__": 969,
    "kind": "method",
    "name": "atan2",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#atan2",
    "access": "public",
    "description": "Atan (arc tangent) function.\n- Return the values of [-PI, PI].\n- Supports only real numbers.",
    "lineNumber": 2399,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} atan2(Y, X)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "X"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "atan2(Y, X)"
    }
  },
  {
    "__docId__": 970,
    "kind": "method",
    "name": "asin",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#asin",
    "access": "public",
    "description": "Arc sine function.",
    "lineNumber": 2414,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} asin(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "asin(A)"
    },
    "params": []
  },
  {
    "__docId__": 971,
    "kind": "method",
    "name": "acos",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#acos",
    "access": "public",
    "description": "Arc cosine function.",
    "lineNumber": 2424,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} acos(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "acos(A)"
    },
    "params": []
  },
  {
    "__docId__": 972,
    "kind": "method",
    "name": "sinh",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sinh",
    "access": "public",
    "description": "Hyperbolic sine function.",
    "lineNumber": 2434,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sinh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sinh(A)"
    },
    "params": []
  },
  {
    "__docId__": 973,
    "kind": "method",
    "name": "asinh",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#asinh",
    "access": "public",
    "description": "Inverse hyperbolic sine function.",
    "lineNumber": 2444,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} asinh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "asinh(A)"
    },
    "params": []
  },
  {
    "__docId__": 974,
    "kind": "method",
    "name": "cosh",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#cosh",
    "access": "public",
    "description": "Hyperbolic cosine function.",
    "lineNumber": 2454,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} cosh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "cosh(A)"
    },
    "params": []
  },
  {
    "__docId__": 975,
    "kind": "method",
    "name": "acosh",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#acosh",
    "access": "public",
    "description": "Inverse hyperbolic cosine function.",
    "lineNumber": 2464,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} acosh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "acosh(A)"
    },
    "params": []
  },
  {
    "__docId__": 976,
    "kind": "method",
    "name": "tanh",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#tanh",
    "access": "public",
    "description": "Hyperbolic tangent function.",
    "lineNumber": 2474,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} tanh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "tanh(A)"
    },
    "params": []
  },
  {
    "__docId__": 977,
    "kind": "method",
    "name": "atanh",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#atanh",
    "access": "public",
    "description": "Inverse hyperbolic tangent function.",
    "lineNumber": 2484,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} atanh(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "atanh(A)"
    },
    "params": []
  },
  {
    "__docId__": 978,
    "kind": "method",
    "name": "sec",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sec",
    "access": "public",
    "description": "Secant function.",
    "lineNumber": 2494,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sec(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sec(A)"
    },
    "params": []
  },
  {
    "__docId__": 979,
    "kind": "method",
    "name": "asec",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#asec",
    "access": "public",
    "description": "Reverse secant function.",
    "lineNumber": 2504,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} asec(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "asec(A)"
    },
    "params": []
  },
  {
    "__docId__": 980,
    "kind": "method",
    "name": "sech",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sech",
    "access": "public",
    "description": "Hyperbolic secant function.",
    "lineNumber": 2514,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sech(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sech(A)"
    },
    "params": []
  },
  {
    "__docId__": 981,
    "kind": "method",
    "name": "asech",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#asech",
    "access": "public",
    "description": "Inverse hyperbolic secant function.",
    "lineNumber": 2524,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} asech(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "asech(A)"
    },
    "params": []
  },
  {
    "__docId__": 982,
    "kind": "method",
    "name": "cot",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#cot",
    "access": "public",
    "description": "Cotangent function.",
    "lineNumber": 2534,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} cot(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "cot(A)"
    },
    "params": []
  },
  {
    "__docId__": 983,
    "kind": "method",
    "name": "acot",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#acot",
    "access": "public",
    "description": "Inverse cotangent function.",
    "lineNumber": 2544,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} acot(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "acot(A)"
    },
    "params": []
  },
  {
    "__docId__": 984,
    "kind": "method",
    "name": "coth",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#coth",
    "access": "public",
    "description": "Hyperbolic cotangent function.",
    "lineNumber": 2554,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} coth(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "coth(A)"
    },
    "params": []
  },
  {
    "__docId__": 985,
    "kind": "method",
    "name": "acoth",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#acoth",
    "access": "public",
    "description": "Inverse hyperbolic cotangent function.",
    "lineNumber": 2564,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} acoth(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "acoth(A)"
    },
    "params": []
  },
  {
    "__docId__": 986,
    "kind": "method",
    "name": "csc",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#csc",
    "access": "public",
    "description": "Cosecant function.",
    "lineNumber": 2574,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} csc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "csc(A)"
    },
    "params": []
  },
  {
    "__docId__": 987,
    "kind": "method",
    "name": "acsc",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#acsc",
    "access": "public",
    "description": "Inverse cosecant function.",
    "lineNumber": 2584,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} acsc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "acsc(A)"
    },
    "params": []
  },
  {
    "__docId__": 988,
    "kind": "method",
    "name": "csch",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#csch",
    "access": "public",
    "description": "Hyperbolic cosecant function.",
    "lineNumber": 2594,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} csch(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "csch(A)"
    },
    "params": []
  },
  {
    "__docId__": 989,
    "kind": "method",
    "name": "acsch",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#acsch",
    "access": "public",
    "description": "Inverse hyperbolic cosecant function.",
    "lineNumber": 2604,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} acsch(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "acsch(A)"
    },
    "params": []
  },
  {
    "__docId__": 990,
    "kind": "method",
    "name": "sinc",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sinc",
    "access": "public",
    "description": "Normalized sinc function.",
    "lineNumber": 2618,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sinc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sinc(A)"
    },
    "params": []
  },
  {
    "__docId__": 991,
    "kind": "method",
    "name": "rand",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.rand",
    "access": "public",
    "description": "Generate a matrix composed of random values with uniform random numbers.",
    "lineNumber": 2635,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "Number of columns."
      },
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": true,
        "name": "random",
        "description": "Class for creating random numbers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 992,
    "kind": "method",
    "name": "randn",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.randn",
    "access": "public",
    "description": "Generate a matrix composed of random values with normal distribution.",
    "lineNumber": 2648,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "Number of columns."
      },
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": true,
        "name": "random",
        "description": "Class for creating random numbers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 993,
    "kind": "method",
    "name": "testInteger",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testInteger",
    "access": "public",
    "description": "Test if each element of the matrix is integer.\n- 1 if true, 0 if false.",
    "lineNumber": 2664,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 994,
    "kind": "method",
    "name": "testComplexInteger",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testComplexInteger",
    "access": "public",
    "description": "Test if each element of the matrix is complex integer.\n- 1 if true, 0 if false.",
    "lineNumber": 2676,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 995,
    "kind": "method",
    "name": "testZero",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testZero",
    "access": "public",
    "description": "real(this) === 0\n- 1 if true, 0 if false.",
    "lineNumber": 2688,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 996,
    "kind": "method",
    "name": "testOne",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testOne",
    "access": "public",
    "description": "real(this) === 1\n- 1 if true, 0 if false.",
    "lineNumber": 2700,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 997,
    "kind": "method",
    "name": "testComplex",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testComplex",
    "access": "public",
    "description": "Test if each element of the matrix is complex.\n- 1 if true, 0 if false.",
    "lineNumber": 2712,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 998,
    "kind": "method",
    "name": "testReal",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testReal",
    "access": "public",
    "description": "Test if each element of the matrix is real.\n- 1 if true, 0 if false.",
    "lineNumber": 2724,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 999,
    "kind": "method",
    "name": "testNaN",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testNaN",
    "access": "public",
    "description": "Test if each element of the matrix is NaN.\n- 1 if true, 0 if false.",
    "lineNumber": 2735,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 1000,
    "kind": "method",
    "name": "testPositive",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testPositive",
    "access": "public",
    "description": "real(this) > 0\n- 1 if true, 0 if false.",
    "lineNumber": 2746,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 1001,
    "kind": "method",
    "name": "testNegative",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testNegative",
    "access": "public",
    "description": "real(this) < 0\n- 1 if true, 0 if false.",
    "lineNumber": 2757,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 1002,
    "kind": "method",
    "name": "testNotNegative",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testNotNegative",
    "access": "public",
    "description": "real(this) >= 0\n- 1 if true, 0 if false.",
    "lineNumber": 2768,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 1003,
    "kind": "method",
    "name": "testPositiveInfinity",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testPositiveInfinity",
    "access": "public",
    "description": "Test if each element of the matrix is positive infinite.\n- 1 if true, 0 if false.",
    "lineNumber": 2779,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 1004,
    "kind": "method",
    "name": "testNegativeInfinity",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testNegativeInfinity",
    "access": "public",
    "description": "Test if each element of the matrix is negative infinite.\n- 1 if true, 0 if false.",
    "lineNumber": 2790,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 1005,
    "kind": "method",
    "name": "testInfinite",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testInfinite",
    "access": "public",
    "description": "Test if each element of the matrix is infinite.\n- 1 if true, 0 if false.",
    "lineNumber": 2801,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 1006,
    "kind": "method",
    "name": "testFinite",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testFinite",
    "access": "public",
    "description": "Test if each element of the matrix is finite.\n- 1 if true, 0 if false.",
    "lineNumber": 2812,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 1007,
    "kind": "method",
    "name": "_rot90",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_rot90",
    "access": "private",
    "description": "Rotate matrix 90 degrees clockwise. (mutable)",
    "lineNumber": 2831,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "rot_90_count",
        "description": "Number of times rotated by 90 degrees."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 1010,
    "kind": "method",
    "name": "rot90",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#rot90",
    "access": "public",
    "description": "Rotate matrix 90 degrees clockwise.",
    "lineNumber": 2898,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "rot_90_count",
        "description": "Number of times rotated by 90 degrees."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 1011,
    "kind": "method",
    "name": "_resize",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_resize",
    "access": "private",
    "description": "Change the size of the matrix. (mutable)\nInitialized with 0 when expanding.",
    "lineNumber": 2910,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "new_row_length",
        "description": "Number of rows of matrix to resize."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "new_column_length",
        "description": "Number of columns of matrix to resize."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 1014,
    "kind": "method",
    "name": "resize",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#resize",
    "access": "public",
    "description": "Change the size of the matrix.\nInitialized with 0 when expanding.",
    "lineNumber": 2955,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "row_length",
        "description": "Number of rows of matrix to resize."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "column_length",
        "description": "Number of columns of matrix to resize."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 1015,
    "kind": "method",
    "name": "_deleteRow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_deleteRow",
    "access": "private",
    "description": "Remove the row in this matrix. (mutable)",
    "lineNumber": 2965,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "delete_row_index",
        "description": "Number of row of matrix to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 1016,
    "kind": "method",
    "name": "_deleteColumn",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_deleteColumn",
    "access": "private",
    "description": "Remove the column in this matrix. (mutable)",
    "lineNumber": 2982,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "delete_column_index",
        "description": "Number of column of matrix to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 1017,
    "kind": "method",
    "name": "deleteRow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#deleteRow",
    "access": "public",
    "description": "Remove the row in this matrix.",
    "lineNumber": 3000,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "delete_row_index",
        "description": "Number of row of matrix to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 1018,
    "kind": "method",
    "name": "deleteColumn",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#deleteColumn",
    "access": "public",
    "description": "Remove the column in this matrix.",
    "lineNumber": 3009,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "delete_column_index",
        "description": "Number of column of matrix to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 1019,
    "kind": "method",
    "name": "_exchangeRow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_exchangeRow",
    "access": "private",
    "description": "Swap rows in the matrix. (mutable)",
    "lineNumber": 3020,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_row_index1",
        "description": "Number 1 of row of matrix to exchange."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_row_index2",
        "description": "Number 2 of row of matrix to exchange."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 1020,
    "kind": "method",
    "name": "_exchangeColumn",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_exchangeColumn",
    "access": "private",
    "description": "Swap columns in the matrix. (mutable)",
    "lineNumber": 3043,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_column_index1",
        "description": "Number 1 of column of matrix to exchange."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_column_index2",
        "description": "Number 2 of column of matrix to exchange."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 1021,
    "kind": "method",
    "name": "exchangeRow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#exchangeRow",
    "access": "public",
    "description": "Swap rows in the matrix.",
    "lineNumber": 3067,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_row_index1",
        "description": "Number 1 of row of matrix to exchange."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_row_index2",
        "description": "Number 2 of row of matrix to exchange."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 1022,
    "kind": "method",
    "name": "exchangeColumn",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#exchangeColumn",
    "access": "public",
    "description": "Swap columns in the matrix.",
    "lineNumber": 3077,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_column_index1",
        "description": "Number 1 of column of matrix to exchange."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_column_index2",
        "description": "Number 2 of column of matrix to exchange."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 1023,
    "kind": "method",
    "name": "_concatRight",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_concatRight",
    "access": "private",
    "description": "Combine matrix to the right of this matrix. (mutable)",
    "lineNumber": 3087,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "left_matrix",
        "description": "Matrix to combine."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 1025,
    "kind": "method",
    "name": "_concatBottom",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#_concatBottom",
    "access": "private",
    "description": "Combine matrix to the bottom of this matrix. (mutable)",
    "lineNumber": 3108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "bottom_matrix",
        "description": "Matrix to combine."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 1027,
    "kind": "method",
    "name": "concatRight",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#concatRight",
    "access": "public",
    "description": "Combine matrix to the right of this matrix.",
    "lineNumber": 3126,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "left_matrix",
        "description": "Matrix to combine."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 1028,
    "kind": "method",
    "name": "concatBottom",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#concatBottom",
    "access": "public",
    "description": "Combine matrix to the bottom of this matrix.",
    "lineNumber": 3135,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "bottom_matrix",
        "description": "Matrix to combine."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 1029,
    "kind": "method",
    "name": "clip",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#clip",
    "access": "public",
    "description": "Clip each element of matrix to specified range.",
    "lineNumber": 3145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} min(max(x, min), max)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "min(max(x, min), max)"
    }
  },
  {
    "__docId__": 1030,
    "kind": "method",
    "name": "arange",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.arange",
    "access": "public",
    "description": "Create row vector with specified initial value, step value, end condition.",
    "lineNumber": 3166,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "start_or_stop",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "stop",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "step",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1031,
    "kind": "method",
    "name": "circshift",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#circshift",
    "access": "public",
    "description": "Circular shift.",
    "lineNumber": 3179,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "shift_size",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 1032,
    "kind": "method",
    "name": "roll",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#roll",
    "access": "public",
    "description": "Circular shift.",
    "lineNumber": 3206,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "shift_size",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 1033,
    "kind": "method",
    "name": "reshape",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#reshape",
    "access": "public",
    "description": "Change the shape of the matrix.\nThe number of elements in the matrix doesn't increase or decrease.",
    "lineNumber": 3217,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "row_length",
        "description": "Number of rows of matrix to reshape."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "column_length",
        "description": "Number of columns of matrix to reshape."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 1034,
    "kind": "method",
    "name": "fliplr",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#fliplr",
    "access": "public",
    "description": "Flip this matrix left and right.",
    "lineNumber": 3247,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    },
    "params": []
  },
  {
    "__docId__": 1035,
    "kind": "method",
    "name": "flipud",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#flipud",
    "access": "public",
    "description": "Flip this matrix up and down.",
    "lineNumber": 3255,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    },
    "params": []
  },
  {
    "__docId__": 1036,
    "kind": "method",
    "name": "flip",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#flip",
    "access": "public",
    "description": "Flip this matrix.",
    "lineNumber": 3264,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 1037,
    "kind": "method",
    "name": "indexsort",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#indexsort",
    "access": "public",
    "description": "Index sort.\n- Sorts by row when setting index by row vector to the argument.\n- Sorts by column when setting index by column vector to the argument.",
    "lineNumber": 3287,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "Vector with index. (See the description of this function)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 1038,
    "kind": "method",
    "name": "transpose",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#transpose",
    "access": "public",
    "description": "Transpose a matrix.",
    "lineNumber": 3391,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^T"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^T"
    },
    "params": []
  },
  {
    "__docId__": 1039,
    "kind": "method",
    "name": "ctranspose",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#ctranspose",
    "access": "public",
    "description": "Hermitian transpose.",
    "lineNumber": 3406,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^T"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^T"
    },
    "params": []
  },
  {
    "__docId__": 1040,
    "kind": "method",
    "name": "T",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#T",
    "access": "public",
    "description": "Hermitian transpose.",
    "lineNumber": 3414,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^T"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^T"
    },
    "params": []
  },
  {
    "__docId__": 1041,
    "kind": "method",
    "name": "inner",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#inner",
    "access": "public",
    "description": "Inner product/Dot product.",
    "lineNumber": 3424,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A・B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "dimension",
        "description": "Dimension of matrix used for calculation. (1 or 2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A・B"
    }
  },
  {
    "__docId__": 1042,
    "kind": "method",
    "name": "lup",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#lup",
    "access": "public",
    "description": "LUP decomposition.\n- P'*L*U=A\n- P is permutation matrix.\n- L is lower triangular matrix.\n- U is upper triangular matrix.",
    "lineNumber": 3436,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, L: Matrix, U: Matrix}} {L, U, P}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, L: Matrix, U: Matrix}"
      ],
      "spread": false,
      "description": "{L, U, P}"
    },
    "params": []
  },
  {
    "__docId__": 1043,
    "kind": "method",
    "name": "lu",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#lu",
    "access": "public",
    "description": "LU decomposition.\n- L*U=A\n- L is lower triangular matrix.\n- U is upper triangular matrix.",
    "lineNumber": 3447,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{L: Matrix, U: Matrix}} {L, U}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{L: Matrix, U: Matrix}"
      ],
      "spread": false,
      "description": "{L, U}"
    },
    "params": []
  },
  {
    "__docId__": 1044,
    "kind": "method",
    "name": "linsolve",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#linsolve",
    "access": "public",
    "description": "Solving a system of linear equations to be Ax = B",
    "lineNumber": 3456,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} x"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "B"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "x"
    }
  },
  {
    "__docId__": 1045,
    "kind": "method",
    "name": "qr",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#qr",
    "access": "public",
    "description": "QR decomposition.\n- Q*R=A\n- Q is orthonormal matrix.\n- R is upper triangular matrix.",
    "lineNumber": 3467,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{Q: Matrix, R: Matrix}} {Q, R}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{Q: Matrix, R: Matrix}"
      ],
      "spread": false,
      "description": "{Q, R}"
    },
    "params": []
  },
  {
    "__docId__": 1046,
    "kind": "method",
    "name": "tridiagonalize",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#tridiagonalize",
    "access": "public",
    "description": "Tridiagonalization of symmetric matrix.\n- Don't support complex numbers.\n- P*H*P'=A\n- P is orthonormal matrix.\n- H is tridiagonal matrix.\n- The eigenvalues of H match the eigenvalues of A.",
    "lineNumber": 3480,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, H: Matrix}} {P, H}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, H: Matrix}"
      ],
      "spread": false,
      "description": "{P, H}"
    },
    "params": []
  },
  {
    "__docId__": 1047,
    "kind": "method",
    "name": "eig",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#eig",
    "access": "public",
    "description": "Eigendecomposition of symmetric matrix.\n- Don't support complex numbers.\n- V*D*V'=A.\n- V is orthonormal matrix. and columns of V are the right eigenvectors.\n- D is a matrix containing the eigenvalues on the diagonal component.",
    "lineNumber": 3492,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{V: Matrix, D: Matrix}} {D, V}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{V: Matrix, D: Matrix}"
      ],
      "spread": false,
      "description": "{D, V}"
    },
    "params": []
  },
  {
    "__docId__": 1048,
    "kind": "method",
    "name": "svd",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#svd",
    "access": "public",
    "description": "Singular Value Decomposition (SVD).\n- U*S*V'=A\n- U and V are orthonormal matrices.\n- S is a matrix with singular values in the diagonal.",
    "lineNumber": 3503,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{U: Matrix, S: Matrix, V: Matrix}} U*S*V'=A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{U: Matrix, S: Matrix, V: Matrix}"
      ],
      "spread": false,
      "description": "U*S*V'=A"
    },
    "params": []
  },
  {
    "__docId__": 1049,
    "kind": "method",
    "name": "pinv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#pinv",
    "access": "public",
    "description": "Pseudo-inverse matrix.",
    "lineNumber": 3511,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^+"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^+"
    },
    "params": []
  },
  {
    "__docId__": 1050,
    "kind": "method",
    "name": "gammaln",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#gammaln",
    "access": "public",
    "description": "Log-gamma function.\n- Calculate from real values.",
    "lineNumber": 3524,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1051,
    "kind": "method",
    "name": "gamma",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#gamma",
    "access": "public",
    "description": "Gamma function.\n- Calculate from real values.",
    "lineNumber": 3535,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1052,
    "kind": "method",
    "name": "gammainc",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#gammainc",
    "access": "public",
    "description": "Incomplete gamma function.\n- Calculate from real values.",
    "lineNumber": 3548,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1053,
    "kind": "method",
    "name": "gampdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#gampdf",
    "access": "public",
    "description": "Probability density function (PDF) of the gamma distribution.\n- Calculate from real values.",
    "lineNumber": 3562,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1054,
    "kind": "method",
    "name": "gamcdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#gamcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of gamma distribution.\n- Calculate from real values.",
    "lineNumber": 3577,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1055,
    "kind": "method",
    "name": "gaminv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#gaminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of gamma distribution.\n- Calculate from real values.",
    "lineNumber": 3592,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1056,
    "kind": "method",
    "name": "beta",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#beta",
    "access": "public",
    "description": "Beta function.\n- Calculate from real values.",
    "lineNumber": 3606,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1057,
    "kind": "method",
    "name": "betainc",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#betainc",
    "access": "public",
    "description": "Incomplete beta function.\n- Calculate from real values.",
    "lineNumber": 3621,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1058,
    "kind": "method",
    "name": "betacdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#betacdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of beta distribution.\n- Calculate from real values.",
    "lineNumber": 3636,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1059,
    "kind": "method",
    "name": "betapdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#betapdf",
    "access": "public",
    "description": "Probability density function (PDF) of beta distribution.\n- Calculate from real values.",
    "lineNumber": 3651,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1060,
    "kind": "method",
    "name": "betainv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#betainv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of beta distribution.\n- Calculate from real values.",
    "lineNumber": 3666,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1061,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#factorial",
    "access": "public",
    "description": "Factorial function, x!.\n- Calculate from real values.",
    "lineNumber": 3679,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1062,
    "kind": "method",
    "name": "nchoosek",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#nchoosek",
    "access": "public",
    "description": "Binomial coefficient, number of all combinations, nCk.\n- Calculate from real values.",
    "lineNumber": 3691,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1063,
    "kind": "method",
    "name": "erf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#erf",
    "access": "public",
    "description": "Error function.\n- Calculate from real values.",
    "lineNumber": 3703,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1064,
    "kind": "method",
    "name": "erfc",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#erfc",
    "access": "public",
    "description": "Complementary error function.\n- Calculate from real values.",
    "lineNumber": 3714,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1065,
    "kind": "method",
    "name": "erfinv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#erfinv",
    "access": "public",
    "description": "Inverse function of Error function.\n- Calculate from real values.",
    "lineNumber": 3725,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1066,
    "kind": "method",
    "name": "erfcinv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#erfcinv",
    "access": "public",
    "description": "Inverse function of Complementary error function.\n- Calculate from real values.",
    "lineNumber": 3736,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1067,
    "kind": "method",
    "name": "normpdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#normpdf",
    "access": "public",
    "description": "Probability density function (PDF) of normal distribution.\n- Calculate from real values.",
    "lineNumber": 3749,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1068,
    "kind": "method",
    "name": "normcdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#normcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of normal distribution.\n- Calculate from real values.",
    "lineNumber": 3764,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1069,
    "kind": "method",
    "name": "norminv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#norminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of normal distribution.\n- Calculate from real values.",
    "lineNumber": 3779,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1070,
    "kind": "method",
    "name": "binopdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#binopdf",
    "access": "public",
    "description": "Probability density function (PDF) of binomial distribution.\n- Calculate from real values.",
    "lineNumber": 3794,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1071,
    "kind": "method",
    "name": "binocdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#binocdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of binomial distribution.\n- Calculate from real values.",
    "lineNumber": 3810,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1072,
    "kind": "method",
    "name": "binoinv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#binoinv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of binomial distribution.\n- Calculate from real values.",
    "lineNumber": 3825,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1073,
    "kind": "method",
    "name": "poisspdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#poisspdf",
    "access": "public",
    "description": "Probability density function (PDF) of Poisson distribution.\n- Calculate from real values.",
    "lineNumber": 3839,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1074,
    "kind": "method",
    "name": "poisscdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#poisscdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Poisson distribution.\n- Calculate from real values.",
    "lineNumber": 3852,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1075,
    "kind": "method",
    "name": "poissinv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#poissinv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of Poisson distribution.\n- Calculate from real values.",
    "lineNumber": 3865,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1076,
    "kind": "method",
    "name": "tpdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#tpdf",
    "access": "public",
    "description": "Probability density function (PDF) of Student's t-distribution.\n- Calculate from real values.",
    "lineNumber": 3878,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1077,
    "kind": "method",
    "name": "tcdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#tcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution.\n- Calculate from real values.",
    "lineNumber": 3891,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1078,
    "kind": "method",
    "name": "tinv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#tinv",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution.\n- Calculate from real values.",
    "lineNumber": 3904,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1079,
    "kind": "method",
    "name": "tdist",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#tdist",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.\n- Calculate from real values.",
    "lineNumber": 3918,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "tails",
        "description": "Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1080,
    "kind": "method",
    "name": "tinv2",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#tinv2",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.\n- Calculate from real values.",
    "lineNumber": 3932,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1081,
    "kind": "method",
    "name": "chi2pdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#chi2pdf",
    "access": "public",
    "description": "Probability density function (PDF) of chi-square distribution.\n- Calculate from real values.",
    "lineNumber": 3945,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1082,
    "kind": "method",
    "name": "chi2cdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#chi2cdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of chi-square distribution.\n- Calculate from real values.",
    "lineNumber": 3958,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1083,
    "kind": "method",
    "name": "chi2inv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#chi2inv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of chi-square distribution.\n- Calculate from real values.",
    "lineNumber": 3971,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1084,
    "kind": "method",
    "name": "fpdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#fpdf",
    "access": "public",
    "description": "Probability density function (PDF) of F-distribution.\n- Calculate from real values.",
    "lineNumber": 3985,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1085,
    "kind": "method",
    "name": "fcdf",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#fcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of F-distribution.\n- Calculate from real values.",
    "lineNumber": 4000,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1086,
    "kind": "method",
    "name": "finv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#finv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of F-distribution.\n- Calculate from real values.",
    "lineNumber": 4015,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1087,
    "kind": "method",
    "name": "and",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#and",
    "access": "public",
    "description": "Logical AND.\n- Calculated as an integer.",
    "lineNumber": 4033,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A & B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A & B"
    }
  },
  {
    "__docId__": 1088,
    "kind": "method",
    "name": "or",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#or",
    "access": "public",
    "description": "Logical OR.\n- Calculated as an integer.",
    "lineNumber": 4045,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A | B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A | B"
    }
  },
  {
    "__docId__": 1089,
    "kind": "method",
    "name": "xor",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#xor",
    "access": "public",
    "description": "Logical Exclusive-OR.\n- Calculated as an integer.",
    "lineNumber": 4057,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A ^ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A ^ B"
    }
  },
  {
    "__docId__": 1090,
    "kind": "method",
    "name": "not",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#not",
    "access": "public",
    "description": "Logical Not. (mutable)\n- Calculated as an integer.",
    "lineNumber": 4068,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} !A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "!A"
    },
    "params": []
  },
  {
    "__docId__": 1091,
    "kind": "method",
    "name": "shift",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#shift",
    "access": "public",
    "description": "this << n\n- Calculated as an integer.",
    "lineNumber": 4080,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A << n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A << n"
    }
  },
  {
    "__docId__": 1092,
    "kind": "method",
    "name": "gcd",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#gcd",
    "access": "public",
    "description": "Euclidean algorithm.\n- Calculated as an integer.",
    "lineNumber": 4096,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} gcd(x, y)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "gcd(x, y)"
    }
  },
  {
    "__docId__": 1093,
    "kind": "method",
    "name": "extgcd",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#extgcd",
    "access": "public",
    "description": "Extended Euclidean algorithm.\n- Calculated as an integer.",
    "lineNumber": 4108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Matrix>} [a, b, gcd(x, y)], Result of calculating a*x + b*y = gcd(x, y)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Matrix>"
      ],
      "spread": false,
      "description": "[a, b, gcd(x, y)], Result of calculating a*x + b*y = gcd(x, y)."
    }
  },
  {
    "__docId__": 1094,
    "kind": "method",
    "name": "lcm",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#lcm",
    "access": "public",
    "description": "Least common multiple.\n- Calculated as an integer.",
    "lineNumber": 4124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} lcm(x, y)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "lcm(x, y)"
    }
  },
  {
    "__docId__": 1095,
    "kind": "method",
    "name": "modPow",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#modPow",
    "access": "public",
    "description": "Modular exponentiation.\n- Calculated as an integer.",
    "lineNumber": 4141,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^B mod m"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "exponent",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^B mod m"
    }
  },
  {
    "__docId__": 1096,
    "kind": "method",
    "name": "modInverse",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#modInverse",
    "access": "public",
    "description": "Modular multiplicative inverse.\n- Calculated as an integer.",
    "lineNumber": 4153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^(-1) mod m"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^(-1) mod m"
    }
  },
  {
    "__docId__": 1097,
    "kind": "method",
    "name": "testPrime",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testPrime",
    "access": "public",
    "description": "Test if each element of the matrix is prime number.\n- 1 if true, 0 if false.\n- Calculated as an integer.\n- Calculate up to `2251799813685248(=2^51)`.",
    "lineNumber": 4170,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 1098,
    "kind": "method",
    "name": "testProbablePrime",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#testProbablePrime",
    "access": "public",
    "description": "Test if each element of the matrix is prime number by Miller-Labin prime number determination method.\n- 1 if true, 0 if false.\nAttention : it takes a very long time to process.\n- Calculated as an integer.",
    "lineNumber": 4184,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "certainty",
        "description": "Repeat count (prime precision)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 1099,
    "kind": "method",
    "name": "nextProbablePrime",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#nextProbablePrime",
    "access": "public",
    "description": "Next prime.",
    "lineNumber": 4197,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "certainty",
        "description": "Repeat count (prime precision)."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100000",
        "defaultRaw": 100000,
        "name": "search_max",
        "description": "Search range of next prime."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1100,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#max",
    "access": "public",
    "description": "Maximum number.",
    "lineNumber": 4214,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 1101,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#min",
    "access": "public",
    "description": "Minimum number.",
    "lineNumber": 4223,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 1102,
    "kind": "method",
    "name": "sum",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sum",
    "access": "public",
    "description": "Sum.",
    "lineNumber": 4232,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1103,
    "kind": "method",
    "name": "mean",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#mean",
    "access": "public",
    "description": "Arithmetic average.",
    "lineNumber": 4241,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1104,
    "kind": "method",
    "name": "prod",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#prod",
    "access": "public",
    "description": "Product of array elements.",
    "lineNumber": 4250,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1105,
    "kind": "method",
    "name": "geomean",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#geomean",
    "access": "public",
    "description": "Geometric mean.",
    "lineNumber": 4259,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1106,
    "kind": "method",
    "name": "median",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#median",
    "access": "public",
    "description": "Median.",
    "lineNumber": 4268,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1107,
    "kind": "method",
    "name": "mode",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#mode",
    "access": "public",
    "description": "Mode.",
    "lineNumber": 4277,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1108,
    "kind": "method",
    "name": "moment",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#moment",
    "access": "public",
    "description": "Moment.\n- Moment of order n. Equivalent to the definition of variance at 2.",
    "lineNumber": 4288,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nth_order",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1109,
    "kind": "method",
    "name": "var",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#var",
    "access": "public",
    "description": "Variance.",
    "lineNumber": 4297,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1110,
    "kind": "method",
    "name": "std",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#std",
    "access": "public",
    "description": "Standard deviation.",
    "lineNumber": 4306,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1111,
    "kind": "method",
    "name": "mad",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#mad",
    "access": "public",
    "description": "Mean absolute deviation.\n- The \"algorithm\" can choose \"0/mean\"(default) and \"1/median\".",
    "lineNumber": 4317,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "string",
          "?number"
        ],
        "spread": false,
        "optional": true,
        "name": "algorithm",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1112,
    "kind": "method",
    "name": "skewness",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#skewness",
    "access": "public",
    "description": "Skewness.",
    "lineNumber": 4326,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1113,
    "kind": "method",
    "name": "cov",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#cov",
    "access": "public",
    "description": "Covariance matrix or Covariance value.\n- Get a variance-covariance matrix from 1 matrix.\n- Get a covariance from 2 vectors.",
    "lineNumber": 4338,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings",
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "y_or_type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1114,
    "kind": "method",
    "name": "standardization",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#standardization",
    "access": "public",
    "description": "The samples are standardize to a mean value of 0, standard deviation of 1.",
    "lineNumber": 4347,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1115,
    "kind": "method",
    "name": "corrcoef",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#corrcoef",
    "access": "public",
    "description": "Correlation matrix or Correlation coefficient.\n- Get a correlation matrix from 1 matrix.\n- Get a correlation coefficient from 2 vectors.",
    "lineNumber": 4359,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings",
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "y_or_type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1116,
    "kind": "method",
    "name": "sort",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#sort",
    "access": "public",
    "description": "Sort.\n- The \"order\" can choose \"ascend\"(default) and \"descend\".",
    "lineNumber": 4370,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "order",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1117,
    "kind": "method",
    "name": "fft",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#fft",
    "access": "public",
    "description": "Discrete Fourier transform (DFT).",
    "lineNumber": 4383,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} fft(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "fft(x)"
    }
  },
  {
    "__docId__": 1118,
    "kind": "method",
    "name": "ifft",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#ifft",
    "access": "public",
    "description": "Inverse discrete Fourier transform (IDFT).",
    "lineNumber": 4392,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} ifft(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "ifft(x)"
    }
  },
  {
    "__docId__": 1119,
    "kind": "method",
    "name": "powerfft",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#powerfft",
    "access": "public",
    "description": "Power spectral density.",
    "lineNumber": 4401,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} abs(fft(x)).^2"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "abs(fft(x)).^2"
    }
  },
  {
    "__docId__": 1120,
    "kind": "method",
    "name": "dct",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#dct",
    "access": "public",
    "description": "Discrete cosine transform (DCT-II, DCT).",
    "lineNumber": 4410,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} dct(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "dct(x)"
    }
  },
  {
    "__docId__": 1121,
    "kind": "method",
    "name": "idct",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#idct",
    "access": "public",
    "description": "Inverse discrete cosine transform (DCT-III, IDCT).",
    "lineNumber": 4419,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} idct(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "idct(x)"
    }
  },
  {
    "__docId__": 1122,
    "kind": "method",
    "name": "fft2",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#fft2",
    "access": "public",
    "description": "Discrete two-dimensional Fourier transform (2D DFT).",
    "lineNumber": 4427,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1123,
    "kind": "method",
    "name": "ifft2",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#ifft2",
    "access": "public",
    "description": "Inverse discrete two-dimensional Fourier transform (2D IDFT).",
    "lineNumber": 4435,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1124,
    "kind": "method",
    "name": "dct2",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#dct2",
    "access": "public",
    "description": "Discrete two-dimensional cosine transform (2D DCT).",
    "lineNumber": 4443,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1125,
    "kind": "method",
    "name": "idct2",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#idct2",
    "access": "public",
    "description": "Inverse discrete two-dimensional cosine transform (2D IDCT).",
    "lineNumber": 4451,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1126,
    "kind": "method",
    "name": "conv",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#conv",
    "access": "public",
    "description": "Convolution integral, Polynomial multiplication.",
    "lineNumber": 4460,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1127,
    "kind": "method",
    "name": "xcorr",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#xcorr",
    "access": "public",
    "description": "ACF(Autocorrelation function), cros-correlation function.\n- If the argument is omitted, it is calculated by the autocorrelation function.",
    "lineNumber": 4470,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "number",
        "description": "Matrix to calculate the correlation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1128,
    "kind": "method",
    "name": "window",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.window",
    "access": "public",
    "description": "Create window function for signal processing.\nThe following window functions are available.\n- \"rectangle\": Rectangular window\n- \"hann\": Hann/Hanning window.\n- \"hamming\": Hamming window.\n- \"blackman\": Blackman window.\n- \"blackmanharris\": Blackman-Harris window.\n- \"blackmannuttall\": Blackman-Nuttall window.\n- \"flattop\": Flat top window.\n- \"sin\", Half cycle sine window.\n- \"vorbis\", Vorbis window.",
    "lineNumber": 4491,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Column vector."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Window function name."
      },
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Window length"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\" (default) , 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Column vector."
    }
  },
  {
    "__docId__": 1129,
    "kind": "method",
    "name": "hann",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.hann",
    "access": "public",
    "description": "Hann (Hanning) window.",
    "lineNumber": 4501,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Column vector."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Window length"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\" (default) , 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Column vector."
    }
  },
  {
    "__docId__": 1130,
    "kind": "method",
    "name": "hamming",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.hamming",
    "access": "public",
    "description": "Hamming window.",
    "lineNumber": 4511,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Column vector."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Window length"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\" (default) , 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Column vector."
    }
  },
  {
    "__docId__": 1131,
    "kind": "method",
    "name": "fftshift",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#fftshift",
    "access": "public",
    "description": "FFT shift.\nCircular shift beginning at the center of the signal.",
    "lineNumber": 4521,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1132,
    "kind": "get",
    "name": "ONE",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.ONE",
    "access": "public",
    "description": "1",
    "lineNumber": 4533,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1133,
    "kind": "get",
    "name": "TWO",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.TWO",
    "access": "public",
    "description": "2",
    "lineNumber": 4541,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "2"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1134,
    "kind": "get",
    "name": "TEN",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.TEN",
    "access": "public",
    "description": "10",
    "lineNumber": 4549,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 10"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "10"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1135,
    "kind": "get",
    "name": "ZERO",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.ZERO",
    "access": "public",
    "description": "0",
    "lineNumber": 4557,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "0"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1136,
    "kind": "get",
    "name": "MINUS_ONE",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.MINUS_ONE",
    "access": "public",
    "description": "-1",
    "lineNumber": 4565,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} -1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1137,
    "kind": "get",
    "name": "I",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.I",
    "access": "public",
    "description": "i, j",
    "lineNumber": 4573,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} i"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "i"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1138,
    "kind": "get",
    "name": "PI",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.PI",
    "access": "public",
    "description": "PI.",
    "lineNumber": 4581,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 3.14..."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "3.14..."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1139,
    "kind": "get",
    "name": "QUARTER_PI",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.QUARTER_PI",
    "access": "public",
    "description": "0.25 * PI.",
    "lineNumber": 4589,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 0.78..."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "0.78..."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1140,
    "kind": "get",
    "name": "HALF_PI",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.HALF_PI",
    "access": "public",
    "description": "0.5 * PI.",
    "lineNumber": 4597,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1.57..."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1.57..."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1141,
    "kind": "get",
    "name": "TWO_PI",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.TWO_PI",
    "access": "public",
    "description": "2 * PI.",
    "lineNumber": 4605,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 6.28..."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "6.28..."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1142,
    "kind": "get",
    "name": "E",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.E",
    "access": "public",
    "description": "E, Napier's constant.",
    "lineNumber": 4613,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 2.71..."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "2.71..."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1143,
    "kind": "get",
    "name": "LN2",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.LN2",
    "access": "public",
    "description": "log_e(2)",
    "lineNumber": 4621,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} ln(2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "ln(2)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1144,
    "kind": "get",
    "name": "LN10",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.LN10",
    "access": "public",
    "description": "log_e(10)",
    "lineNumber": 4629,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} ln(10)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "ln(10)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1145,
    "kind": "get",
    "name": "LOG2E",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.LOG2E",
    "access": "public",
    "description": "log_2(e)",
    "lineNumber": 4637,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} log_2(e)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "log_2(e)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1146,
    "kind": "get",
    "name": "LOG10E",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.LOG10E",
    "access": "public",
    "description": "log_10(e)",
    "lineNumber": 4645,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} log_10(e)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "log_10(e)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1147,
    "kind": "get",
    "name": "SQRT2",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.SQRT2",
    "access": "public",
    "description": "sqrt(2)",
    "lineNumber": 4653,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sqrt(2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sqrt(2)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1148,
    "kind": "get",
    "name": "SQRT1_2",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.SQRT1_2",
    "access": "public",
    "description": "sqrt(0.5)",
    "lineNumber": 4661,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sqrt(0.5)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sqrt(0.5)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1149,
    "kind": "get",
    "name": "HALF",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.HALF",
    "access": "public",
    "description": "0.5",
    "lineNumber": 4669,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 0.5"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "0.5"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1150,
    "kind": "get",
    "name": "POSITIVE_INFINITY",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.POSITIVE_INFINITY",
    "access": "public",
    "description": "Positive infinity.",
    "lineNumber": 4677,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Infinity"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Infinity"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1151,
    "kind": "get",
    "name": "NEGATIVE_INFINITY",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.NEGATIVE_INFINITY",
    "access": "public",
    "description": "Negative Infinity.",
    "lineNumber": 4685,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} -Infinity"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Infinity"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1152,
    "kind": "get",
    "name": "NaN",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/Matrix.js~Matrix.NaN",
    "access": "public",
    "description": "Not a Number.",
    "lineNumber": 4693,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} NaN"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "NaN"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1153,
    "kind": "method",
    "name": "signum",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#signum",
    "access": "public",
    "description": "The positive or negative sign of this number.\n- +1 if positive, -1 if negative, 0 if 0.",
    "lineNumber": 4706,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1154,
    "kind": "method",
    "name": "subtract",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#subtract",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 4715,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 1155,
    "kind": "method",
    "name": "multiply",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#multiply",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 4724,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 1156,
    "kind": "method",
    "name": "divide",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#divide",
    "access": "public",
    "description": "Divide.",
    "lineNumber": 4733,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} fix(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "fix(A / B)"
    }
  },
  {
    "__docId__": 1157,
    "kind": "method",
    "name": "remainder",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#remainder",
    "access": "public",
    "description": "Remainder of division.\n- Result has same sign as the Dividend.",
    "lineNumber": 4743,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A % B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A % B"
    }
  },
  {
    "__docId__": 1158,
    "kind": "method",
    "name": "trunc",
    "memberof": "src/math/core/Matrix.js~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/Matrix.js~Matrix#trunc",
    "access": "public",
    "description": "To integer rounded down to the nearest.",
    "lineNumber": 4751,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} fix(A), trunc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "fix(A), trunc(A)"
    },
    "params": []
  },
  {
    "__docId__": 1159,
    "kind": "file",
    "name": "src/math/core/tools/LinearAlgebra.js",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Polyfill from \"../../tools/Polyfill.js\";\nimport Random from \"./Random.js\";\nimport Complex from \"../Complex.js\";\nimport Matrix from \"../Matrix.js\";\n\n/**\n * Collection of functions for linear algebra.\n * @ignore\n */\nclass LinearAlgebraTool {\n\n\t/**\n\t * Tridiagonalization of symmetric matrix.\n\t * - Don't support complex numbers.\n\t * - P*H*P'=A\n\t * - P is orthonormal matrix.\n\t * - H is tridiagonal matrix.\n\t * - The eigenvalues of H match the eigenvalues of A.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @returns {{P: Matrix, H: Matrix}}\n\t */\n\tstatic tridiagonalize(mat) {\n\n\t\tconst A = Matrix._toMatrix(mat);\n\t\tconst a = A.getNumberMatrixArray();\n\t\tconst tolerance_ = 1.0e-10;\n\n\t\t// 参考：奥村晴彦 (1991). C言語による最新アルゴリズム事典.\n\t\t// 3重対角化の成分を取得する\n\t\t\n\t\t/**\n\t\t * Inner product of vector x1 and vector x2.\n\t\t * @param {Array<number>} x1\n\t\t * @param {Array<number>} x2\n\t\t * @param {number} [index_offset=0] - Offset of the position of the vector to be calculated.\n\t\t * @param {number} [index_max=x1.length] - Maximum value of position of vector to be calculated (do not include this value).\n\t\t * @returns {number} \n\t\t */\n\t\tconst innerproduct = function(x1, x2, index_offset, index_max) {\n\t\t\tlet y = 0;\n\t\t\tconst ioffset = index_offset ? index_offset : 0;\n\t\t\tconst imax = index_max ? index_max : x1.length;\n\t\t\tfor(let i = ioffset; i < imax; i++) {\n\t\t\t\ty += x1[i] * x2[i];\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\n\t\t/**\n\t\t * Householder transformation.\n\t\t * @param {Array<number>} x\n\t\t * @param {number} [index_offset=0] - Offset of the position of the vector to be calculated.\n\t\t * @param {number} [index_max=x.length] - Maximum value of position of vector to be calculated (do not include this value).\n\t\t * @returns {{y1: number, v: Array<number>}} \n\t\t */\n\t\tconst house = function(x, index_offset, index_max) {\n\t\t\tconst ioffset = index_offset ? index_offset : 0;\n\t\t\tconst imax = index_max ? index_max : x.length;\n\t\t\t// xの内積の平方根（ノルム）を計算\n\t\t\tlet y1 = Math.sqrt(innerproduct(x, x, ioffset, imax));\n\t\t\tconst v = [];\n\t\t\tif(Math.abs(y1) >= tolerance_) {\n\t\t\t\tif(x[ioffset] < 0) {\n\t\t\t\t\ty1 = - y1;\n\t\t\t\t}\n\t\t\t\tlet t;\n\t\t\t\tfor(let i = ioffset, j = 0; i < imax; i++, j++) {\n\t\t\t\t\tif(i === ioffset) {\n\t\t\t\t\t\tv[j] = x[i] + y1;\n\t\t\t\t\t\tt = 1.0 / Math.sqrt(v[j] * y1);\n\t\t\t\t\t\tv[j] = v[j] * t;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tv[j] = x[i] * t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\ty1: - y1,\t// 鏡像の1番目の要素(y2,y3,...は0)\n\t\t\t\tv : v\t\t// 直行する単位ベクトル vT*v = 2\n\t\t\t};\n\t\t};\n\n\t\tconst n = a.length;\n\n\t\t/**\n\t\t * @type {Array<number>}\n\t\t */\n\t\tconst d = []; // 対角成分\n\t\t\n\t\t/**\n\t\t * @type {Array<number>}\n\t\t */\n\t\tconst e = []; // 隣の成分\n\t\t{\n\t\t\tfor(let k = 0; k < n - 2; k++) {\n\t\t\t\tconst v = a[k];\n\t\t\t\td[k] = v[k];\n\t\t\t\t{\n\t\t\t\t\tconst H = house(v, k + 1, n);\n\t\t\t\t\te[k] = H.y1;\n\t\t\t\t\tfor(let i = 0; i < H.v.length; i++) {\n\t\t\t\t\t\tv[k + 1 + i] = H.v[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(Math.abs(e[k]) < tolerance_) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor(let i = k + 1; i < n; i++) {\n\t\t\t\t\tlet s = 0;\n\t\t\t\t\tfor(let j = k + 1; j < i; j++) {\n\t\t\t\t\t\ts += a[j][i] * v[j];\n\t\t\t\t\t}\n\t\t\t\t\tfor(let j = i; j < n; j++) {\n\t\t\t\t\t\ts += a[i][j] * v[j];\n\t\t\t\t\t}\n\t\t\t\t\td[i] = s;\n\t\t\t\t}\n\t\t\t\tconst t = innerproduct(v, d, k + 1, n) / 2.0;\n\t\t\t\tfor(let i = n - 1; i > k; i--) {\n\t\t\t\t\tconst p = v[i];\n\t\t\t\t\tconst q = d[i] - (t * p);\n\t\t\t\t\td[i] = q;\n\t\t\t\t\tfor(let j = i; j < n; j++) {\n\t\t\t\t\t\tconst r = p * d[j] + q * v[j];\n\t\t\t\t\t\ta[i][j] = a[i][j] - r;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(n >= 2) {\n\t\t\t\td[n - 2] = a[n - 2][n - 2];\n\t\t\t\te[n - 2] = a[n - 2][n - 1];\n\t\t\t}\n\t\t\tif(n >= 1) {\n\t\t\t\td[n - 1] = a[n - 1][n - 1];\n\t\t\t}\n\t\t}\n\n\t\t//変換P行列を求める\n\t\tfor(let k = n - 1; k >= 0; k--) {\n\t\t\tconst v = a[k];\n\t\t\tif(k < n - 2) {\n\t\t\t\tfor(let i = k + 1; i < n; i++) {\n\t\t\t\t\tconst w = a[i];\n\t\t\t\t\tconst t = innerproduct(v, w, k + 1, n);\n\t\t\t\t\tfor(let j = k + 1; j < n; j++) {\n\t\t\t\t\t\tw[j] -= t * v[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(let i = 0; i < n; i++) {\n\t\t\t\tv[i] = 0.0;\n\t\t\t}\n\t\t\tv[k] = 1.0;\n\t\t}\n\n\t\t// d と e の配列を使って、三重対角行列を作成する\n\t\tconst H = Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\tif(row === col) {\n\t\t\t\treturn new Complex(d[row]);\n\t\t\t}\n\t\t\telse if(Math.abs(row - col) === 1) {\n\t\t\t\treturn new Complex(e[Math.trunc((row + col) * 0.5)]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Complex.ZERO;\n\t\t\t}\n\t\t}, n, n);\n\n\t\treturn {\n\t\t\tP : (new Matrix(a)).T(),\n\t\t\tH : H\n\t\t};\n\t}\n\n\t/**\n\t * Eigendecomposition of symmetric matrix.\n\t * - Don't support complex numbers.\n\t * - V*D*V'=A.\n\t * - V is orthonormal matrix. and columns of V are the right eigenvectors.\n\t * - D is a matrix containing the eigenvalues on the diagonal component.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - Symmetric matrix.\n\t * @returns {{V: Matrix, D: Matrix}}\n\t */\n\tstatic eig(mat) {\n\t\tconst A = Matrix._toMatrix(mat);\n\t\t\n\t\t// QR法により固有値を求める\n\t\tlet is_error = false;\n\t\tconst tolerance_ = 1.0e-10;\n\t\tconst PH = LinearAlgebraTool.tridiagonalize(A);\n\t\tconst a = PH.P.getNumberMatrixArray();\n\t\tconst h = PH.H.getNumberMatrixArray();\n\t\tconst n = A.row_length;\n\n\t\t// 成分の抽出\n\t\tconst d = []; // 対角成分\n\t\tconst e = []; // 隣の成分\n\t\tfor(let i = 0; i < n; i++) {\n\t\t\td[i] = h[i][i];\n\t\t\te[i] = (i === 0) ? 0.0 : h[i][i - 1];\n\t\t}\n\n\t\t// 参考：奥村晴彦 (1991). C言語による最新アルゴリズム事典.\n\t\tconst MAX_ITER = 100;\n\t\tfor(let h = n - 1; h > 0; h--) {\n\t\t\tlet j = h;\n\t\t\tfor(j = h;j >= 1; j--) {\n\t\t\t\tif(Math.abs(e[j]) <= (tolerance_ * (Math.abs(d[j - 1]) + Math.abs(d[j])))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(j == h) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet iter = 0;\n\t\t\twhile(true) {\n\t\t\t\titer++;\n\t\t\t\tif(iter > MAX_ITER) {\n\t\t\t\t\tis_error = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlet w = (d[h - 1] - d[h]) / 2.0;\n\n\t\t\t\t/**\n\t\t\t\t * @type {number}\n\t\t\t\t */\n\t\t\t\tlet t = e[h] * e[h];\n\t\t\t\tlet s = Math.sqrt(w * w + t);\n\t\t\t\tif(w < 0) {\n\t\t\t\t\ts = - s;\n\t\t\t\t}\n\t\t\t\tlet x = d[j] - d[h] + (t / (w + s));\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * @type {number}\n\t\t\t\t */\n\t\t\t\tlet y = e[j + 1];\n\t\t\t\tfor(let k = j; k < h; k++) {\n\t\t\t\t\tlet c, s;\n\t\t\t\t\tif(Math.abs(x) >= Math.abs(y)) {\n\t\t\t\t\t\tt = - y / x;\n\t\t\t\t\t\tc = 1.0 / Math.sqrt(t * t + 1);\n\t\t\t\t\t\ts = t * c;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tt = - x / y;\n\t\t\t\t\t\ts = 1.0 / Math.sqrt(t * t + 1);\n\t\t\t\t\t\tc = t * s;\n\t\t\t\t\t}\n\t\t\t\t\tw = d[k] - d[k + 1];\n\t\t\t\t\tt = (w * s + 2.0 * c * e[k + 1]) * s;\n\t\t\t\t\td[k] -= t;\n\t\t\t\t\td[k + 1] += t;\n\t\t\t\t\tif(k > j) {\n\t\t\t\t\t\te[k] = c * e[k] - s * y;\n\t\t\t\t\t}\n\t\t\t\t\te[k + 1] += s * (c * w - 2.0 * s * e[k + 1]);\n\t\t\t\t\tfor(let i = 0; i < n; i++) {\n\t\t\t\t\t\tx = a[i][k];\n\t\t\t\t\t\ty = a[i][k + 1];\n\t\t\t\t\t\ta[i][k    ] = c * x - s * y;\n\t\t\t\t\t\ta[i][k + 1] = s * x + c * y;\n\t\t\t\t\t}\n\t\t\t\t\tif(k < h - 1) {\n\t\t\t\t\t\tx = e[k + 1];\n\t\t\t\t\t\ty = -s * e[k + 2];\n\t\t\t\t\t\te[k + 2] *= c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(Math.abs(e[h]) <= tolerance_ * (Math.abs(d[h - 1]) + Math.abs(d[h]))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(is_error) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// 固有値が大きいものから並べるソート\n\t\t/**\n\t\t * @param {Matrix} V \n\t\t * @param {Array<number>} d \n\t\t */\n\t\tconst vd_sort = function(V, d) {\n\t\t\tconst len = d.length;\n\t\t\tconst sortdata = [];\n\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\tsortdata[i] = {\n\t\t\t\t\tsigma : d[i],\n\t\t\t\t\tindex : i\n\t\t\t\t};\n\t\t\t}\n\t\t\t/**\n\t\t\t * @param {{sigma : number}} a \n\t\t\t * @param {{sigma : number}} b \n\t\t\t */\n\t\t\tconst compare = function(a, b){\n\t\t\t\tif(a.sigma === b.sigma) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\treturn (a.sigma < b.sigma ? 1 : -1);\n\t\t\t};\n\t\t\tsortdata.sort(compare);\n\t\t\tconst MOVE = Matrix.zeros(len);\n\t\t\tconst ND = Matrix.zeros(len);\n\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\tND.matrix_array[i][i] = new Complex(sortdata[i].sigma);\n\t\t\t\tMOVE.matrix_array[i][sortdata[i].index] = Complex.ONE;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tV : V.mul(MOVE),\n\t\t\t\tD : ND\n\t\t\t};\n\t\t};\n\t\tconst VD = vd_sort(new Matrix(a), d);\n\t\treturn VD;\n\t}\n\n\t/**\n\t * Treat matrices as vectors, make them orthonormal, and make matrices of Q and R.\n\t * The method of Gram-Schmidt orthonormalization is used.\n\t * @param {Matrix} mat - Square matrix.\n\t * @returns {{Q: Matrix, R: Matrix, non_orthogonalized : Array<number>}}\n\t */\n\tstatic doGramSchmidtOrthonormalization(mat) {\n\t\t// グラム・シュミットの正規直交化法を使用する\n\t\t// 参考：Gilbert Strang (2007). Computational Science and Engineering.\n\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tconst len = M.column_length;\n\t\tconst A = M.matrix_array;\n\t\tconst Q_Matrix = Matrix.zeros(len);\n\t\tconst R_Matrix = Matrix.zeros(len);\n\t\tconst Q = Q_Matrix.matrix_array;\n\t\tconst R = R_Matrix.matrix_array;\n\t\tconst non_orthogonalized = [];\n\t\tconst a = new Array(len);\n\t\t\n\t\tfor(let col = 0; col < len; col++) {\n\t\t\t// i列目を抽出\n\t\t\tfor(let row = 0; row < len; row++) {\n\t\t\t\ta[row] = A[row][col];\n\t\t\t}\n\t\t\t// 直行ベクトルを作成\n\t\t\tif(col > 0) {\n\t\t\t\t// Rのi列目を内積で計算する\n\t\t\t\tfor(let j = 0; j < col; j++) {\n\t\t\t\t\tfor(let k = 0; k < len; k++) {\n\t\t\t\t\t\tR[j][col] = R[j][col].add(A[k][col].dot(Q[k][j]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(let j = 0; j < col; j++) {\n\t\t\t\t\tfor(let k = 0; k < len; k++) {\n\t\t\t\t\t\ta[k] = a[k].sub(R[j][col].mul(Q[k][j]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t{\n\t\t\t\t// 正規化と距離を1にする\n\t\t\t\tfor(let j = 0; j < len; j++) {\n\t\t\t\t\tR[col][col] = R[col][col].add(a[j].square());\n\t\t\t\t}\n\t\t\t\tR[col][col] = R[col][col].sqrt();\n\t\t\t\tif(R[col][col].isZero(1e-10)) {\n\t\t\t\t\t// 直行化が不可能だった列の番号をメモして、その列はゼロで埋める\n\t\t\t\t\tnon_orthogonalized.push(col);\n\t\t\t\t\tfor(let j = 0;j < len;j++) {\n\t\t\t\t\t\tQ[j][col] = Complex.ZERO;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// ここで R[i][i] === 0 の場合、直行させたベクトルaは0であり、\n\t\t\t\t\t// ランク落ちしており、計算不可能である。\n\t\t\t\t\t// 0割りした値を、j列目のQに記録していくがInfとなる。\n\t\t\t\t\tfor(let j = 0;j < len;j++) {\n\t\t\t\t\t\tQ[j][col] = a[j].div(R[col][col]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tQ : Q_Matrix,\n\t\t\tR : R_Matrix,\n\t\t\tnon_orthogonalized : non_orthogonalized\n\t\t};\n\t}\n\t\n\t/**\n\t * Create orthogonal vectors for all row vectors of the matrix.\n\t * - If the vector can not be found, it returns NULL.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @param {number} [tolerance=1.0e-10] - Calculation tolerance of calculation.\n\t * @returns {Matrix|null} An orthogonal vector.\n\t */\n\tstatic createOrthogonalVector(mat, tolerance) {\n\t\tconst M = new Matrix(mat);\n\t\tconst column_length = M.column_length;\n\t\tconst m = M.matrix_array;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\t// 正則行列をなす場合に問題となる行番号を取得\n\t\tconst not_regular_rows = LinearAlgebraTool.getLinearDependenceVector(M, tolerance_);\n\t\t// 不要な行を削除する\n\t\t{\n\t\t\t// not_regular_rowsは昇順リストなので、後ろから消していく\n\t\t\tfor(let i = not_regular_rows.length - 1; i >= 0; i--) {\n\t\t\t\tm.splice(not_regular_rows[i], 1);\n\t\t\t\tM.row_length--;\n\t\t\t}\n\t\t}\n\t\t// 追加できるベクトルの数\n\t\tconst add_vectors = column_length - m.length;\n\t\tif(add_vectors <= 0) {\n\t\t\treturn null;\n\t\t}\n\t\t// ランダムベクトル（seed値は毎回同一とする）\n\t\tconst noise = new Random(0);\n\t\tlet orthogonal_matrix = null;\n\t\tfor(let i = 0; i < 100; i++) {\n\t\t\t// 直行ベクトルを作るために、いったん行と列を交換する\n\t\t\t// これは、グラム・シュミットの正規直交化法が列ごとに行う手法のため。\n\t\t\tconst M2 = M.T();\n\t\t\t// ランダム行列を作成する\n\t\t\tconst R = Matrix.createMatrixDoEachCalculation(function() {\n\t\t\t\treturn new Complex(noise.nextGaussian());\n\t\t\t}, M2.row_length, add_vectors);\n\t\t\t// 列に追加する\n\t\t\tM2._concatRight(R);\n\t\t\t// 正規直行行列を作成する\n\t\t\torthogonal_matrix = LinearAlgebraTool.doGramSchmidtOrthonormalization(M2);\n\t\t\t// 正しく作成できていたら完了\n\t\t\tif(orthogonal_matrix.non_orthogonalized.length === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(orthogonal_matrix.non_orthogonalized.length !== 0) {\n\t\t\t// 普通は作成できないことはないが・・・\n\t\t\tconsole.log(\"miss\");\n\t\t\treturn null;\n\t\t}\n\t\t// 作成した列を切り出す\n\t\tconst y = new Array(add_vectors);\n\t\tconst q = orthogonal_matrix.Q.matrix_array;\n\t\tfor(let row = 0; row < add_vectors; row++) {\n\t\t\ty[row] = new Array(column_length);\n\t\t\tfor(let col = 0; col < column_length; col++) {\n\t\t\t\ty[row][col] = q[col][column_length - add_vectors + row];\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Row number with the largest norm value in the specified column of the matrix.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @param {number} column_index - Number of column of matrix.\n\t * @param {number} [row_index_offset=0] - Offset of the position of the vector to be calculated.\n\t * @param {number} [row_index_max] - Maximum value of position of vector to be calculated (do not include this value).\n\t * @returns {{index: number, max: number}} Matrix row number.\n\t * @private\n\t */\n\tstatic getMaxRowNumber(mat, column_index, row_index_offset, row_index_max) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tlet row_index = 0;\n\t\tlet row_max = 0;\n\t\tlet row = row_index_offset ? row_index_offset : 0;\n\t\tconst row_imax = row_index_max ? row_index_max : M.row_length;\n\t\t// n列目で最も大きな行を取得\n\t\tfor(; row < row_imax; row++) {\n\t\t\tconst norm = M.matrix_array[row][column_index].norm;\n\t\t\tif(norm > row_max) {\n\t\t\t\trow_max = norm;\n\t\t\t\trow_index = row;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tindex : row_index,\n\t\t\tmax : row_max\n\t\t};\n\t}\n\n\t/**\n\t * Extract linearly dependent rows when each row of matrix is a vector.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @param {number} [tolerance=1.0e-10] - Calculation tolerance of calculation.\n\t * @returns {Array<number>} Array of matrix row numbers in ascending order.\n\t * @private\n\t */\n\tstatic getLinearDependenceVector(mat, tolerance) {\n\t\tconst M = new Matrix(mat);\n\t\tconst m = M.matrix_array;\n\t\tconst tolerance_ = tolerance ? Matrix._toDouble(tolerance) : 1.0e-10;\n\t\t// 確認する行番号（ここから終わった行は削除していく）\n\t\tconst row_index_array = new Array(M.row_length);\n\t\tfor(let i = 0; i < M.row_length; i++) {\n\t\t\trow_index_array[i] = i;\n\t\t}\n\t\t// ガウスの消去法を使用して、行ベクトルを抽出していく\n\t\tfor(let col_target = 0; col_target < M.column_length; col_target++) {\n\t\t\tlet row_max_index = 0;\n\t\t\t{\n\t\t\t\tlet row_max = 0;\n\t\t\t\tlet row_max_key = 0;\n\t\t\t\t// n列目で絶対値が最も大きな行を取得\n\t\t\t\tfor(const row_key in row_index_array) {\n\t\t\t\t\tconst row = row_index_array[row_key];\n\t\t\t\t\tconst norm = m[row][col_target].norm;\n\t\t\t\t\tif(norm > row_max) {\n\t\t\t\t\t\trow_max = norm;\n\t\t\t\t\t\trow_max_key = parseInt(row_key, 10);\n\t\t\t\t\t\trow_max_index = row;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 大きいのが0である＝その列は全て0である\n\t\t\t\tif(row_max <= tolerance_) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// 大きな値があった行は、リストから除去する\n\t\t\t\trow_index_array.splice(row_max_key, 1);\n\t\t\t\tif(col_target === M.column_length - 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 次の列から、大きな値があった行の成分を削除\n\t\t\tfor(const row_key in row_index_array) {\n\t\t\t\tconst row = row_index_array[row_key];\n\t\t\t\tconst inv = m[row][col_target].div(m[row_max_index][col_target]);\n\t\t\t\tfor(let col = col_target; col < M.column_length; col++) {\n\t\t\t\t\tm[row][col] = m[row][col].sub(m[row_max_index][col].mul(inv));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn row_index_array;\n\t}\n\n}\n\n/**\n * Class for linear algebra for `Matrix` class.\n * - These methods can be used in the `Matrix` method chain.\n * - This class cannot be called directly.\n */\nexport default class LinearAlgebra {\n\n\t/**\n\t * Inner product/Dot product.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} A\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} B\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} [dimension=1] - Dimension of matrix used for calculation. (1 or 2)\n\t * @returns {Matrix} A・B\n\t */\n\tstatic inner(A, B, dimension) {\n\t\tconst M1 = Matrix._toMatrix(A);\n\t\tconst M2 = Matrix._toMatrix(B);\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst dim = dimension ? Matrix._toInteger(dimension) : 1;\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn new Matrix(M1.scalar.dot(M2.scalar));\n\t\t}\n\t\tif(M1.isVector() && M2.isVector()) {\n\t\t\tlet sum = Complex.ZERO;\n\t\t\tfor(let i = 0; i < M1.length; i++) {\n\t\t\t\tsum = sum.add(M1.getComplex(i).dot(M2.getComplex(i)));\n\t\t\t}\n\t\t\treturn new Matrix(sum);\n\t\t}\n\t\tif((M1.row_length !== M2.row_length) || (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tif(dim === 1) {\n\t\t\tconst y = new Array(1);\n\t\t\ty[0] = new Array(M1.column_length);\n\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\t\tsum = sum.add(x1[row][col].dot(x2[row][col]));\n\t\t\t\t}\n\t\t\t\ty[0][col] = sum;\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\telse if(dim === 2) {\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\t\tsum = sum.add(x1[row][col].dot(x2[row][col]));\n\t\t\t\t}\n\t\t\t\ty[row] = [sum];\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\telse {\n\t\t\tthrow \"dim\";\n\t\t}\n\t}\n\n\t/**\n\t * p-norm.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} [p=2]\n\t * @returns {number}\n\t */\n\tstatic norm(mat, p) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tconst p_number = (p === undefined) ? 2 : Matrix._toDouble(p);\n\t\tif(p_number === 1) {\n\t\t\t// 行列の1ノルム\n\t\t\tconst y = M.matrix_array;\n\t\t\t// 行ノルムを計算する\n\t\t\tif(M.isRow()) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\t\tsum += y[0][col].norm;\n\t\t\t\t}\n\t\t\t\treturn sum;\n\t\t\t}\n\t\t\t// 列ノルムを計算する\n\t\t\telse if(M.isColumn()) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\t\tsum += y[row][0].norm;\n\t\t\t\t}\n\t\t\t\treturn sum;\n\t\t\t}\n\t\t\t// 列の和の最大値\n\t\t\tlet max = 0;\n\t\t\t// 列を固定して行の和を計算\n\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\tlet sum = 0;\n\t\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\t\tsum += y[row][col].norm;\n\t\t\t\t}\n\t\t\t\tif(max < sum) {\n\t\t\t\t\tmax = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn max;\n\t\t}\n\t\telse if(p_number === 2) {\n\t\t\t// 行列の2ノルム\n\t\t\tconst y = M.matrix_array;\n\t\t\t// 行ノルムを計算する\n\t\t\tif(M.isRow()) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\t\tsum += y[0][col].square().real;\n\t\t\t\t}\n\t\t\t\treturn Math.sqrt(sum);\n\t\t\t}\n\t\t\t// 列ノルムを計算する\n\t\t\telse if(M.isColumn()) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\t\tsum += y[row][0].square().real;\n\t\t\t\t}\n\t\t\t\treturn Math.sqrt(sum);\n\t\t\t}\n\t\t\treturn M.svd().S.diag().max().scalar.real;\n\t\t}\n\t\telse if((p_number === Number.POSITIVE_INFINITY) || (p_number === Number.NEGATIVE_INFINITY)) {\n\t\t\tconst y = M.matrix_array;\n\t\t\tlet compare_number = p_number === Number.POSITIVE_INFINITY ? 0 : Number.POSITIVE_INFINITY;\n\t\t\tconst compare_func = p_number === Number.POSITIVE_INFINITY ? Math.max : Math.min;\n\t\t\t// 行ノルムを計算する\n\t\t\tif(M.isRow()) {\n\t\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\t\tcompare_number = compare_func(compare_number, y[0][col].norm);\n\t\t\t\t}\n\t\t\t\treturn compare_number;\n\t\t\t}\n\t\t\t// 列ノルムを計算する\n\t\t\tif(M.isColumn()) {\n\t\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\t\tcompare_number = compare_func(compare_number, y[row][0].norm);\n\t\t\t\t}\n\t\t\t\treturn compare_number;\n\t\t\t}\n\t\t\t// 行列の場合は、列の和の最大値\n\t\t\tcompare_number = 0;\n\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\t\tsum += y[row][col].norm;\n\t\t\t\t}\n\t\t\t\tcompare_number = Math.max(compare_number, sum);\n\t\t\t}\n\t\t\treturn compare_number;\n\t\t}\n\t\telse if(M.isVector()) {\n\t\t\t// 一般化ベクトルpノルム\n\t\t\tlet sum = 0.0;\n\t\t\tfor(let i = 0; i < M.length; i++) {\n\t\t\t\tsum += Math.pow(M.getComplex(i).norm, p_number);\n\t\t\t}\n\t\t\treturn Math.pow(sum, 1.0 / p_number);\n\t\t}\n\t\t// 未実装\n\t\tthrow \"norm\";\n\t}\n\t\n\t/**\n\t * Condition number of the matrix\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} [p=2]\n\t * @returns {number}\n\t */\n\tstatic cond(mat, p) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tconst p_number = (p === undefined) ? 2 : Matrix._toInteger(p);\n\t\tif(p_number === 2) {\n\t\t\t// 零行列は Inf\n\t\t\tif(M.isZeros()) {\n\t\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t\t}\n\t\t\t// ベクトルは1\n\t\t\tif(M.isVector()) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\t// ユニタリは1\n\t\t\tif(M.isUnitary()) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tconst s = M.svd().S.diag();\n\t\t\treturn s.max().scalar.real / s.min().scalar.real;\n\t\t}\n\t\treturn M.norm(p) * M.pinv().norm(p);\n\t}\n\n\t/**\n\t * Inverse condition number.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @returns {number}\n\t */\n\tstatic rcond(mat) {\n\t\treturn 1.0 / LinearAlgebra.cond(Matrix._toMatrix(mat), 1);\n\t}\n\n\t/**\n\t * Rank.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {number} rank(A)\n\t */\n\tstatic rank(mat, tolerance) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tconst t = tolerance !== undefined ? Matrix._toDouble(tolerance) : undefined;\n\t\t// 横が長い行列の場合\n\t\tif(M.row_length <= M.column_length) {\n\t\t\treturn Math.min(M.row_length, M.column_length) - (LinearAlgebraTool.getLinearDependenceVector(M, t)).length;\n\t\t}\n\t\telse {\n\t\t\treturn M.row_length - (LinearAlgebraTool.getLinearDependenceVector(M, t)).length;\n\t\t}\n\t}\n\n\t/**\n\t * Trace of a matrix.\n\t * Sum of diagonal elements.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @returns {Complex}\n\t */\n\tstatic trace(mat) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tconst len = Math.min(M.row_length, M.column_length);\n\t\tlet sum = Complex.ZERO;\n\t\tfor(let i = 0; i < len; i++) {\n\t\t\tsum = sum.add(M.matrix_array[i][i]);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t * Determinant.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat\n\t * @returns {Matrix} |A|\n\t */\n\tstatic det(mat) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tif(!M.isSquare()) {\n\t\t\tthrow \"not square\";\n\t\t}\n\t\tconst len = M.length;\n\t\tif(len < 5) {\n\t\t\t/**\n\t\t\t * @param {Array<Array<Complex>>} x \n\t\t\t */\n\t\t\tconst calcDet = function(x) {\n\t\t\t\tif(x.length === 2) {\n\t\t\t\t\t// 2次元の行列式になったら、たすき掛け計算する\n\t\t\t\t\treturn x[0][0].mul(x[1][1]).sub(x[0][1].mul(x[1][0]));\n\t\t\t\t}\n\t\t\t\tlet y = Complex.ZERO;\n\t\t\t\tfor(let i = 0; i < x.length; i++) {\n\t\t\t\t\t// N次元の行列式を、N-1次元の行列式に分解していく\n\n\t\t\t\t\t/**\n\t\t\t\t\t * @type {Array<Array<Complex>>}\n\t\t\t\t\t */\n\t\t\t\t\tconst D = [];\n\t\t\t\t\tconst a = x[i][0];\n\t\t\t\t\tfor(let row = 0, D_low = 0; row < x.length; row++) {\n\t\t\t\t\t\tif(i === row) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tD[D_low] = [];\n\t\t\t\t\t\tfor(let col = 1, D_col = 0; col < x.length; col++, D_col++) {\n\t\t\t\t\t\t\tD[D_low][D_col] = x[row][col];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tD_low++;\n\t\t\t\t\t}\n\t\t\t\t\tif((i % 2) === 0) {\n\t\t\t\t\t\ty = y.add(a.mul(calcDet(D)));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ty = y.sub(a.mul(calcDet(D)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn y;\n\t\t\t};\n\t\t\treturn new Matrix(calcDet(M.matrix_array));\n\t\t}\n\t\telse {\n\t\t\t// サイズが大きい場合は、lu分解を利用する\n\t\t\tconst lup = LinearAlgebra.lup(M);\n\t\t\tconst exchange_count = (len - lup.P.diag().sum().scalar.real) / 2;\n\t\t\t// 上行列の対角線上の値を掛け算する\n\t\t\tlet y = lup.U.diag().prod();\n\t\t\tif((exchange_count % 2) === 1) {\n\t\t\t\ty = y.negate();\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t}\n\n\t/**\n\t * LUP decomposition.\n\t * - P'*L*U=A\n\t * - P is permutation matrix.\n\t * - L is lower triangular matrix.\n\t * - U is upper triangular matrix.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - A\n\t * @returns {{P: Matrix, L: Matrix, U: Matrix}} {L, U, P}\n\t */\n\tstatic lup(mat) {\n\t\tconst A = new Matrix(mat);\n\t\tconst L = Matrix.zeros(A.row_length);\n\t\tconst U = A;\n\t\tconst P = Matrix.eye(A.row_length);\n\t\tconst l = L.matrix_array;\n\t\tconst u = U.matrix_array;\n\t\t// ガウスの消去法で連立1次方程式の未知数を求める\n\t\t//前進消去\n\t\tfor(let k = 0; k < A.column_length; k++) {\n\t\t\t// ピポットの選択\n\t\t\tlet pivot;\n\t\t\t{\n\t\t\t\t// k列目で最も大きな行を取得(k列目から調べる)\n\t\t\t\tconst max_row_number = LinearAlgebraTool.getMaxRowNumber(U, k, k);\n\t\t\t\tpivot = max_row_number.index;\n\t\t\t\tif(max_row_number.max === 0.0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t//交換を行う\n\t\t\t\tif(k !== pivot) {\n\t\t\t\t\tL._exchangeRow(k, pivot);\n\t\t\t\t\tU._exchangeRow(k, pivot);\n\t\t\t\t\tP._exchangeRow(k, pivot);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 消去\n\t\t\tfor(let row = k + 1;row < A.row_length; row++) {\n\t\t\t\tconst temp = u[row][k].div(u[k][k]);\n\t\t\t\tl[row][k] = temp;\n\t\t\t\t//lの値だけ行交換が必要？\n\t\t\t\tfor(let col = k; col < A.column_length; col++) {\n\t\t\t\t\tu[row][col] = u[row][col].sub(u[k][col].mul(temp));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tL._resize(A.row_length, Math.min(A.row_length, A.column_length));\n\t\tU._resize(Math.min(A.row_length, A.column_length), A.column_length);\n\t\t// L の対角線に1を代入\n\t\tL._each(function(num, row, col) {\n\t\t\treturn row === col ? Complex.ONE : num;\n\t\t});\n\t\treturn {\n\t\t\tL : L,\n\t\t\tU : U,\n\t\t\tP : P\n\t\t};\n\t}\n\n\t/**\n\t * LU decomposition.\n\t * - L*U=A\n\t * - L is lower triangular matrix.\n\t * - U is upper triangular matrix.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - A\n\t * @returns {{L: Matrix, U: Matrix}} {L, U}\n\t */\n\tstatic lu(mat) {\n\t\tconst lup = LinearAlgebra.lup(mat);\n\t\tconst L = lup.P.T().mul(lup.L);\n\t\treturn {\n\t\t\tL : L,\n\t\t\tU : lup.U\n\t\t};\n\t}\n\n\t/**\n\t * Solving a system of linear equations to be Ax = B\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - A\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} number - B\n\t * @returns {Matrix} x\n\t * @todo 安定化のためQR分解を用いた手法に切り替える。あるいはlup分解を使用した関数に作り替える。\n\t */\n\tstatic linsolve(mat, number) {\n\t\tconst A = Matrix._toMatrix(mat);\n\t\tconst B = Matrix._toMatrix(number);\n\t\tif(!A.isSquare()) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\t// 連立一次方程式を解く\n\t\tconst arg = B;\n\t\tif((B.row_length !== A.row_length) || (B.column_length > 1)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\t// 行列を準備する\n\t\tconst M = new Matrix(A);\n\t\tM._concatRight(arg);\n\t\tconst long_matrix_array = M.matrix_array;\n\t\tconst long_length = M.column_length;\n\t\tconst len = A.column_length;\n\t\t// ガウスの消去法で連立1次方程式の未知数を求める\n\t\t//前進消去\n\t\tfor(let k = 0; k < (len - 1); k++) {\n\t\t\t//ピポットの選択\n\t\t\t{\n\t\t\t\t// k列目で最も大きな行を取得(k列目から調べる)\n\t\t\t\tconst row_num = LinearAlgebraTool.getMaxRowNumber(M, k, k).index;\n\t\t\t\t//交換を行う\n\t\t\t\tM._exchangeRow(k, row_num);\n\t\t\t}\n\t\t\t//ピポットの正規化\n\t\t\t{\n\t\t\t\tconst normalize_value = long_matrix_array[k][k].inv();\n\t\t\t\tfor(let row = k, col = k; col < long_length; col++) {\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].mul(normalize_value);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//消去\n\t\t\tfor(let row = k + 1;row < len; row++) {\n\t\t\t\tconst temp = long_matrix_array[row][k];\n\t\t\t\tfor(let col = k; col < long_length; col++) {\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].sub(long_matrix_array[k][col].mul(temp));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//後退代入\n\t\tconst y = new Array(len);\n\t\ty[len - 1] = long_matrix_array[len - 1][len].div(long_matrix_array[len - 1][len - 1]);\n\t\tfor(let row = len - 2; row >= 0; row--) {\n\t\t\ty[row] = long_matrix_array[row][long_length - 1];\n\t\t\tfor(let j = row + 1; j < len; j++) {\n\t\t\t\ty[row] = y[row].sub(long_matrix_array[row][j].mul(y[j]));\n\t\t\t}\n\t\t\ty[row] = y[row].div(long_matrix_array[row][row]);\n\t\t}\n\t\tconst y2 = new Array(A.row_length);\n\t\tfor(let row = 0; row < A.row_length; row++) {\n\t\t\ty2[row] = [y[row]];\n\t\t}\n\n\t\treturn new Matrix(y2);\n\t}\n\n\t/**\n\t * QR decomposition.\n\t * - Q*R=A\n\t * - Q is orthonormal matrix.\n\t * - R is upper triangular matrix.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - A\n\t * @returns {{Q: Matrix, R: Matrix}} {Q, R}\n\t */\n\tstatic qr(mat) {\n\t\t// 行列を準備する\n\t\tconst M = new Matrix(mat);\n\t\t// 作成後のQとRのサイズ\n\t\tconst Q_row_length = M.row_length;\n\t\tconst Q_column_length = M.row_length;\n\t\tconst R_row_length = M.row_length;\n\t\tconst R_column_length = M.column_length;\n\t\t// 計算時の行と列のサイズ\n\t\tconst dummy_size = Math.max(M.row_length, M.column_length);\n\t\t// 正方行列にする\n\t\tM._resize(dummy_size, dummy_size);\n\t\t// 正規直行化\n\t\tconst orthogonal_matrix = LinearAlgebraTool.doGramSchmidtOrthonormalization(M);\n\t\t// 計算したデータを取得\n\t\tlet Q_Matrix = orthogonal_matrix.Q;\n\t\tconst R_Matrix = orthogonal_matrix.R;\n\t\tconst non_orthogonalized = orthogonal_matrix.non_orthogonalized;\n\n\t\t// Qのサイズを成型する\n\t\tif(non_orthogonalized.length === M.row_length) {\n\t\t\t// 零行列の場合の特別処理\n\t\t\tQ_Matrix = Matrix.eye(M.row_length);\n\t\t}\n\t\telse if(non_orthogonalized.length !== 0) {\n\t\t\t// 一部、直行化できていない列があるため直行化できてない列以外を抽出\n\t\t\t/**\n\t\t\t * @type {any}\n\t\t\t */\n\t\t\tconst map = {};\n\t\t\tfor(let i = 0; i < non_orthogonalized.length; i++) {\n\t\t\t\tmap[non_orthogonalized[i]] = 1;\n\t\t\t}\n\t\t\tconst orthogonalized = [];\n\t\t\tfor(let i = 0; i < dummy_size; i++) {\n\t\t\t\tif(map[i]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst array = [];\n\t\t\t\tfor(let j = 0; j < dummy_size; j++) {\n\t\t\t\t\tarray[j] = Q_Matrix.matrix_array[j][i];\n\t\t\t\t}\n\t\t\t\torthogonalized.push(array);\n\t\t\t}\n\t\t\t// 直行ベクトルを作成する\n\t\t\tconst orthogonal_vector = LinearAlgebraTool.createOrthogonalVector(orthogonalized);\n\t\t\t// 直行化できていない列を差し替える\n\t\t\tfor(let i = 0; i < non_orthogonalized.length; i++) {\n\t\t\t\tconst q_col = non_orthogonalized[i];\n\t\t\t\tfor(let j = 0; j < dummy_size; j++) {\n\t\t\t\t\tQ_Matrix.matrix_array[j][q_col] = orthogonal_vector.matrix_array[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tQ_Matrix._resize(Q_row_length, Q_column_length);\n\t\t// Rのサイズを成形する\n\t\tR_Matrix._resize(R_row_length, R_column_length);\n\t\treturn {\n\t\t\tQ : Q_Matrix,\n\t\t\tR : R_Matrix\n\t\t};\n\t}\n\n\t/**\n\t * Tridiagonalization of symmetric matrix.\n\t * - Don't support complex numbers.\n\t * - P*H*P'=A\n\t * - P is orthonormal matrix.\n\t * - H is tridiagonal matrix.\n\t * - The eigenvalues of H match the eigenvalues of A.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - A\n\t * @returns {{P: Matrix, H: Matrix}} {P, H}\n\t */\n\tstatic tridiagonalize(mat) {\n\t\tconst M = new Matrix(mat);\n\t\tif(!M.isSquare()) {\n\t\t\tthrow \"not square matrix\";\n\t\t}\n\t\tif(!M.isSymmetric()) {\n\t\t\tthrow \"not Symmetric\";\n\t\t}\n\t\tif(M.isComplex()) {\n\t\t\tthrow \"not Real Matrix\";\n\t\t}\n\t\treturn LinearAlgebraTool.tridiagonalize(M);\n\t}\n\n\t/**\n\t * Eigendecomposition of symmetric matrix.\n\t * - Don't support complex numbers.\n\t * - V*D*V'=A.\n\t * - V is orthonormal matrix. and columns of V are the right eigenvectors.\n\t * - D is a matrix containing the eigenvalues on the diagonal component.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - A\n\t * @returns {{V: Matrix, D: Matrix}} {D, V}\n\t * @todo 対称行列しか対応できていないので、対称行列ではないものはQR分解を用いた手法に切り替える予定。\n\t */\n\tstatic eig(mat) {\n\t\tconst M = new Matrix(mat);\n\t\tif(!M.isSquare()) {\n\t\t\tthrow \"not square matrix\";\n\t\t}\n\t\tif(!M.isSymmetric()) {\n\t\t\tthrow \"not Symmetric\";\n\t\t}\n\t\tif(M.isComplex()) {\n\t\t\tthrow \"not Real Matrix\";\n\t\t}\n\t\treturn LinearAlgebraTool.eig(M);\n\t}\n\n\t/**\n\t * Singular Value Decomposition (SVD).\n\t * - U*S*V'=A\n\t * - U and V are orthonormal matrices.\n\t * - S is a matrix with singular values in the diagonal.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - A\n\t * @returns {{U: Matrix, S: Matrix, V: Matrix}} U*S*V'=A\n\t */\n\tstatic svd(mat) {\n\t\tconst M = new Matrix(mat);\n\t\tif(M.isComplex()) {\n\t\t\t// 複素数が入っている場合は、eig関数が使用できないので非対応\n\t\t\tthrow \"Unimplemented\";\n\t\t}\n\t\tconst rank = LinearAlgebra.rank(M);\n\t\t// SVD分解\n\t\t// 参考：Gilbert Strang (2007). Computational Science and Engineering.\n\t\tconst VD = LinearAlgebra.eig(M.T().mul(M));\n\t\tconst sigma = Matrix.zeros(M.row_length, M.column_length);\n\t\tsigma._each(function(num, row, col) {\n\t\t\tif((row === col) && (row < rank)) {\n\t\t\t\treturn VD.D.getComplex(row, row).sqrt();\n\t\t\t}\n\t\t});\n\t\tconst s_size = Math.min(M.row_length, M.column_length);\n\t\tconst sing = Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\tif(row === col) {\n\t\t\t\tconst x = sigma.matrix_array[row][row];\n\t\t\t\tif(x.isZero()) {\n\t\t\t\t\treturn Complex.ZERO;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn x.inv();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Complex.ZERO;\n\t\t\t}\n\t\t}, s_size);\n\t\tconst V_rank = VD.V.resize(VD.V.row_length, s_size);\n\t\tconst u = M.mul(V_rank).mul(sing);\n\t\tconst QR = LinearAlgebra.qr(u);\n\t\treturn {\n\t\t\tU : QR.Q,\n\t\t\tS : sigma,\n\t\t\tV : VD.V\n\t\t};\n\t}\n\n\t/**\n\t * Inverse matrix of this matrix.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - A\n\t * @returns {Matrix} A^-1\n\t */\n\tstatic inv(mat) {\n\t\tconst X = new Matrix(mat);\n\t\tif(X.isScalar()) {\n\t\t\treturn new Matrix(Complex.ONE.div(X.scalar));\n\t\t}\n\t\tif(!X.isSquare()) {\n\t\t\tthrow \"not square\";\n\t\t}\n\t\tif(X.isDiagonal()) {\n\t\t\t// 対角行列の場合は、対角成分のみ逆数をとる\n\t\t\tconst y = X.T();\n\t\t\tconst size = Math.min(y.row_length, y.column_length);\n\t\t\tfor(let i = 0; i < size; i++) {\n\t\t\t\ty.matrix_array[i][i] = y.matrix_array[i][i].inv();\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\t// (ここで正規直交行列の場合なら、転置させるなど入れてもいい？判定はできないけども)\n\t\tconst len = X.column_length;\n\t\t// ガウス・ジョルダン法\n\t\t// 初期値の設定\n\t\tconst M = new Matrix(X);\n\t\tM._concatRight(Matrix.eye(len));\n\t\tconst long_matrix_array = M.matrix_array;\n\t\tconst long_length = M.column_length;\n\n\t\t//前進消去\n\t\tfor(let k = 0; k < len; k++) {\n\t\t\t//ピポットの選択\n\t\t\t{\n\t\t\t\t// k列目で最も大きな行を取得(k列目から調べる)\n\t\t\t\tconst row_num = LinearAlgebraTool.getMaxRowNumber(M, k, k).index;\n\t\t\t\t//交換を行う\n\t\t\t\tM._exchangeRow(k, row_num);\n\t\t\t}\n\t\t\t//ピポットの正規化\n\t\t\t{\n\t\t\t\tconst normalize_value = long_matrix_array[k][k].inv();\n\t\t\t\tfor(let row = k, col = k; col < long_length; col++) {\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].mul(normalize_value);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//消去\n\t\t\tfor(let row = 0;row < len; row++) {\n\t\t\t\tif(row === k) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst temp = long_matrix_array[row][k];\n\t\t\t\tfor(let col = k; col < long_length; col++)\n\t\t\t\t{\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].sub(long_matrix_array[k][col].mul(temp));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst y = new Array(len);\n\t\t//右の列を抜き取る\n\t\tfor(let row = 0; row < len; row++) {\n\t\t\ty[row] = new Array(len);\n\t\t\tfor(let col = 0; col < len; col++) {\n\t\t\t\ty[row][col] = long_matrix_array[row][len + col];\n\t\t\t}\n\t\t}\n\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Pseudo-inverse matrix.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} mat - A\n\t * @returns {Matrix} A^+\n\t */\n\tstatic pinv(mat) {\n\t\tconst M = new Matrix(mat);\n\t\tconst USV = LinearAlgebra.svd(M);\n\t\tconst U = USV.U;\n\t\tconst S = USV.S;\n\t\tconst V = USV.V;\n\t\tconst sing = Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\tif(row === col) {\n\t\t\t\tconst x = S.matrix_array[row][row];\n\t\t\t\tif(x.isZero()) {\n\t\t\t\t\treturn Complex.ZERO;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn x.inv();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Complex.ZERO;\n\t\t\t}\n\t\t}, M.column_length, M.row_length);\n\t\treturn V.mul(sing).mul(U.T());\n\t}\n\n\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/core/tools/LinearAlgebra.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1160,
    "kind": "class",
    "name": "LinearAlgebraTool",
    "memberof": "src/math/core/tools/LinearAlgebra.js",
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/tools/LinearAlgebra.js",
    "importStyle": null,
    "description": "Collection of functions for linear algebra.",
    "lineNumber": 20,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 1161,
    "kind": "method",
    "name": "tridiagonalize",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool.tridiagonalize",
    "access": "public",
    "description": "Tridiagonalization of symmetric matrix.\n- Don't support complex numbers.\n- P*H*P'=A\n- P is orthonormal matrix.\n- H is tridiagonal matrix.\n- The eigenvalues of H match the eigenvalues of A.",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, H: Matrix}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, H: Matrix}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1162,
    "kind": "method",
    "name": "eig",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool.eig",
    "access": "public",
    "description": "Eigendecomposition of symmetric matrix.\n- Don't support complex numbers.\n- V*D*V'=A.\n- V is orthonormal matrix. and columns of V are the right eigenvectors.\n- D is a matrix containing the eigenvalues on the diagonal component.",
    "lineNumber": 195,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{V: Matrix, D: Matrix}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "Symmetric matrix."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{V: Matrix, D: Matrix}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1163,
    "kind": "method",
    "name": "doGramSchmidtOrthonormalization",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool.doGramSchmidtOrthonormalization",
    "access": "public",
    "description": "Treat matrices as vectors, make them orthonormal, and make matrices of Q and R.\nThe method of Gram-Schmidt orthonormalization is used.",
    "lineNumber": 336,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{Q: Matrix, R: Matrix, non_orthogonalized : Array<number>}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "Square matrix."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{Q: Matrix, R: Matrix, non_orthogonalized : Array<number>}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1164,
    "kind": "method",
    "name": "createOrthogonalVector",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool.createOrthogonalVector",
    "access": "public",
    "description": "Create orthogonal vectors for all row vectors of the matrix.\n- If the vector can not be found, it returns NULL.",
    "lineNumber": 406,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix|null} An orthogonal vector."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0e-10",
        "defaultRaw": 1e-10,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix",
        "null"
      ],
      "spread": false,
      "description": "An orthogonal vector."
    }
  },
  {
    "__docId__": 1165,
    "kind": "method",
    "name": "getMaxRowNumber",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool.getMaxRowNumber",
    "access": "private",
    "description": "Row number with the largest norm value in the specified column of the matrix.",
    "lineNumber": 472,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{index: number, max: number}} Matrix row number."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "column_index",
        "description": "Number of column of matrix."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "row_index_offset",
        "description": "Offset of the position of the vector to be calculated."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "row_index_max",
        "description": "Maximum value of position of vector to be calculated (do not include this value)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{index: number, max: number}"
      ],
      "spread": false,
      "description": "Matrix row number."
    }
  },
  {
    "__docId__": 1166,
    "kind": "method",
    "name": "getLinearDependenceVector",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebraTool.getLinearDependenceVector",
    "access": "private",
    "description": "Extract linearly dependent rows when each row of matrix is a vector.",
    "lineNumber": 499,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} Array of matrix row numbers in ascending order."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0e-10",
        "defaultRaw": 1e-10,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "Array of matrix row numbers in ascending order."
    }
  },
  {
    "__docId__": 1167,
    "kind": "class",
    "name": "LinearAlgebra",
    "memberof": "src/math/core/tools/LinearAlgebra.js",
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/core/tools/LinearAlgebra.js",
    "importStyle": "LinearAlgebra",
    "description": "Class for linear algebra for `Matrix` class.\n- These methods can be used in the `Matrix` method chain.\n- This class cannot be called directly.",
    "lineNumber": 553,
    "interface": false
  },
  {
    "__docId__": 1168,
    "kind": "method",
    "name": "inner",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.inner",
    "access": "public",
    "description": "Inner product/Dot product.",
    "lineNumber": 562,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A・B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "B",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "dimension",
        "description": "Dimension of matrix used for calculation. (1 or 2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A・B"
    }
  },
  {
    "__docId__": 1169,
    "kind": "method",
    "name": "norm",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.norm",
    "access": "public",
    "description": "p-norm.",
    "lineNumber": 615,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1170,
    "kind": "method",
    "name": "cond",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.cond",
    "access": "public",
    "description": "Condition number of the matrix",
    "lineNumber": 719,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1171,
    "kind": "method",
    "name": "rcond",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.rcond",
    "access": "public",
    "description": "Inverse condition number.",
    "lineNumber": 746,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1172,
    "kind": "method",
    "name": "rank",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.rank",
    "access": "public",
    "description": "Rank.",
    "lineNumber": 756,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} rank(A)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "rank(A)"
    }
  },
  {
    "__docId__": 1173,
    "kind": "method",
    "name": "trace",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.trace",
    "access": "public",
    "description": "Trace of a matrix.\nSum of diagonal elements.",
    "lineNumber": 774,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1174,
    "kind": "method",
    "name": "det",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.det",
    "access": "public",
    "description": "Determinant.",
    "lineNumber": 789,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} |A|"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "|A|"
    }
  },
  {
    "__docId__": 1175,
    "kind": "method",
    "name": "lup",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.lup",
    "access": "public",
    "description": "LUP decomposition.\n- P'*L*U=A\n- P is permutation matrix.\n- L is lower triangular matrix.\n- U is upper triangular matrix.",
    "lineNumber": 856,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, L: Matrix, U: Matrix}} {L, U, P}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, L: Matrix, U: Matrix}"
      ],
      "spread": false,
      "description": "{L, U, P}"
    }
  },
  {
    "__docId__": 1176,
    "kind": "method",
    "name": "lu",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.lu",
    "access": "public",
    "description": "LU decomposition.\n- L*U=A\n- L is lower triangular matrix.\n- U is upper triangular matrix.",
    "lineNumber": 913,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{L: Matrix, U: Matrix}} {L, U}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{L: Matrix, U: Matrix}"
      ],
      "spread": false,
      "description": "{L, U}"
    }
  },
  {
    "__docId__": 1177,
    "kind": "method",
    "name": "linsolve",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.linsolve",
    "access": "public",
    "description": "Solving a system of linear equations to be Ax = B",
    "lineNumber": 929,
    "todo": [
      "安定化のためQR分解を用いた手法に切り替える。あるいはlup分解を使用した関数に作り替える。"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} x"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      },
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "B"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "x"
    }
  },
  {
    "__docId__": 1178,
    "kind": "method",
    "name": "qr",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.qr",
    "access": "public",
    "description": "QR decomposition.\n- Q*R=A\n- Q is orthonormal matrix.\n- R is upper triangular matrix.",
    "lineNumber": 997,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{Q: Matrix, R: Matrix}} {Q, R}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{Q: Matrix, R: Matrix}"
      ],
      "spread": false,
      "description": "{Q, R}"
    }
  },
  {
    "__docId__": 1179,
    "kind": "method",
    "name": "tridiagonalize",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.tridiagonalize",
    "access": "public",
    "description": "Tridiagonalization of symmetric matrix.\n- Don't support complex numbers.\n- P*H*P'=A\n- P is orthonormal matrix.\n- H is tridiagonal matrix.\n- The eigenvalues of H match the eigenvalues of A.",
    "lineNumber": 1070,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, H: Matrix}} {P, H}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, H: Matrix}"
      ],
      "spread": false,
      "description": "{P, H}"
    }
  },
  {
    "__docId__": 1180,
    "kind": "method",
    "name": "eig",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.eig",
    "access": "public",
    "description": "Eigendecomposition of symmetric matrix.\n- Don't support complex numbers.\n- V*D*V'=A.\n- V is orthonormal matrix. and columns of V are the right eigenvectors.\n- D is a matrix containing the eigenvalues on the diagonal component.",
    "lineNumber": 1094,
    "todo": [
      "対称行列しか対応できていないので、対称行列ではないものはQR分解を用いた手法に切り替える予定。"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{V: Matrix, D: Matrix}} {D, V}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{V: Matrix, D: Matrix}"
      ],
      "spread": false,
      "description": "{D, V}"
    }
  },
  {
    "__docId__": 1181,
    "kind": "method",
    "name": "svd",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.svd",
    "access": "public",
    "description": "Singular Value Decomposition (SVD).\n- U*S*V'=A\n- U and V are orthonormal matrices.\n- S is a matrix with singular values in the diagonal.",
    "lineNumber": 1116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{U: Matrix, S: Matrix, V: Matrix}} U*S*V'=A"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{U: Matrix, S: Matrix, V: Matrix}"
      ],
      "spread": false,
      "description": "U*S*V'=A"
    }
  },
  {
    "__docId__": 1182,
    "kind": "method",
    "name": "inv",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.inv",
    "access": "public",
    "description": "Inverse matrix of this matrix.",
    "lineNumber": 1162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^-1"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^-1"
    }
  },
  {
    "__docId__": 1183,
    "kind": "method",
    "name": "pinv",
    "memberof": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/LinearAlgebra.js~LinearAlgebra.pinv",
    "access": "public",
    "description": "Pseudo-inverse matrix.",
    "lineNumber": 1234,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^+"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^+"
    }
  },
  {
    "__docId__": 1184,
    "kind": "file",
    "name": "src/math/core/tools/Probability.js",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Polyfill from \"../../tools/Polyfill.js\";\n\n/**\n * Return true if the value is integer.\n * @param {number} x\n * @returns {boolean}\n * @ignore\n */\nconst isInteger = function(x) {\n\treturn (x - Math.trunc(x) !== 0.0);\n};\n\n/**\n * Collection for calculating probability using real numbers.\n * - These methods can be used in the `Matrix`, `Complex` method chain.\n * - This class cannot be called directly.\n */\nexport default class Probability {\n\n\t/**\n\t * Log-gamma function.\n\t * @param {number} x\n\t * @returns {number}\n\t */\n\tstatic gammaln(x) {\n\t\tif(!isFinite(x)) {\n\t\t\tif(isNaN(x)) {\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Infinity;\n\t\t\t}\n\t\t}\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p30,技術評論社,1991\n\t\tconst LOG_2PI = Math.log(2.0 * Math.PI);\n\t\t//ベルヌーイ数\n\t\t//http://fr.wikipedia.org/wiki/Nombre_de_Bernoulli\n\t\tconst K2 = ( 1.0 / 6.0)\t\t\t\t\t/ (2 * 1);\n\t\tconst K4 = (-1.0 / 30.0)\t\t\t\t/ (4 * 3);\n\t\tconst K6 = ( 1.0 / 42.0)\t\t\t\t/ (6 * 5);\n\t\tconst K8 = (-1.0 / 30.0)\t\t\t\t/ (8 * 7);\n\t\tconst K10 = ( 5.0 / 66.0)\t\t\t\t/ (10 * 9);\n\t\tconst K12 = (-691.0 / 2730.0)\t\t\t/ (12 * 11);\n\t\tconst K14 = ( 7.0 / 6.0)\t\t\t\t/ (14 * 13);\n\t\tconst K16 = (-3617.0 / 510.0)\t\t\t/ (16 * 15);\n\t\tconst K18 = (43867.0 / 798.0)\t\t\t/ (18 * 17);\n\t\tconst K20 = (-174611.0 / 330.0)\t\t\t/ (20 * 19);\n\t\tconst K22 = (854513.0 / 138.0)\t\t\t/ (22 * 21);\n\t\tconst K24 = (-236364091.0 / 2730.0)\t\t/ (24 * 23);\n\t\tconst K26 = (8553103.0 / 6.0)\t\t\t/ (26 * 25);\n\t\tconst K28 = (-23749461029.0 / 870.0)\t/ (28 * 27);\n\t\tconst K30 = (8615841276005.0 / 14322.0)\t/ (30 * 29);\n\t\tconst K32 = (-7709321041217.0 / 510.0)\t/ (32 * 31);\n\t\tconst LIST = [\n\t\t\tK32, K30, K28, K26, K24, K22, K20, K18,\n\t\t\tK16, K14, K12, K10, K8, K6, K4, K2\n\t\t];\n\t\tlet v = 1;\n\t\tlet lx = x;\n\t\twhile(lx < LIST.length) {\n\t\t\tv *= lx;\n\t\t\tlx++;\n\t\t}\n\t\tconst w = 1 / (lx * lx);\n\t\tlet y = LIST[0];\n\t\tfor(let i = 1; i < LIST.length; i++) {\n\t\t\ty *= w;\n\t\t\ty += LIST[i];\n\t\t}\n\t\ty /= lx;\n\t\ty += 0.5 * LOG_2PI;\n\t\ty += - Math.log(v) - lx + (lx - 0.5) * Math.log(lx);\n\t\treturn(y);\n\t}\n\n\t/**\n\t * Incomplete gamma function upper side.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} gammaln_a\n\t * @returns {number}\n\t */\n\tstatic q_gamma(x, a, gammaln_a) {\n\t\tif(!isFinite(x)) {\n\t\t\tif(x === Infinity) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t}\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p227,技術評論社,1991\n\t\tlet k;\n\t\tlet result, w, temp, previous;\n\t\t// Laguerreの多項式\n\t\tlet la = 1.0, lb = 1.0 + x - a;\n\t\tif(x < 1.0 + a) {\n\t\t\treturn (1 - Probability.p_gamma(x, a, gammaln_a));\n\t\t}\n\t\tw = Math.exp(a * Math.log(x) - x - gammaln_a);\n\t\tresult = w / lb;\n\t\tfor(k = 2; k < 1000; k++) {\n\t\t\ttemp = ((k - 1.0 - a) * (lb - la) + (k + x) * lb) / k;\n\t\t\tla = lb;\n\t\t\tlb = temp;\n\t\t\tw *= (k - 1.0 - a) / k;\n\t\t\ttemp = w / (la * lb);\n\t\t\tprevious = result;\n\t\t\tresult += temp;\n\t\t\tif(result == previous) {\n\t\t\t\treturn(result);\n\t\t\t}\n\t\t}\n\t\treturn Number.NaN;\n\t}\n\n\t/**\n\t * Incomplete gamma function lower side.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} gammaln_a\n\t * @returns {number}\n\t */\n\tstatic p_gamma(x, a, gammaln_a) {\n\t\tif(!isFinite(x)) {\n\t\t\tif(x === Infinity) {\n\t\t\t\treturn 1.0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t}\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p227,技術評論社,1991\n\t\tlet k;\n\t\tlet result, term, previous;\n\t\tif(x >= 1.0 + a) {\n\t\t\treturn (1.0 - Probability.q_gamma(x, a, gammaln_a));\n\t\t}\n\t\tif(x === 0.0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tresult = term = Math.exp(a * Math.log(x) - x - gammaln_a) / a;\n\t\tfor(k = 1; k < 1000; k++) {\n\t\t\tterm *= x / (a + k);\n\t\t\tprevious = result;\n\t\t\tresult += term;\n\t\t\tif(result == previous) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn Number.NaN;\n\t}\n\n\t/**\n\t * Gamma function.\n\t * @param {number} z\n\t * @returns {number}\n\t */\n\tstatic gamma(z) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p30,技術評論社,1991\n\t\tif(z < 0) {\n\t\t\treturn (Math.PI / (Math.sin(Math.PI * z) * Math.exp(Probability.gammaln(1.0 - z))));\n\t\t}\n\t\treturn Math.exp(Probability.gammaln(z));\n\t}\n\n\t/**\n\t * Incomplete gamma function.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {number}\n\t */\n\tstatic gammainc(x, a, tail) {\n\t\tif(tail === \"lower\") {\n\t\t\treturn Probability.p_gamma(x, a, Probability.gammaln(a));\n\t\t}\n\t\telse if(tail === \"upper\") {\n\t\t\treturn Probability.q_gamma(x, a, Probability.gammaln(a));\n\t\t}\n\t\telse if(tail === undefined) {\n\t\t\t// 引数を省略した場合\n\t\t\treturn Probability.gammainc(x, a, \"lower\");\n\t\t}\n\t\telse {\n\t\t\tthrow \"gammainc unsupported argument [\" + tail + \"]\";\n\t\t}\n\t}\n\t\n\t/**\n\t * Probability density function (PDF) of the gamma distribution.\n\t * @param {number} x\n\t * @param {number} k - Shape parameter.\n\t * @param {number} s - Scale parameter.\n\t * @returns {number}\n\t */\n\tstatic gampdf(x, k, s) {\n\t\tif(x === -Infinity) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tlet y = 1.0 / (Probability.gamma(k) * Math.pow(s, k));\n\t\ty *= Math.pow( x, k - 1);\n\t\ty *= Math.exp( - x / s );\n\t\treturn y;\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of gamma distribution.\n\t * @param {number} x\n\t * @param {number} k - Shape parameter.\n\t * @param {number} s - Scale parameter.\n\t * @returns {number}\n\t */\n\tstatic gamcdf(x, k, s) {\n\t\tif(x < 0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn Probability.gammainc(x / s, k);\n\t}\n\t\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of gamma distribution.\n\t * @param {number} p\n\t * @param {number} k - Shape parameter.\n\t * @param {number} s - Scale parameter.\n\t * @returns {number}\n\t */\n\tstatic gaminv(p, k, s) {\n\t\tif((p < 0.0) || (p > 1.0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if(p == 0.0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\telse if(p == 1.0) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\tconst eps = 1.0e-12;\n\t\t// 初期値を決める\n\t\tlet y = k * s;\n\t\t// 単調増加関数なのでニュートン・ラフソン法で解く\n\t\t// x_n+1 = x_n - f(x) / f'(x)\n\t\t// ここで f(x) は累積分布関数、f'(x) は確率密度関数\n\t\t// a = 累積分関数 → f(x)  = 累積分関数 - a と置く。\n\t\t// aの微分は0なので無関係\n\t\tlet delta, y2;\n\t\tfor(let i = 0; i < 100; i++) {\n\t\t\ty2 = y - ((Probability.gamcdf(y, k, s) - p) / Probability.gampdf(y, k, s));\n\t\t\tdelta = y2 - y;\n\t\t\tif(Math.abs(delta) <= eps) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y2;\n\t\t\tif(y < 0.0) {\n\t\t\t\ty = eps;\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Beta function.\n\t * @param {number} x\n\t * @param {number} y\n\t * @returns {number}\n\t */\n\tstatic beta(x, y) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p30,技術評論社,1991\n\t\treturn (Math.exp(Probability.gammaln(x) + Probability.gammaln(y) - Probability.gammaln(x + y)));\n\t}\n\t\n\t/**\n\t * Incomplete beta function lower side.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic p_beta(x, a, b) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p231,技術評論社,1991\n\t\tlet k;\n\t\tlet result, term, previous;\n\t\tif(a <= 0.0) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\tif(b <= 0.0) {\n\t\t\tif(x < 1.0) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\telse if(x === 1.0) {\n\t\t\t\treturn 1.0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\tif(x > (a + 1.0) / (a + b + 2.0)) {\n\t\t\treturn (1.0 - Probability.p_beta(1.0 - x, b, a));\n\t\t}\n\t\tif(x <= 0.0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tterm = a * Math.log(x);\n\t\tterm += b * Math.log(1.0 - x);\n\t\tterm += Probability.gammaln(a + b);\n\t\tterm -= Probability.gammaln(a) + Probability.gammaln(b);\n\t\tterm = Math.exp(term);\n\t\tterm /= a;\n\t\tresult = term;\n\t\tfor(k = 1; k < 1000; k++) {\n\t\t\tterm *= a + b + k - 1.0;\n\t\t\tterm *= x;\n\t\t\tterm /= a + k;\n\t\t\tprevious = result;\n\t\t\tresult += term;\n\t\t\tif(result === previous) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn Number.NaN;\n\t}\n\n\t/**\n\t * Incomplete beta function upper side.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic q_beta(x, a, b) {\n\t\treturn (1.0 - Probability.p_beta(x, a, b));\n\t}\n\n\t/**\n\t * Incomplete beta function.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {number}\n\t */\n\tstatic betainc(x, a, b, tail) {\n\t\tif(tail === \"lower\") {\n\t\t\treturn Probability.p_beta(x, a, b);\n\t\t}\n\t\telse if(tail === \"upper\") {\n\t\t\treturn Probability.q_beta(x, a, b);\n\t\t}\n\t\telse if(tail === undefined) {\n\t\t\t// 引数を省略した場合\n\t\t\treturn Probability.betainc(x, a, b, \"lower\");\n\t\t}\n\t\telse {\n\t\t\tthrow \"betainc unsupported argument [\" + tail + \"]\";\n\t\t}\n\t}\n\t\n\t/**\n\t * Probability density function (PDF) of beta distribution.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic betapdf(x, a, b) {\n\t\t// powの計算結果が複素数になる場合は計算を行わない\n\t\tif\t(\n\t\t\t((x < 0) && isInteger(b - 1)) ||\n\t\t\t((1 - x < 0) && isInteger(b - 1))\n\t\t) {\n\t\t\treturn 0.0;\n\t\t}\n\t\t// 以下の式でも求められるが betapdf(0, 1, 1)で、Log(0)の計算が発生しNaNを返してしまう。実際は1を返すべき。\n\t\t//return(Math.exp((a - 1) * Math.log(x) + (b - 1) * Math.log(1 - x)) / Probability.beta(a,  b));\n\t\treturn (Math.pow(x, a - 1) * Math.pow(1 - x, b - 1) / Probability.beta(a,  b));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of beta distribution.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic betacdf(x, a, b) {\n\t\treturn Probability.betainc(x, a, b);\n\t}\n\t\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of beta distribution.\n\t * @param {number} p\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic betainv(p, a, b) {\n\t\tif((p < 0.0) || (p > 1.0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if((p == 0.0) && (a > 0.0) && (b > 0.0)) {\n\t\t\treturn 0.0;\n\t\t}\n\t\telse if((p == 1.0) && (a > 0.0) && (b > 0.0)) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tconst eps = 1.0e-14;\n\t\t// 初期値を決める\n\t\tlet y;\n\t\tif(b == 0) {\n\t\t\ty = 1.0 - eps;\n\t\t}\n\t\telse if(a == 0) {\n\t\t\ty = eps;\n\t\t}\n\t\telse {\n\t\t\ty = a / (a + b);\n\t\t}\n\t\t// 単調増加関数なのでニュートン・ラフソン法で解く\n\t\t// x_n+1 = x_n - f(x) / f'(x)\n\t\t// ここで f(x) は累積分布関数、f'(x) は確率密度関数\n\t\t// a = 累積分関数 → f(x)  = 累積分関数 - a と置く。\n\t\t// aの微分は0なので無関係\n\t\tlet delta, y2;\n\t\tfor(let i = 0; i < 100; i++) {\n\t\t\ty2 = y - ((Probability.betacdf(y, a, b) - p) / Probability.betapdf(y, a, b));\n\t\t\tdelta = y2 - y;\n\t\t\tif(Math.abs(delta) <= eps) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y2;\n\t\t\tif(y > 1.0) {\n\t\t\t\ty = 1.0 - eps;\n\t\t\t}\n\t\t\telse if(y < 0.0) {\n\t\t\t\ty = eps;\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Factorial function, x!.\n\t * @param {number} n\n\t * @returns {number}\n\t */\n\tstatic factorial(n) {\n\t\tconst y = Probability.gamma(n + 1.0);\n\t\tif(Math.trunc(n) === n) {\n\t\t\treturn Math.round(y);\n\t\t}\n\t\telse {\n\t\t\treturn y;\n\t\t}\n\t}\n\n\t/**\n\t * Binomial coefficient, number of all combinations, nCk.\n\t * @param {number} n\n\t * @param {number} k\n\t * @returns {number} nCk\n\t */\n\tstatic nchoosek(n, k) {\n\t\t// 少ない数字なら以下の計算でよい\n\t\t// return Math.round(Probability.factorial(n) / (Probability.factorial(n - k) * Probability.factorial(k)));\n\t\tlet x = 1;\n\t\tconst new_k = Math.min(k, n - k);\n\t\tfor(let i = 1; i <= new_k; i++) {\n\t\t\tx *= (n + 1 - i) / i;\n\t\t\tif(x >= Number.MAX_SAFE_INTEGER) {\n\t\t\t\treturn Infinity;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * Error function.\n\t * @param {number} x\n\t * @returns {number}\n\t */\n\tstatic erf(x) {\n\t\treturn (Probability.p_gamma(x * x, 0.5, Math.log(Math.PI) * 0.5) * (x >= 0 ? 1.0 : -1.0));\n\t}\n\n\t/**\n\t * Complementary error function.\n\t * @param {number} x\n\t * @returns {number}\n\t */\n\tstatic erfc(x) {\n\t\treturn 1.0 - Probability.erf(x);\n\t}\n\n\t/**\n\t * Inverse function of error function.\n\t * @param {number} p\n\t * @returns {number}\n\t */\n\tstatic erfinv(p) {\n\t\treturn Probability.erfcinv(1.0 - p);\n\t}\n\n\t/**\n\t * Inverse function of complementary error function.\n\t * @param {number} p\n\t * @returns {number}\n\t */\n\tstatic erfcinv(p) {\n\t\treturn - Probability.norminv(p * 0.5) / Math.sqrt(2);\n\t}\n\n\t/**\n\t * Probability density function (PDF) of normal distribution.\n\t * @param {number} x\n\t * @param {number} [u=0.0] - Average value.\n\t * @param {number} [s=1.0] - Variance value.\n\t * @returns {number}\n\t */\n\tstatic normpdf(x, u, s) {\n\t\tconst u_ = typeof u === \"number\" ? u : 0.0;\n\t\tconst s_ = typeof s === \"number\" ? s : 1.0;\n\t\tlet y = 1.0 / Math.sqrt( 2.0 * Math.PI * s_ * s_ );\n\t\ty *= Math.exp( - (x - u_) * (x - u_) / (2.0 * s_ * s_));\n\t\treturn y;\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of normal distribution.\n\t * @param {number} x\n\t * @param {number} [u=0.0] - Average value.\n\t * @param {number} [s=1.0] - Variance value.\n\t * @returns {number}\n\t */\n\tstatic normcdf(x, u, s) {\n\t\tconst u_ = typeof u === \"number\" ? u : 0.0;\n\t\tconst s_ = typeof s === \"number\" ? s : 1.0;\n\t\treturn (1.0 + Probability.erf( (x - u_) / (s_ * Math.sqrt(2.0)) )) / 2.0;\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of normal distribution.\n\t * @param {number} p - Probability.\n\t * @param {number} [u=0.0] - Average value.\n\t * @param {number} [s=1.0] - Variance value.\n\t * @returns {number}\n\t */\n\tstatic norminv(p, u, s) {\n\t\tif((p < 0.0) || (p > 1.0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if(p == 0.0) {\n\t\t\treturn Number.NEGATIVE_INFINITY;\n\t\t}\n\t\telse if(p == 1.0) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\tconst u_ = typeof u === \"number\" ? u : 0.0;\n\t\tconst s_ = typeof s === \"number\" ? s : 1.0;\n\t\tconst eps = 1.0e-12;\n\t\t// 初期値を決める\n\t\tlet y = u_;\n\t\t// 単調増加関数なのでニュートン・ラフソン法で解く\n\t\t// x_n+1 = x_n - f(x) / f'(x)\n\t\t// ここで f(x) は累積分布関数、f'(x) は確率密度関数\n\t\t// a = 累積分関数 → f(x)  = 累積分関数 - a と置く。\n\t\t// aの微分は0なので無関係\n\t\tlet delta, y2;\n\t\tfor(let i = 0; i < 200; i++) {\n\t\t\ty2 = y - ((Probability.normcdf(y, u_, s_) - p) / Probability.normpdf(y, u_, s_));\n\t\t\tdelta = y2 - y;\n\t\t\tif(Math.abs(delta) <= eps) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y2;\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Probability density function (PDF) of binomial distribution.\n\t * @param {number} x\n\t * @param {number} n\n\t * @param {number} p\n\t * @returns {number}\n\t */\n\tstatic binopdf(x, n, p) {\n\t\tif(!isFinite(p)) {\n\t\t\tif(isNaN(p)) {\n\t\t\t\treturn NaN;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t}\n\t\treturn Probability.nchoosek(n, x) * Math.pow(p, x) * Math.pow(1.0 - p, n - x);\n\t}\n\t\n\t/**\n\t * Cumulative distribution function (CDF) of binomial distribution.\n\t * @param {number} x\n\t * @param {number} n\n\t * @param {number} p\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {number}\n\t */\n\tstatic binocdf(x, n, p, tail) {\n\t\treturn Probability.betainc(1.0 - p, n - Math.floor(x), 1 + Math.floor(x), tail);\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of binomial distribution.\n\t * @param {number} y\n\t * @param {number} n\n\t * @param {number} p\n\t * @returns {number}\n\t */\n\tstatic binoinv(y, n, p) {\n\t\tif((y < 0.0) || (1.0 < y) || (p < 0.0) || (1.0 < p)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if((y == 0.0) || (p == 0.0)) {\n\t\t\treturn 0.0;\n\t\t}\n\t\telse if(p == 1.0) {\n\t\t\treturn n;\n\t\t}\n\t\t// 初期値を決める\n\t\tlet min = 1;\n\t\tlet max = n;\n\t\tlet middle = 0, old_middle = 0; \n\t\t// ニュートンラフソン法だと安定しないので\n\t\t// 挟み込み法（二分法）で求める\n\t\tfor(let i = 0; i < 200; i++) {\n\t\t\tmiddle = Math.round((min + max) / 2);\n\t\t\tconst Y = Probability.binocdf(middle, n, p);\n\t\t\tif(middle === old_middle) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(Y > y) {\n\t\t\t\tmax = middle;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmin = middle;\n\t\t\t}\n\t\t\told_middle = middle;\n\t\t}\n\t\treturn middle;\n\t}\n\n\t/**\n\t * Probability density function (PDF) of Poisson distribution.\n\t * @param {number} k\n\t * @param {number} lambda\n\t * @returns {number}\n\t */\n\tstatic poisspdf(k, lambda) {\n\t\tif(!isFinite(k)) {\n\t\t\tif(isNaN(k)) {\n\t\t\t\treturn Number.NaN;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t}\n\t\t// k が大きいとInfになってしまうので以下の処理はだめ\n\t\t// Math.pow(lambda, k) * Math.exp( - lambda ) / Probability.factorial(k);\n\t\t// あふれないように調整しながら、地道に計算する。\n\t\tconst inv_e = 1.0 / Math.E;\n\t\tlet x = 1.0;\n\t\tlet lambda_i = 0;\n\t\tfor(let i = 1; i <= k; i++) {\n\t\t\tx = x * lambda / i;\n\t\t\tif(lambda_i < lambda) {\n\t\t\t\tx *= inv_e;\n\t\t\t\tlambda_i++;\n\t\t\t}\n\t\t}\n\t\tfor(; lambda_i < lambda; lambda_i++) {\n\t\t\tx *= inv_e;\n\t\t}\n\t\treturn x;\n\t}\n\t\n\t/**\n\t * Cumulative distribution function (CDF) of Poisson distribution.\n\t * @param {number} k\n\t * @param {number} lambda\n\t * @returns {number}\n\t */\n\tstatic poisscdf(k, lambda) {\n\t\tif(k < 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn 1.0 - Probability.gammainc(lambda, Math.floor(k + 1));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of Poisson distribution.\n\t * @param {number} p\n\t * @param {number} lambda\n\t * @returns {number}\n\t */\n\tstatic poissinv(p, lambda) {\n\t\tif((p < 0.0) || (1.0 < p)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if(p == 0.0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\telse if(p == 1.0) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\t// 初期値を決める\n\t\tlet min = 1;\n\t\tlet max = lambda * 20;\n\t\tlet middle = 0, old_middle = 0; \n\t\t// ニュートンラフソン法だと安定しないので\n\t\t// 挟み込み法（二分法）で求める\n\t\tfor(let i = 0; i < 200; i++) {\n\t\t\tmiddle = Math.round((min + max) / 2);\n\t\t\tconst P = Probability.poisscdf(middle, lambda);\n\t\t\tif(middle === old_middle) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(P > p) {\n\t\t\t\tmax = middle;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmin = middle;\n\t\t\t}\n\t\t\told_middle = middle;\n\t\t\t// console.log(i + \" \" + min + \" \" + P + \" \" + max);\n\t\t}\n\t\treturn middle;\n\t}\n\n\t/**\n\t * Probability density function (PDF) of Student's t-distribution.\n\t * @param {number} t - T-value.\n\t * @param {number} v - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic tpdf(t, v) {\n\t\tlet y = 1.0 / (Math.sqrt(v) * Probability.beta(0.5, v * 0.5));\n\t\ty *= Math.pow( 1 + t * t / v, - (v + 1) * 0.5);\n\t\treturn y;\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution.\n\t * @param {number} t - T-value.\n\t * @param {number} v - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic tcdf(t, v) {\n\t\tconst y = (t * t) / (v + t * t) ;\n\t\tconst p = Probability.betainc( y, 0.5, v * 0.5 ) * (t < 0 ? -1 : 1);\n\t\treturn 0.5 * (1 + p);\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution.\n\t * @param {number} p - Probability.\n\t * @param {number} v - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic tinv(p, v) {\n\t\tif((p < 0) || (p > 1)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\tif(p == 0) {\n\t\t\treturn Number.NEGATIVE_INFINITY;\n\t\t}\n\t\telse if(p == 1) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\telse if(p < 0.5) {\n\t\t\tconst y = Probability.betainv(2.0 * p, 0.5 * v, 0.5);\n\t\t\treturn - Math.sqrt(v / y - v);\n\t\t}\n\t\telse {\n\t\t\tconst y = Probability.betainv(2.0 * (1.0 - p), 0.5 * v, 0.5);\n\t\t\treturn Math.sqrt(v / y - v);\n\t\t}\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.\n\t * @param {number} t - T-value.\n\t * @param {number} v - The degrees of freedom. (DF)\n\t * @param {number} tails - Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)\n\t * @returns {number}\n\t */\n\tstatic tdist(t, v, tails) {\n\t\treturn (1.0 - Probability.tcdf(Math.abs(t), v)) * tails;\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.\n\t * @param {number} p - Probability.\n\t * @param {number} v - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic tinv2(p, v) {\n\t\treturn - Probability.tinv( p * 0.5, v);\n\t}\n\n\t/**\n\t * Probability density function (PDF) of chi-square distribution.\n\t * @param {number} x \n\t * @param {number} k - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic chi2pdf(x, k) {\n\t\tif(x < 0.0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(x === 0.0) {\n\t\t\treturn 0.5;\n\t\t}\n\t\tlet y = Math.pow(x, k / 2.0 - 1.0) * Math.exp( - x / 2.0 );\n\t\ty /= Math.pow(2, k / 2.0) * Probability.gamma( k / 2.0);\n\t\treturn y;\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of chi-square distribution.\n\t * @param {number} x \n\t * @param {number} k - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic chi2cdf(x, k) {\n\t\treturn Probability.gammainc(x / 2.0, k / 2.0);\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of chi-square distribution.\n\t * @param {number} p - Probability.\n\t * @param {number} k - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic chi2inv(p, k) {\n\t\treturn Probability.gaminv(p, k / 2.0, 2);\n\t}\n\n\t/**\n\t * Probability density function (PDF) of F-distribution.\n\t * @param {number} x\n\t * @param {number} d1 - The degree of freedom of the molecules.\n\t * @param {number} d2 - The degree of freedom of the denominator\n\t * @returns {number}\n\t */\n\tstatic fpdf(x, d1, d2) {\n\t\tif((d1 < 0) || (d2 < 0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if(x <= 0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tlet y = 1.0;\n\t\ty *= Math.pow( (d1 * x) / (d1 * x + d2) , d1 / 2.0);\n\t\ty *= Math.pow( 1.0 - ((d1 * x) / (d1 * x + d2)), d2 / 2.0);\n\t\ty /= x * Probability.beta(d1 / 2.0, d2 / 2.0);\n\t\treturn y;\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of F-distribution.\n\t * @param {number} x\n\t * @param {number} d1 - The degree of freedom of the molecules.\n\t * @param {number} d2 - The degree of freedom of the denominator\n\t * @returns {number}\n\t */\n\tstatic fcdf(x, d1, d2) {\n\t\treturn Probability.betacdf( d1 * x / (d1 * x + d2), d1 / 2.0, d2 / 2.0 );\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of F-distribution.\n\t * @param {number} p - Probability.\n\t * @param {number} d1 - The degree of freedom of the molecules.\n\t * @param {number} d2 - The degree of freedom of the denominator\n\t * @returns {number}\n\t */\n\tstatic finv(p, d1, d2) {\n\t\treturn (1.0 / Probability.betainv( 1.0 - p, d2 / 2.0, d1 / 2.0 ) - 1.0) * d2 / d1;\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/core/tools/Probability.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1185,
    "kind": "function",
    "name": "isInteger",
    "memberof": "src/math/core/tools/Probability.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~isInteger",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/tools/Probability.js",
    "importStyle": null,
    "description": "Return true if the value is integer.",
    "lineNumber": 19,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1186,
    "kind": "class",
    "name": "Probability",
    "memberof": "src/math/core/tools/Probability.js",
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/core/tools/Probability.js",
    "importStyle": "Probability",
    "description": "Collection for calculating probability using real numbers.\n- These methods can be used in the `Matrix`, `Complex` method chain.\n- This class cannot be called directly.",
    "lineNumber": 28,
    "interface": false
  },
  {
    "__docId__": 1187,
    "kind": "method",
    "name": "gammaln",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.gammaln",
    "access": "public",
    "description": "Log-gamma function.",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1188,
    "kind": "method",
    "name": "q_gamma",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.q_gamma",
    "access": "public",
    "description": "Incomplete gamma function upper side.",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "gammaln_a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1189,
    "kind": "method",
    "name": "p_gamma",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.p_gamma",
    "access": "public",
    "description": "Incomplete gamma function lower side.",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "gammaln_a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1190,
    "kind": "method",
    "name": "gamma",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.gamma",
    "access": "public",
    "description": "Gamma function.",
    "lineNumber": 169,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1191,
    "kind": "method",
    "name": "gammainc",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.gammainc",
    "access": "public",
    "description": "Incomplete gamma function.",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1192,
    "kind": "method",
    "name": "gampdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.gampdf",
    "access": "public",
    "description": "Probability density function (PDF) of the gamma distribution.",
    "lineNumber": 207,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1193,
    "kind": "method",
    "name": "gamcdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.gamcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of gamma distribution.",
    "lineNumber": 224,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1194,
    "kind": "method",
    "name": "gaminv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.gaminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of gamma distribution.",
    "lineNumber": 238,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1195,
    "kind": "method",
    "name": "beta",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.beta",
    "access": "public",
    "description": "Beta function.",
    "lineNumber": 277,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1196,
    "kind": "method",
    "name": "p_beta",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.p_beta",
    "access": "public",
    "description": "Incomplete beta function lower side.",
    "lineNumber": 289,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1197,
    "kind": "method",
    "name": "q_beta",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.q_beta",
    "access": "public",
    "description": "Incomplete beta function upper side.",
    "lineNumber": 340,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1198,
    "kind": "method",
    "name": "betainc",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.betainc",
    "access": "public",
    "description": "Incomplete beta function.",
    "lineNumber": 352,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1199,
    "kind": "method",
    "name": "betapdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.betapdf",
    "access": "public",
    "description": "Probability density function (PDF) of beta distribution.",
    "lineNumber": 375,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1200,
    "kind": "method",
    "name": "betacdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.betacdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of beta distribution.",
    "lineNumber": 395,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1201,
    "kind": "method",
    "name": "betainv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.betainv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of beta distribution.",
    "lineNumber": 406,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1202,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.factorial",
    "access": "public",
    "description": "Factorial function, x!.",
    "lineNumber": 456,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1203,
    "kind": "method",
    "name": "nchoosek",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.nchoosek",
    "access": "public",
    "description": "Binomial coefficient, number of all combinations, nCk.",
    "lineNumber": 472,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} nCk"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "nCk"
    }
  },
  {
    "__docId__": 1204,
    "kind": "method",
    "name": "erf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.erf",
    "access": "public",
    "description": "Error function.",
    "lineNumber": 491,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1205,
    "kind": "method",
    "name": "erfc",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.erfc",
    "access": "public",
    "description": "Complementary error function.",
    "lineNumber": 500,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1206,
    "kind": "method",
    "name": "erfinv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.erfinv",
    "access": "public",
    "description": "Inverse function of error function.",
    "lineNumber": 509,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1207,
    "kind": "method",
    "name": "erfcinv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.erfcinv",
    "access": "public",
    "description": "Inverse function of complementary error function.",
    "lineNumber": 518,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1208,
    "kind": "method",
    "name": "normpdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.normpdf",
    "access": "public",
    "description": "Probability density function (PDF) of normal distribution.",
    "lineNumber": 529,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1209,
    "kind": "method",
    "name": "normcdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.normcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of normal distribution.",
    "lineNumber": 544,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1210,
    "kind": "method",
    "name": "norminv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.norminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of normal distribution.",
    "lineNumber": 557,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "Probability."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1211,
    "kind": "method",
    "name": "binopdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.binopdf",
    "access": "public",
    "description": "Probability density function (PDF) of binomial distribution.",
    "lineNumber": 596,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1212,
    "kind": "method",
    "name": "binocdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.binocdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of binomial distribution.",
    "lineNumber": 616,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1213,
    "kind": "method",
    "name": "binoinv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.binoinv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of binomial distribution.",
    "lineNumber": 627,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1214,
    "kind": "method",
    "name": "poisspdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.poisspdf",
    "access": "public",
    "description": "Probability density function (PDF) of Poisson distribution.",
    "lineNumber": 666,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1215,
    "kind": "method",
    "name": "poisscdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.poisscdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Poisson distribution.",
    "lineNumber": 700,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1216,
    "kind": "method",
    "name": "poissinv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.poissinv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of Poisson distribution.",
    "lineNumber": 713,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1217,
    "kind": "method",
    "name": "tpdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.tpdf",
    "access": "public",
    "description": "Probability density function (PDF) of Student's t-distribution.",
    "lineNumber": 753,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "T-value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1218,
    "kind": "method",
    "name": "tcdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.tcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution.",
    "lineNumber": 765,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "T-value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1219,
    "kind": "method",
    "name": "tinv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.tinv",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution.",
    "lineNumber": 777,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "Probability."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1220,
    "kind": "method",
    "name": "tdist",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.tdist",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.",
    "lineNumber": 804,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "T-value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "tails",
        "description": "Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1221,
    "kind": "method",
    "name": "tinv2",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.tinv2",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.",
    "lineNumber": 814,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "Probability."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1222,
    "kind": "method",
    "name": "chi2pdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.chi2pdf",
    "access": "public",
    "description": "Probability density function (PDF) of chi-square distribution.",
    "lineNumber": 824,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1223,
    "kind": "method",
    "name": "chi2cdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.chi2cdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of chi-square distribution.",
    "lineNumber": 842,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1224,
    "kind": "method",
    "name": "chi2inv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.chi2inv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of chi-square distribution.",
    "lineNumber": 852,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "Probability."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1225,
    "kind": "method",
    "name": "fpdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.fpdf",
    "access": "public",
    "description": "Probability density function (PDF) of F-distribution.",
    "lineNumber": 863,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1226,
    "kind": "method",
    "name": "fcdf",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.fcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of F-distribution.",
    "lineNumber": 884,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1227,
    "kind": "method",
    "name": "finv",
    "memberof": "src/math/core/tools/Probability.js~Probability",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Probability.js~Probability.finv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of F-distribution.",
    "lineNumber": 895,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "Probability."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1228,
    "kind": "file",
    "name": "src/math/core/tools/random/MaximumLengthSequence.js",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Polyfill from \"../../../tools/Polyfill.js\";\n\n/**\n * Random number class.\n * @private\n * @ignore\n */\nexport default class MaximumLengthSequence {\n\t\n\t/**\n\t * Create Random.\n\t * @param {number} [seed] - Seed number for random number generation. If not specified, create from time.\n\t */\n\tconstructor(seed) {\n\t\t// 「M系列乱数」で乱数を作成します。\n\t\t// 参考：奥村晴彦 (1991). C言語による最新アルゴリズム事典.\n\t\t// 比較的長い 2^521 - 1通りを出力します。\n\t\t// 乱数はCでの動作と同じ値が出ることを確認。(seed = 1として1000番目の値が等しいことを確認)\n\n\t\t/**\n\t\t * Random number array.\n\t\t * @private\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.x = [];\n\t\tfor(let i = 0;i < 521;i++) {\n\t\t\tthis.x[i] = 0;\n\t\t}\n\t\tif(seed !== undefined) {\n\t\t\tthis.setSeed(seed);\n\t\t}\n\t\telse {\n\t\t\t// 線形合同法で適当に乱数を作成する\n\t\t\tconst seed = ((new Date()).getTime() + MaximumLengthSequence.seedUniquifier) & 0xFFFFFFFF;\n\t\t\tMaximumLengthSequence.seedUniquifier = (MaximumLengthSequence.seedUniquifier + 1) & 0xFFFFFFFF;\n\t\t\tthis.setSeed(seed);\n\t\t}\n\t}\n\n\t/**\n\t * 内部データをシャッフル\n\t */\n\t_rnd521() {\n\t\tconst x = this.x;\n\t\tfor(let i = 0; i < 32; i++) {\n\t\t\tx[i] ^= x[i + 489];\n\t\t}\n\t\tfor(let i = 32; i < 521; i++) {\n\t\t\tx[i] ^= x[i - 32];\n\t\t}\n\t}\n\n\t/**\n\t * Initialize random seed.\n\t * @param {number} seed\n\t */\n\tsetSeed(seed) {\n\t\t// 伏見「乱数」東京大学出版会,1989 の方法により初期値を設定\n\t\tlet u = 0;\n\t\tconst x = this.x;\n\t\t// seedを使用して線形合同法でx[0-16]まで初期値を設定\n\t\tlet random_seed = seed;\n\t\tfor(let i = 0; i <= 16; i++) {\n\t\t\tfor(let j = 0; j < 32; j++) {\n\t\t\t\trandom_seed = Math.imul(random_seed, 0x5D588B65) + 1;\n\t\t\t\tu = (u >>> 1) + ((random_seed < 0) ? 0x80000000 : 0);\n\t\t\t}\n\t\t\tx[i] = u;\n\t\t}\n\t\t// 残りのビットはx[i] = x[i-32] ^ x[i-521]で生成\n\t\tfor(let i = 16; i < 521; i++) {\n\t\t\tu = (i === 16) ? i : (i - 17);\n\t\t\tx[i] = ((x[u] << 23) & 0xFFFFFFFF) ^ (x[i - 16] >>> 9) ^ x[i - 1];\n\t\t}\n\t\t// ビットをシャッフル\n\t\tfor(let i = 0; i < 4; i++) {\n\t\t\tthis._rnd521();\n\t\t}\n\t\t\n\t\t/**\n\t\t * Number of random number array to use.\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.xi = 0;\n\t\t\n\t\t/**\n\t\t * Is keep random numbers based on Gaussian distribution.\n\t\t * @private\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.haveNextNextGaussian = false;\n\t\t\n\t\t/**\n\t\t * Next random number based on Gaussian distribution.\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.nextNextGaussian = 0;\n\t}\n\n\t/**\n\t * 32-bit random number.\n\t * @returns {number} - 32ビットの乱数\n\t */\n\tgenrand_int32() {\n\t\t// 全て使用したら、再び混ぜる\n\t\tif(this.xi === 521) {\n\t\t\tthis._rnd521();\n\t\t\tthis.xi = 0;\n\t\t}\n\t\tconst y = this.x[this.xi] >>> 0; // Create a 32-bit nonnegative integer.\n\t\tthis.xi = this.xi + 1;\n\t\treturn y;\n\t}\n\n}\n\n/**\n * Random number creation integer when no seed is set.\n * @type {number}\n * @ignore\n */\nMaximumLengthSequence.seedUniquifier = 0x87654321;\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/core/tools/random/MaximumLengthSequence.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1229,
    "kind": "class",
    "name": "MaximumLengthSequence",
    "memberof": "src/math/core/tools/random/MaximumLengthSequence.js",
    "static": true,
    "longname": "src/math/core/tools/random/MaximumLengthSequence.js~MaximumLengthSequence",
    "access": "private",
    "export": true,
    "importPath": "konpeito/src/math/core/tools/random/MaximumLengthSequence.js",
    "importStyle": "MaximumLengthSequence",
    "description": "Random number class.",
    "lineNumber": 18,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 1230,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/core/tools/random/MaximumLengthSequence.js~MaximumLengthSequence",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/random/MaximumLengthSequence.js~MaximumLengthSequence#constructor",
    "access": "public",
    "description": "Create Random.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "seed",
        "description": "Seed number for random number generation. If not specified, create from time."
      }
    ]
  },
  {
    "__docId__": 1231,
    "kind": "member",
    "name": "x",
    "memberof": "src/math/core/tools/random/MaximumLengthSequence.js~MaximumLengthSequence",
    "static": false,
    "longname": "src/math/core/tools/random/MaximumLengthSequence.js~MaximumLengthSequence#x",
    "access": "private",
    "description": "Random number array.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1232,
    "kind": "method",
    "name": "_rnd521",
    "memberof": "src/math/core/tools/random/MaximumLengthSequence.js~MaximumLengthSequence",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/random/MaximumLengthSequence.js~MaximumLengthSequence#_rnd521",
    "access": "private",
    "description": "内部データをシャッフル",
    "lineNumber": 53,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1233,
    "kind": "method",
    "name": "setSeed",
    "memberof": "src/math/core/tools/random/MaximumLengthSequence.js~MaximumLengthSequence",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/random/MaximumLengthSequence.js~MaximumLengthSequence#setSeed",
    "access": "public",
    "description": "Initialize random seed.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1234,
    "kind": "member",
    "name": "xi",
    "memberof": "src/math/core/tools/random/MaximumLengthSequence.js~MaximumLengthSequence",
    "static": false,
    "longname": "src/math/core/tools/random/MaximumLengthSequence.js~MaximumLengthSequence#xi",
    "access": "private",
    "description": "Number of random number array to use.",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1235,
    "kind": "member",
    "name": "haveNextNextGaussian",
    "memberof": "src/math/core/tools/random/MaximumLengthSequence.js~MaximumLengthSequence",
    "static": false,
    "longname": "src/math/core/tools/random/MaximumLengthSequence.js~MaximumLengthSequence#haveNextNextGaussian",
    "access": "private",
    "description": "Is keep random numbers based on Gaussian distribution.",
    "lineNumber": 102,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1236,
    "kind": "member",
    "name": "nextNextGaussian",
    "memberof": "src/math/core/tools/random/MaximumLengthSequence.js~MaximumLengthSequence",
    "static": false,
    "longname": "src/math/core/tools/random/MaximumLengthSequence.js~MaximumLengthSequence#nextNextGaussian",
    "access": "private",
    "description": "Next random number based on Gaussian distribution.",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1237,
    "kind": "method",
    "name": "genrand_int32",
    "memberof": "src/math/core/tools/random/MaximumLengthSequence.js~MaximumLengthSequence",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/random/MaximumLengthSequence.js~MaximumLengthSequence#genrand_int32",
    "access": "public",
    "description": "32-bit random number.",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} - 32ビットの乱数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "32ビットの乱数"
    },
    "params": []
  },
  {
    "__docId__": 1240,
    "kind": "file",
    "name": "src/math/core/tools/random/Xorshift.js",
    "content": "/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Polyfill from \"../../../tools/Polyfill.js\";\n\n/**\n * Random number class.\n * @private\n * @ignore\n */\nexport default class Xorshift {\n\t\n\t/**\n\t * Create Random.\n\t * @param {number} [seed] - Seed number for random number generation. If not specified, create from time.\n\t */\n\tconstructor(seed) {\n\n\t\t/**\n\t\t * @type {number}\n\t\t * @private\n\t\t * @ignore\n\t\t */\n\t\tthis.x = 123456789;\n\t\t\n\t\t/**\n\t\t * @type {number}\n\t\t * @private\n\t\t * @ignore\n\t\t */\n\t\tthis.y = 362436069;\n\t\t\n\t\t/**\n\t\t * @type {number}\n\t\t * @private\n\t\t * @ignore\n\t\t */\n\t\tthis.z = 521288629;\n\t\t\n\t\t/**\n\t\t * @type {number}\n\t\t * @private\n\t\t * @ignore\n\t\t */\n\t\tthis.w = 88675123;\n\n\t\tif(seed !== undefined) {\n\t\t\tthis.setSeed(seed);\n\t\t}\n\t\telse {\n\t\t\t// 線形合同法で適当に乱数を作成する\n\t\t\tconst new_seed = ((new Date()).getTime() + Xorshift.seedUniquifier) & 0xFFFFFFFF;\n\t\t\tXorshift.seedUniquifier = (Xorshift.seedUniquifier + 1) & 0xFFFFFFFF;\n\t\t\tthis.setSeed(new_seed);\n\t\t}\n\t}\n\n\t/**\n\t * シード値の初期化\n\t * @param {number} seed\n\t */\n\tsetSeed(seed) {\n\t\t// seedを使用して線形合同法で初期値を設定\n\t\tlet random_seed = seed;\n\t\trandom_seed = (Math.imul(random_seed, 214013) + 2531011) >>> 0;\n\t\tthis.z = random_seed;\n\t\trandom_seed = (Math.imul(random_seed, 214013) + 2531011) >>> 0;\n\t\tthis.w = random_seed;\n\n\t\t/**\n\t\t * Is keep random numbers based on Gaussian distribution.\n\t\t * @private\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.haveNextNextGaussian = false;\n\t\t\n\t\t/**\n\t\t * Next random number based on Gaussian distribution.\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.nextNextGaussian = 0;\n\t}\n\n\t/**\n\t * 32-bit random number.\n\t * @returns {number} - 32ビットの乱数\n\t * @private\n\t */\n\tgenrand_int32() {\n\t\tconst t = this.x ^ (this.x << 11);\n\t\tthis.x = this.y;\n\t\tthis.y = this.z;\n\t\tthis.z = this.w;\n\t\tthis.w = (this.w ^ (this.w >>> 19)) ^ (t ^ (t >>> 8));\n\t\treturn this.w;\n\t}\n\n}\n\n/**\n * Random number creation integer when no seed is set.\n * @type {number}\n * @ignore\n */\nXorshift.seedUniquifier = 0x87654321;\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/core/tools/random/Xorshift.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1241,
    "kind": "class",
    "name": "Xorshift",
    "memberof": "src/math/core/tools/random/Xorshift.js",
    "static": true,
    "longname": "src/math/core/tools/random/Xorshift.js~Xorshift",
    "access": "private",
    "export": true,
    "importPath": "konpeito/src/math/core/tools/random/Xorshift.js",
    "importStyle": "Xorshift",
    "description": "Random number class.",
    "lineNumber": 18,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 1242,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/core/tools/random/Xorshift.js~Xorshift",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/random/Xorshift.js~Xorshift#constructor",
    "access": "public",
    "description": "Create Random.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "seed",
        "description": "Seed number for random number generation. If not specified, create from time."
      }
    ]
  },
  {
    "__docId__": 1243,
    "kind": "member",
    "name": "x",
    "memberof": "src/math/core/tools/random/Xorshift.js~Xorshift",
    "static": false,
    "longname": "src/math/core/tools/random/Xorshift.js~Xorshift#x",
    "access": "private",
    "description": "",
    "lineNumber": 31,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1244,
    "kind": "member",
    "name": "y",
    "memberof": "src/math/core/tools/random/Xorshift.js~Xorshift",
    "static": false,
    "longname": "src/math/core/tools/random/Xorshift.js~Xorshift#y",
    "access": "private",
    "description": "",
    "lineNumber": 38,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1245,
    "kind": "member",
    "name": "z",
    "memberof": "src/math/core/tools/random/Xorshift.js~Xorshift",
    "static": false,
    "longname": "src/math/core/tools/random/Xorshift.js~Xorshift#z",
    "access": "private",
    "description": "",
    "lineNumber": 45,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1246,
    "kind": "member",
    "name": "w",
    "memberof": "src/math/core/tools/random/Xorshift.js~Xorshift",
    "static": false,
    "longname": "src/math/core/tools/random/Xorshift.js~Xorshift#w",
    "access": "private",
    "description": "",
    "lineNumber": 52,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1247,
    "kind": "method",
    "name": "setSeed",
    "memberof": "src/math/core/tools/random/Xorshift.js~Xorshift",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/random/Xorshift.js~Xorshift#setSeed",
    "access": "public",
    "description": "シード値の初期化",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1250,
    "kind": "member",
    "name": "haveNextNextGaussian",
    "memberof": "src/math/core/tools/random/Xorshift.js~Xorshift",
    "static": false,
    "longname": "src/math/core/tools/random/Xorshift.js~Xorshift#haveNextNextGaussian",
    "access": "private",
    "description": "Is keep random numbers based on Gaussian distribution.",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1251,
    "kind": "member",
    "name": "nextNextGaussian",
    "memberof": "src/math/core/tools/random/Xorshift.js~Xorshift",
    "static": false,
    "longname": "src/math/core/tools/random/Xorshift.js~Xorshift#nextNextGaussian",
    "access": "private",
    "description": "Next random number based on Gaussian distribution.",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1252,
    "kind": "method",
    "name": "genrand_int32",
    "memberof": "src/math/core/tools/random/Xorshift.js~Xorshift",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/random/Xorshift.js~Xorshift#genrand_int32",
    "access": "private",
    "description": "32-bit random number.",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} - 32ビットの乱数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "32ビットの乱数"
    },
    "params": []
  },
  {
    "__docId__": 1257,
    "kind": "file",
    "name": "src/math/core/tools/Random.js",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Polyfill from \"../../tools/Polyfill.js\";\nimport MaximumLengthSequence from \"./random/MaximumLengthSequence.js\";\nimport Xorshift from \"./random/Xorshift.js\";\n\n/**\n * Setting random numbers\n * @typedef {Object} KRandomSettings\n * @property {number} [seed] Seed number for random number generation. If not specified, create from time.\n * @property {string} [algorithm=\"FAST\"] Algorithm type : \"XORSHIFT\" / \"MLS\" / \"FAST\"\n */\n\n/**\n * Random number class.\n */\nexport default class Random {\n\t\n\t/**\n\t * Create Random.\n\t * - algorithm : \"XORSHIFT\" / \"MLS\" / \"FAST\"\n\t * @param {number|KRandomSettings} [init_data] - Seed number for random number generation. If not specified, create from time.\n\t */\n\tconstructor(init_data) {\n\t\tlet seed_number = undefined;\n\t\tlet algorithm = \"fast\";\n\n\t\t/**\n\t\t * Random Number Generator.\n\t\t * @private\n\t\t * @type {Xorshift|MaximumLengthSequence}\n\t\t */\n\t\tthis.rand = null;\n\t\t\n\t\t/**\n\t\t * have `NextNextGaussian`\n\t\t * @private\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.haveNextNextGaussian = false;\n\n\t\t/**\n\t\t * Normally distributed random numbers.\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.nextNextGaussian = 0.0;\n\n\t\tif(typeof init_data === \"number\") {\n\t\t\tseed_number = init_data;\n\t\t}\n\t\telse if(typeof init_data === \"object\") {\n\t\t\tif(init_data.seed !== undefined) {\n\t\t\t\tseed_number = init_data.seed;\n\t\t\t}\n\t\t\tif(init_data.algorithm !== undefined) {\n\t\t\t\talgorithm = init_data.algorithm;\n\t\t\t}\n\t\t}\n\t\tif(/fast|xorshift/i.test(algorithm)) {\n\t\t\t// XORSHIFT\n\t\t\tthis.rand = new Xorshift(seed_number);\n\t\t}\n\t\telse {\n\t\t\t// MLS\n\t\t\tthis.rand = new MaximumLengthSequence(seed_number);\n\t\t}\n\t}\n\n\t/**\n\t * Create Random.\n\t * - algorithm : \"XORSHIFT\" / \"MLS\" / \"FAST\"\n\t * @param {number|KRandomSettings} [init_data] - Seed number for random number generation. If not specified, create from time.\n\t */\n\tstatic create(init_data) {\n\t\treturn new Random(init_data);\n\t}\n\n\t/**\n\t * Initialize random seed.\n\t * @param {number} seed\n\t */\n\tsetSeed(seed) {\n\t\tthis.rand.setSeed(seed);\n\t}\n\n\t/**\n\t * 32-bit random number.\n\t * @returns {number} - 32-bit random number\n\t */\n\tgenrand_int32() {\n\t\treturn this.rand.genrand_int32();\n\t}\n\n\t/**\n\t * Random number of specified bit length.\n\t * @param {number} bits - Required number of bits (up to 64 possible).\n\t * @returns {number}\n\t */\n\tnext(bits) {\n\t\tif(bits === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(bits === 32) {\n\t\t\treturn this.genrand_int32();\n\t\t}\n\t\telse if(bits < 32) {\n\t\t\t// 線形合同法ではないため\n\n\t\t\t// 上位のビットを使用しなくてもいいがJavaっぽく。\n\t\t\treturn (this.genrand_int32() >>> (32 - bits));\n\t\t}\n\t\t// double型のため、52ビットまでは、整数として出力可能\n\t\telse if(bits === 63) {\n\t\t\t// 正の値を出力するように調節\n\t\t\treturn (this.genrand_int32() * 0x80000000 + this.genrand_int32());\n\t\t}\n\t\telse if(bits === 64) {\n\t\t\treturn (this.genrand_int32() * 0x100000000 + this.genrand_int32());\n\t\t}\n\t\telse if(bits < 63) {\n\t\t\treturn (this.genrand_int32() * (1 << (bits - 32)) + (this.genrand_int32()  >>> (64 - bits)));\n\t\t}\n\t}\n\n\t/**\n\t * 8-bit random number array of specified length.\n\t * @param {number} size - 必要な長さ\n\t * @returns {Array<number>}\n\t */\n\tnextBytes(size) {\n\t\tconst y = new Array(size);\n\t\t// 配列yに乱数を入れる\n\t\t// 8ビットのために、32ビット乱数を1回回すのはもったいない\n\t\tfor(let i = 0;i < y.length; i++) {\n\t\t\ty[i] = this.next(8);\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * 16-bit random number.\n\t * @returns {number}\n\t */\n\tnextShort() {\n\t\treturn (this.next(16));\n\t}\n\n\t/**\n\t * 32-bit random number.\n\t * @param {number} [x] - 指定した値未満の数値を作る\n\t * @returns {number}\n\t */\n\tnextInt(x) {\n\t\tif((x !== undefined) && (typeof x === \"number\")) {\n\t\t\tlet r, y;\n\t\t\tdo {\n\t\t\t\tr = this.genrand_int32() >>> 0;\n\t\t\t\ty = r % x;\n\t\t\t} while((r - y + x) > 0x100000000 );\n\t\t\treturn y;\n\t\t}\n\t\treturn (this.next(32) & 0xFFFFFFFF);\n\t}\n\n\t/**\n\t * 64-bit random number.\n\t * @returns {number}\n\t */\n\tnextLong() {\n\t\treturn this.next(64);\n\t}\n\n\t/**\n\t * Random boolean.\n\t * @returns {boolean}\n\t */\n\tnextBoolean() {\n\t\t// 1ビットのために、32ビット乱数を1回回すのはもったいない\n\t\treturn (this.next(1) !== 0);\n\t}\n\n\t/**\n\t * Float type random number in the range of [0, 1).\n\t * @returns {number}\n\t */\n\tnextFloat() {\n\t\treturn (this.next(24) / 0x1000000);\n\t}\n\n\t/**\n\t * Double type random number in the range of [0, 1).\n\t * @returns {number}\n\t */\n\tnextDouble() {\n\t\tconst a1 = this.next(26) * 0x8000000 + this.next(27);\n\t\tconst a2 = 0x8000000 * 0x4000000;\n\t\treturn (a1 / a2);\n\t}\n\n\t/**\n\t * Random numbers from a Gaussian distribution.\n\t * This random number is a distribution with an average value of 0 and a standard deviation of 1.\n\t * @returns {number}\n\t */\n\tnextGaussian() {\n\t\tif(this.haveNextNextGaussian) {\n\t\t\tthis.haveNextNextGaussian = false;\n\t\t\treturn this.nextNextGaussian;\n\t\t}\n\t\t// Box-Muller法\n\t\tconst a = Math.sqrt( -2 * Math.log( this.nextDouble() ) );\n\t\tconst b = 2 * Math.PI * this.nextDouble();\n\t\tconst y = a * Math.sin(b);\n\t\tthis.nextNextGaussian = a * Math.cos(b);\n\t\tthis.haveNextNextGaussian = true;\n\t\treturn y;\n\t}\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/core/tools/Random.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1258,
    "kind": "typedef",
    "name": "KRandomSettings",
    "memberof": "src/math/core/tools/Random.js",
    "static": true,
    "longname": "src/math/core/tools/Random.js~KRandomSettings",
    "access": "public",
    "description": "Setting random numbers",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "seed",
        "description": "Seed number for random number generation. If not specified, create from time."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"FAST\"",
        "defaultRaw": "FAST",
        "name": "algorithm",
        "description": "Algorithm type : \"XORSHIFT\" / \"MLS\" / \"FAST\""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "KRandomSettings"
    }
  },
  {
    "__docId__": 1259,
    "kind": "class",
    "name": "Random",
    "memberof": "src/math/core/tools/Random.js",
    "static": true,
    "longname": "src/math/core/tools/Random.js~Random",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/core/tools/Random.js",
    "importStyle": "Random",
    "description": "Random number class.",
    "lineNumber": 25,
    "interface": false
  },
  {
    "__docId__": 1260,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#constructor",
    "access": "public",
    "description": "Create Random.\n- algorithm : \"XORSHIFT\" / \"MLS\" / \"FAST\"",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "KRandomSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "init_data",
        "description": "Seed number for random number generation. If not specified, create from time."
      }
    ]
  },
  {
    "__docId__": 1261,
    "kind": "member",
    "name": "rand",
    "memberof": "src/math/core/tools/Random.js~Random",
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#rand",
    "access": "private",
    "description": "Random Number Generator.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Xorshift",
        "MaximumLengthSequence"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1262,
    "kind": "member",
    "name": "haveNextNextGaussian",
    "memberof": "src/math/core/tools/Random.js~Random",
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#haveNextNextGaussian",
    "access": "private",
    "description": "have `NextNextGaussian`",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1263,
    "kind": "member",
    "name": "nextNextGaussian",
    "memberof": "src/math/core/tools/Random.js~Random",
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#nextNextGaussian",
    "access": "private",
    "description": "Normally distributed random numbers.",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1266,
    "kind": "method",
    "name": "create",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Random.js~Random.create",
    "access": "public",
    "description": "Create Random.\n- algorithm : \"XORSHIFT\" / \"MLS\" / \"FAST\"",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "KRandomSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "init_data",
        "description": "Seed number for random number generation. If not specified, create from time."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1267,
    "kind": "method",
    "name": "setSeed",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#setSeed",
    "access": "public",
    "description": "Initialize random seed.",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1268,
    "kind": "method",
    "name": "genrand_int32",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#genrand_int32",
    "access": "public",
    "description": "32-bit random number.",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} - 32-bit random number"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "32-bit random number"
    },
    "params": []
  },
  {
    "__docId__": 1269,
    "kind": "method",
    "name": "next",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#next",
    "access": "public",
    "description": "Random number of specified bit length.",
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bits",
        "description": "Required number of bits (up to 64 possible)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1270,
    "kind": "method",
    "name": "nextBytes",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#nextBytes",
    "access": "public",
    "description": "8-bit random number array of specified length.",
    "lineNumber": 139,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "必要な長さ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1271,
    "kind": "method",
    "name": "nextShort",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#nextShort",
    "access": "public",
    "description": "16-bit random number.",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1272,
    "kind": "method",
    "name": "nextInt",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#nextInt",
    "access": "public",
    "description": "32-bit random number.",
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "x",
        "description": "指定した値未満の数値を作る"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1273,
    "kind": "method",
    "name": "nextLong",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#nextLong",
    "access": "public",
    "description": "64-bit random number.",
    "lineNumber": 178,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1274,
    "kind": "method",
    "name": "nextBoolean",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#nextBoolean",
    "access": "public",
    "description": "Random boolean.",
    "lineNumber": 186,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1275,
    "kind": "method",
    "name": "nextFloat",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#nextFloat",
    "access": "public",
    "description": "Float type random number in the range of [0, 1).",
    "lineNumber": 195,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1276,
    "kind": "method",
    "name": "nextDouble",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#nextDouble",
    "access": "public",
    "description": "Double type random number in the range of [0, 1).",
    "lineNumber": 203,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1277,
    "kind": "method",
    "name": "nextGaussian",
    "memberof": "src/math/core/tools/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Random.js~Random#nextGaussian",
    "access": "public",
    "description": "Random numbers from a Gaussian distribution.\nThis random number is a distribution with an average value of 0 and a standard deviation of 1.",
    "lineNumber": 214,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1281,
    "kind": "file",
    "name": "src/math/core/tools/Signal.js",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Polyfill from \"../../tools/Polyfill.js\";\nimport Complex from \"../Complex.js\";\nimport Matrix from \"../Matrix.js\";\n\n/**\n * Collection of calculation settings for matrix.\n * - Available options vary depending on the method.\n * @typedef {Object} KSignalSettings\n * @property {?string|?number} [dimension=\"auto\"] Calculation direction. 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\".\n */\n\n/**\n * Fast Fourier Transform (FFT) Class.\n * @ignore\n */\nclass FFT {\n\n\t/**\n\t * Return the number with reversed bits.\n\t * @param {number} x - Bit-reversed value. (32-bit integer)\n\t * @returns {number} ビット反転した値\n\t */\n\tstatic bit_reverse_32(x) {\n\t\tlet y = x & 0xffffffff;\n\t\t// 1,2,4,8,16ビット単位で交換\n\t\ty = ((y & 0x55555555) << 1) | ((y >> 1) & 0x55555555);\n\t\ty = ((y & 0x33333333) << 2) | ((y >> 2) & 0x33333333);\n\t\ty = ((y & 0x0f0f0f0f) << 4) | ((y >> 4) & 0x0f0f0f0f);\n\t\ty = ((y & 0x00ff00ff) << 8) | ((y >> 8) & 0x00ff00ff);\n\t\ty = ((y & 0x0000ffff) << 16) | ((y >> 16) & 0x0000ffff);\n\t\treturn y;\n\t}\n\t\n\t/**\n\t * Create a bit reversal lookup table.\n\t * @param {number} bit - ビット数\n\t * @returns {Array<number>} ビット反転した値の配列\n\t */\n\tstatic create_bit_reverse_table(bit) {\n\t\tconst size = 1 << bit;\n\t\tconst bitrv = [];\n\t\tfor(let i = 0; i < size; i++) {\n\t\t\tbitrv[i] = FFT.bit_reverse_32(i) >>> (32 - bit);\n\t\t}\n\t\treturn bitrv;\n\t}\n\n\t/**\n\t * Create FFT.\n\t * @param {number} size - Signal length.\n\t */\n\tconstructor(size) {\n\t\t\n\t\t/**\n\t\t * Signal length.\n\t\t */\n\t\tthis.size = size;\n\n\t\t/**\n\t\t * Inverse of signal length.\n\t\t */\n\t\tthis.inv_size = 1.0 / this.size;\n\n\t\t/**\n\t\t * Number of bits when the signal length is expressed in binary number.\n\t\t */\n\t\tthis.bit_size = Math.round(Math.log(this.size)/Math.log(2));\n\n\t\t/**\n\t\t * FFT algorithm available.\n\t\t */\n\t\tthis.is_fast = (1 << this.bit_size) === this.size;\n\n\t\t/**\n\t\t * Bit reverse table for butterfly operation.\n\t\t */\n\t\tthis.bitrv = null;\n\n\t\t/**\n\t\t * Real part table used for multiplication of complex numbers.\n\t\t */\n\t\tthis.fft_re = new Array(this.size);\n\t\t\n\t\t/**\n\t\t * Imaginary table used for multiplication of complex numbers.\n\t\t */\n\t\tthis.fft_im = new Array(this.size);\n\t\t{\n\t\t\tconst delta = - 2.0 * Math.PI / this.size;\n\t\t\tlet err = 0.0;\n\t\t\tfor(let n = 0, x = 0; n < this.size; n++) {\n\t\t\t\tthis.fft_re[n] = Math.cos(x);\n\t\t\t\tthis.fft_im[n] = Math.sin(x);\n\t\t\t\t// カハンの加算アルゴリズム\n\t\t\t\tconst y = delta + err;\n\t\t\t\tconst t = x + y;\n\t\t\t\terr = t - x - y;\n\t\t\t\tx = t;\n\t\t\t}\n\t\t}\n\t\tif(this.is_fast) {\n\t\t\tthis.bitrv = FFT.create_bit_reverse_table(this.bit_size);\n\t\t}\n\t}\n\n\t/**\n\t * Frees the memory reserved.\n\t */\n\tdelete() {\n\t\tdelete this.size;\n\t\tdelete this.inv_size;\n\t\tdelete this.bit_size;\n\t\tdelete this.is_fast;\n\t\tdelete this.bitrv;\n\t\tdelete this.fft_re;\n\t\tdelete this.fft_im;\n\t}\n\t\n\t/**\n\t * Discrete Fourier transform (DFT).\n\t * @param {Array<number>} real - Array of real parts of vector.\n\t * @param {Array<number>} imag - Array of imaginary parts of vector.\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tfft(real, imag) {\n\t\tconst f_re = new Array(this.size);\n\t\tconst f_im = new Array(this.size);\n\t\tif(this.is_fast) {\n\t\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\t\tf_re[i] = real[this.bitrv[i]];\n\t\t\t\tf_im[i] = imag[this.bitrv[i]];\n\t\t\t}\n\t\t\t{\n\t\t\t\t// Fast Fourier Transform 時間間引き(前処理にビットリバース)\n\t\t\t\t// 段々ブロックが大きくなっていくタイプ。\n\t\t\t\tlet center = 1;\n\t\t\t\tlet blocklength = this.size / 2;\n\t\t\t\tlet pointlength = 2;\n\t\t\t\tfor(let delta = 1 << (this.bit_size - 1); delta > 0; delta >>= 1) {\n\t\t\t\t\tfor(let blocks = 0; blocks < blocklength; blocks++) {\n\t\t\t\t\t\tlet i = blocks * pointlength;\n\t\t\t\t\t\tfor(let point = 0, n = 0; point < center; point++, i++, n += delta) {\n\t\t\t\t\t\t\tconst re = f_re[i + center] * this.fft_re[n] - f_im[i + center] * this.fft_im[n];\n\t\t\t\t\t\t\tconst im = f_im[i + center] * this.fft_re[n] + f_re[i + center] * this.fft_im[n];\n\t\t\t\t\t\t\tf_re[i + center] = f_re[i] - re;\n\t\t\t\t\t\t\tf_im[i + center] = f_im[i] - im;\n\t\t\t\t\t\t\tf_re[i] += re;\n\t\t\t\t\t\t\tf_im[i] += im;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tblocklength /= 2;\n\t\t\t\t\tpointlength *= 2;\n\t\t\t\t\tcenter *= 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif(!SignalTool.isContainsZero(imag)) {\n\t\t\t\t// 実数部分のみのフーリエ変換\n\t\t\t\tfor(let t = 0; t < this.size; t++) {\n\t\t\t\t\tf_re[t] = 0.0;\n\t\t\t\t\tf_im[t] = 0.0;\n\t\t\t\t\tfor(let x = 0, n = 0; x < this.size; x++, n = (x * t) % this.size) {\n\t\t\t\t\t\tf_re[t] += real[x] * this.fft_re[n];\n\t\t\t\t\t\tf_im[t] += real[x] * this.fft_im[n];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// 実数部分と複素数部分のフーリエ変換\n\t\t\t\tfor(let t = 0; t < this.size; t++) {\n\t\t\t\t\tf_re[t] = 0.0;\n\t\t\t\t\tf_im[t] = 0.0;\n\t\t\t\t\tfor(let x = 0, n = 0; x < this.size; x++, n = (x * t) % this.size) {\n\t\t\t\t\t\tf_re[t] += real[x] * this.fft_re[n] - imag[x] * this.fft_im[n];\n\t\t\t\t\t\tf_im[t] += real[x] * this.fft_im[n] + imag[x] * this.fft_re[n];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\treal : f_re,\n\t\t\timag : f_im\n\t\t};\n\t}\n\n\t/**\n\t * Inverse discrete Fourier transform (IDFT),\n\t * @param {Array<number>} real - Array of real parts of vector.\n\t * @param {Array<number>} imag - Array of imaginary parts of vector.\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tifft(real, imag) {\n\t\tconst f_re = new Array(this.size);\n\t\tconst f_im = new Array(this.size);\n\t\tif(this.is_fast) {\n\t\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\t\tf_re[i] = real[this.bitrv[i]];\n\t\t\t\tf_im[i] = imag[this.bitrv[i]];\n\t\t\t}\n\t\t\t{\n\t\t\t\t// Inverse Fast Fourier Transform 時間間引き(前処理にビットリバース)\n\t\t\t\t// 段々ブロックが大きくなっていくタイプ。\n\t\t\t\tlet center = 1;\n\t\t\t\tlet blocklength = this.size / 2;\n\t\t\t\tlet pointlength = 2;\n\t\t\t\tlet re, im;\n\t\t\t\tfor(let delta = 1 << (this.bit_size - 1); delta > 0; delta >>= 1) {\n\t\t\t\t\tfor(let blocks = 0; blocks < blocklength; blocks++) {\n\t\t\t\t\t\tlet i = blocks * pointlength;\n\t\t\t\t\t\tfor(let point = 0, n = 0; point < center; point++, i++, n += delta) {\n\t\t\t\t\t\t\tre = f_re[i + center] * this.fft_re[n] + f_im[i + center] * this.fft_im[n];\n\t\t\t\t\t\t\tim = f_im[i + center] * this.fft_re[n] - f_re[i + center] * this.fft_im[n];\n\t\t\t\t\t\t\tf_re[i + center] = f_re[i] - re;\n\t\t\t\t\t\t\tf_im[i + center] = f_im[i] - im;\n\t\t\t\t\t\t\tf_re[i] += re;\n\t\t\t\t\t\t\tf_im[i] += im;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tblocklength /= 2;\n\t\t\t\t\tpointlength *= 2;\n\t\t\t\t\tcenter *= 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif(!SignalTool.isContainsZero(imag)) {\n\t\t\t\t// 実数部分のみの逆フーリエ変換\n\t\t\t\tfor(let x = 0; x < this.size; x++) {\n\t\t\t\t\tf_re[x] = 0.0;\n\t\t\t\t\tf_im[x] = 0.0;\n\t\t\t\t\tfor(let t = 0, n = 0; t < this.size; t++, n = (x * t) % this.size) {\n\t\t\t\t\t\tf_re[x] +=   real[t] * this.fft_re[n];\n\t\t\t\t\t\tf_im[x] += - real[t] * this.fft_im[n];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// 実数部分と複素数部分の逆フーリエ変換\n\t\t\t\tfor(let x = 0; x < this.size; x++) {\n\t\t\t\t\tf_re[x] = 0.0;\n\t\t\t\t\tf_im[x] = 0.0;\n\t\t\t\t\tfor(let t = 0, n = 0; t < this.size; t++, n = (x * t) % this.size) {\n\t\t\t\t\t\tf_re[x] +=   real[t] * this.fft_re[n] + imag[t] * this.fft_im[n];\n\t\t\t\t\t\tf_im[x] += - real[t] * this.fft_im[n] + imag[t] * this.fft_re[n];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\tf_re[i] *= this.inv_size;\n\t\t\tf_im[i] *= this.inv_size;\n\t\t}\n\t\treturn {\n\t\t\treal : f_re,\n\t\t\timag : f_im\n\t\t};\n\t}\n}\n\n/**\n * Simple cache class.\n * Cache tables used in FFT.\n * @ignore\n */\nclass FFTCache {\n\t\n\t/**\n\t * Create Cache.\n\t * @param {*} object - Target class you want to build a cache.\n\t * @param {number} cache_size - Maximum number of caches.\n\t */\n\tconstructor(object, cache_size) {\n\n\t\t/**\n\t\t * Class for cache.\n\t\t */\n\t\tthis.object = object;\n\n\t\t/**\n\t\t * Cache table.\n\t\t * @type {Array<*>}\n\t\t */\n\t\tthis.table = [];\n\n\t\t/**\n\t\t * Maximum number of caches.\n\t\t */\n\t\tthis.table_max = cache_size;\n\n\t}\n\n\t/**\n\t * Create a class initialized with the specified data length.\n\t * Use from cache if it exists in cache.\n\t * @param {number} size - Data length.\n\t * @returns {*}\n\t */\n\tget(size) {\n\t\tfor(let index = 0; index < this.table.length; index++) {\n\t\t\tif(this.table[index].size === size) {\n\t\t\t\t// 先頭にもってくる\n\t\t\t\tconst object = this.table.splice(index, 1)[0];\n\t\t\t\tthis.table.unshift(object);\n\t\t\t\treturn object;\n\t\t\t}\n\t\t}\n\t\tconst new_object = new this.object(size);\n\t\tif(this.table.length === this.table_max) {\n\t\t\t// 後ろのデータを消去\n\t\t\tconst delete_object = this.table.pop();\n\t\t\tdelete_object.delete();\n\t\t}\n\t\t// 前方に追加\n\t\tthis.table.unshift(new_object);\n\t\treturn new_object;\n\t}\n\n}\n\n/**\n * Cache for FFT.\n * @type {FFTCache}\n * @ignore\n */\nconst fft_cache = new FFTCache(FFT, 4);\n\n/**\n * Discrete cosine transform (DCT) class.\n * @ignore\n */\nclass DCT {\n\t\n\t/**\n\t * Create DCT.\n\t * @param {number} size - Signal length.\n\t */\n\tconstructor(size) {\n\n\t\t/**\n\t\t * Signal length.\n\t\t */\n\t\tthis.size = size;\n\n\t\t/**\n\t\t * Twice the signal length.\n\t\t * In the DCT conversion, an actual signal is zero-filled with a doubled signal length, and an FFT is performed on it.\n\t\t */\n\t\tthis.dct_size = size * 2;\n\n\t\t/**\n\t\t * Calculation table used for DCT conversion.\n\t\t */\n\t\tthis.dct_re = new Array(this.size);\n\n\t\t/**\n\t\t * Calculation table used for DCT conversion.\n\t\t */\n\t\tthis.dct_im = new Array(this.size);\n\t\t{\n\t\t\tconst x_0 = 1.0 / Math.sqrt(this.size);\n\t\t\tconst x_n = x_0 * Math.sqrt(2);\n\t\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\t\tconst x = - Math.PI * i / this.dct_size;\n\t\t\t\tthis.dct_re[i] = Math.cos(x) * (i === 0 ? x_0 : x_n);\n\t\t\t\tthis.dct_im[i] = Math.sin(x) * (i === 0 ? x_0 : x_n);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Frees the memory reserved.\n\t */\n\tdelete() {\n\t\tdelete this.size;\n\t\tdelete this.dct_size;\n\t\tdelete this.dct_re;\n\t\tdelete this.dct_im;\n\t}\n\n\t/**\n\t * Discrete cosine transform (DCT-II, DCT).\n\t * @param {Array<number>} real - Array of real parts of vector.\n\t * @returns {Array<number>}\n\t */\n\tdct(real) {\n\t\tconst re = new Array(this.dct_size);\n\t\tconst im = new Array(this.dct_size);\n\t\tfor(let i = 0; i < this.dct_size; i++) {\n\t\t\tre[i] = i < this.size ? real[i] : 0.0;\n\t\t\tim[i] = 0.0;\n\t\t}\n\t\tconst fft = fft_cache.get(this.dct_size).fft(re, im);\n\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\tre[i] = fft.real[i] * this.dct_re[i] - fft.imag[i] * this.dct_im[i];\n\t\t}\n\t\tre.splice(this.size);\n\t\treturn re;\n\t}\n\n\t/**\n\t * Inverse discrete cosine transform (DCT-III, IDCT),\n\t * @param {Array<number>} real - Array of real parts of vector.\n\t * @returns {Array<number>}\n\t */\n\tidct(real) {\n\t\tconst re = new Array(this.dct_size);\n\t\tconst im = new Array(this.dct_size);\n\t\tconst denormlize = this.size * 2.0;\n\t\tfor(let i = 0; i < this.dct_size; i++) {\n\t\t\tre[i] = i < this.size ? (denormlize * real[i] *    this.dct_re[i])  : 0.0;\n\t\t\tim[i] = i < this.size ? (denormlize * real[i] * (- this.dct_im[i])) : 0.0;\n\t\t}\n\t\tconst ifft = fft_cache.get(this.dct_size).ifft(re, im);\n\t\tifft.real.splice(this.size);\n\t\treturn ifft.real;\n\t}\n\t\n}\n\n/**\n * Cache for discrete cosine transform.\n * @ignore\n */\nconst dct_cache = new FFTCache(DCT, 4);\n\n/**\n * Collection of functions used inside Signal class.\n * @ignore\n */\nclass SignalTool {\n\t\n\t/**\n\t * Returns true if the array contains 0.\n\t * @param {Array<number>} x - 調べたい配列\n\t * @returns {boolean}\n\t */\n\tstatic isContainsZero(x) {\n\t\tfor(let i = 0; i < x.length; i++) {\n\t\t\tif(x[i] !== 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Discrete Fourier transform (DFT).\n\t * @param {Array<number>} real - Array of real parts of vector.\n\t * @param {Array<number>} imag - Array of imaginary parts of vector.\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tstatic fft(real, imag) {\n\t\tconst obj = fft_cache.get(real.length);\n\t\treturn obj.fft(real, imag);\n\t}\n\n\t/**\n\t * Inverse discrete Fourier transform (IDFT),\n\t * @param {Array<number>} real - Array of real parts of vector.\n\t * @param {Array<number>} imag - Array of imaginary parts of vector.\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tstatic ifft(real, imag) {\n\t\tconst obj = fft_cache.get(real.length);\n\t\treturn obj.ifft(real, imag);\n\t}\n\n\t/**\n\t * Discrete cosine transform (DCT-II, DCT).\n\t * @param {Array<number>} real - Array of real parts of vector.\n\t * @returns {Array<number>}\n\t */\n\tstatic dct(real) {\n\t\tconst obj = dct_cache.get(real.length);\n\t\treturn obj.dct(real);\n\t}\n\n\t/**\n\t * Inverse discrete cosine transform (DCT-III, IDCT),\n\t * @param {Array<number>} real - Array of real parts of vector.\n\t * @returns {Array<number>}\n\t */\n\tstatic idct(real) {\n\t\tconst obj = dct_cache.get(real.length);\n\t\treturn obj.idct(real);\n\t}\n\n\t/**\n\t * Power spectral density.\n\t * @param {Array<number>} real - Array of real parts of vector.\n\t * @param {Array<number>} imag - Array of imaginary parts of vector.\n\t * @returns {Array<number>}\n\t */\n\tstatic powerfft(real, imag) {\n\t\tconst size = real.length;\n\t\tconst X = SignalTool.fft(real, imag);\n\t\tconst power = new Array(size);\n\t\tfor(let i = 0; i < size; i++) {\n\t\t\tpower[i] = X.real[i] * X.real[i] + X.imag[i] * X.imag[i];\n\t\t}\n\t\treturn power;\n\t}\n\n\t/**\n\t * Convolution integral, Polynomial multiplication.\n\t * @param {Array<number>} x1_real - Array of real parts of vector.\n\t * @param {Array<number>} x1_imag - Array of imaginary parts of vector.\n\t * @param {Array<number>} x2_real - Array of real parts of vector.\n\t * @param {Array<number>} x2_imag - Array of imaginary parts of vector.\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tstatic conv(x1_real, x1_imag, x2_real, x2_imag) {\n\t\tlet is_self = false;\n\t\tif(x1_real.length === x2_real.length) {\n\t\t\tis_self = true;\n\t\t\tfor(let i = 0; i < x1_real.length;i++) {\n\t\t\t\tif((x1_real[i] !== x2_real[i]) || (x1_imag[i] !== x2_imag[i])) {\n\t\t\t\t\tis_self = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst size = x1_real.length;\n\t\tconst N2 = size * 2;\n\t\tconst bit_size = Math.round(Math.log(size)/Math.log(2));\n\t\tconst is_fast = (1 << bit_size) === size;\n\t\tif(is_fast) {\n\t\t\t// FFTを用いた手法へ切り替え\n\t\t\t// 周波数空間上では掛け算になる\n\t\t\tif(is_self) {\n\t\t\t\tconst size = x1_real.length;\n\t\t\t\tconst real = new Array(N2);\n\t\t\t\tconst imag = new Array(N2);\n\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\treal[i] = i < size ? x1_real[i] : 0.0;\n\t\t\t\t\timag[i] = i < size ? x1_imag[i] : 0.0;\n\t\t\t\t}\n\t\t\t\tconst X = SignalTool.fft(real, imag);\n\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\treal[i] = X.real[i] * X.real[i] - X.imag[i] * X.imag[i];\n\t\t\t\t\timag[i] = X.real[i] * X.imag[i] + X.imag[i] * X.real[i];\n\t\t\t\t}\n\t\t\t\tconst x = SignalTool.ifft(real, imag);\n\t\t\t\tx.real.splice(N2 - 1);\n\t\t\t\tx.imag.splice(N2 - 1);\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\telse if(x1_real.length === x2_real.length) {\n\t\t\t\tconst size = x1_real.length;\n\t\t\t\tconst real1 = new Array(N2);\n\t\t\t\tconst imag1 = new Array(N2);\n\t\t\t\tconst real2 = new Array(N2);\n\t\t\t\tconst imag2 = new Array(N2);\n\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\treal1[i] = i < size ? x1_real[i] : 0.0;\n\t\t\t\t\timag1[i] = i < size ? x1_imag[i] : 0.0;\n\t\t\t\t\treal2[i] = i < size ? x2_real[i] : 0.0;\n\t\t\t\t\timag2[i] = i < size ? x2_imag[i] : 0.0;\n\t\t\t\t}\n\t\t\t\tconst F = SignalTool.fft(real1, imag1);\n\t\t\t\tconst G = SignalTool.fft(real2, imag2);\n\t\t\t\tconst real = new Array(N2);\n\t\t\t\tconst imag = new Array(N2);\n\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\treal[i] = F.real[i] * G.real[i] - F.imag[i] * G.imag[i];\n\t\t\t\t\timag[i] = F.real[i] * G.imag[i] + F.imag[i] * G.real[i];\n\t\t\t\t}\n\t\t\t\tconst fg = SignalTool.ifft(real, imag);\n\t\t\t\tfg.real.splice(N2 - 1);\n\t\t\t\tfg.imag.splice(N2 - 1);\n\t\t\t\treturn fg;\n\t\t\t}\n\t\t}\n\t\tlet is_real_number = !SignalTool.isContainsZero(x1_imag);\n\t\tif(is_real_number) {\n\t\t\tis_real_number = !SignalTool.isContainsZero(x2_imag);\n\t\t}\n\t\t{\n\t\t\t// まじめに計算する\n\t\t\tconst real = new Array(x1_real.length + x2_real.length - 1);\n\t\t\tconst imag = new Array(x1_real.length + x2_real.length - 1);\n\t\t\tfor(let i = 0; i < real.length; i++) {\n\t\t\t\treal[i] = 0;\n\t\t\t\timag[i] = 0;\n\t\t\t}\n\t\t\tif(is_real_number) {\n\t\t\t\t// 実数部分のみの畳み込み積分\n\t\t\t\t// スライドさせていく\n\t\t\t\t// AAAA\n\t\t\t\t//  BBBB\n\t\t\t\t//   CCCC\n\t\t\t\tfor(let y = 0; y < x2_real.length; y++) {\n\t\t\t\t\tfor(let x = 0; x < x1_real.length; x++) {\n\t\t\t\t\t\treal[y + x] += x1_real[x] * x2_real[y];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// 実数部分と複素数部分の畳み込み積分\n\t\t\t\tfor(let y = 0; y < x2_real.length; y++) {\n\t\t\t\t\tfor(let x = 0; x < x1_real.length; x++) {\n\t\t\t\t\t\treal[y + x] += x1_real[x] * x2_real[y] - x1_imag[x] * x2_imag[y];\n\t\t\t\t\t\timag[y + x] += x1_real[x] * x2_imag[y] + x1_imag[x] * x2_real[y];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\treal : real,\n\t\t\t\timag : imag\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * ACF(Autocorrelation function), Cros-correlation function.\n\t * @param {Array<number>} x1_real - Array of real parts of vector.\n\t * @param {Array<number>} x1_imag - Array of imaginary parts of vector.\n\t * @param {Array<number>} x2_real - Array of real parts of vector.\n\t * @param {Array<number>} x2_imag - Array of imaginary parts of vector.\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tstatic xcorr(x1_real, x1_imag, x2_real, x2_imag) {\n\t\tlet is_self = false;\n\t\tif(x1_real.length === x2_real.length) {\n\t\t\tis_self = true;\n\t\t\tfor(let i = 0; i < x1_real.length;i++) {\n\t\t\t\tif((x1_real[i] !== x2_real[i]) || (x1_imag[i] !== x2_imag[i])) {\n\t\t\t\t\tis_self = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(x1_real.length === x2_real.length) {\n\t\t\tconst size = x1_real.length;\n\t\t\tconst N2 = size * 2;\n\t\t\tconst bit_size = Math.round(Math.log(size)/Math.log(2));\n\t\t\tconst is_fast = (1 << bit_size) === size;\n\t\t\tif(is_fast) {\n\t\t\t\tlet fg = null;\n\t\t\t\tif(is_self) {\n\t\t\t\t\tconst real = new Array(N2);\n\t\t\t\t\tconst imag = new Array(N2);\n\t\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\t\treal[i] = i < size ? x1_real[i] : 0.0;\n\t\t\t\t\t\timag[i] = i < size ? x1_imag[i] : 0.0;\n\t\t\t\t\t}\n\t\t\t\t\t// パワースペクトル密度は、自己相関のフーリエ変換のため、\n\t\t\t\t\t// パワースペクトル密度の逆変換で求められる。\n\t\t\t\t\tconst power = SignalTool.powerfft(real, imag);\n\t\t\t\t\tfg = SignalTool.ifft(power, imag);\n\t\t\t\t\t// シフト\n\t\t\t\t\treal.pop();\n\t\t\t\t\timag.pop();\n\t\t\t\t\tfor(let i = 0, j = size + 1 ; i < real.length; i++, j++) {\n\t\t\t\t\t\tif(N2 <= j) {\n\t\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treal[i] = fg.real[j];\n\t\t\t\t\t\timag[i] = fg.imag[j];\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\treal : real,\n\t\t\t\t\t\timag : imag\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst f_real = new Array(N2);\n\t\t\t\t\tconst f_imag = new Array(N2);\n\t\t\t\t\tconst g_real = new Array(N2);\n\t\t\t\t\tconst g_imag = new Array(N2);\n\t\t\t\t\t// gの順序を反転かつ共役複素数にする\n\t\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\t\tf_real[i] = i < size ?   x1_real[i] : 0.0;\n\t\t\t\t\t\tf_imag[i] = i < size ?   x1_imag[i] : 0.0;\n\t\t\t\t\t\tg_real[i] = i < size ?   x2_real[size - i - 1] : 0.0;\n\t\t\t\t\t\tg_imag[i] = i < size ? - x2_imag[size - i - 1] : 0.0;\n\t\t\t\t\t}\n\t\t\t\t\t// 畳み込み掛け算\n\t\t\t\t\tconst F = SignalTool.fft(f_real, f_imag);\n\t\t\t\t\tconst G = SignalTool.fft(g_real, g_imag);\n\t\t\t\t\tconst real = new Array(N2);\n\t\t\t\t\tconst imag = new Array(N2);\n\t\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\t\treal[i] = F.real[i] * G.real[i] - F.imag[i] * G.imag[i];\n\t\t\t\t\t\timag[i] = F.real[i] * G.imag[i] + F.imag[i] * G.real[i];\n\t\t\t\t\t}\n\t\t\t\t\tfg = SignalTool.ifft(real, imag);\n\t\t\t\t\tfg.real.splice(N2 - 1);\n\t\t\t\t\tfg.imag.splice(N2 - 1);\n\t\t\t\t\treturn fg;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet is_real_number = !SignalTool.isContainsZero(x1_imag);\n\t\tif(is_real_number) {\n\t\t\tis_real_number = !SignalTool.isContainsZero(x2_imag);\n\t\t}\n\t\tif(is_self) {\n\t\t\tconst size = x1_real.length;\n\t\t\tconst N2 = size * 2;\n\t\t\t// 実数の自己相関関数\n\t\t\tif(is_real_number) {\n\t\t\t\tconst fg = new Array(size);\n\t\t\t\tfor(let m = 0; m < size; m++) {\n\t\t\t\t\tfg[m] = 0;\n\t\t\t\t\tconst tmax = size - m;\n\t\t\t\t\tfor(let t = 0; t < tmax; t++) {\n\t\t\t\t\t\tfg[m] += x1_real[t] * x2_real[t + m];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 半分の値は同一なので折り返して計算を省く\n\t\t\t\tconst real = new Array(N2 - 1);\n\t\t\t\tconst imag = new Array(N2 - 1);\n\t\t\t\tfor(let i = 0, j = size - 1 ; i < size; i++, j--) {\n\t\t\t\t\treal[i] = fg[j];\n\t\t\t\t\treal[size + i - 1] = fg[i];\n\t\t\t\t}\n\t\t\t\tfor(let i = 0; i < imag.length; i++) {\n\t\t\t\t\timag[i] = 0.0;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\treal : real,\n\t\t\t\t\timag : imag\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t// 2つの信号の長さが違う、又は2の累乗の長さではない別のデータの場合は通常計算\n\t\t{\n\t\t\tconst g_real = new Array(x2_real.length);\n\t\t\tconst g_imag = new Array(x2_real.length);\n\t\t\t// gの順序を反転かつ共役複素数にする\n\t\t\tfor(let i = 0; i < x2_real.length; i++) {\n\t\t\t\tg_real[i] =   x2_real[x2_real.length - i - 1];\n\t\t\t\tg_imag[i] = - x2_imag[x2_real.length - i - 1];\n\t\t\t}\n\t\t\tconst y = SignalTool.conv(x1_real, x1_imag, g_real, g_imag);\n\t\t\tif(x1_real.length === x2_real.length) {\n\t\t\t\treturn y;\n\t\t\t}\n\t\t\tconst delta = Math.abs(x1_real.length - x2_real.length);\n\t\t\tconst zeros = new Array(delta);\n\t\t\tfor(let i = 0; i < delta; i++) {\n\t\t\t\tzeros[i] = 0;\n\t\t\t}\n\t\t\tif(x1_real.length > x2_real.length) {\n\t\t\t\t// データの最初に「0」を加える\n\t\t\t\treturn {\n\t\t\t\t\treal : zeros.concat(y.real),\n\t\t\t\t\timag : zeros.concat(y.imag)\n\t\t\t\t};\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// データの最後に「0」を加える\n\t\t\t\treturn {\n\t\t\t\t\treal : y.real.concat(zeros),\n\t\t\t\t\timag : y.imag.concat(zeros)\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Create window function for signal processing.\n\t * The following window functions are available.\n\t * - \"rectangle\": Rectangular window\n\t * - \"hann\": Hann/Hanning window.\n\t * - \"hamming\": Hamming window.\n\t * - \"blackman\": Blackman window.\n\t * - \"blackmanharris\": Blackman-Harris window.\n\t * - \"blackmannuttall\": Blackman-Nuttall window.\n\t * - \"flattop\": Flat top window.\n\t * - \"sin\", Half cycle sine window.\n\t * - \"vorbis\", Vorbis window.\n\t * @param {string} name - Window function name.\n\t * @param {number} size - Window length.\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\" (default) , 1/\"periodic\"\n\t * @returns {Array<number>}\n\t */\n\tstatic window(name, size, periodic) {\n\t\tconst periodic_ = periodic !== undefined ? periodic : \"symmetric\";\n\t\tconst name_ = name.toLocaleLowerCase();\n\t\tconst size_ = size;\n\t\tconst window = new Array(size_);\n\t\t\n\t\t/**\n\t\t * @type {function(number): number }\n\t\t */\n\t\tlet normalzie;\n\t\tif((periodic_ === \"symmetric\") || (periodic_ === 0)) {\n\t\t\tnormalzie = function(y) {\n\t\t\t\treturn (y / (size_ - 1) * (Math.PI * 2.0));\n\t\t\t};\n\t\t}\n\t\telse if((periodic_ === \"periodic\") || (periodic_ !== 0)) {\n\t\t\tnormalzie = function(y) {\n\t\t\t\treturn (y / size_ * (Math.PI * 2.0));\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * \n\t\t * @param {number} alpha0 \n\t\t * @param {number} alpha1 \n\t\t * @param {number} alpha2 \n\t\t * @param {number} alpha3 \n\t\t * @param {number} alpha4 \n\t\t */\n\t\tconst setBlackmanWindow = function( alpha0, alpha1, alpha2, alpha3, alpha4) {\n\t\t\tfor(let i = 0; i < size_; i++) {\n\t\t\t\twindow[i]  = alpha0;\n\t\t\t\twindow[i] -= alpha1 * Math.cos(1.0 * normalzie(i));\n\t\t\t\twindow[i] += alpha2 * Math.cos(2.0 * normalzie(i));\n\t\t\t\twindow[i] -= alpha3 * Math.cos(3.0 * normalzie(i));\n\t\t\t\twindow[i] += alpha4 * Math.cos(4.0 * normalzie(i));\n\t\t\t}\n\t\t};\n\n\t\tswitch(name_) {\n\t\t\t// rect 矩形窓(rectangular window)\n\t\t\tcase \"rectangle\":\n\t\t\t\tsetBlackmanWindow(1.0, 0.0, 0.0, 0.0, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// hann ハン窓・ハニング窓(hann/hanning window)\n\t\t\tcase \"hann\":\n\t\t\t\tsetBlackmanWindow(0.5, 0.5, 0.0, 0.0, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// hamming ハミング窓(hamming window)\n\t\t\tcase \"hamming\":\n\t\t\t\tsetBlackmanWindow(0.54, 0.46, 0.0, 0.0, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// blackman ブラックマン窓(Blackman window)\n\t\t\tcase \"blackman\":\n\t\t\t\tsetBlackmanWindow(0.42, 0.50, 0.08, 0.0, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// blackmanharris Blackman-Harris window\n\t\t\tcase \"blackmanharris\":\n\t\t\t\tsetBlackmanWindow(0.35875, 0.48829, 0.14128, 0.01168, 0);\n\t\t\t\tbreak;\n\n\t\t\t// blackmannuttall Blackman-Nuttall window\n\t\t\tcase \"blackmannuttall\":\n\t\t\t\tsetBlackmanWindow(0.3635819, 0.4891775, 0.1365995, 0.0106411, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// flattop Flat top window\n\t\t\tcase \"flattop\":\n\t\t\t\tsetBlackmanWindow(1.0, 1.93, 1.29, 0.388, 0.032);\n\t\t\t\tbreak;\n\n\t\t\t// Half cycle sine window(MDCT窓)\n\t\t\tcase \"sin\":\n\t\t\t\tfor(let i = 0; i < size_; i++) {\n\t\t\t\t\twindow[i]  = Math.sin(normalzie(i) * 0.5);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t// Vorbis window(MDCT窓)\n\t\t\tcase \"vorbis\":\n\t\t\t\tfor(let i = 0; i < size_; i++) {\n\t\t\t\t\tconst x = Math.sin(normalzie(i) * 0.5);\n\t\t\t\t\twindow[i]  = Math.sin(Math.PI * 0.5 * x * x);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn window;\n\t}\n\n\t/**\n\t * Hann (Hanning) window.\n\t * @param {number} size - Window length.\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\" (default) , 1/\"periodic\"\n\t * @returns {Array<number>}\n\t */\n\tstatic hann(size, periodic) {\n\t\treturn SignalTool.window(\"hann\", size, periodic);\n\t}\n\t\n\t/**\n\t * Hamming window.\n\t * @param {number} size - Window length.\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\" (default) , 1/\"periodic\"\n\t * @returns {Array<number>}\n\t */\n\tstatic hamming(size, periodic) {\n\t\treturn SignalTool.window(\"hamming\", size, periodic);\n\t}\n\t\n}\n\n/**\n * Signal processing class for `Matrix` class.\n * - These methods can be used in the `Matrix` method chain.\n * - This class cannot be called directly.\n */\nexport default class Signal {\n\t\n\t/**\n\t * Discrete Fourier transform (DFT).\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KSignalSettings} [type]\n\t * @returns {Matrix} fft(x)\n\t */\n\tstatic fft(x, type) {\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Matrix._toMatrix(x);\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tconst imag = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t\timag[i] = data[i].imag;\n\t\t\t}\n\t\t\tconst result = SignalTool.fft(real, imag);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex([result.real[i], result.imag[i]]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn M.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Inverse discrete Fourier transform (IDFT),\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} X\n\t * @param {KSignalSettings} [type]\n\t * @returns {Matrix} ifft(X)\n\t */\n\tstatic ifft(X, type) {\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Matrix._toMatrix(X);\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tconst imag = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t\timag[i] = data[i].imag;\n\t\t\t}\n\t\t\tconst result = SignalTool.ifft(real, imag);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex([result.real[i], result.imag[i]]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn M.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Power spectral density.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KSignalSettings} [type]\n\t * @returns {Matrix} abs(fft(x)).^2\n\t */\n\tstatic powerfft(x, type) {\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Matrix._toMatrix(x);\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tconst imag = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t\timag[i] = data[i].imag;\n\t\t\t}\n\t\t\tconst result = SignalTool.powerfft(real, imag);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex(result[i]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn M.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Discrete cosine transform (DCT-II, DCT).\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KSignalSettings} [type]\n\t * @returns {Matrix} dct(x)\n\t */\n\tstatic dct(x, type) {\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Matrix._toMatrix(x);\n\t\tif(M.isComplex()) {\n\t\t\tthrow \"dct don't support complex numbers.\";\n\t\t}\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t}\n\t\t\tconst result = SignalTool.dct(real);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex(result[i]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn M.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Inverse discrete cosine transform (DCT-III, IDCT),\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} X\n\t * @param {KSignalSettings} [type]\n\t * @returns {Matrix} idct(x)\n\t */\n\tstatic idct(X, type) {\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Matrix._toMatrix(X);\n\t\tif(M.isComplex()) {\n\t\t\tthrow \"idct don't support complex numbers.\";\n\t\t}\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t}\n\t\t\tconst result = SignalTool.idct(real);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex(result[i]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn M.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Discrete two-dimensional Fourier transform (2D DFT).\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @returns {Matrix}\n\t */\n\tstatic fft2(x) {\n\t\treturn Signal.fft(x, {dimension : \"both\"});\n\t}\n\n\t/**\n\t * Inverse discrete two-dimensional Fourier transform (2D IDFT),\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} X\n\t * @returns {Matrix}\n\t */\n\tstatic ifft2(X) {\n\t\treturn Signal.ifft(X, {dimension : \"both\"});\n\t}\n\n\t/**\n\t * Discrete two-dimensional cosine transform (2D DCT).\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @returns {Matrix}\n\t */\n\tstatic dct2(x) {\n\t\treturn Signal.dct(x, {dimension : \"both\"});\n\t}\n\n\t/**\n\t * Inverse discrete two-dimensional cosine transform (2D IDCT),\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} X\n\t * @returns {Matrix}\n\t */\n\tstatic idct2(X) {\n\t\treturn Signal.idct(X, {dimension : \"both\"});\n\t}\n\n\t/**\n\t * Convolution integral, Polynomial multiplication.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x1\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x2\n\t * @returns {Matrix}\n\t */\n\tstatic conv(x1, x2) {\n\t\tconst M1 = Matrix._toMatrix(x1);\n\t\tconst M2 = Matrix._toMatrix(x2);\n\t\tif(M1.isMatrix() || M2.isMatrix()) {\n\t\t\tthrow \"conv don't support matrix numbers.\";\n\t\t}\n\t\tconst M1_real = new Array(M1.length);\n\t\tconst M1_imag = new Array(M1.length);\n\t\tconst M2_real = new Array(M2.length);\n\t\tconst M2_imag = new Array(M2.length);\n\t\tif(M1.isRow()) {\n\t\t\tfor(let i = 0; i < M1.column_length; i++) {\n\t\t\t\tM1_real[i] = M1.matrix_array[0][i].real;\n\t\t\t\tM1_imag[i] = M1.matrix_array[0][i].imag;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor(let i = 0; i < M1.row_length; i++) {\n\t\t\t\tM1_real[i] = M1.matrix_array[i][0].real;\n\t\t\t\tM1_imag[i] = M1.matrix_array[i][0].imag;\n\t\t\t}\n\t\t}\n\t\tif(M2.isRow()) {\n\t\t\tfor(let i = 0; i < M2.column_length; i++) {\n\t\t\t\tM2_real[i] = M2.matrix_array[0][i].real;\n\t\t\t\tM2_imag[i] = M2.matrix_array[0][i].imag;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor(let i = 0; i < M2.row_length; i++) {\n\t\t\t\tM2_real[i] = M2.matrix_array[i][0].real;\n\t\t\t\tM2_imag[i] = M2.matrix_array[i][0].imag;\n\t\t\t}\n\t\t}\n\t\tconst y = SignalTool.conv(M1_real, M1_imag, M2_real, M2_imag);\n\t\tconst m = new Array(y.real.length);\n\t\tfor(let i = 0; i < y.real.length; i++) {\n\t\t\tm[i] = new Complex([y.real[i], y.imag[i]]);\n\t\t}\n\t\tconst M = new Matrix([m]);\n\t\treturn M2.isRow() ? M : M.transpose();\n\t}\n\n\t/**\n\t * ACF(Autocorrelation function), cros-correlation function.\n\t * - If the argument is omitted, it is calculated by the autocorrelation function.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x1\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} [x2] - Matrix to calculate the correlation.\n\t * @returns {Matrix}\n\t */\n\tstatic xcorr(x1, x2) {\n\t\tconst M1 = Matrix._toMatrix(x1);\n\t\tif(!x2) {\n\t\t\treturn M1.xcorr(M1);\n\t\t}\n\t\tconst M2 = Matrix._toMatrix(x2);\n\t\tif(M1.isMatrix() || M2.isMatrix()) {\n\t\t\tthrow \"conv don't support matrix numbers.\";\n\t\t}\n\t\tconst M1_real = new Array(M1.length);\n\t\tconst M1_imag = new Array(M1.length);\n\t\tconst M2_real = new Array(M2.length);\n\t\tconst M2_imag = new Array(M2.length);\n\t\tif(M1.isRow()) {\n\t\t\tfor(let i = 0; i < M1.column_length; i++) {\n\t\t\t\tM1_real[i] = M1.matrix_array[0][i].real;\n\t\t\t\tM1_imag[i] = M1.matrix_array[0][i].imag;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor(let i = 0; i < M1.row_length; i++) {\n\t\t\t\tM1_real[i] = M1.matrix_array[i][0].real;\n\t\t\t\tM1_imag[i] = M1.matrix_array[i][0].imag;\n\t\t\t}\n\t\t}\n\t\tif(M2.isRow()) {\n\t\t\tfor(let i = 0; i < M2.column_length; i++) {\n\t\t\t\tM2_real[i] = M2.matrix_array[0][i].real;\n\t\t\t\tM2_imag[i] = M2.matrix_array[0][i].imag;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor(let i = 0; i < M2.row_length; i++) {\n\t\t\t\tM2_real[i] = M2.matrix_array[i][0].real;\n\t\t\t\tM2_imag[i] = M2.matrix_array[i][0].imag;\n\t\t\t}\n\t\t}\n\t\tconst y = SignalTool.xcorr(M1_real, M1_imag, M2_real, M2_imag);\n\t\tconst m = new Array(y.real.length);\n\t\tfor(let i = 0; i < y.real.length; i++) {\n\t\t\tm[i] = new Complex([y.real[i], y.imag[i]]);\n\t\t}\n\t\tconst M = new Matrix([m]);\n\t\treturn M1.isRow() ? M : M.transpose();\n\t}\n\n\t/**\n\t * Create window function for signal processing.\n\t * The following window functions are available.\n\t * - \"rectangle\": Rectangular window\n\t * - \"hann\": Hann/Hanning window.\n\t * - \"hamming\": Hamming window.\n\t * - \"blackman\": Blackman window.\n\t * - \"blackmanharris\": Blackman-Harris window.\n\t * - \"blackmannuttall\": Blackman-Nuttall window.\n\t * - \"flattop\": Flat top window.\n\t * - \"sin\", Half cycle sine window.\n\t * - \"vorbis\", Vorbis window.\n\t * @param {string} name - Window function name.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} size - Window length\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\" (default) , 1/\"periodic\"\n\t * @returns {Matrix} Column vector.\n\t */\n\tstatic window(name, size, periodic) {\n\t\tconst size_ = Matrix._toInteger(size);\n\t\tconst y = SignalTool.window(name, size_, periodic);\n\t\treturn (new Matrix(y)).transpose();\n\t}\n\n\t/**\n\t * Hann (Hanning) window.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} size - Window length\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\" (default) , 1/\"periodic\"\n\t * @returns {Matrix} Column vector.\n\t */\n\tstatic hann(size, periodic) {\n\t\treturn Signal.window(\"hann\", size, periodic);\n\t}\n\t\n\t/**\n\t * Hamming window.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} size - Window length\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\" (default) , 1/\"periodic\"\n\t * @returns {Matrix} Column vector.\n\t */\n\tstatic hamming(size, periodic) {\n\t\treturn Signal.window(\"hamming\", size, periodic);\n\t}\n\t\n\t/**\n\t * FFT shift.\n\t * Circular shift beginning at the center of the signal.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x \n\t * @param {KSignalSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic fftshift(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tif(X.isVector()) {\n\t\t\tconst shift_size = Math.floor(X.length / 2);\n\t\t\treturn X.circshift(shift_size, type);\n\t\t}\n\t\tconst shift_size_col = Math.floor(X.column_length / 2);\n\t\tconst shift_size_row = Math.floor(X.row_length / 2);\n\t\tif(type !== undefined) {\n\t\t\tconst target = type.dimension;\n\t\t\tif((target === \"row\") || (target === 1)) {\n\t\t\t\treturn X.circshift(shift_size_col, type);\n\t\t\t}\n\t\t\telse if((target === \"column\") || (target === 2)) {\n\t\t\t\treturn X.circshift(shift_size_row, type);\n\t\t\t}\n\t\t}\n\t\tconst Y = X.circshift(shift_size_col, {dimension : \"row\"});\n\t\treturn Y.circshift(shift_size_row, {dimension : \"column\"});\n\t}\n\t\n}\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/core/tools/Signal.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1282,
    "kind": "typedef",
    "name": "KSignalSettings",
    "memberof": "src/math/core/tools/Signal.js",
    "static": true,
    "longname": "src/math/core/tools/Signal.js~KSignalSettings",
    "access": "public",
    "description": "Collection of calculation settings for matrix.\n- Available options vary depending on the method.",
    "properties": [
      {
        "nullable": true,
        "types": [
          "string",
          "?number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"auto\"",
        "defaultRaw": "auto",
        "name": "dimension",
        "description": "Calculation direction. 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\"."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "KSignalSettings"
    }
  },
  {
    "__docId__": 1283,
    "kind": "class",
    "name": "FFT",
    "memberof": "src/math/core/tools/Signal.js",
    "static": true,
    "longname": "src/math/core/tools/Signal.js~FFT",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/tools/Signal.js",
    "importStyle": null,
    "description": "Fast Fourier Transform (FFT) Class.",
    "lineNumber": 26,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 1284,
    "kind": "method",
    "name": "bit_reverse_32",
    "memberof": "src/math/core/tools/Signal.js~FFT",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~FFT.bit_reverse_32",
    "access": "public",
    "description": "Return the number with reversed bits.",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} ビット反転した値"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Bit-reversed value. (32-bit integer)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "ビット反転した値"
    }
  },
  {
    "__docId__": 1285,
    "kind": "method",
    "name": "create_bit_reverse_table",
    "memberof": "src/math/core/tools/Signal.js~FFT",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~FFT.create_bit_reverse_table",
    "access": "public",
    "description": "Create a bit reversal lookup table.",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} ビット反転した値の配列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": "ビット数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "ビット反転した値の配列"
    }
  },
  {
    "__docId__": 1286,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/core/tools/Signal.js~FFT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Signal.js~FFT#constructor",
    "access": "public",
    "description": "Create FFT.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Signal length."
      }
    ]
  },
  {
    "__docId__": 1287,
    "kind": "member",
    "name": "size",
    "memberof": "src/math/core/tools/Signal.js~FFT",
    "static": false,
    "longname": "src/math/core/tools/Signal.js~FFT#size",
    "access": "public",
    "description": "Signal length.",
    "lineNumber": 67,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1288,
    "kind": "member",
    "name": "inv_size",
    "memberof": "src/math/core/tools/Signal.js~FFT",
    "static": false,
    "longname": "src/math/core/tools/Signal.js~FFT#inv_size",
    "access": "public",
    "description": "Inverse of signal length.",
    "lineNumber": 72,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1289,
    "kind": "member",
    "name": "bit_size",
    "memberof": "src/math/core/tools/Signal.js~FFT",
    "static": false,
    "longname": "src/math/core/tools/Signal.js~FFT#bit_size",
    "access": "public",
    "description": "Number of bits when the signal length is expressed in binary number.",
    "lineNumber": 77,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1290,
    "kind": "member",
    "name": "is_fast",
    "memberof": "src/math/core/tools/Signal.js~FFT",
    "static": false,
    "longname": "src/math/core/tools/Signal.js~FFT#is_fast",
    "access": "public",
    "description": "FFT algorithm available.",
    "lineNumber": 82,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1291,
    "kind": "member",
    "name": "bitrv",
    "memberof": "src/math/core/tools/Signal.js~FFT",
    "static": false,
    "longname": "src/math/core/tools/Signal.js~FFT#bitrv",
    "access": "public",
    "description": "Bit reverse table for butterfly operation.",
    "lineNumber": 87,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1292,
    "kind": "member",
    "name": "fft_re",
    "memberof": "src/math/core/tools/Signal.js~FFT",
    "static": false,
    "longname": "src/math/core/tools/Signal.js~FFT#fft_re",
    "access": "public",
    "description": "Real part table used for multiplication of complex numbers.",
    "lineNumber": 92,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1293,
    "kind": "member",
    "name": "fft_im",
    "memberof": "src/math/core/tools/Signal.js~FFT",
    "static": false,
    "longname": "src/math/core/tools/Signal.js~FFT#fft_im",
    "access": "public",
    "description": "Imaginary table used for multiplication of complex numbers.",
    "lineNumber": 97,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1295,
    "kind": "method",
    "name": "delete",
    "memberof": "src/math/core/tools/Signal.js~FFT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Signal.js~FFT#delete",
    "access": "public",
    "description": "Frees the memory reserved.",
    "lineNumber": 119,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1296,
    "kind": "method",
    "name": "fft",
    "memberof": "src/math/core/tools/Signal.js~FFT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Signal.js~FFT#fft",
    "access": "public",
    "description": "Discrete Fourier transform (DFT).",
    "lineNumber": 135,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "Array of real parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "Array of imaginary parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1297,
    "kind": "method",
    "name": "ifft",
    "memberof": "src/math/core/tools/Signal.js~FFT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Signal.js~FFT#ifft",
    "access": "public",
    "description": "Inverse discrete Fourier transform (IDFT),",
    "lineNumber": 203,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "Array of real parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "Array of imaginary parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1298,
    "kind": "class",
    "name": "FFTCache",
    "memberof": "src/math/core/tools/Signal.js",
    "static": true,
    "longname": "src/math/core/tools/Signal.js~FFTCache",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/tools/Signal.js",
    "importStyle": null,
    "description": "Simple cache class.\nCache tables used in FFT.",
    "lineNumber": 276,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 1299,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/core/tools/Signal.js~FFTCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Signal.js~FFTCache#constructor",
    "access": "public",
    "description": "Create Cache.",
    "lineNumber": 283,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "Target class you want to build a cache."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "cache_size",
        "description": "Maximum number of caches."
      }
    ]
  },
  {
    "__docId__": 1300,
    "kind": "member",
    "name": "object",
    "memberof": "src/math/core/tools/Signal.js~FFTCache",
    "static": false,
    "longname": "src/math/core/tools/Signal.js~FFTCache#object",
    "access": "public",
    "description": "Class for cache.",
    "lineNumber": 288,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1301,
    "kind": "member",
    "name": "table",
    "memberof": "src/math/core/tools/Signal.js~FFTCache",
    "static": false,
    "longname": "src/math/core/tools/Signal.js~FFTCache#table",
    "access": "public",
    "description": "Cache table.",
    "lineNumber": 294,
    "type": {
      "nullable": null,
      "types": [
        "Array<*>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1302,
    "kind": "member",
    "name": "table_max",
    "memberof": "src/math/core/tools/Signal.js~FFTCache",
    "static": false,
    "longname": "src/math/core/tools/Signal.js~FFTCache#table_max",
    "access": "public",
    "description": "Maximum number of caches.",
    "lineNumber": 299,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1303,
    "kind": "method",
    "name": "get",
    "memberof": "src/math/core/tools/Signal.js~FFTCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Signal.js~FFTCache#get",
    "access": "public",
    "description": "Create a class initialized with the specified data length.\nUse from cache if it exists in cache.",
    "lineNumber": 309,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Data length."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1304,
    "kind": "variable",
    "name": "fft_cache",
    "memberof": "src/math/core/tools/Signal.js",
    "static": true,
    "longname": "src/math/core/tools/Signal.js~fft_cache",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/tools/Signal.js",
    "importStyle": null,
    "description": "Cache for FFT.",
    "lineNumber": 336,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "FFTCache"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1305,
    "kind": "class",
    "name": "DCT",
    "memberof": "src/math/core/tools/Signal.js",
    "static": true,
    "longname": "src/math/core/tools/Signal.js~DCT",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/tools/Signal.js",
    "importStyle": null,
    "description": "Discrete cosine transform (DCT) class.",
    "lineNumber": 342,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 1306,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/core/tools/Signal.js~DCT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Signal.js~DCT#constructor",
    "access": "public",
    "description": "Create DCT.",
    "lineNumber": 348,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Signal length."
      }
    ]
  },
  {
    "__docId__": 1307,
    "kind": "member",
    "name": "size",
    "memberof": "src/math/core/tools/Signal.js~DCT",
    "static": false,
    "longname": "src/math/core/tools/Signal.js~DCT#size",
    "access": "public",
    "description": "Signal length.",
    "lineNumber": 353,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1308,
    "kind": "member",
    "name": "dct_size",
    "memberof": "src/math/core/tools/Signal.js~DCT",
    "static": false,
    "longname": "src/math/core/tools/Signal.js~DCT#dct_size",
    "access": "public",
    "description": "Twice the signal length.\nIn the DCT conversion, an actual signal is zero-filled with a doubled signal length, and an FFT is performed on it.",
    "lineNumber": 359,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1309,
    "kind": "member",
    "name": "dct_re",
    "memberof": "src/math/core/tools/Signal.js~DCT",
    "static": false,
    "longname": "src/math/core/tools/Signal.js~DCT#dct_re",
    "access": "public",
    "description": "Calculation table used for DCT conversion.",
    "lineNumber": 364,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1310,
    "kind": "member",
    "name": "dct_im",
    "memberof": "src/math/core/tools/Signal.js~DCT",
    "static": false,
    "longname": "src/math/core/tools/Signal.js~DCT#dct_im",
    "access": "public",
    "description": "Calculation table used for DCT conversion.",
    "lineNumber": 369,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1311,
    "kind": "method",
    "name": "delete",
    "memberof": "src/math/core/tools/Signal.js~DCT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Signal.js~DCT#delete",
    "access": "public",
    "description": "Frees the memory reserved.",
    "lineNumber": 384,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1312,
    "kind": "method",
    "name": "dct",
    "memberof": "src/math/core/tools/Signal.js~DCT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Signal.js~DCT#dct",
    "access": "public",
    "description": "Discrete cosine transform (DCT-II, DCT).",
    "lineNumber": 396,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "Array of real parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1313,
    "kind": "method",
    "name": "idct",
    "memberof": "src/math/core/tools/Signal.js~DCT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/core/tools/Signal.js~DCT#idct",
    "access": "public",
    "description": "Inverse discrete cosine transform (DCT-III, IDCT),",
    "lineNumber": 416,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "Array of real parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1314,
    "kind": "variable",
    "name": "dct_cache",
    "memberof": "src/math/core/tools/Signal.js",
    "static": true,
    "longname": "src/math/core/tools/Signal.js~dct_cache",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/tools/Signal.js",
    "importStyle": null,
    "description": "Cache for discrete cosine transform.",
    "lineNumber": 435,
    "ignore": true,
    "type": {
      "types": [
        "src/math/core/tools/Signal.js~FFTCache"
      ]
    }
  },
  {
    "__docId__": 1315,
    "kind": "class",
    "name": "SignalTool",
    "memberof": "src/math/core/tools/Signal.js",
    "static": true,
    "longname": "src/math/core/tools/Signal.js~SignalTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/core/tools/Signal.js",
    "importStyle": null,
    "description": "Collection of functions used inside Signal class.",
    "lineNumber": 441,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 1316,
    "kind": "method",
    "name": "isContainsZero",
    "memberof": "src/math/core/tools/Signal.js~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~SignalTool.isContainsZero",
    "access": "public",
    "description": "Returns true if the array contains 0.",
    "lineNumber": 448,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "調べたい配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1317,
    "kind": "method",
    "name": "fft",
    "memberof": "src/math/core/tools/Signal.js~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~SignalTool.fft",
    "access": "public",
    "description": "Discrete Fourier transform (DFT).",
    "lineNumber": 463,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "Array of real parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "Array of imaginary parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1318,
    "kind": "method",
    "name": "ifft",
    "memberof": "src/math/core/tools/Signal.js~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~SignalTool.ifft",
    "access": "public",
    "description": "Inverse discrete Fourier transform (IDFT),",
    "lineNumber": 474,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "Array of real parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "Array of imaginary parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1319,
    "kind": "method",
    "name": "dct",
    "memberof": "src/math/core/tools/Signal.js~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~SignalTool.dct",
    "access": "public",
    "description": "Discrete cosine transform (DCT-II, DCT).",
    "lineNumber": 484,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "Array of real parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1320,
    "kind": "method",
    "name": "idct",
    "memberof": "src/math/core/tools/Signal.js~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~SignalTool.idct",
    "access": "public",
    "description": "Inverse discrete cosine transform (DCT-III, IDCT),",
    "lineNumber": 494,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "Array of real parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1321,
    "kind": "method",
    "name": "powerfft",
    "memberof": "src/math/core/tools/Signal.js~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~SignalTool.powerfft",
    "access": "public",
    "description": "Power spectral density.",
    "lineNumber": 505,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "Array of real parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "Array of imaginary parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1322,
    "kind": "method",
    "name": "conv",
    "memberof": "src/math/core/tools/Signal.js~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~SignalTool.conv",
    "access": "public",
    "description": "Convolution integral, Polynomial multiplication.",
    "lineNumber": 523,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "x1_real",
        "description": "Array of real parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "x1_imag",
        "description": "Array of imaginary parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "x2_real",
        "description": "Array of real parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "x2_imag",
        "description": "Array of imaginary parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1323,
    "kind": "method",
    "name": "xcorr",
    "memberof": "src/math/core/tools/Signal.js~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~SignalTool.xcorr",
    "access": "public",
    "description": "ACF(Autocorrelation function), Cros-correlation function.",
    "lineNumber": 633,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "x1_real",
        "description": "Array of real parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "x1_imag",
        "description": "Array of imaginary parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "x2_real",
        "description": "Array of real parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "x2_imag",
        "description": "Array of imaginary parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1324,
    "kind": "method",
    "name": "window",
    "memberof": "src/math/core/tools/Signal.js~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~SignalTool.window",
    "access": "public",
    "description": "Create window function for signal processing.\nThe following window functions are available.\n- \"rectangle\": Rectangular window\n- \"hann\": Hann/Hanning window.\n- \"hamming\": Hamming window.\n- \"blackman\": Blackman window.\n- \"blackmanharris\": Blackman-Harris window.\n- \"blackmannuttall\": Blackman-Nuttall window.\n- \"flattop\": Flat top window.\n- \"sin\", Half cycle sine window.\n- \"vorbis\", Vorbis window.",
    "lineNumber": 790,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Window function name."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Window length."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\" (default) , 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1325,
    "kind": "method",
    "name": "hann",
    "memberof": "src/math/core/tools/Signal.js~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~SignalTool.hann",
    "access": "public",
    "description": "Hann (Hanning) window.",
    "lineNumber": 890,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Window length."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\" (default) , 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1326,
    "kind": "method",
    "name": "hamming",
    "memberof": "src/math/core/tools/Signal.js~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~SignalTool.hamming",
    "access": "public",
    "description": "Hamming window.",
    "lineNumber": 900,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Window length."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\" (default) , 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1327,
    "kind": "class",
    "name": "Signal",
    "memberof": "src/math/core/tools/Signal.js",
    "static": true,
    "longname": "src/math/core/tools/Signal.js~Signal",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/core/tools/Signal.js",
    "importStyle": "Signal",
    "description": "Signal processing class for `Matrix` class.\n- These methods can be used in the `Matrix` method chain.\n- This class cannot be called directly.",
    "lineNumber": 911,
    "interface": false
  },
  {
    "__docId__": 1328,
    "kind": "method",
    "name": "fft",
    "memberof": "src/math/core/tools/Signal.js~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~Signal.fft",
    "access": "public",
    "description": "Discrete Fourier transform (DFT).",
    "lineNumber": 919,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} fft(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KSignalSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "fft(x)"
    }
  },
  {
    "__docId__": 1329,
    "kind": "method",
    "name": "ifft",
    "memberof": "src/math/core/tools/Signal.js~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~Signal.ifft",
    "access": "public",
    "description": "Inverse discrete Fourier transform (IDFT),",
    "lineNumber": 949,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} ifft(X)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "X",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KSignalSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "ifft(X)"
    }
  },
  {
    "__docId__": 1330,
    "kind": "method",
    "name": "powerfft",
    "memberof": "src/math/core/tools/Signal.js~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~Signal.powerfft",
    "access": "public",
    "description": "Power spectral density.",
    "lineNumber": 979,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} abs(fft(x)).^2"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KSignalSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "abs(fft(x)).^2"
    }
  },
  {
    "__docId__": 1331,
    "kind": "method",
    "name": "dct",
    "memberof": "src/math/core/tools/Signal.js~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~Signal.dct",
    "access": "public",
    "description": "Discrete cosine transform (DCT-II, DCT).",
    "lineNumber": 1009,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} dct(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KSignalSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "dct(x)"
    }
  },
  {
    "__docId__": 1332,
    "kind": "method",
    "name": "idct",
    "memberof": "src/math/core/tools/Signal.js~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~Signal.idct",
    "access": "public",
    "description": "Inverse discrete cosine transform (DCT-III, IDCT),",
    "lineNumber": 1040,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} idct(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "X",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KSignalSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "idct(x)"
    }
  },
  {
    "__docId__": 1333,
    "kind": "method",
    "name": "fft2",
    "memberof": "src/math/core/tools/Signal.js~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~Signal.fft2",
    "access": "public",
    "description": "Discrete two-dimensional Fourier transform (2D DFT).",
    "lineNumber": 1070,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1334,
    "kind": "method",
    "name": "ifft2",
    "memberof": "src/math/core/tools/Signal.js~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~Signal.ifft2",
    "access": "public",
    "description": "Inverse discrete two-dimensional Fourier transform (2D IDFT),",
    "lineNumber": 1079,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "X",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1335,
    "kind": "method",
    "name": "dct2",
    "memberof": "src/math/core/tools/Signal.js~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~Signal.dct2",
    "access": "public",
    "description": "Discrete two-dimensional cosine transform (2D DCT).",
    "lineNumber": 1088,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1336,
    "kind": "method",
    "name": "idct2",
    "memberof": "src/math/core/tools/Signal.js~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~Signal.idct2",
    "access": "public",
    "description": "Inverse discrete two-dimensional cosine transform (2D IDCT),",
    "lineNumber": 1097,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "X",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1337,
    "kind": "method",
    "name": "conv",
    "memberof": "src/math/core/tools/Signal.js~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~Signal.conv",
    "access": "public",
    "description": "Convolution integral, Polynomial multiplication.",
    "lineNumber": 1107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1338,
    "kind": "method",
    "name": "xcorr",
    "memberof": "src/math/core/tools/Signal.js~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~Signal.xcorr",
    "access": "public",
    "description": "ACF(Autocorrelation function), cros-correlation function.\n- If the argument is omitted, it is calculated by the autocorrelation function.",
    "lineNumber": 1157,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "x2",
        "description": "Matrix to calculate the correlation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1339,
    "kind": "method",
    "name": "window",
    "memberof": "src/math/core/tools/Signal.js~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~Signal.window",
    "access": "public",
    "description": "Create window function for signal processing.\nThe following window functions are available.\n- \"rectangle\": Rectangular window\n- \"hann\": Hann/Hanning window.\n- \"hamming\": Hamming window.\n- \"blackman\": Blackman window.\n- \"blackmanharris\": Blackman-Harris window.\n- \"blackmannuttall\": Blackman-Nuttall window.\n- \"flattop\": Flat top window.\n- \"sin\", Half cycle sine window.\n- \"vorbis\", Vorbis window.",
    "lineNumber": 1220,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Column vector."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Window function name."
      },
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Window length"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\" (default) , 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Column vector."
    }
  },
  {
    "__docId__": 1340,
    "kind": "method",
    "name": "hann",
    "memberof": "src/math/core/tools/Signal.js~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~Signal.hann",
    "access": "public",
    "description": "Hann (Hanning) window.",
    "lineNumber": 1232,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Column vector."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Window length"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\" (default) , 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Column vector."
    }
  },
  {
    "__docId__": 1341,
    "kind": "method",
    "name": "hamming",
    "memberof": "src/math/core/tools/Signal.js~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~Signal.hamming",
    "access": "public",
    "description": "Hamming window.",
    "lineNumber": 1242,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Column vector."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Window length"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\" (default) , 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Column vector."
    }
  },
  {
    "__docId__": 1342,
    "kind": "method",
    "name": "fftshift",
    "memberof": "src/math/core/tools/Signal.js~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Signal.js~Signal.fftshift",
    "access": "public",
    "description": "FFT shift.\nCircular shift beginning at the center of the signal.",
    "lineNumber": 1253,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KSignalSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1343,
    "kind": "file",
    "name": "src/math/core/tools/Statistics.js",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Polyfill from \"../../tools/Polyfill.js\";\nimport Complex from \"../Complex.js\";\nimport Matrix from \"../Matrix.js\";\n\n/**\n * Collection of calculation settings for matrix.\n * - Available options vary depending on the method.\n * @typedef {Object} KStatisticsSettings\n * @property {?string|?number} [dimension=\"auto\"] Calculation direction. 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\".\n * @property {Object} [correction] Correction value. For statistics. 0(unbiased), 1(sample).\n */\n\n/**\n * Class for statistical processing for `Matrix` class.\n * - These methods can be used in the `Matrix` method chain.\n * - This class cannot be called directly.\n */\nexport default class Statistics {\n\n\t/**\n\t * Maximum number.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix} max([A, B])\n\t */\n\tstatic max(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tlet x = data[0];\n\t\t\tfor(let i = 1; i < data.length; i++) {\n\t\t\t\tif(x.compareTo(data[i]) < 0) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [x];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\t\n\t/**\n\t * Minimum number.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix} min([A, B])\n\t */\n\tstatic min(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tlet x = data[0];\n\t\t\tfor(let i = 1; i < data.length; i++) {\n\t\t\t\tif(x.compareTo(data[i]) > 0) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [x];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Sum.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic sum(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\t// カハンの加算アルゴリズム\n\t\t\tlet sum = Complex.ZERO;\n\t\t\tlet delta = Complex.ZERO;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst new_number = data[i].add(delta);\n\t\t\t\tconst new_sum = sum.add(new_number);\n\t\t\t\tdelta = new_sum.sub(sum).sub(new_number);\n\t\t\t\tsum = new_sum;\n\t\t\t}\n\t\t\treturn [sum];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Arithmetic average.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic mean(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\t// カハンの加算アルゴリズム\n\t\t\tlet sum = Complex.ZERO;\n\t\t\tlet delta = Complex.ZERO;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst new_number = data[i].add(delta);\n\t\t\t\tconst new_sum = sum.add(new_number);\n\t\t\t\tdelta = new_sum.sub(sum).sub(new_number);\n\t\t\t\tsum = new_sum;\n\t\t\t}\n\t\t\treturn [sum.div(data.length)];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Product of array elements.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic prod(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tlet x = Complex.ONE;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tx = x.mul(data[i]);\n\t\t\t}\n\t\t\treturn [x];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Geometric mean.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic geomean(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tlet x = Complex.ONE;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tx = x.mul(data[i]);\n\t\t\t}\n\t\t\treturn [x.pow(Complex.create(data.length).inv())];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\t\n\t/**\n\t * Median.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic median(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Complex} a\n\t\t * @param {Complex} b\n\t\t * @returns {number}\n\t\t */\n\t\tconst compare = function(a, b){\n\t\t\treturn a.compareTo(b);\n\t\t};\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tdata.sort(compare);\n\t\t\tlet y;\n\t\t\tif((data.length % 2) === 1) {\n\t\t\t\ty = data[Math.floor(data.length / 2)];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst x1 = data[Math.floor(data.length / 2) - 1];\n\t\t\t\tconst x2 = data[Math.floor(data.length / 2)];\n\t\t\t\ty = x1.add(x2).div(Complex.TWO);\n\t\t\t}\n\t\t\treturn [y];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Mode.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic mode(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\t/**\n\t\t * @param {Complex} a\n\t\t * @param {Complex} b\n\t\t * @returns {number}\n\t\t */\n\t\tconst compare = function(a, b){\n\t\t\treturn a.compareTo(b);\n\t\t};\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tdata.sort(compare);\n\t\t\t/**\n\t\t\t * @type {any}\n\t\t\t */\n\t\t\tconst map = {};\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst str = data[i].real + \" \" + data[i].imag;\n\t\t\t\tif(!map[str]) {\n\t\t\t\t\tmap[str] = {\n\t\t\t\t\t\tcomplex : data[i],\n\t\t\t\t\t\tvalue : 1\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmap[str].value++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet max_complex = Complex.ZERO;\n\t\t\tlet max_number = Number.NEGATIVE_INFINITY;\n\t\t\tfor(const key in map) {\n\t\t\t\tconst tgt = map[key];\n\t\t\t\tif(tgt.value > max_number) {\n\t\t\t\t\tmax_number\t= tgt.value;\n\t\t\t\t\tmax_complex\t= tgt.complex;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [max_complex];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Moment.\n\t * - Moment of order n. Equivalent to the definition of variance at 2.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {number} nth_order\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic moment(x, nth_order, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst M = Statistics.mean(X);\n\t\t// 補正値 0(不偏分散), 1(標本分散)。規定値は、標本分散とする\n\t\tconst cor = !(type && typeof type.correction === \"number\") ? 1: Matrix._toDouble(type.correction);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst order = Matrix._toComplex(nth_order);\n\t\tlet col = 0;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tlet mean;\n\t\t\tif(M.isScalar()) {\n\t\t\t\tmean = M.scalar;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmean = M.getComplex(col++);\n\t\t\t}\n\t\t\tlet x = Complex.ZERO;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\t// 計算方法について\n\t\t\t\t// ・複素数は、ノルムをとらずに複素数用のpowを使用したほうがいいのか\n\t\t\t\t// ・分散と同様にnormで計算したほうがいいのか\n\t\t\t\t// 複素数でのモーメントの定義がないため不明であるが、\n\t\t\t\t// 分散を拡張した考えであれば、normをとった累乗のほうが良いと思われる。\n\t\t\t\tconst a = data[i].sub(mean);\n\t\t\t\tx = x.add(a.pow(order));\n\t\t\t}\n\t\t\tif(data.length === 1) {\n\t\t\t\treturn [x.div(data.length)];\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn [x.div(data.length - 1 + cor)];\n\t\t\t}\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Variance.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic var(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst M = Statistics.mean(X);\n\t\t// 補正値 0(不偏分散), 1(標本分散)。規定値は、不偏分散とする\n\t\tconst cor = !(type && typeof type.correction === \"number\") ? 0: Matrix._toDouble(type.correction);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tlet col = 0;\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tif(data.length === 1) {\n\t\t\t\t// 要素が1であれば、分散は0固定\n\t\t\t\treturn [Complex.ZERO];\n\t\t\t}\n\t\t\tconst mean = M.getComplex(col++);\n\t\t\t// 分散は、ノルムの2乗で計算するため必ず実数になる。\n\t\t\tlet x = 0;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst a = data[i].sub(mean).norm;\n\t\t\t\tx += a * a;\n\t\t\t}\n\t\t\treturn [Complex.create(x / (data.length - 1 + cor))];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Standard deviation.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic std(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\t// 補正値 0(不偏分散), 1(標本分散)。規定値は、不偏分散とする\n\t\tconst cor = !(type && typeof type.correction === \"number\") ? 0: Matrix._toDouble(type.correction);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Statistics.var(X, { correction : cor, dimension : dim });\n\t\tM._each(function(num) {\n\t\t\treturn num.sqrt();\n\t\t});\n\t\treturn M;\n\t}\n\n\t/**\n\t * Mean absolute deviation.\n\t * - The \"algorithm\" can choose \"0/mean\"(default) and \"1/median\".\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {?string|?number} [algorithm]\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic mad(x, algorithm, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst alg = !algorithm ? \"mean\" : (typeof algorithm === \"string\" ? algorithm : Matrix._toInteger(algorithm));\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tif((alg === \"mean\") || (alg === 0)) {\n\t\t\treturn Statistics.mean(X.sub(Statistics.mean(X, {dimension : dim} )).abs(), {dimension : dim});\n\t\t}\n\t\telse if((alg === \"median\") || (alg === 1)) {\n\t\t\treturn Statistics.median(X.sub(Statistics.median(X, {dimension : dim} )).abs(), {dimension : dim});\n\t\t}\n\t\telse {\n\t\t\tthrow \"mad unsupported argument \" + alg;\n\t\t}\n\t}\n\n\t/**\n\t * Skewness.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic skewness(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\t// 補正値 0(不偏), 1(標本)。規定値は、標本とする\n\t\tconst cor = !(type && typeof type.correction === \"number\") ? 1: Matrix._toDouble(type.correction);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst order = Statistics.moment(X, 3, { correction : cor, dimension : dim });\n\t\tconst std = Statistics.std(X, { correction : cor, dimension : dim });\n\t\tif(cor === 1) {\n\t\t\treturn order.dotdiv(std.dotpow(3));\n\t\t}\n\t\telse {\n\t\t\treturn order.dotdiv(std.dotpow(3)).dotmul(2);\n\t\t}\n\t}\n\n\t/**\n\t * Covariance matrix or Covariance value.\n\t * - Get a variance-covariance matrix from 1 matrix.\n\t * - Get a covariance from 2 vectors.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings|import(\"../Matrix.js\").KMatrixInputData} [y_or_type]\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic cov(x, y_or_type, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\t// 補正値 0(不偏分散), 1(標本分散)。規定値は、不偏分散とする\n\t\tlet cor = 0;\n\t\tlet Y = null;\n\t\tif(y_or_type !== undefined) {\n\t\t\tif(type !== undefined) {\n\t\t\t\tcor = !(type && typeof type.correction === \"number\") ? 0: Matrix._toDouble(type.correction);\n\t\t\t\tY = Matrix._toMatrix(y_or_type);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(typeof y_or_type === \"object\" && (\"correction\" in y_or_type)){\n\t\t\t\t\tcor = Matrix._toDouble(y_or_type.correction);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tY = Matrix._toMatrix(y_or_type);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// 1つの行列から分散共分散行列を作成する\n\t\tif(Y === null) {\n\t\t\tif(X.isVector()) {\n\t\t\t\treturn Statistics.var(X, {correction : cor});\n\t\t\t}\n\t\t\tconst correction = X.row_length === 1 ? 1 : cor;\n\t\t\tconst arr = X.matrix_array;\n\t\t\tconst mean = Statistics.mean(X).matrix_array[0];\n\t\t\t// 上三角行列、対角行列\n\t\t\tconst y = new Array(X.column_length);\n\t\t\tfor(let a = 0; a < X.column_length; a++) {\n\t\t\t\tconst a_mean = mean[a];\n\t\t\t\ty[a] = new Array(X.column_length);\n\t\t\t\tfor(let b = a; b < X.column_length; b++) {\n\t\t\t\t\tconst b_mean = mean[b];\n\t\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\t\tfor(let row = 0; row < X.row_length; row++) {\n\t\t\t\t\t\tsum = sum.add((arr[row][a].sub(a_mean)).dot(arr[row][b].sub(b_mean)));\n\t\t\t\t\t}\n\t\t\t\t\ty[a][b] = sum.div(X.row_length - 1 + correction);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 下三角行列を作る\n\t\t\tfor(let row = 1; row < y[0].length; row++) {\n\t\t\t\tfor(let col = 0; col < row; col++) {\n\t\t\t\t\ty[row][col] = y[col][row];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\t// 2つのベクトルから共分散を求める\n\t\telse {\n\t\t\tif(!X.isVector() && !Y.isVector()) {\n\t\t\t\tthrow \"vector not specified\";\n\t\t\t}\n\t\t\tif(X.length !== Y.length) {\n\t\t\t\tthrow \"X.length !== Y.length\";\n\t\t\t}\n\t\t\tconst x_mean = Statistics.mean(X).scalar;\n\t\t\tconst y_mean = Statistics.mean(Y).scalar;\n\t\t\tconst length = X.length;\n\t\t\tconst correction = length === 1 ? 1 : cor;\n\t\t\tlet sum = Complex.ZERO;\n\t\t\tfor(let i = 0; i < length; i++) {\n\t\t\t\tsum = sum.add((X.getComplex(i).sub(x_mean)).dot(Y.getComplex(i).sub(y_mean)));\n\t\t\t}\n\t\t\treturn new Matrix(sum.div(length - 1 + correction));\n\t\t}\n\t}\n\n\t/**\n\t * The samples are standardize to a mean value of 0, standard deviation of 1.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic standardization(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst mean_zero = X.sub(Statistics.mean(X, type));\n\t\tconst std_one = mean_zero.dotdiv(Statistics.std(mean_zero, type));\n\t\treturn std_one;\n\t}\n\n\t/**\n\t * Correlation matrix or Correlation coefficient.\n\t * - Get a correlation matrix from 1 matrix.\n\t * - Get a correlation coefficient from 2 vectors.\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {KStatisticsSettings|import(\"../Matrix.js\").KMatrixInputData} [y_or_type]\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic corrcoef(x, y_or_type, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\t// 補正値 0(不偏分散), 1(標本分散)。規定値は、不偏分散とする\n\t\tlet Y = null;\n\t\tif(y_or_type !== undefined) {\n\t\t\tif(type !== undefined) {\n\t\t\t\tY = Matrix._toMatrix(y_or_type);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(!(typeof y_or_type === \"object\" && (\"correction\" in y_or_type))){\n\t\t\t\t\tY = Matrix._toMatrix(y_or_type);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// 1つの行列から相関行列を作成する\n\t\tif(Y === null) {\n\t\t\treturn Statistics.cov(Statistics.standardization(X, type), type);\n\t\t}\n\t\t// 2つのベクトルから相関係数を求める\n\t\telse {\n\t\t\tif(!X.isVector() && !Y.isVector()) {\n\t\t\t\tthrow \"vector not specified\";\n\t\t\t}\n\t\t\tif(X.length !== Y.length) {\n\t\t\t\tthrow \"X.length[\" + X.length + \"] !== Y.length[\" + Y.length + \"]\";\n\t\t\t}\n\t\t\tconst covariance = Statistics.cov(X, Y, type);\n\t\t\tconst Xsd = X.std(type);\n\t\t\tconst Ysd = Y.std(type);\n\t\t\treturn covariance.div(Xsd.mul(Ysd));\n\t\t}\n\t}\n\n\t/**\n\t * Sort.\n\t * - The \"order\" can choose \"ascend\"(default) and \"descend\".\n\t * @param {import(\"../Matrix.js\").KMatrixInputData} x\n\t * @param {string} [order]\n\t * @param {KStatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic sort(x, order, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst order_type = !order ? \"ascend\" : order;\n\t\t/**\n\t\t * @type {function(Complex, Complex): number }\n\t\t */\n\t\tlet compare;\n\t\tif(order_type === \"ascend\") {\n\t\t\tcompare = function(a, b){\n\t\t\t\treturn a.compareTo(b);\n\t\t\t};\n\t\t}\n\t\telse {\n\t\t\tcompare = function(a, b){\n\t\t\t\treturn b.compareTo(a);\n\t\t\t};\n\t\t}\n\t\t/**\n\t\t * @param {Array<Complex>} data \n\t\t * @returns {Array<Complex>}\n\t\t */\n\t\tconst main = function(data) {\n\t\t\tdata.sort(compare);\n\t\t\treturn data;\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/core/tools/Statistics.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1344,
    "kind": "typedef",
    "name": "KStatisticsSettings",
    "memberof": "src/math/core/tools/Statistics.js",
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~KStatisticsSettings",
    "access": "public",
    "description": "Collection of calculation settings for matrix.\n- Available options vary depending on the method.",
    "properties": [
      {
        "nullable": true,
        "types": [
          "string",
          "?number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"auto\"",
        "defaultRaw": "auto",
        "name": "dimension",
        "description": "Calculation direction. 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\"."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "correction",
        "description": "Correction value. For statistics. 0(unbiased), 1(sample)."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "KStatisticsSettings"
    }
  },
  {
    "__docId__": 1345,
    "kind": "class",
    "name": "Statistics",
    "memberof": "src/math/core/tools/Statistics.js",
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/core/tools/Statistics.js",
    "importStyle": "Statistics",
    "description": "Class for statistical processing for `Matrix` class.\n- These methods can be used in the `Matrix` method chain.\n- This class cannot be called directly.",
    "lineNumber": 28,
    "interface": false
  },
  {
    "__docId__": 1346,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.max",
    "access": "public",
    "description": "Maximum number.",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 1347,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.min",
    "access": "public",
    "description": "Minimum number.",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 1348,
    "kind": "method",
    "name": "sum",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.sum",
    "access": "public",
    "description": "Sum.",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1349,
    "kind": "method",
    "name": "mean",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.mean",
    "access": "public",
    "description": "Arithmetic average.",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1350,
    "kind": "method",
    "name": "prod",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.prod",
    "access": "public",
    "description": "Product of array elements.",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1351,
    "kind": "method",
    "name": "geomean",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.geomean",
    "access": "public",
    "description": "Geometric mean.",
    "lineNumber": 165,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1352,
    "kind": "method",
    "name": "median",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.median",
    "access": "public",
    "description": "Median.",
    "lineNumber": 188,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1353,
    "kind": "method",
    "name": "mode",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.mode",
    "access": "public",
    "description": "Mode.",
    "lineNumber": 225,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1354,
    "kind": "method",
    "name": "moment",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.moment",
    "access": "public",
    "description": "Moment.\n- Moment of order n. Equivalent to the definition of variance at 2.",
    "lineNumber": 280,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nth_order",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1355,
    "kind": "method",
    "name": "var",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.var",
    "access": "public",
    "description": "Variance.",
    "lineNumber": 326,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1356,
    "kind": "method",
    "name": "std",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.std",
    "access": "public",
    "description": "Standard deviation.",
    "lineNumber": 360,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1357,
    "kind": "method",
    "name": "mad",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.mad",
    "access": "public",
    "description": "Mean absolute deviation.\n- The \"algorithm\" can choose \"0/mean\"(default) and \"1/median\".",
    "lineNumber": 380,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "string",
          "?number"
        ],
        "spread": false,
        "optional": true,
        "name": "algorithm",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1358,
    "kind": "method",
    "name": "skewness",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.skewness",
    "access": "public",
    "description": "Skewness.",
    "lineNumber": 401,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1359,
    "kind": "method",
    "name": "cov",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.cov",
    "access": "public",
    "description": "Covariance matrix or Covariance value.\n- Get a variance-covariance matrix from 1 matrix.\n- Get a covariance from 2 vectors.",
    "lineNumber": 425,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings",
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "y_or_type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1360,
    "kind": "method",
    "name": "standardization",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.standardization",
    "access": "public",
    "description": "The samples are standardize to a mean value of 0, standard deviation of 1.",
    "lineNumber": 500,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1361,
    "kind": "method",
    "name": "corrcoef",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.corrcoef",
    "access": "public",
    "description": "Correlation matrix or Correlation coefficient.\n- Get a correlation matrix from 1 matrix.\n- Get a correlation coefficient from 2 vectors.",
    "lineNumber": 516,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings",
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": true,
        "name": "y_or_type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1362,
    "kind": "method",
    "name": "sort",
    "memberof": "src/math/core/tools/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/core/tools/Statistics.js~Statistics.sort",
    "access": "public",
    "description": "Sort.\n- The \"order\" can choose \"ascend\"(default) and \"descend\".",
    "lineNumber": 557,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"../Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "order",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "KStatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1363,
    "kind": "file",
    "name": "src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Matrix from \"../../core/Matrix.js\";\n\n/**\n * Settings for multiple regression analysis\n * @typedef {Object} KMultipleRegressionAnalysisSettings\n * @property {import(\"../../core/Matrix.js\").KMatrixInputData} samples explanatory variable. (Each column is a parameters and each row is a samples.)\n * @property {import(\"../../core/Matrix.js\").KMatrixInputData} target response variable. / actual values. (column vector)\n * @property {boolean} [is_standardised=false] Use standardized partial regression coefficients.\n */\n\n/**\n * Vector state\n * @typedef {Object} KMultipleRegressionAnalysisVectorState\n * @property {number} df degree of freedom\n * @property {number} SS sum of squares\n * @property {number} MS unbiased_variance\n */\n\n/**\n * Analysis of variance. ANOVA.\n * @typedef {Object} KMultipleRegressionAnalysisAnova\n * @property {KMultipleRegressionAnalysisVectorState} regression regression.\n * @property {KMultipleRegressionAnalysisVectorState} residual residual error.\n * @property {KMultipleRegressionAnalysisVectorState} total total.\n * @property {number} F F value. Dispersion ratio (F0)\n * @property {number} significance_F Significance F. Test with F distribution with q, n-q-1 degrees of freedom.(Probability of error.)\n */\n\n/**\n * Regression table data.\n * @typedef {Object} KMultipleRegressionAnalysisPartialRegressionData\n * @property {number} coefficient Coefficient.\n * @property {number} standard_error Standard error.\n * @property {number} t_stat t-statistic.\n * @property {number} p_value P-value. Risk factor.\n * @property {number} lower_95 Lower limit of a 95% confidence interval.\n * @property {number} upper_95 Upper limit of a 95% confidence interval.\n */\n\n/**\n * Regression table.\n * @typedef {Object} KMultipleRegressionAnalysisPartialRegression\n * @property {KMultipleRegressionAnalysisPartialRegressionData} intercept Intercept.\n * @property {KMultipleRegressionAnalysisPartialRegressionData[]} parameters Parameters.\n */\n\n/**\n * Output for multiple regression analysis\n * @typedef {Object} KMultipleRegressionAnalysisOutput\n * @property {number} q number of explanatory variables.\n * @property {number} n number of samples.\n * @property {number[][]} predicted_values predicted values. (column vector)\n * @property {number} sY Variance of predicted values of target variable.\n * @property {number} sy Variance of measured values of target variable.\n * @property {number} multiple_R Multiple R. Multiple correlation coefficient.\n * @property {number} R_square R Square. Coefficient of determination.\n * @property {number} adjusted_R_square Adjusted R Square. Adjusted coefficient of determination.\n * @property {KMultipleRegressionAnalysisAnova} ANOVA analysis of variance.\n * @property {number} Ve Unbiased variance of residuals. (Ve)\n * @property {number} standard_error Standard error. (SE)\n * @property {number} AIC Akaike's Information Criterion. (AIC)\n * @property {KMultipleRegressionAnalysisPartialRegression} regression_table Regression table.\n */\n\n/**\n * Multiple regression analysis.\n */\nexport default class MultipleRegressionAnalysis {\n\n\t/**\n\t * Multiple regression analysis\n\t * @param {KMultipleRegressionAnalysisSettings} settings - input data\n\t * @returns {KMultipleRegressionAnalysisOutput} analyzed data\n\t */\n\tstatic runMultipleRegressionAnalysis(settings) {\n\t\t//最小二乗法により重回帰分析する。\n\t\t//参考文献\n\t\t//[1] 図解でわかる多変量解析―データの山から本質を見抜く科学的分析ツール\n\t\t//    涌井 良幸, 涌井 貞美, 日本実業出版社 (2001/01)\n\t\t//[2] これならわかる Excelで楽に学ぶ多変量解析\n\t\t//    長谷川 勝也, 技術評論社 (2002/07)\n\t\t//[3] ど素人の「Excel 回帰分析」表の見方 (単回帰分析)\n\t\t//   http://atiboh.sub.jp/t07kaikibunseki.html\n\t\t//[4] 赤池の情報量基準（AIC）の計算方法\n\t\t//   http://software.ssri.co.jp/statweb2/tips/tips_10.html\n\n\t\t// samples 説明変量。行がサンプル。列が各値。\n\t\t// target  目的変量・実測値。縦ベクトル。\n\t\t// is_standardised trueで標準化偏回帰係数\n\t\tlet samples = Matrix.create(settings.samples);\n\t\tlet target = Matrix.create(settings.target);\n\t\tconst set_unbiased = {correction : 1};\n\t\tconst set_sample = {correction : 0};\n\n\t\t// 標準化偏回帰係数を調べるために平均0 分散1に正規化する\n\t\tif(settings.is_standardised) {\n\t\t\tsamples = samples.standardization();\n\t\t\ttarget = target.standardization();\n\t\t}\n\n\t\t// 説明変量・説明変数の数 q\n\t\tconst number_of_explanatory_variables = Matrix.create(samples.width);\n\t\t// 標本数(観測数) n\n\t\tconst number_of_samples = Matrix.create(samples.height);\n\n\t\t// 共分散行列\n\t\tconst S = samples.cov(set_unbiased);\n\t\tconst S_rcond = S.rcond();\n\t\t// どこかの値に相関が非常に高いものがあり計算できない。\n\t\tif(S_rcond <= 1e-10) {\n\t\t\tconsole.log(\"Analysis failed due to highly correlated explanatory variables.(rcond : \" + S_rcond + \")\");\n\t\t\treturn null;\n\t\t}\n\n\t\t// 目的変量との共分散(縦ベクトル)\n\t\tconst y_array = [];\n\t\tconst max_var = number_of_explanatory_variables.intValue;\n\t\tfor(let i = 0; i < max_var; i++) {\n\t\t\ty_array[i] = [ samples.getMatrix(\":\", i).cov(target, set_unbiased) ];\n\t\t}\n\t\tconst Y = Matrix.create(y_array);\n\n\t\t// 偏回帰係数(縦ベクトル) partial regression coefficient. (column vector)\n\t\tconst partial_regression_coefficient =  S.inv().mul(Y);\n\t\t// バイアス・定数項・切片 bias\n\t\tconst bias = target.mean().sub(samples.mean().mul(partial_regression_coefficient));\n\t\t// 予測値(縦ベクトル) predicted values. (column vector)\n\t\tconst predicted_values = samples.mul(partial_regression_coefficient).add(bias);\n\t\t// 目的変量の予測値の分散\n\t\tconst sY = predicted_values.var(set_unbiased);\n\t\t// 目的変量の実測値の分散\n\t\tconst sy = target.var(set_unbiased);\n\t\t// 重相関係数\n\t\tconst multiple_R = predicted_values.corrcoef(target, set_unbiased);\n\t\t// 決定係数・寄与率\n\t\tconst R_square = sY.div(sy);\n\n\t\t// 回帰\n\t\tconst regression_df = number_of_explanatory_variables;\t\t\t\t\t// 自由度\n\t\tconst regression_SS = predicted_values.sub(target.mean()).dotpow(2).sum();\t// 平方和(変動)・MSr\n\t\tconst regression_MS = regression_SS.div(regression_df);\t// 不偏分散(分散)\n\t\t\n\t\t// 残差 residual error\n\t\tconst residual_df = number_of_samples.sub(number_of_explanatory_variables).sub(1);\t// 自由度\n\t\tconst residual_SS = predicted_values.sub(target).dotpow(2).sum();\t// 平方和(変動)・MSe\n\t\tconst residual_MS = residual_SS.div(residual_df);\t// 不偏分散(分散)\n\n\t\t// 全体\n\t\tconst total_df = number_of_samples.sub(1);\t// 自由度\n\t\tconst total_SS = target.sub(target.mean()).dotpow(2).sum();\t// 平方和(変動)・MSt・VE\n\t\tconst total_MS = total_SS.div(total_df);\t// 不偏分散(分散)\n\n\t\t// Ve(残差の不偏分散)\n\t\tconst Ve = residual_MS;\n\t\t\n\t\t// SE(標準誤差, SE, standard error)\n\t\tconst standard_error = Ve.sqrt();\n\n\t\t// 回帰の分散比(F値)(観測された分散比)・F0\n\t\tconst regression_F = regression_MS.div(residual_MS);\n\n\t\t// 回帰の有意 F significance F\n\t\t// 自由度 q, n-q-1 のF分布による検定\n\t\t// 誤りが発生する確率(1 - cdf('F',X,A,B))\n\t\t// F分布を用いて、誤りが発生する確率を調べる (有意 F)\n\t\tconst regression_significance_F = Matrix.ONE.sub(regression_F.fcdf(regression_df, residual_df));\n\t\t\n\t\t// 自由度修正済決定係数・補正R2 adjusted R2, 自由度修正済決定係数 / 自由度調整済寄与率\n\t\t// 1 - (残差による変動 / 残差の自由度) / (全変動 / 全体の自由度)\n\t\tconst adjusted_R_square = Matrix.ONE.sub(residual_MS.div(total_MS));\n\t\t\n\t\t// 赤池情報量規準(Akaike's Information Criterion, AIC)\n\t\t// 回帰式に定数項を含む場合の式\n\t\t// out.n * (log(2 * pi * (table(2, 2)/out.n)) + 1) + 2 * (out.q + 2);\n\t\tconst AIC = number_of_samples.mul(\n\t\t\tresidual_SS.div(number_of_samples).mul(2.0 * Math.PI).log().add(1)\n\t\t).add(number_of_explanatory_variables.add(2).mul(2));\n\n\t\t// ここからは偏回帰の値を計算していく\n\n\t\t// 偏差平方和・積和行列の逆行列を作る\n\t\t// つまり、共分散行列の各共分散で(サンプル数N)を割らない値を求めればいい。\n\t\t// 不偏の場合は、 偏差平方和 * ( N * (N-1) ) を求めれば良い。\n\t\tconst IS = S.dotmul(number_of_samples).inv();\n\n\t\t// 初期化\n\t\tconst intercept = {\n\t\t\tcoefficient : Matrix.ZERO,\n\t\t\tstandard_error : Matrix.ZERO,\n\t\t\tt_stat : Matrix.ZERO,\n\t\t\tp_value : Matrix.ZERO,\n\t\t\tlower_95 : Matrix.ZERO,\n\t\t\tupper_95 : Matrix.ZERO\n\t\t};\n\t\tconst parameters = [];\n\t\tfor(let i = 0; i < max_var; i++) {\n\t\t\tparameters[i] = {\n\t\t\t\tcoefficient : Matrix.ZERO,\n\t\t\t\tstandard_error : Matrix.ZERO,\n\t\t\t\tt_stat : Matrix.ZERO,\n\t\t\t\tp_value : Matrix.ZERO,\n\t\t\t\tlower_95 : Matrix.ZERO,\n\t\t\t\tupper_95 : Matrix.ZERO\n\t\t\t};\n\t\t}\n\t\t// 係数\n\t\t{\n\t\t\t// 切片の係数\n\t\t\tintercept.coefficient = bias;\n\t\t\t// 偏回帰の係数\n\t\t\tfor(let i = 0; i < max_var; i++) {\n\t\t\t\tparameters[i].coefficient = new Matrix(partial_regression_coefficient.getComplex(i));\n\t\t\t}\n\t\t}\n\t\t// 標準誤差\n\t\t{\n\t\t\t// 切片の標準誤差\n\t\t\tconst q = number_of_explanatory_variables.intValue;\n\t\t\tlet s = number_of_samples.inv();\n\t\t\tfor(let j = 0; j < q; j++) {\n\t\t\t\tfor(let k = 0; k < q; k++) {\n\t\t\t\t\ts = s.add(samples.getMatrix(\":\", j).mean().mul(samples.getMatrix(\":\", k).mean()).mul(IS.getMatrix(j, k)));\n\t\t\t\t}\n\t\t\t}\n\t\t\tintercept.standard_error = s.mul(Ve).sqrt();\n\t\t\t// 偏回帰の標準誤差\n\t\t\tfor(let i = 0; i < max_var; i++) {\n\t\t\t\tparameters[i].standard_error = IS.getMatrix(i, i).mul(Ve).sqrt();\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\t/**\n\t\t\t * t*値, P値, 信頼区間\n\t\t\t * @param {any} data \n\t\t\t * @ignore\n\t\t\t */\n\t\t\tconst calcTPI = function(data) {\n\n\t\t\t\t// t*値, 影響度, 統計量t, t-statistic.\n\t\t\t\t// 大きいほど目的変数との関連性が強い\n\t\t\t\t/**\n\t\t\t\t * @type {Matrix}\n\t\t\t\t */\n\t\t\t\tdata.t_stat = data.coefficient.div(data.standard_error);\n\t\t\t\t\n\t\t\t\t// P値, 危険率, P-value. Risk factor.\n\t\t\t\t// 切片と偏回帰係数が誤っている確率\n\t\t\t\t// スチューデントの t 分布の確率密度関数を利用\n\t\t\t\t/**\n\t\t\t\t * @type {Matrix}\n\t\t\t\t */\n\t\t\t\tdata.p_value = data.t_stat.tdist(residual_df, 2);\n\t\t\t\t\n\t\t\t\t// 信頼区間の計算\n\t\t\t\t// 下限 95%, 上限 95%\n\t\t\t\tconst percent = new Matrix(1.0 - 0.95);\n\t\t\t\tdata.lower_95 = data.coefficient.sub(percent.tinv2(residual_df).mul(data.standard_error));\n\t\t\t\tdata.upper_95 = data.coefficient.add(percent.tinv2(residual_df).mul(data.standard_error));\n\t\t\t};\n\t\t\tcalcTPI(intercept);\n\t\t\tfor(let i = 0; i < max_var; i++) {\n\t\t\t\tcalcTPI(parameters[i]);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @type {KMultipleRegressionAnalysisPartialRegression}\n\t\t */\n\t\tlet regression_table = null;\n\t\t{\n\t\t\t/**\n\t\t\t * @type {KMultipleRegressionAnalysisPartialRegressionData}\n\t\t\t */\n\t\t\tconst intercept_data = {\n\t\t\t\tcoefficient : intercept.coefficient.doubleValue,\n\t\t\t\tstandard_error : intercept.standard_error.doubleValue,\n\t\t\t\tt_stat : intercept.t_stat.doubleValue,\n\t\t\t\tp_value : intercept.p_value.doubleValue,\n\t\t\t\tlower_95 : intercept.lower_95.doubleValue,\n\t\t\t\tupper_95 : intercept.upper_95.doubleValue\n\t\t\t};\n\t\t\t\n\t\t\t/**\n\t\t\t * @type {KMultipleRegressionAnalysisPartialRegressionData[]}\n\t\t\t */\n\t\t\tconst parameters_data = [];\n\t\t\tfor(let i = 0; i < max_var; i++) {\n\t\t\t\tparameters_data.push({\n\t\t\t\t\tcoefficient : parameters[i].coefficient.doubleValue,\n\t\t\t\t\tstandard_error : parameters[i].standard_error.doubleValue,\n\t\t\t\t\tt_stat : parameters[i].t_stat.doubleValue,\n\t\t\t\t\tp_value : parameters[i].p_value.doubleValue,\n\t\t\t\t\tlower_95 : parameters[i].lower_95.doubleValue,\n\t\t\t\t\tupper_95 : parameters[i].upper_95.doubleValue\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tregression_table = {\n\t\t\t\tintercept : intercept_data,\n\t\t\t\tparameters : parameters_data\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * @type {KMultipleRegressionAnalysisOutput}\n\t\t */\n\t\tconst output = {\n\t\t\tq : number_of_explanatory_variables.doubleValue,\n\t\t\tn : number_of_samples.doubleValue,\n\t\t\tpredicted_values : predicted_values.getNumberMatrixArray(),\n\t\t\tsY : sY.doubleValue,\n\t\t\tsy : sy.doubleValue,\n\t\t\tmultiple_R : multiple_R.doubleValue,\n\t\t\tR_square : R_square.doubleValue,\n\t\t\tadjusted_R_square : adjusted_R_square.doubleValue,\n\t\t\tANOVA : {\n\t\t\t\tregression : {\n\t\t\t\t\tdf : regression_df.doubleValue,\n\t\t\t\t\tSS : regression_SS.doubleValue,\n\t\t\t\t\tMS : regression_MS.doubleValue\n\t\t\t\t},\n\t\t\t\tresidual : {\n\t\t\t\t\tdf : residual_df.doubleValue,\n\t\t\t\t\tSS : residual_SS.doubleValue,\n\t\t\t\t\tMS : residual_MS.doubleValue\n\t\t\t\t},\n\t\t\t\ttotal : {\n\t\t\t\t\tdf : total_df.doubleValue,\n\t\t\t\t\tSS : total_SS.doubleValue,\n\t\t\t\t\tMS : total_MS.doubleValue\n\t\t\t\t},\n\t\t\t\tF : regression_F.doubleValue,\n\t\t\t\tsignificance_F : regression_significance_F.doubleValue,\n\t\t\t},\n\t\t\tVe : Ve.doubleValue,\n\t\t\tstandard_error : standard_error.doubleValue,\n\t\t\tAIC : AIC.doubleValue,\n\t\t\tregression_table : regression_table\n\t\t};\n\n\t\treturn output;\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1364,
    "kind": "typedef",
    "name": "KMultipleRegressionAnalysisSettings",
    "memberof": "src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js",
    "static": true,
    "longname": "src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js~KMultipleRegressionAnalysisSettings",
    "access": "public",
    "description": "Settings for multiple regression analysis",
    "properties": [
      {
        "nullable": null,
        "types": [
          "import(\"../../core/Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "samples",
        "description": "explanatory variable. (Each column is a parameters and each row is a samples.)"
      },
      {
        "nullable": null,
        "types": [
          "import(\"../../core/Matrix.js\").KMatrixInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "response variable. / actual values. (column vector)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "is_standardised",
        "description": "Use standardized partial regression coefficients."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "KMultipleRegressionAnalysisSettings"
    }
  },
  {
    "__docId__": 1365,
    "kind": "typedef",
    "name": "KMultipleRegressionAnalysisVectorState",
    "memberof": "src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js",
    "static": true,
    "longname": "src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js~KMultipleRegressionAnalysisVectorState",
    "access": "public",
    "description": "Vector state",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "df",
        "description": "degree of freedom"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "SS",
        "description": "sum of squares"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "MS",
        "description": "unbiased_variance"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "KMultipleRegressionAnalysisVectorState"
    }
  },
  {
    "__docId__": 1366,
    "kind": "typedef",
    "name": "KMultipleRegressionAnalysisAnova",
    "memberof": "src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js",
    "static": true,
    "longname": "src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js~KMultipleRegressionAnalysisAnova",
    "access": "public",
    "description": "Analysis of variance. ANOVA.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "KMultipleRegressionAnalysisVectorState"
        ],
        "spread": false,
        "optional": false,
        "name": "regression",
        "description": "regression."
      },
      {
        "nullable": null,
        "types": [
          "KMultipleRegressionAnalysisVectorState"
        ],
        "spread": false,
        "optional": false,
        "name": "residual",
        "description": "residual error."
      },
      {
        "nullable": null,
        "types": [
          "KMultipleRegressionAnalysisVectorState"
        ],
        "spread": false,
        "optional": false,
        "name": "total",
        "description": "total."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "F",
        "description": "F value. Dispersion ratio (F0)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "significance_F",
        "description": "Significance F. Test with F distribution with q, n-q-1 degrees of freedom.(Probability of error.)"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "KMultipleRegressionAnalysisAnova"
    }
  },
  {
    "__docId__": 1367,
    "kind": "typedef",
    "name": "KMultipleRegressionAnalysisPartialRegressionData",
    "memberof": "src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js",
    "static": true,
    "longname": "src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js~KMultipleRegressionAnalysisPartialRegressionData",
    "access": "public",
    "description": "Regression table data.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "coefficient",
        "description": "Coefficient."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "standard_error",
        "description": "Standard error."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t_stat",
        "description": "t-statistic."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p_value",
        "description": "P-value. Risk factor."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lower_95",
        "description": "Lower limit of a 95% confidence interval."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "upper_95",
        "description": "Upper limit of a 95% confidence interval."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "KMultipleRegressionAnalysisPartialRegressionData"
    }
  },
  {
    "__docId__": 1368,
    "kind": "typedef",
    "name": "KMultipleRegressionAnalysisPartialRegression",
    "memberof": "src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js",
    "static": true,
    "longname": "src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js~KMultipleRegressionAnalysisPartialRegression",
    "access": "public",
    "description": "Regression table.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "KMultipleRegressionAnalysisPartialRegressionData"
        ],
        "spread": false,
        "optional": false,
        "name": "intercept",
        "description": "Intercept."
      },
      {
        "nullable": null,
        "types": [
          "KMultipleRegressionAnalysisPartialRegressionData[]"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": "Parameters."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "KMultipleRegressionAnalysisPartialRegression"
    }
  },
  {
    "__docId__": 1369,
    "kind": "typedef",
    "name": "KMultipleRegressionAnalysisOutput",
    "memberof": "src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js",
    "static": true,
    "longname": "src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js~KMultipleRegressionAnalysisOutput",
    "access": "public",
    "description": "Output for multiple regression analysis",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "q",
        "description": "number of explanatory variables."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "number of samples."
      },
      {
        "nullable": null,
        "types": [
          "number[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "predicted_values",
        "description": "predicted values. (column vector)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sY",
        "description": "Variance of predicted values of target variable."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sy",
        "description": "Variance of measured values of target variable."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "multiple_R",
        "description": "Multiple R. Multiple correlation coefficient."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "R_square",
        "description": "R Square. Coefficient of determination."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "adjusted_R_square",
        "description": "Adjusted R Square. Adjusted coefficient of determination."
      },
      {
        "nullable": null,
        "types": [
          "KMultipleRegressionAnalysisAnova"
        ],
        "spread": false,
        "optional": false,
        "name": "ANOVA",
        "description": "analysis of variance."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "Ve",
        "description": "Unbiased variance of residuals. (Ve)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "standard_error",
        "description": "Standard error. (SE)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "AIC",
        "description": "Akaike's Information Criterion. (AIC)"
      },
      {
        "nullable": null,
        "types": [
          "KMultipleRegressionAnalysisPartialRegression"
        ],
        "spread": false,
        "optional": false,
        "name": "regression_table",
        "description": "Regression table."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "KMultipleRegressionAnalysisOutput"
    }
  },
  {
    "__docId__": 1370,
    "kind": "class",
    "name": "MultipleRegressionAnalysis",
    "memberof": "src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js",
    "static": true,
    "longname": "src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js~MultipleRegressionAnalysis",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js",
    "importStyle": "MultipleRegressionAnalysis",
    "description": "Multiple regression analysis.",
    "lineNumber": 78,
    "interface": false
  },
  {
    "__docId__": 1371,
    "kind": "method",
    "name": "runMultipleRegressionAnalysis",
    "memberof": "src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js~MultipleRegressionAnalysis",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/DataAnalysis/MultipleRegressionAnalysis.js~MultipleRegressionAnalysis.runMultipleRegressionAnalysis",
    "access": "public",
    "description": "Multiple regression analysis",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{KMultipleRegressionAnalysisOutput} analyzed data"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "KMultipleRegressionAnalysisSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "input data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "KMultipleRegressionAnalysisOutput"
      ],
      "spread": false,
      "description": "analyzed data"
    }
  },
  {
    "__docId__": 1372,
    "kind": "file",
    "name": "src/math/tools/DataAnalysis.js",
    "content": "/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n\nimport MultipleRegressionAnalysis from \"./DataAnalysis/MultipleRegressionAnalysis.js\";\n\n/**\n * Tools for analyzing data.\n */\nexport default class DataAnalysis {\n\n\t/**\n\t * Multiple regression analysis\n\t * @param {import(\"./DataAnalysis/MultipleRegressionAnalysis.js\").KMultipleRegressionAnalysisSettings} settings - input data\n\t * @returns {import(\"./DataAnalysis/MultipleRegressionAnalysis.js\").KMultipleRegressionAnalysisOutput} analyzed data\n\t */\n\tstatic runMultipleRegressionAnalysis(settings) {\n\t\treturn MultipleRegressionAnalysis.runMultipleRegressionAnalysis(settings);\n\t}\n\n}",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/tools/DataAnalysis.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1373,
    "kind": "class",
    "name": "DataAnalysis",
    "memberof": "src/math/tools/DataAnalysis.js",
    "static": true,
    "longname": "src/math/tools/DataAnalysis.js~DataAnalysis",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/tools/DataAnalysis.js",
    "importStyle": "DataAnalysis",
    "description": "Tools for analyzing data.",
    "lineNumber": 17,
    "interface": false
  },
  {
    "__docId__": 1374,
    "kind": "method",
    "name": "runMultipleRegressionAnalysis",
    "memberof": "src/math/tools/DataAnalysis.js~DataAnalysis",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/DataAnalysis.js~DataAnalysis.runMultipleRegressionAnalysis",
    "access": "public",
    "description": "Multiple regression analysis",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{import(\"./DataAnalysis/MultipleRegressionAnalysis.js\").KMultipleRegressionAnalysisOutput} analyzed data"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "import(\"./DataAnalysis/MultipleRegressionAnalysis.js\").KMultipleRegressionAnalysisSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "input data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "import(\"./DataAnalysis/MultipleRegressionAnalysis.js\").KMultipleRegressionAnalysisOutput"
      ],
      "spread": false,
      "description": "analyzed data"
    }
  },
  {
    "__docId__": 1375,
    "kind": "file",
    "name": "src/math/tools/Polyfill.js",
    "content": "/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * Class for improving compatibility.\n * @ignore\n */\nexport default class Polyfill {\n\n\t/**\n\t * Improved compatibility\n\t * @private\n\t * @ignore\n\t */\n\tstatic run() {\n\t\tif(Math.imul === undefined) {\n\t\t\tMath.imul = function(x1, x2) {\n\t\t\t\tlet y = ((x1 & 0xFFFF) * (x2 & 0xFFFF)) >>> 0;\n\t\t\t\tlet b = (x1 & 0xFFFF) * (x2 >>> 16);\n\t\t\t\ty = (y + ((b & 0xFFFF) << 16)) >>> 0;\n\t\t\t\tb = (x1 >>> 16) * (x2 & 0xFFFF);\n\t\t\t\ty = (y + ((b & 0xFFFF) << 16));\n\t\t\t\treturn (y & 0xFFFFFFFF);\n\t\t\t};\n\t\t}\n\t\tif(Math.trunc === undefined) {\n\t\t\tMath.trunc = function(x) {\n\t\t\t\treturn x > 0 ? Math.floor(x) : Math.ceil(x);\n\t\t\t};\n\t\t}\n\t\tif(Number.isFinite === undefined) {\n\t\t\tNumber.isFinite = isFinite;\n\t\t}\n\t\tif(Number.isInteger === undefined) {\n\t\t\tNumber.isInteger = function(x) {\n\t\t\t\treturn isFinite(x) && ((x | 0) === x);\n\t\t\t};\n\t\t}\n\t\tif(Number.isNaN === undefined) {\n\t\t\tNumber.isNaN = isNaN;\n\t\t}\n\t\tif(Number.NaN === undefined) {\n\t\t\t// @ts-ignore\n\t\t\t// eslint-disable-next-line no-global-assign\n\t\t\tNumber.NaN = NaN;\n\t\t}\n\t\tif(Number.EPSILON === undefined) {\n\t\t\t// @ts-ignore\n\t\t\t// eslint-disable-next-line no-global-assign\n\t\t\tNumber.EPSILON = 2.220446049250313e-16;\n\t\t}\n\t\tif(Number.MIN_SAFE_INTEGER === undefined) {\n\t\t\t// @ts-ignore\n\t\t\t// eslint-disable-next-line no-global-assign\n\t\t\tNumber.MIN_SAFE_INTEGER = -9007199254740991;\n\t\t}\n\t\tif(Number.MAX_SAFE_INTEGER === undefined) {\n\t\t\t// @ts-ignore\n\t\t\t// eslint-disable-next-line no-global-assign\n\t\t\tNumber.MAX_SAFE_INTEGER = 9007199254740991;\n\t\t}\n\t\tif(Number.parseFloat === undefined) {\n\t\t\tNumber.parseFloat = parseFloat;\n\t\t}\n\t\tif(Number.parseInt === undefined) {\n\t\t\tNumber.parseInt = parseInt;\n\t\t}\n\t}\n}\n\nPolyfill.run();\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/tools/Polyfill.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1376,
    "kind": "class",
    "name": "Polyfill",
    "memberof": "src/math/tools/Polyfill.js",
    "static": true,
    "longname": "src/math/tools/Polyfill.js~Polyfill",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/tools/Polyfill.js",
    "importStyle": "Polyfill",
    "description": "Class for improving compatibility.",
    "lineNumber": 15,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 1377,
    "kind": "method",
    "name": "run",
    "memberof": "src/math/tools/Polyfill.js~Polyfill",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Polyfill.js~Polyfill.run",
    "access": "private",
    "description": "Improved compatibility",
    "lineNumber": 22,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "kind": "index",
    "content": "# konpeito\n[![Build Status](https://travis-ci.org/natade-jp/konpeito.svg?branch=master)](https://travis-ci.org/natade-jp/konpeito)\n[![ESDoc coverage badge](https://natade-jp.github.io/konpeito/docs/badge.svg)](https://natade-jp.github.io/konpeito/docs/)\n![MIT License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat)\n\n\"konpeito\" is a library to \"compute\". :)\n\n## What\n- The library for math calculations.\n- When calculating, use method chain.\n- Coding in ES6, and published ES6 modules and UMD.\n- [API reference is complete](https://natade-jp.github.io/konpeito/docs/).\n\n## Features\nThis library has 4 functions.\n- BigInteger\n- BigDecimal\n- Fraction\n- Matrix\n\nHas the following features.\n- BigDecimal and Fraction are constructed by BigInteger.\n- Matrix is constructed by array of Complex.\n- Matrix can't use huge real numbers like BigInteger or BigDecimal, but they are powerful. Initialization can be described as Scilab, Octave, MATLAB.\n- Does not support sparse matrix.\n\nPlease check the console and main.mjs.\n- [BigDecimal](https://natade-jp.github.io/konpeito/html/examples/demos/BigDecimal/)\n- [BigInteger](https://natade-jp.github.io/konpeito/html/examples/demos/BigInteger/)\n- [Matrix](https://natade-jp.github.io/konpeito/html/examples/demos/Matrix/)\n- [UMD](https://natade-jp.github.io/konpeito/html/examples/demos/UMD/)\n\n## Install for node.js\n\n1. This library can be installed using [npm](https://www.npmjs.com/package/konpeito).\n```\nnpm install konpeito\n```\n\n2. Then you can include it in your code:\n```\nvar konpeito = require(\"konpeito\");\n```\n\nIf you want to use in the ES6 module, please execute with the following command.\n```\nnode --experimental-modules main.mjs\n```\n\n## Install for browser\n\n1. Download the [zip](https://github.com/natade-jp/konpeito/archive/master.zip) by [GitHub](https://github.com/natade-jp/konpeito).\n\n2. Please use mjs file when using ES6 modules. And use js file when using UMD.\n- `./build/konpeito.esm.min.js`\n- `./build/konpeito.umd.min.js`\n\n### with ES6 module.\n```html\n<script type=\"module\" src=\"./main.mjs\" charset=\"utf-8\"></script>\n```\n\n### with UMD\n```html\n<script src=\"./konpeito.umd.min.js\" charset=\"utf-8\"></script>\n<script src=\"./main.js\" charset=\"utf-8\"></script>\n```\n\n## Repository\n- https://github.com/natade-jp/konpeito.git\n\n## Sample\n\n### BigInteger\n- A calculation class for arbitrary-precision integer arithmetic.\n- BigInt of ES2019 is not used.\n\n```javascript\nconst konpeito = require(\"konpeito\");\nconst BigInteger = konpeito.BigInteger;\nconst $ = BigInteger.create;\n\nconsole.log($(\"-1234567890\").mul(\"987654321098765432109876543210\").toString());\n> -1219326311248285321124828532111263526900\n\nconsole.log($(\"7\").pow(\"50\").toString());\n> 1798465042647412146620280340569649349251249\n```\n\n### BigDecimal\n- A calculation class for arbitrary-precision floating point arithmetic.\n- The calculation uses the BigInteger.\n\n```javascript\nconst konpeito = require(\"konpeito\");\nconst BigDecimal = konpeito.BigDecimal;\nconst MathContext = konpeito.MathContext;\nconst $ = BigDecimal.create;\n\nBigDecimal.setDefaultContext(MathContext.UNLIMITED);\nconsole.log($(\"-123456.7890\").mul(\"987654321098765.432109876543210\").toString());\n> -121932631124828532112.4828532111263526900\n```\n\n### Fraction\n- A calculation class for fractions with infinite precision.\n- The calculation uses the BigInteger.\n\n```javascript\nconst konpeito = require(\"konpeito\");\nconst Fraction = konpeito.Fraction;\nconst $ = Fraction.create;\n\nconsole.log($(\"1/3\").add(\"0.(3)\").mul(10).toString());\n> 20 / 3\n```\n\n### Matrix\n- Matrix is a general-purpose calculation class with signal processing and statistical processing.\n- The calculation uses the Complex.\n- Some methods do not support complex arithmetic.\n\n```javascript\nconst konpeito = require(\"konpeito\");\nconst Matrix = konpeito.Matrix;\nconst $ = Matrix.create;\n\nconsole.log($(\"[1 2;3 4;5 6]\").toString());\n>\n 1  2\n 3  4\n 5  6\nconst USV = $(\"[1 2;3 4;5 6]\").svd();\nconsole.log(USV.U.toString());\n> \n 0.2298 -0.8835  0.4082\n 0.5247 -0.2408 -0.8165\n 0.8196  0.4019  0.4082\nconsole.log(USV.S.toString());\n> \n 9.5255  0.0000\n 0.0000  0.5143\n 0.0000  0.0000\nconsole.log(USV.V.toString());\n> \n 0.7849  0.6196\n-0.6196  0.7849\nconsole.log(USV.U.mul(USV.S).mul(USV.V.T()).toString());\n> \n 1.0000  2.0000\n 3.0000  4.0000\n 5.0000  6.0000\n\nconsole.log($(\"[1+j 2-3j -3 -4]\").fft().toString());\n> -4.0000 - 2.0000i  1.0000 - 5.0000i  0.0000 + 4.0000i  7.0000 + 7.0000i\n\nconsole.log($(\"[1 2 30]\").dct().toString());\n> 19.0526 -20.5061  11.0227\n```\n",
    "longname": "D:\\JavaScript\\konpeito\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n\t\"name\": \"konpeito\",\n\t\"version\": \"5.2.0\",\n\t\"description\": \"The collection of javascirpt library such as numerical calculation.\",\n\t\"author\": \"natade-jp <natade3@gmail.com> (https://github.com/natade-jp)\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://github.com/natade-jp/konpeito.git\"\n\t},\n\t\"license\": \"MIT\",\n\t\"main\": \"./build/CommonJS\",\n\t\"module\": \"./build/esm\",\n\t\"keywords\": [\n\t\t\"math\",\n\t\t\"mathematics\",\n\t\t\"biginteger\",\n\t\t\"bigdecimal\",\n\t\t\"bignumber\",\n\t\t\"fraction\",\n\t\t\"complex\",\n\t\t\"matrix\",\n\t\t\"algebra\",\n\t\t\"statistics\",\n\t\t\"fft\",\n\t\t\"svd\"\n\t],\n\t\"directories\": {\n\t\t\"src\": \"./src\",\n\t\t\"build\": \"./build\",\n\t\t\"example\": \"./html/examples/demos\"\n\t},\n\t\"scripts\": {\n\t\t\"dev\": \"node ./scripts/package.dev.js\",\n\t\t\"build\": \"node ./scripts/package.build.js\",\n\t\t\"doc\": \"node ./scripts/package.doc.js\",\n\t\t\"dts\": \"node ./scripts/package.dts.js\",\n\t\t\"test\": \"jest\",\n\t\t\"test_target\": \"node ./scripts/package.test.js\"\n\t},\n\t\"jest\": {\n\t\t\"verbose\": true,\n\t\t\"rootDir\": \"./src\",\n\t\t\"moduleFileExtensions\": [\n\t\t\t\"js\",\n\t\t\t\"mjs\"\n\t\t],\n\t\t\"testMatch\": [\n\t\t\t\"**/__tests__/**/*.?(m)js?(x)\",\n\t\t\t\"**/?(*.)(spec|test).?(m)js?(x)\"\n\t\t],\n\t\t\"transform\": {\n\t\t\t\"^.+\\\\.(js|mjs)$\": \"babel-jest\"\n\t\t}\n\t},\n\t\"babel\": {\n\t\t\"env\": {\n\t\t\t\"test\": {\n\t\t\t\t\"plugins\": [\n\t\t\t\t\t\"transform-es2015-modules-commonjs\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t},\n\t\"devDependencies\": {\n\t\t\"@types/jest\": \"^24.9.1\",\n\t\t\"babel-jest\": \"^24.9.0\",\n\t\t\"babel-plugin-transform-es2015-modules-commonjs\": \"^6.26.2\",\n\t\t\"esdoc\": \"^1.1.0\",\n\t\t\"esdoc-standard-plugin\": \"^1.0.0\",\n\t\t\"eslint\": \"^6.8.0\",\n\t\t\"eslint-plugin-jest\": \"^22.21.0\",\n\t\t\"jest\": \"^24.9.0\",\n\t\t\"jsdoc\": \"^3.6.3\",\n\t\t\"jsdoc-export-default-interop\": \"^0.3.1\",\n\t\t\"rollup\": \"^1.32.1\",\n\t\t\"rollup-plugin-buble\": \"^0.19.8\",\n\t\t\"rollup-plugin-uglify\": \"^6.0.4\",\n\t\t\"rollup-plugin-uglify-es\": \"0.0.1\",\n\t\t\"tsd-jsdoc\": \"^2.4.0\"\n\t},\n\t\"dependencies\": {}\n}\n",
    "longname": "D:\\JavaScript\\konpeito\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]