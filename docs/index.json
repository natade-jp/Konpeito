[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/konpeito.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport Random from \"./math/tools/Random.mjs\";\n\n// @ts-ignore\nimport RoundingMode from \"./math/context/RoundingMode.mjs\";\n\n// @ts-ignore\nimport MathContext from \"./math/context/MathContext.mjs\";\n\n// @ts-ignore\nimport BigDecimal from \"./math/BigDecimal.mjs\";\n\n// @ts-ignore\nimport BigInteger from \"./math/BigInteger.mjs\";\n\n// @ts-ignore\nimport Fraction from \"./math/Fraction.mjs\";\n\n// @ts-ignore\nimport Complex from \"./math/Complex.mjs\";\n\n// @ts-ignore\nimport Matrix from \"./math/Matrix.mjs\";\n\n/**\n * Class collection of numerical calculation processing.\n * These classes are classified into a BigInteger, BigDecimal, Fraction, Matrix.\n * - BigInteger is a calculation class for arbitrary-precision integer arithmetic.\n * - BigDecimal is a calculation class for arbitrary-precision floating point arithmetic.\n * - Fraction is a calculation class for fractions with infinite precision.\n * - Matrix is a general-purpose calculation class with signal processing and statistical processing.\n */\nexport default class konpeito {\n\n\t/**\n\t * Return typedef BigInteger for arbitrary-precision integer calculation.\n\t * @returns {typeof BigInteger}\n\t */\n\tstatic get BigInteger() {\n\t\treturn BigInteger;\n\t}\n\n\t/**\n\t * Return typedef BigDecimal for arbitrary-precision floating-point number.\n\t * @returns {typeof BigDecimal}\n\t */\n\tstatic get BigDecimal() {\n\t\treturn BigDecimal;\n\t}\n\n\t/**\n\t * Return Rounding class for BigDecimal.\n\t * @returns {typeof RoundingMode}\n\t */\n\tstatic get RoundingMode() {\n\t\treturn RoundingMode;\n\t}\n\n\t/**\n\t * Return Configuration class for BigDecimal.\n\t * @returns {typeof MathContext}\n\t */\n\tstatic get MathContext() {\n\t\treturn MathContext;\n\t}\n\n\t/**\n\t * Return typedef Fraction for infinite precision arithmetic.\n\t * @returns {typeof Fraction}\n\t */\n\tstatic get Fraction() {\n\t\treturn Fraction;\n\t}\n\n\t/**\n\t * Return typedef Complex for complex number calculation.\n\t * @returns {typeof Complex}\n\t */\n\tstatic get Complex() {\n\t\treturn Complex;\n\t}\n\n\t/**\n\t * Return typedef Matrix for complex matrix calculation.\n\t * @returns {typeof Matrix}\n\t */\n\tstatic get Matrix() {\n\t\treturn Matrix;\n\t}\n\n\t/**\n\t * Return typedef Random.\n\t * @returns {typeof Random}\n\t */\n\tstatic get Random() {\n\t\treturn Random;\n\t}\n\t\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/konpeito.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "konpeito",
    "memberof": "src/konpeito.mjs",
    "static": true,
    "longname": "src/konpeito.mjs~konpeito",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/konpeito.mjs",
    "importStyle": "konpeito",
    "description": "Class collection of numerical calculation processing.\nThese classes are classified into a BigInteger, BigDecimal, Fraction, Matrix.\n- BigInteger is a calculation class for arbitrary-precision integer arithmetic.\n- BigDecimal is a calculation class for arbitrary-precision floating point arithmetic.\n- Fraction is a calculation class for fractions with infinite precision.\n- Matrix is a general-purpose calculation class with signal processing and statistical processing.",
    "lineNumber": 44,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "get",
    "name": "BigInteger",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.BigInteger",
    "access": "public",
    "description": "Return typedef BigInteger for arbitrary-precision integer calculation.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "get",
    "name": "BigDecimal",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.BigDecimal",
    "access": "public",
    "description": "Return typedef BigDecimal for arbitrary-precision floating-point number.",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof BigDecimal}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof BigDecimal"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "get",
    "name": "RoundingMode",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.RoundingMode",
    "access": "public",
    "description": "Return Rounding class for BigDecimal.",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingMode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingMode"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "get",
    "name": "MathContext",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.MathContext",
    "access": "public",
    "description": "Return Configuration class for BigDecimal.",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "get",
    "name": "Fraction",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.Fraction",
    "access": "public",
    "description": "Return typedef Fraction for infinite precision arithmetic.",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof Fraction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof Fraction"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "get",
    "name": "Complex",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.Complex",
    "access": "public",
    "description": "Return typedef Complex for complex number calculation.",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof Complex"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "get",
    "name": "Matrix",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.Matrix",
    "access": "public",
    "description": "Return typedef Matrix for complex matrix calculation.",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "get",
    "name": "Random",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.Random",
    "access": "public",
    "description": "Return typedef Random.",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof Random}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof Random"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "file",
    "name": "src/math/BigDecimal.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport BigInteger from \"./BigInteger.mjs\";\n\n// @ts-ignore\nimport RoundingMode, {RoundingModeEntity} from \"./context/RoundingMode.mjs\";\n\n// @ts-ignore\nimport MathContext from \"./context/MathContext.mjs\";\n\n/**\n * Setting of calculation result of division.\n * @typedef {Object} BigDecimalDivideType\n * @property {number} [scale] Scale of rounding.\n * @property {RoundingModeEntity} [roundingMode] Rounding mode.\n * @property {MathContext} [context] Configuration.(scale and roundingMode are unnecessary.)\n */\n\n/**\n * Default MathContext class.\n * Used when MathContext not specified explicitly.\n * @type {MathContext}\n * @ignore\n */\nlet DEFAULT_CONTEXT = MathContext.DECIMAL128;\n\n/**\n * Collection of functions used in BigDecimal.\n * @ignore\n */\nclass DecimalTool {\n\n\t/**\n\t * Create data for BigDecimal from strings.\n\t * @param {string} ntext \n\t * @returns {{scale : number, integer : BigInteger}}\n\t */\n\tstatic ToBigDecimalFromString(ntext) {\n\t\tlet scale = 0;\n\t\tlet buff;\n\t\t// 正規化\n\t\tlet text = ntext.replace(/\\s/g, \"\").toLowerCase();\n\t\t// +-の符号があるか\n\t\tlet number_text = \"\";\n\t\tbuff = text.match(/^[+-]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tif(buff.indexOf(\"-\") !== -1) {\n\t\t\t\tnumber_text += \"-\";\n\t\t\t}\n\t\t}\n\t\t// 整数部があるか\n\t\tbuff = text.match(/^[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tnumber_text += buff;\n\t\t}\n\t\t// 小数部があるか\n\t\tbuff = text.match(/^\\.[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tbuff = buff.substr(1);\n\t\t\tscale = scale + buff.length;\n\t\t\tnumber_text += buff;\n\t\t}\n\t\t// 指数表記があるか\n\t\tbuff = text.match(/^e[+-]?[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0].substr(1);\n\t\t\tscale   = scale - parseInt(buff, 10);\n\t\t}\n\t\treturn {\n\t\t\tscale : scale,\n\t\t\tinteger : new BigInteger([number_text, 10])\n\t\t};\n\t}\n\n\t/**\n\t * Create data for BigDecimal from number.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} value \n\t * @returns {{scale : number, integer : BigInteger}}\n\t */\n\tstatic ToBigDecimalFromNumber(value) {\n\t\t// 整数\n\t\tif(value === Math.floor(value)) {\n\t\t\treturn {\n\t\t\t\tscale : 0,\n\t\t\t\tinteger : new BigInteger(Math.round(value))\n\t\t\t};\n\t\t}\n\t\t// 浮動小数\n\t\telse {\n\t\t\tlet scale = Math.trunc(Math.log(Math.abs(value)) / Math.log(10));\n\t\t\tlet x = value / Math.pow(10, scale);\n\t\t\t// スケールを逆にする\n\t\t\tscale = - scale;\n\t\t\tfor(let i = 0; i < 14; i++) {\n\t\t\t\tx = x * 10;\n\t\t\t\tscale = scale + 1;\n\t\t\t\tif(Math.abs(x - Math.round(x)) <= Number.EPSILON) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 最も下の桁は四捨五入する\n\t\t\tx = Math.round(x * 1e14) / 1e14;\n\t\t\treturn {\n\t\t\t\tscale : scale,\n\t\t\t\tinteger : new BigInteger(x)\n\t\t\t};\n\t\t\t// 64ビットの実数型は15桁程度まで正しい\n\t\t\t// 余裕をもって12桁程度までを抜き出すのが良いかと思われる。\n\t\t}\n\t}\n\n}\n\n/**\n * Arbitrary-precision floating-point number class (immutable).\n */\nexport default class BigDecimal {\n\t\n\t/**\n\t * Create an arbitrary-precision floating-point number.\n\t * \n\t * Initialization can be performed as follows.\n\t * - 1200, \"1200\", \"12e2\", \"1.2e3\"\n\t * - When initializing with array. [ integer, [scale = 0], [default_context=default], [context=default] ].\n\t * - When initializing with object. { integer, [scale = 0], [default_context=default], [context=default] }.\n\t * \n\t * Description of the settings are as follows, you can also omitted.\n\t * - The \"scale\" is an integer scale factor.\n\t * - The \"default_context\" is the used when no environment settings are specified during calculation.\n\t * - The \"context\" is used to normalize the created floating point.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number - Real data.\n\t */\n\tconstructor(number) {\n\n\t\t/**\n\t\t * The scale of this BigDecimal.\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis._scale\t= 0;\n\t\t\n\t\t/**\n\t\t * Context used during initialization.\n\t\t * @private\n\t\t * @type {MathContext}\n\t\t */\n\t\tthis.default_context = DEFAULT_CONTEXT;\n\n\t\tlet context = null;\n\n\t\tif(arguments.length > 1) {\n\t\t\tthrow \"BigDecimal Unsupported argument[\" + arguments.length + \"]\";\n\t\t}\n\t\tif(number instanceof BigDecimal) {\n\n\t\t\t/**\n\t\t\t * Integer part.\n\t\t\t * @private\n\t\t\t * @type {BigInteger}\n\t\t\t */\n\t\t\tthis.integer\t\t\t= number.integer.clone();\n\n\t\t\tthis._scale\t\t\t\t= number._scale;\n\t\t\t\n\t\t\t/**\n\t\t\t * Integer part of string (for cache).\n\t\t\t * @private\n\t\t\t * @type {string}\n\t\t\t */\n\t\t\tthis.int_string\t\t\t= number.int_string;\n\n\t\t\tthis.default_context\t= number.default_context;\n\n\t\t}\n\t\telse if(typeof number === \"number\") {\n\t\t\tconst data = DecimalTool.ToBigDecimalFromNumber(number);\n\t\t\tthis.integer\t= data.integer;\n\t\t\tthis._scale\t\t= data.scale;\n\t\t}\n\t\telse if(number instanceof Array) {\n\t\t\tif(number.length >= 1) {\n\t\t\t\tif(!(typeof number[0] === \"string\" || number[0] instanceof String)) {\n\t\t\t\t\tthis.integer = new BigInteger(number[0]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// 1番目が文字列の場合は、文字列用の設定初期化を行う\n\t\t\t\t\tconst data = DecimalTool.ToBigDecimalFromString(number[0]);\n\t\t\t\t\tthis.integer\t= data.integer;\n\t\t\t\t\tthis._scale\t\t= data.scale;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(number.length >= 2) {\n\t\t\t\t// スケール値を省略しているかどうかを、数値かどうかで判定している。\n\t\t\t\tif(typeof number[1] === \"number\" || number[1] instanceof Number) {\n\t\t\t\t\tthis._scale\t= number[1];\n\t\t\t\t\tif(number.length >= 3) {\n\t\t\t\t\t\tthis.default_context = number[2];\n\t\t\t\t\t}\n\t\t\t\t\tif(number.length >= 4) {\n\t\t\t\t\t\tcontext = number[3];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(number.length >= 2) {\n\t\t\t\t\t\tthis.default_context = number[1];\n\t\t\t\t\t}\n\t\t\t\t\tif(number.length >= 3) {\n\t\t\t\t\t\tcontext = number[2];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(typeof number === \"string\") {\n\t\t\tconst data = DecimalTool.ToBigDecimalFromString(number);\n\t\t\tthis.integer\t= data.integer;\n\t\t\tthis._scale\t\t= data.scale;\n\t\t}\n\t\telse if(number instanceof BigInteger) {\n\t\t\tthis.integer\t= number.clone();\n\t\t}\n\t\telse if((number instanceof Object) && (number.toBigDecimal)) {\n\t\t\tconst data\t\t\t\t= number.toBigDecimal();\n\t\t\tthis.integer\t\t\t= data.integer;\n\t\t\tthis._scale\t\t\t\t= data._scale;\n\t\t\tthis.default_context\t= data.default_context;\n\t\t}\n\t\telse if((number instanceof Object) && (number.scale !== undefined && number.default_context !== undefined)) {\n\t\t\tthis.integer\t= new BigInteger(number.integer);\n\t\t\tif(number.scale) {\n\t\t\t\tthis._scale = number.scale;\n\t\t\t}\n\t\t\tif(number.default_context) {\n\t\t\t\tthis.default_context = number.default_context;\n\t\t\t}\n\t\t\tif(number.context) {\n\t\t\t\tcontext = number.context;\n\t\t\t}\n\t\t}\n\t\telse if((number instanceof Object) && (number.doubleValue)) {\n\t\t\tconst data = DecimalTool.ToBigDecimalFromNumber(number.doubleValue);\n\t\t\tthis.integer\t= data.integer;\n\t\t\tthis._scale\t\t= data.scale;\n\t\t}\n\t\telse if(number instanceof Object) {\n\t\t\tconst data = DecimalTool.ToBigDecimalFromString(number.toString());\n\t\t\tthis.integer\t= data.integer;\n\t\t\tthis._scale\t\t= data.scale;\n\t\t}\n\t\telse {\n\t\t\tthrow \"BigDecimal Unsupported argument \" + arguments;\n\t\t}\n\t\t// データを正規化\n\t\tif(context) {\n\t\t\tconst newbigdecimal = this.round(context);\n\t\t\tthis.integer\t= newbigdecimal.integer;\n\t\t\tthis._scale\t\t= newbigdecimal._scale;\n\t\t\tdelete this.int_string;\n\t\t}\n\t\t\n\t\t// データが正しいかチェックする\n\t\tif((!(this.integer instanceof BigInteger)) || (!(this.default_context instanceof MathContext))) {\n\t\t\tthrow \"BigDecimal Unsupported argument \" + arguments;\n\t\t}\n\t}\n\n\t/**\n\t * Create an arbitrary-precision floating-point number.\n\t * - When initializing with array. [ integer, [scale = 0], [default_context=default], [context=default] ].\n\t * - When initializing with object. { integer, [scale = 0], [default_context=default], [context=default] }.\n\t * \n\t * default_context\n\t * - The \"scale\" is an integer scale factor.\n\t * - The \"default_context\" is the used when no environment settings are specified during calculation.\n\t * - The \"context\" is used to normalize the created floating point.\n\t * \n\t * These 3 settings can be omitted.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number - Real data.\n\t * @returns {BigDecimal}\n\t */\n\tstatic create(number) {\n\t\tif(number instanceof BigDecimal) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new BigDecimal(number);\n\t\t}\n\t}\n\n\t/**\n\t * Convert number to BigDecimal type.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} x \n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} [scale] \n\t * @returns {BigDecimal}\n\t */\n\tstatic valueOf(x, scale) {\n\t\tif(arguments.length === 1) {\n\t\t\treturn new BigDecimal(x);\n\t\t}\n\t\telse {\n\t\t\treturn new BigDecimal([x, scale]);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to BigDecimal.\n\t * If type conversion is unnecessary, return the value as it is.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @returns {BigDecimal}\n\t * @private\n\t */\n\tstatic _toBigDecimal(number) {\n\t\tif(number instanceof BigDecimal) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new BigDecimal(number);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to BigInteger.\n\t * If type conversion is unnecessary, return the value as it is.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @returns {BigInteger}\n\t * @private\n\t */\n\tstatic _toBigInteger(number) {\n\t\tif(number instanceof BigInteger) {\n\t\t\treturn number;\n\t\t}\n\t\telse if(number instanceof BigDecimal) {\n\t\t\treturn number.toBigInteger();\n\t\t}\n\t\telse {\n\t\t\treturn new BigInteger(number);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to real number.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toFloat(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn number;\n\t\t}\n\t\telse if(number instanceof BigDecimal) {\n\t\t\treturn number.doubleValue;\n\t\t}\n\t\telse {\n\t\t\treturn (new BigDecimal(number)).doubleValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert to integer.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toInteger(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn Math.trunc(number);\n\t\t}\n\t\telse if(number instanceof BigInteger) {\n\t\t\treturn number.intValue;\n\t\t}\n\t\telse {\n\t\t\treturn (new BigInteger(number)).intValue;\n\t\t}\n\t}\n\n\t/**\n\t * Return string of this number without sign.\n\t * If cache is already created, return cache.\n\t * @returns {string} \n\t */\n\t_getUnsignedIntegerString() {\n\t\t// キャッシュする\n\t\tif(typeof this.int_string === \"undefined\") {\n\t\t\tthis.int_string = this.integer.toString(10).replace(/^-/, \"\");\n\t\t}\n\t\treturn this.int_string;\n\t}\n\n\t/**\n\t * Deep copy.\n\t * @returns {BigDecimal} \n\t */\n\tclone() {\n\t\treturn new BigDecimal(this);\n\t}\n\t\n\t/**\n\t * The scale of this BigDecimal.\n\t * @returns {number} \n\t */\n\tscale() {\n\t\treturn this._scale;\n\t}\n\n\t/**\n\t * The positive or negative sign of this number.\n\t * - +1 if positive, -1 if negative, 0 if 0.\n\t * @returns {number}\n\t */\n\tsignum() {\n\t\treturn this.integer.signum();\n\t}\n\n\t/**\n\t * The positive or negative sign of this number.\n\t * - +1 if positive, -1 if negative, 0 if 0.\n\t * @returns {number}\n\t */\n\tsign() {\n\t\treturn this.signum();\n\t}\n\n\t/**\n\t * Precision.\n\t * @returns {number} \n\t */\n\tprecision() {\n\t\treturn this._getUnsignedIntegerString().length;\n\t}\n\n\t/**\n\t * An integer with the exponent part removed.\n\t * @returns {BigInteger} \n\t */\n\tunscaledValue() {\n\t\treturn new BigInteger(this.integer);\n\t}\n\n\t/**\n\t * The smallest value that can be represented with the set precision.\n\t * @returns {BigDecimal} \n\t */\n\tulp() {\n\t\treturn new BigDecimal([BigInteger.ONE, this.scale(), this.default_context]);\n\t}\n\n\t/**\n\t * Absolute value.\n\t * @param {MathContext} [mc] - MathContext setting after calculation. If omitted, use the MathContext of this object.\n\t * @returns {BigDecimal} abs(A)\n\t */\n\tabs(mc) {\n\t\tconst output = this.clone();\n\t\toutput.integer = output.integer.abs();\n\t\treturn (mc === undefined) ? output : output.round(mc);\n\t}\n\n\t/**\n\t * this * 1\n\t * @param {MathContext} [mc] - MathContext setting after calculation. If omitted, use the MathContext of this object..\n\t * @returns {BigDecimal} +A\n\t */\n\tplus(mc) {\n\t\tconst output = this.clone();\n\t\treturn (mc === undefined) ? output : output.round(mc);\n\t}\n\n\t/**\n\t * this * -1\n\t * @param {MathContext} [mc] - MathContext setting after calculation. If omitted, use the MathContext of this object..\n\t * @returns {BigDecimal} -A\n\t */\n\tnegate(mc) {\n\t\tconst output = this.clone();\n\t\toutput.integer = output.integer.negate();\n\t\treturn (mc === undefined) ? output : output.round(mc);\n\t}\n\n\t/**\n\t * Move the decimal point to the left.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} n \n\t * @returns {BigDecimal} \n\t */\n\tmovePointLeft(n) {\n\t\tconst x = BigDecimal._toInteger(n);\n\t\tlet output = this.scaleByPowerOfTen( -x );\n\t\toutput = output.setScale(Math.max(this.scale() + x, 0));\n\t\treturn output;\n\t}\n\n\t/**\n\t * Move the decimal point to the right.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} n \n\t * @returns {BigDecimal} \n\t */\n\tmovePointRight(n) {\n\t\tconst x = BigDecimal._toInteger(n);\n\t\tlet output = this.scaleByPowerOfTen( x );\n\t\toutput = output.setScale(Math.max(this.scale() - x, 0));\n\t\treturn output;\n\t}\n\n\t/**\n\t * Remove the 0 to the right of the numbers and normalize the scale.\n\t * @returns {BigDecimal} \n\t */\n\tstripTrailingZeros() {\n\t\t// 0をできる限り取り除く\n\t\tconst sign\t\t= this.signum();\n\t\tconst sign_text\t= sign >= 0 ? \"\" : \"-\";\n\t\tconst text\t\t= this.integer.toString(10).replace(/^-/, \"\");\n\t\tconst zeros\t\t= text.match(/0+$/);\n\t\tlet zero_length\t= (zeros !== null) ? zeros[0].length : 0;\n\t\tif(zero_length === text.length) {\n\t\t\t// 全て 0 なら 1 ケタ残す\n\t\t\tzero_length = text.length - 1;\n\t\t}\n\t\tconst newScale\t= this.scale() - zero_length;\n\t\treturn new BigDecimal([new BigInteger(sign_text + text.substring(0, text.length - zero_length)), newScale, this.default_context]);\n\t}\n\n\t// ----------------------\n\t// 四則演算\n\t// ----------------------\n\t\n\t/**\n\t * Add.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @param {MathContext} [context] - MathContext setting after calculation. If omitted, use the MathContext of the B.\n\t * @returns {BigDecimal} A + B\n\t */\n\tadd(number, context) {\n\t\tconst augend = BigDecimal._toBigDecimal(number);\n\t\tconst mc = context ? context : augend.default_context;\n\t\tconst src\t\t\t= this;\n\t\tconst tgt\t\t\t= augend;\n\t\tconst newscale\t= Math.max(src._scale, tgt._scale);\n\t\tif(src._scale === tgt._scale) {\n\t\t\t// 1 e1 + 1 e1 = 1\n\t\t\treturn new BigDecimal([src.integer.add(tgt.integer), newscale, mc, mc]);\n\t\t}\n\t\telse if(src._scale > tgt._scale) {\n\t\t\t// 1 e-2 + 1 e-1\n\t\t\tconst newdst = tgt.setScale(src._scale);\n\t\t\t// 0.01 + 0.10 = 0.11 = 11 e-2\n\t\t\treturn new BigDecimal([src.integer.add(newdst.integer), newscale, mc, mc]);\n\t\t}\n\t\telse {\n\t\t\t// 1 e-1 + 1 e-2\n\t\t\tconst newsrc = src.setScale(tgt._scale);\n\t\t\t// 0.1 + 0.01 = 0.11 = 11 e-2\n\t\t\treturn new BigDecimal([newsrc.integer.add(tgt.integer), newscale, mc, mc]);\n\t\t}\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @param {MathContext} [context] - MathContext setting after calculation. If omitted, use the MathContext of the B.\n\t * @returns {BigDecimal} A - B\n\t */\n\tsubtract(number, context) {\n\t\tconst subtrahend = BigDecimal._toBigDecimal(number);\n\t\tconst mc = context ? context : subtrahend.default_context;\n\t\tconst src\t\t\t= this;\n\t\tconst tgt\t\t\t= subtrahend;\n\t\tconst newscale\t= Math.max(src._scale, tgt._scale);\n\t\tif(src._scale === tgt._scale) {\n\t\t\treturn new BigDecimal([src.integer.subtract(tgt.integer), newscale, mc, mc]);\n\t\t}\n\t\telse if(src._scale > tgt._scale) {\n\t\t\tconst newdst = tgt.setScale(src._scale);\n\t\t\treturn new BigDecimal([src.integer.subtract(newdst.integer), newscale, mc, mc]);\n\t\t}\n\t\telse {\n\t\t\tconst newsrc = src.setScale(tgt._scale);\n\t\t\treturn new BigDecimal([newsrc.integer.subtract(tgt.integer), newscale, mc, mc]);\n\t\t}\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @param {MathContext} [context] - MathContext setting after calculation. If omitted, use the MathContext of the B.\n\t * @returns {BigDecimal} A - B\n\t */\n\tsub(number, context) {\n\t\treturn this.subtract(number, context);\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @param {MathContext} [context] - MathContext setting after calculation. If omitted, use the MathContext of the B.\n\t * @returns {BigDecimal} A * B\n\t */\n\tmultiply(number, context) {\n\t\tconst multiplicand = BigDecimal._toBigDecimal(number);\n\t\tconst mc = context ? context : multiplicand.default_context;\n\t\tconst src\t\t\t= this;\n\t\tconst tgt\t\t\t= multiplicand;\n\t\tconst newinteger\t= src.integer.multiply(tgt.integer);\n\t\t// 0.1 * 0.01 = 0.001\n\t\tconst newscale\t= src._scale + tgt._scale;\n\t\treturn new BigDecimal([newinteger, newscale, mc]);\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @param {MathContext} [context] - MathContext setting after calculation. If omitted, use the MathContext of the B.\n\t * @returns {BigDecimal} A * B\n\t */\n\tmul(number, context) {\n\t\treturn this.multiply(number, context);\n\t}\n\n\t/**\n\t * Divide not calculated to the decimal point.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @param {MathContext} [context] - MathContext setting after calculation. If omitted, use the MathContext of the B.\n\t * @returns {BigDecimal} (int)(A / B)\n\t */\n\tdivideToIntegralValue(number, context) {\n\t\tconst divisor = BigDecimal._toBigDecimal(number);\n\t\tconst mc = context ? context : divisor.default_context;\n\t\tconst getDigit  = function( num ) {\n\t\t\tlet i;\n\t\t\tlet text = \"1\";\n\t\t\tfor(i = 0; i < num; i++) {\n\t\t\t\ttext = text + \"0\";\n\t\t\t}\n\t\t\treturn new BigInteger(text);\n\t\t};\n\t\tif(divisor.compareTo(BigDecimal.ZERO) === 0) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\n\t\t// 1000e0\t\t/\t1e2\t\t\t\t=\t1000e-2\n\t\t// 1000e0\t\t/\t10e1\t\t\t=\t100e-1\n\t\t// 1000e0\t\t/\t100e0\t\t\t=\t10e0\n\t\t// 1000e0\t\t/\t1000e-1\t\t\t=\t1e1\n\t\t// 1000e0\t\t/\t10000e-2\t\t=\t1e1\n\t\t// 1000e0\t\t/\t100000e-3\t\t=\t1e1\n\n\t\t// 10e2\t\t\t/\t100e0\t\t\t=\t1e1\n\t\t// 100e1\t\t/\t100e0\t\t\t=\t1e1\n\t\t// 1000e0\t\t/\t100e0\t\t\t=\t10e0\n\t\t// 10000e-1\t\t/\t100e0\t\t\t=\t100e-1\t\n\t\t// 100000e-2\t/\t100e0\t\t\t=\t1000e-2\n\n\t\tconst src\t\t= this;\n\t\tconst tgt\t\t= divisor;\n\t\tlet src_integer\t= src.integer;\n\t\tlet tgt_integer\t= tgt.integer;\n\t\tconst newScale\t= src._scale - tgt._scale;\n\n\t\t// 100e-2 / 3e-1 = 1 / 0.3 -> 100 / 30\n\t\tif(src._scale > tgt._scale) {\n\t\t\t// src._scale に合わせる\n\t\t\ttgt_integer = tgt_integer.multiply(getDigit(  newScale ));\n\t\t}\n\t\t// 1e-1 / 3e-2 = 0.1 / 0.03 -> 10 / 3\n\t\telse if(src._scale < tgt._scale) {\n\t\t\t// tgt._scale に合わせる\n\t\t\tsrc_integer = src_integer.multiply(getDigit( -newScale ));\n\t\t}\n\n\t\t// とりあえず計算結果だけ作ってしまう\n\t\tconst new_integer\t= src_integer.divide(tgt_integer);\n\t\tconst sign\t\t\t= new_integer.signum();\n\t\tif(sign !== 0) {\n\t\t\tconst text\t= new_integer.toString(10).replace(/^-/, \"\");\n\t\t\t// 指定した桁では表すことができない\n\t\t\tif((mc.getPrecision() !== 0) && (text.length > mc.getPrecision())) {\n\t\t\t\tthrow \"ArithmeticException\";\n\t\t\t}\n\t\t\t// 結果の優先スケール に合わせる (this.scale() - divisor.scale())\n\t\t\tif(text.length <= (-newScale)) {\n\t\t\t\t// 合わせることができないので、0をできる限り削る = stripTrailingZerosメソッド\n\t\t\t\tconst zeros\t\t\t= text.match(/0+$/);\n\t\t\t\tconst zero_length\t= (zeros !== null) ? zeros[0].length : 0;\n\t\t\t\tconst sign_text\t\t= sign >= 0 ? \"\" : \"-\";\n\t\t\t\treturn new BigDecimal([new BigInteger(sign_text + text.substring(0, text.length - zero_length)), -zero_length, mc]);\n\t\t\t}\n\t\t}\n\n\t\tlet output = new BigDecimal(new_integer);\n\t\toutput = output.setScale(newScale, RoundingMode.UP);\n\t\toutput = output.round(mc);\n\t\toutput.default_context = mc;\n\t\treturn output;\n\t}\n\n\t/**\n\t * Divide and remainder.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @param {MathContext} [context] - MathContext setting after calculation. If omitted, use the MathContext of the B.\n\t * @returns {Array<BigDecimal>} [C = (int)(A / B), A - C * B]\n\t */\n\tdivideAndRemainder(number, context) {\n\t\tconst divisor = BigDecimal._toBigDecimal(number);\n\t\tconst mc = context ? context : divisor.default_context;\n\n\t\t// 1000e0\t\t/\t1e2\t\t\t\t=\t1000e-2\t... 0e0\n\t\t// 1000e0\t\t/\t10e1\t\t\t=\t100e-1\t... 0e0\n\t\t// 1000e0\t\t/\t100e0\t\t\t=\t10e0\t... 0e0\n\t\t// 1000e0\t\t/\t1000e-1\t\t\t=\t1e1\t\t... 0e0\n\t\t// 1000e0\t\t/\t10000e-2\t\t=\t1e1\t\t... 0e-1\n\t\t// 1000e0\t\t/\t100000e-3\t\t=\t1e1\t\t... 0e-2\n\n\t\t// 10e2\t\t\t/\t100e0\t\t\t=\t1e1\t\t... 0e1\n\t\t// 100e1\t\t/\t100e0\t\t\t=\t1e1\t\t... 0e1\n\t\t// 1000e0\t\t/\t100e0\t\t\t=\t10e0\t... 0e0\n\t\t// 10000e-1\t\t/\t100e0\t\t\t=\t100e-1\t... 0e-1\n\t\t// 100000e-2\t/\t100e0\t\t\t=\t1000e-2\t... 0e-2\n\n\t\tconst result_divide\t= this.divideToIntegralValue(divisor, mc);\n\t\tconst result_remaind\t= this.subtract(result_divide.multiply(divisor, mc), mc);\n\n\t\tconst output = [result_divide, result_remaind];\n\t\treturn output;\n\t}\n\n\t/**\n\t * Remainder of division.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @param {MathContext} [context] - MathContext setting after calculation. If omitted, use the MathContext of the B.\n\t * @returns {BigDecimal} A % B\n\t */\n\trem(number, context) {\n\t\treturn this.divideAndRemainder(number, context)[1];\n\t}\n\n\t/**\n\t * Modulo, positive remainder of division.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @param {MathContext} [context] - MathContext setting after calculation. If omitted, use the MathContext of the B.\n\t * @returns {BigDecimal} A mod B\n\t */\n\tmod(number, context) {\n\t\tconst x = this.rem(number, context);\n\t\tif(x.compareTo(BigDecimal.ZERO) < 0) {\n\t\t\treturn x.add(number, context);\n\t\t}\n\t}\n\n\t/**\n\t * Divide.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @param {BigDecimalDivideType} [type] - Scale, MathContext, RoundingMode used for the calculation.\n\t * @returns {BigDecimal}\n\t */\n\tdivide(number, type) {\n\t\tconst divisor = BigDecimal._toBigDecimal(number);\n\t\tconst src\t\t\t= this;\n\t\tconst tgt\t\t\t= divisor;\n\t\tlet roundingMode\t= null;\n\t\tlet mc\t\t\t\t= null;\n\t\tlet newScale\t\t= 0;\n\t\tlet isPriorityScale\t= false;\n\t\tif(type && type.scale) {\n\t\t\tisPriorityScale\t= false;\n\t\t\tnewScale = type.scale;\n\t\t}\n\t\telse {\n\t\t\tisPriorityScale\t= true;\n\t\t\tif(type && (type.roundingMode || type.context)) {\n\t\t\t\tnewScale = src.scale();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnewScale = src.scale() - tgt.scale();\n\t\t\t}\n\t\t}\n\t\tif(type && type.context) {\n\t\t\troundingMode = type.context.getRoundingMode();\n\t\t\tnewScale = type.context.getPrecision();\n\t\t\tmc = type.context;\n\t\t}\n\t\telse {\n\t\t\tmc = this.default_context;\n\t\t}\n\t\tif(type && type.roundingMode) {\n\t\t\troundingMode = type.roundingMode;\n\t\t}\n\t\telse {\n\t\t\troundingMode = mc.getRoundingMode();\n\t\t}\n\t\t\n\t\tif(tgt.compareTo(BigDecimal.ZERO) === 0) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t\tlet newsrc;\n\t\tconst result_map = [];\n\t\tlet result, result_divide, result_remaind, all_result;\n\t\tall_result = BigDecimal.ZERO;\n\t\tconst precision = mc.getPrecision();\n\t\tconst check_max = precision !== 0 ? (precision + 8) : 0x3FFFF;\n\t\tnewsrc = src;\n\t\tfor(let i = 0; i < check_max; i++) {\n\t\t\tresult = newsrc.divideAndRemainder(tgt, MathContext.UNLIMITED);\n\t\t\tresult_divide\t= result[0];\n\t\t\tresult_remaind\t= result[1];\n\t\t\t// ここで default_context が MathContext.UNLIMITED に書き換わる\n\t\t\tall_result = all_result.add(result_divide.scaleByPowerOfTen(-i), MathContext.UNLIMITED);\n\t\t\tif(result_remaind.compareTo(BigDecimal.ZERO) !== 0) {\n\t\t\t\tif(precision === 0) {\t// 精度無限大の場合は、循環小数のチェックが必要\n\t\t\t\t\tif(result_map[result_remaind._getUnsignedIntegerString()]) {\n\t\t\t\t\t\tthrow \"ArithmeticException \" + all_result + \"[\" + result_remaind._getUnsignedIntegerString() + \"]\";\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tresult_map[result_remaind._getUnsignedIntegerString()] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewsrc = result_remaind.scaleByPowerOfTen(1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// default_context の設定を元に戻す\n\t\t{\n\t\t\tif(type && type.context) {\n\t\t\t\tall_result.default_context = type.context;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tall_result.default_context = this.default_context;\n\t\t\t}\n\t\t}\n\t\tif(isPriorityScale) {\n\t\t\t// 優先スケールの場合は、スケールの変更に失敗する可能性あり\n\t\t\ttry {\n\t\t\t\tall_result = all_result.setScale(newScale, roundingMode);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\t// falls through\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tall_result = all_result.setScale(newScale, roundingMode);\n\t\t}\n\t\tall_result = all_result.round(mc);\n\t\treturn all_result;\n\t}\n\n\t/**\n\t * Divide.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @param {BigDecimalDivideType} [type] - Scale, MathContext, RoundingMode used for the calculation.\n\t * @returns {BigDecimal} A / B\n\t */\n\tdiv(number, type) {\n\t\treturn this.divide(number, type);\n\t}\n\n\t/**\n\t * Power function.\n\t * - Supports only integers.\n\t * - An exception occurs when doing a huge multiplication.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @param {MathContext} [context] - MathContext setting after calculation. If omitted, use the MathContext of the B.\n\t * @returns {BigDecimal} pow(A, B)\n\t */\n\tpow(number, context) {\n\t\tlet n = BigDecimal._toInteger(number);\n\t\tconst mc = context ? context : this.default_context;\n\t\tif(Math.abs(n) > 999999999) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t\tif((mc.getPrecision() === 0) && (n < 0)) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t\tlet x, y;\n\t\tx = this.clone();\n\t\ty = BigDecimal.ONE;\n\t\twhile(n !== 0) {\n\t\t\tif((n & 1) !== 0) {\n\t\t\t\ty = y.multiply(x, MathContext.UNLIMITED);\n\t\t\t}\n\t\t\tx = x.multiply(x, MathContext.UNLIMITED);\n\t\t\tn >>>= 1;\n\t\t}\n\t\treturn y.round(mc);\n\t}\n\t\n\t// ----------------------\n\t// その他の演算\n\t// ----------------------\n\t\n\t/**\n\t * Factorial function, x!.\n\t * - Supports only integers.\n\t * @param {MathContext} [context] - MathContext setting after calculation. If omitted, use the MathContext of the B.\n\t * @returns {BigDecimal} n!\n\t */\n\tfactorial(context) {\n\t\tconst mc = context ? context : this.default_context;\n\t\tconst y = new BigDecimal((new BigInteger(this)).factorial());\n\t\treturn y.round(mc);\n\t}\n\n\t/**\n\t * Multiply a multiple of ten.\n\t * - Supports only integers.\n\t * - Only the scale is changed without changing the precision.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} n \n\t * @returns {BigDecimal} A * 10^floor(n)\n\t */\n\tscaleByPowerOfTen(n) {\n\t\tconst x = BigDecimal._toInteger(n);\n\t\tconst output = this.clone();\n\t\toutput._scale = this.scale() - x;\n\t\treturn output;\n\t}\n\n\t// ----------------------\n\t// 環境設定用\n\t// ----------------------\n\t\n\t/**\n\t * Set default the MathContext.\n\t * This is used if you do not specify MathContext when creating a new object.\n\t * @param {MathContext} [context=MathContext.DECIMAL128]\n\t */\n\tstatic setDefaultContext(context) {\n\t\tDEFAULT_CONTEXT = context ? context : MathContext.DECIMAL128;\n\t}\n\n\t/**\n\t * Return default MathContext class.\n\t * Used when MathContext not specified explicitly.\n\t * @returns {MathContext}\n\t */\n\tstatic getDefaultContext() {\n\t\treturn DEFAULT_CONTEXT;\n\t}\n\n\t// ----------------------\n\t// 他の型に変換用\n\t// ----------------------\n\t\n\t/**\n\t * 32-bit integer value.\n\t * @returns {number}\n\t */\n\tget intValue() {\n\t\tconst bigintdata = this.toBigInteger();\n\t\tconst x = bigintdata.intValue;\n\t\treturn x & 0xFFFFFFFF;\n\t}\n\n\t/**\n\t * 32-bit integer value.\n\t * An error occurs if conversion fails.\n\t * @returns {number}\n\t */\n\tget intValueExact() {\n\t\tconst bigintdata = this.toBigInteger();\n\t\tconst x = bigintdata.intValue;\n\t\tif((x < -2147483648) || (2147483647 < x)) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 32-bit floating point.\n\t * @returns {number}\n\t */\n\tget floatValue() {\n\t\tconst p = this.precision();\n\t\tif(MathContext.DECIMAL32.getPrecision() < p) {\n\t\t\treturn(this.signum() >= 0 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY);\n\t\t}\n\t\treturn parseFloat(this.toEngineeringString());\n\t}\n\n\t/**\n\t * 64-bit floating point.\n\t * @returns {number}\n\t */\n\tget doubleValue() {\n\t\tconst p = this.precision();\n\t\tif(MathContext.DECIMAL64.getPrecision() < p) {\n\t\t\treturn(this.signum() >= 0 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY);\n\t\t}\n\t\treturn parseFloat(this.toEngineeringString());\n\t}\n\n\t/**\n\t * Get as a BigInteger.\n\t * @returns {BigInteger}\n\t */\n\ttoBigInteger() {\n\t\treturn this.integer.scaleByPowerOfTen(-this.scale());\n\t}\n\n\t// ----------------------\n\t// 比較\n\t// ----------------------\n\t\n\t/**\n\t * Equals.\n\t * - Attention : Test for equality, including the precision and the scale. \n\t * - Use the \"compareTo\" if you only want to find out whether they are also mathematically equal.\n\t * - If you specify a \"tolerance\", it is calculated by ignoring the test of the precision and the scale.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean} A === B\n\t */\n\tequals(number, tolerance) {\n\t\t// 誤差を指定しない場合は、厳密に調査\n\t\tif(!tolerance) {\n\t\t\tif(number instanceof BigDecimal) {\n\t\t\t\treturn ((this._scale === number._scale) && (this.integer.equals(number.integer)));\n\t\t\t}\n\t\t\telse if((typeof number === \"string\") || (number instanceof String)) {\n\t\t\t\tconst val = BigDecimal._toBigDecimal(number);\n\t\t\t\treturn ((this._scale === val._scale) && (this.integer.equals(val.integer)));\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this.compareTo(number) === 0;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn this.compareTo(number, tolerance) === 0;\n\t\t}\n\t}\n\n\t/**\n\t * Compare values.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} [tolerance=0] - Calculation tolerance of calculation.\n\t * @returns {number} A > B ? 1 : (A === B ? 0 : -1)\n\t */\n\tcompareTo(number, tolerance) {\n\t\tconst src = this;\n\t\tconst tgt = BigDecimal._toBigDecimal(number);\n\t\tif(!tolerance) {\n\t\t\t// 誤差の指定がない場合\n\t\t\t// 簡易計算\n\t\t\t{\n\t\t\t\tconst src_sign\t= src.signum();\n\t\t\t\tconst tgt_sign\t= tgt.signum();\n\t\t\t\tif((src_sign === 0) && (src_sign === tgt_sign)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\telse if(src_sign === 0) {\n\t\t\t\t\treturn - tgt_sign;\n\t\t\t\t}\n\t\t\t\telse if(tgt_sign === 0) {\n\t\t\t\t\treturn src_sign;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 実際に計算する\n\t\t\tif(src._scale === tgt._scale) {\n\t\t\t\treturn src.integer.compareTo(tgt.integer);\n\t\t\t}\n\t\t\telse if(src._scale > tgt._scale) {\n\t\t\t\tconst newdst = tgt.setScale(src._scale);\n\t\t\t\treturn src.integer.compareTo(newdst.integer);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst newsrc = src.setScale(tgt._scale);\n\t\t\t\treturn newsrc.integer.compareTo(tgt.integer);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconst tolerance_ = BigDecimal._toBigDecimal(tolerance);\n\t\t\tconst delta = src.sub(tgt, MathContext.UNLIMITED);\n\t\t\tconst delta_abs = delta.abs();\n\t\t\tif(delta_abs.compareTo(tolerance_) <= 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn delta.sign();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Maximum number.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @returns {BigDecimal} max([A, B])\n\t */\n\tmax(number) {\n\t\tconst val = BigDecimal._toBigDecimal(number);\n\t\tif(this.compareTo(val) >= 0) {\n\t\t\treturn this.clone();\n\t\t}\n\t\telse {\n\t\t\treturn val.clone();\n\t\t}\n\t}\n\n\t/**\n\t * Minimum number.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @returns {BigDecimal} min([A, B])\n\t */\n\tmin(number) {\n\t\tconst val = BigDecimal._toBigDecimal(number);\n\t\tif(this.compareTo(val) <= 0) {\n\t\t\treturn this.clone();\n\t\t}\n\t\telse {\n\t\t\treturn val.clone();\n\t\t}\n\t}\n\n\t/**\n\t * Clip number within range.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} min\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} max\n\t * @returns {BigDecimal} min(max(x, min), max)\n\t */\n\tclip(min, max) {\n\t\tconst min_ = BigDecimal._toBigDecimal(min);\n\t\tconst max_ = BigDecimal._toBigDecimal(max);\n\t\tconst arg_check = min_.compareTo(max_);\n\t\tif(arg_check === 1) {\n\t\t\tthrow \"clip(min, max) error. (min > max)->(\" + min_ + \" > \" + max_ + \")\";\n\t\t}\n\t\telse if(arg_check === 0) {\n\t\t\treturn min_;\n\t\t}\n\t\tif(this.compareTo(max_) === 1) {\n\t\t\treturn max_;\n\t\t}\n\t\telse if(this.compareTo(min_) === -1) {\n\t\t\treturn min_;\n\t\t}\n\t\treturn this;\n\t}\n\n\t// ----------------------\n\t// 文字列化\n\t// ----------------------\n\t\n\t/**\n\t * Convert to string.\n\t * @returns {string} \n\t */\n\ttoString() {\n\t\t// 「調整された指数」\n\t\tconst x = - this.scale() + (this.precision() - 1);\n\t\t// スケールが 0 以上で、「調整された指数」が -6 以上\n\t\tif((this.scale() >= 0) && (x >= -6)) {\n\t\t\treturn this.toPlainString();\n\t\t}\n\t\telse {\n\t\t\treturn this.toScientificNotation(x);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to string using scientific notation.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} e_len - Number of digits in exponent part.\n\t * @returns {string} \n\t */\n\ttoScientificNotation(e_len) {\n\t\tconst e\t\t= BigDecimal._toInteger(e_len);\n\t\tconst text\t= this._getUnsignedIntegerString();\n\t\tlet s\t\t= this.scale();\n\t\tconst x\t\t= [];\n\t\tlet i, k;\n\t\t// -\n\t\tif(this.signum() === -1) {\n\t\t\tx[x.length] = \"-\";\n\t\t}\n\t\t// 表示上の桁数\n\t\ts = - e - s;\n\t\t// 小数点が付かない\n\t\tif(s >= 0) {\n\t\t\tx[x.length] = text;\n\t\t\tfor(i = 0; i < s; i++) {\n\t\t\t\tx[x.length] = \"0\";\n\t\t\t}\n\t\t}\n\t\t// 小数点が付く\n\t\telse {\n\t\t\tk = this.precision() + s;\n\t\t\tif(0 < k) {\n\t\t\t\tx[x.length] = text.substring(0, k);\n\t\t\t\tx[x.length] = \".\";\n\t\t\t\tx[x.length] = text.substring(k, text.length);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tk = - k;\n\t\t\t\tx[x.length] = \"0.\";\n\t\t\t\tfor(i = 0; i < k; i++) {\n\t\t\t\t\tx[x.length] = \"0\";\n\t\t\t\t}\n\t\t\t\tx[x.length] = text;\n\t\t\t}\n\t\t}\n\t\tx[x.length] = \"E\";\n\t\tif(e >= 0) {\n\t\t\tx[x.length] = \"+\";\n\t\t}\n\t\tx[x.length] = e;\n\t\treturn x.join(\"\");\n\t}\n\n\t/**\n\t * Convert to string usding technical notation.\n\t * @returns {string} \n\t */\n\ttoEngineeringString() {\n\t\t// 「調整された指数」\n\t\tconst x = - this.scale() + (this.precision() - 1);\n\t\t// スケールが 0 以上で、「調整された指数」が -6 以上\n\t\tif((this.scale() >= 0) && (x >= -6)) {\n\t\t\treturn this.toPlainString();\n\t\t}\n\t\telse {\n\t\t\t// 0 でない値の整数部が 1 〜 999 の範囲に収まるように調整\n\t\t\treturn this.toScientificNotation(Math.floor(x / 3) * 3);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to string without exponential notation.\n\t * @returns {string} \n\t */\n\ttoPlainString() {\n\t\t// スケールの変換なし\n\t\tif(this.scale() === 0) {\n\t\t\tif(this.signum() < 0) {\n\t\t\t\treturn \"-\" + this._getUnsignedIntegerString();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this._getUnsignedIntegerString();\n\t\t\t}\n\t\t}\n\t\t// 指数0で文字列を作成後、Eの後ろの部分をとっぱらう\n\t\tconst text = this.toScientificNotation(0);\n\t\treturn text.match(/^[^E]*/)[0];\n\t}\n\n\t// ----------------------\n\t// 丸め\n\t// ----------------------\n\t\n\t/**\n\t * Change the scale.\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} new_scale - New scale.\n\t * @param {RoundingModeEntity} [rounding_mode=RoundingMode.UNNECESSARY] - Rounding method when converting precision.\n\t * @param {MathContext} [mc] - Rounding setting after calculation. For rounding purposes, use the round method.\n\t * @returns {BigDecimal} \n\t */\n\tsetScale(new_scale, rounding_mode, mc) {\n\t\tconst newScale = BigDecimal._toInteger(new_scale);\n\t\tif(this.scale() === newScale) {\n\t\t\t// scaleが同一なので処理の必要なし\n\t\t\treturn(this.clone());\n\t\t}\n\t\tconst roundingMode = (rounding_mode !== undefined) ? RoundingMode.valueOf(rounding_mode) : RoundingMode.UNNECESSARY;\n\t\tconst context = (mc !== undefined) ? mc : this.default_context;\n\t\t// 文字列を扱ううえで、符号があるとやりにくいので外しておく\n\t\tlet text\t\t= this._getUnsignedIntegerString();\n\t\tconst sign\t\t= this.signum();\n\t\tconst sign_text\t= sign >= 0 ? \"\" : \"-\";\n\t\t// scale の誤差\n\t\t// 0 以上なら 0 を加えればいい。0未満なら0を削るか、四捨五入など丸めを行う\n\t\tconst delta\t\t= newScale - this.scale();\t// この桁分増やすといい\n\t\tif(0 <= delta) {\n\t\t\t// 0を加える\n\t\t\tlet i;\n\t\t\tfor(i = 0; i < delta; i++) {\n\t\t\t\ttext = text + \"0\";\n\t\t\t}\n\t\t\treturn new BigDecimal([new BigInteger(sign_text + text), newScale, context]);\n\t\t}\n\t\tconst keta = text.length + delta;\t\t// 最終的な桁数\n\t\tconst keta_marume = keta + 1;\n\t\tif(keta <= 0) {\n\t\t\t// 指定した scale では設定できない場合\n\t\t\t// 例えば \"0.1\".setScale(-2), \"10\".setScale(-3) としても表すことは不可能であるため、\n\t\t\t// sign（-1, 0, +1）のどれかの数値を使用して丸める\n\t\t\tconst outdata = (sign + roundingMode.getAddNumber(sign)) / 10;\n\t\t\t// 上記の式は、CEILINGなら必ず1、正でCEILINGなら1、負でFLOORなら1、それ以外は0となり、\n\t\t\t// さらに元々の数値が 0 なら 0、切り捨て不能なら例外が返る計算式である。\n\t\t\t// これは Java の動作をまねています。\n\t\t\treturn new BigDecimal([new BigInteger(outdata), newScale, context]);\n\t\t}\n\t\t{\n\t\t\t// 0を削るだけで解決する場合\n\t\t\t// 単純な切捨て(0を削るのみ)\n\t\t\tconst zeros\t\t\t= text.match(/0+$/);\n\t\t\tconst zero_length\t\t= (zeros !== null) ? zeros[0].length : 0;\n\t\t\tif(( (zero_length + delta) >= 0 ) || (roundingMode === RoundingMode.DOWN)) {\n\t\t\t\treturn new BigDecimal([new BigInteger(sign_text + text.substring(0, keta)), newScale, context]);\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\t// 丸め計算で解決する場合\n\t\t\t// 12345 -> '123'45\n\t\t\ttext = text.substring(0, keta_marume);\n\t\t\t// 丸め計算に必要な切り取る桁数(後ろの1～2桁を取得)\n\t\t\tconst cutsize = text.length > 1 ? 2 : 1;\n\t\t\t// '123'45 -> 1'23'4\n\t\t\tconst number = parseInt(text.substring(text.length - cutsize, text.length)) * sign;\n\t\t\t// 「元の数」と「丸めに必要な数」を足す\n\t\t\tconst x1 = new BigInteger(sign_text + text);\n\t\t\tconst x2 = new BigInteger(roundingMode.getAddNumber(number));\n\t\t\ttext = x1.add(x2).toString();\n\t\t\t// 丸め後の桁数に戻して\n\t\t\treturn new BigDecimal([new BigInteger(text.substring(0, text.length - 1)), newScale, context]);\n\t\t}\n\t}\n\n\t/**\n\t * Round with specified settings.\n\t * \n\t * This method is not a method round the decimal point.\n\t * This method converts numbers in the specified Context and rounds unconvertible digits.\n\t * \n\t * Use this.setScale(0, RoundingMode.HALF_UP) if you want to round the decimal point.\n\t * When the argument is omitted, such decimal point rounding operation is performed.\n\t * @param {MathContext} [mc] - New setting.\n\t * @returns {BigDecimal} \n\t */\n\tround(mc) {\n\t\tif(mc) {\n\t\t\t// MathContext を設定した場合\n\t\t\tif(!(mc instanceof MathContext)) {\n\t\t\t\tthrow \"not MathContext\";\n\t\t\t}\n\t\t\tconst newPrecision\t= mc.getPrecision();\n\t\t\tconst delta\t\t\t= newPrecision - this.precision();\n\t\t\tif((delta === 0)||(newPrecision === 0)) {\n\t\t\t\treturn this.clone();\n\t\t\t}\n\t\t\tconst newBigDecimal = this.setScale( this.scale() + delta, mc.getRoundingMode(), mc);\n\t\t\t/* 精度を上げる必要があるため、0を加えた場合 */\n\t\t\tif(delta > 0) {\n\t\t\t\treturn newBigDecimal;\n\t\t\t}\n\t\t\t/* 精度を下げる必要があるため、丸めた場合は、桁の数が正しいか調べる */\n\t\t\tif(newBigDecimal.precision() === mc.getPrecision()) {\n\t\t\t\treturn newBigDecimal;\n\t\t\t}\n\t\t\t/* 切り上げなどで桁数が１つ増えた場合 */\n\t\t\tconst sign_text\t= newBigDecimal.integer.signum() >= 0 ? \"\" : \"-\";\n\t\t\tconst abs_text\t= newBigDecimal._getUnsignedIntegerString();\n\t\t\tconst inte_text\t= sign_text + abs_text.substring(0, abs_text.length - 1);\n\t\t\treturn new BigDecimal([new BigInteger(inte_text), newBigDecimal.scale() - 1, mc]);\n\t\t}\n\t\telse {\n\t\t\t// 小数点以下を四捨五入する\n\t\t\treturn this.setScale(0, RoundingMode.HALF_UP);\n\t\t}\n\t}\n\n\t/**\n\t * Floor.\n\t * @param {MathContext} [mc] - MathContext setting after calculation. If omitted, use the MathContext of this object.\n\t * @returns {BigDecimal} floor(A)\n\t */\n\tfloor(mc) {\n\t\treturn this.setScale(0, RoundingMode.FLOOR, mc);\n\t}\n\n\t/**\n\t * Ceil.\n\t * @param {MathContext} [mc] - MathContext setting after calculation. If omitted, use the MathContext of this object.\n\t * @returns {BigDecimal} ceil(A)\n\t */\n\tceil(mc) {\n\t\treturn this.setScale(0, RoundingMode.CEILING, mc);\n\t}\n\t\n\t/**\n\t * To integer rounded down to the nearest.\n\t * @param {MathContext} [mc] - MathContext setting after calculation. If omitted, use the MathContext of this object.\n\t * @returns {BigDecimal} fix(A), trunc(A)\n\t */\n\tfix(mc) {\n\t\treturn this.setScale(0, RoundingMode.DOWN, mc);\n\t}\n\n\t/**\n\t * Fraction.\n\t * @param {MathContext} [mc] - MathContext setting after calculation. If omitted, use the MathContext of this object.\n\t * @returns {BigDecimal} fract(A)\n\t */\n\tfract(mc) {\n\t\treturn this.sub(this.floor(mc), mc);\n\t}\n\n\t// ----------------------\n\t// テスト系\n\t// ----------------------\n\t\n\t/**\n\t * this === 0\n\t * @returns {boolean}\n\t */\n\tisZero() {\n\t\treturn this.integer.isZero();\n\t}\n\t\n\t/**\n\t * this === 1\n\t * @returns {boolean}\n\t */\n\tisOne() {\n\t\treturn this.compareTo(BigDecimal.ONE) === 0;\n\t}\n\t\n\t/**\n\t * this > 0\n\t * @returns {boolean}\n\t */\n\tisPositive() {\n\t\treturn this.integer.isPositive();\n\t}\n\n\t/**\n\t * this < 0\n\t * @returns {boolean}\n\t */\n\tisNegative() {\n\t\treturn this.integer.isNegative();\n\t}\n\n\t/**\n\t * this >= 0\n\t * @returns {boolean}\n\t */\n\tisNotNegative() {\n\t\treturn this.integer.isNotNegative();\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * -1\n\t * @returns {BigDecimal} -1\n\t */\n\tstatic get MINUS_ONE() {\n\t\tconst x = new BigDecimal(-1);\n\t\treturn x;\n\t}\n\n\t/**\n\t * 0\n\t * @returns {BigDecimal} 0\n\t */\n\tstatic get ZERO() {\n\t\tconst x = new BigDecimal(0);\n\t\treturn x;\n\t}\n\t\n\t/**\n\t * 0.5\n\t * @returns {BigDecimal} 0.5\n\t */\n\tstatic get HALF() {\n\t\tconst x = new BigDecimal(0.5);\n\t\treturn x;\n\t}\n\t\n\t/**\n\t * 1\n\t * @returns {BigDecimal} 1\n\t */\n\tstatic get ONE() {\n\t\tconst x = new BigDecimal(1);\n\t\treturn x;\n\t}\n\t\n\t/**\n\t * 2\n\t * @returns {BigDecimal} 2\n\t */\n\tstatic get TWO() {\n\t\tconst x = new BigDecimal(2);\n\t\treturn x;\n\t}\n\t\n\t/**\n\t * 10\n\t * @returns {BigDecimal} 10\n\t */\n\tstatic get TEN() {\n\t\tconst x = new BigDecimal(10);\n\t\treturn x;\n\t}\n\n}\n\nBigDecimal.RoundingMode = RoundingMode;\nBigDecimal.MathContext = MathContext;\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/BigDecimal.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 11,
    "kind": "typedef",
    "name": "BigDecimalDivideType",
    "memberof": "src/math/BigDecimal.mjs",
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimalDivideType",
    "access": "public",
    "description": "Setting of calculation result of division.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "scale",
        "description": "Scale of rounding."
      },
      {
        "nullable": null,
        "types": [
          "RoundingModeEntity"
        ],
        "spread": false,
        "optional": true,
        "name": "roundingMode",
        "description": "Rounding mode."
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "Configuration.(scale and roundingMode are unnecessary.)"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "BigDecimalDivideType"
    }
  },
  {
    "__docId__": 12,
    "kind": "variable",
    "name": "DEFAULT_CONTEXT",
    "memberof": "src/math/BigDecimal.mjs",
    "static": true,
    "longname": "src/math/BigDecimal.mjs~DEFAULT_CONTEXT",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/BigDecimal.mjs",
    "importStyle": null,
    "description": "Default MathContext class.\nUsed when MathContext not specified explicitly.",
    "lineNumber": 35,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 13,
    "kind": "class",
    "name": "DecimalTool",
    "memberof": "src/math/BigDecimal.mjs",
    "static": true,
    "longname": "src/math/BigDecimal.mjs~DecimalTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/BigDecimal.mjs",
    "importStyle": null,
    "description": "Collection of functions used in BigDecimal.",
    "lineNumber": 41,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 14,
    "kind": "method",
    "name": "ToBigDecimalFromString",
    "memberof": "src/math/BigDecimal.mjs~DecimalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~DecimalTool.ToBigDecimalFromString",
    "access": "public",
    "description": "Create data for BigDecimal from strings.",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{scale : number, integer : BigInteger}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ntext",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{scale : number, integer : BigInteger}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 15,
    "kind": "method",
    "name": "ToBigDecimalFromNumber",
    "memberof": "src/math/BigDecimal.mjs~DecimalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~DecimalTool.ToBigDecimalFromNumber",
    "access": "public",
    "description": "Create data for BigDecimal from number.",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{scale : number, integer : BigInteger}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{scale : number, integer : BigInteger}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 16,
    "kind": "class",
    "name": "BigDecimal",
    "memberof": "src/math/BigDecimal.mjs",
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/BigDecimal.mjs",
    "importStyle": "BigDecimal",
    "description": "Arbitrary-precision floating-point number class (immutable).",
    "lineNumber": 133,
    "interface": false
  },
  {
    "__docId__": 17,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#constructor",
    "access": "public",
    "description": "Create an arbitrary-precision floating-point number.\n\nInitialization can be performed as follows.\n- 1200, \"1200\", \"12e2\", \"1.2e3\"\n- When initializing with array. [ integer, [scale = 0], [default_context=default], [context=default] ].\n- When initializing with object. { integer, [scale = 0], [default_context=default], [context=default] }.\n\nDescription of the settings are as follows, you can also omitted.\n- The \"scale\" is an integer scale factor.\n- The \"default_context\" is the used when no environment settings are specified during calculation.\n- The \"context\" is used to normalize the created floating point.",
    "lineNumber": 149,
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Real data."
      }
    ]
  },
  {
    "__docId__": 18,
    "kind": "member",
    "name": "_scale",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#_scale",
    "access": "private",
    "description": "The scale of this BigDecimal.",
    "lineNumber": 156,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 19,
    "kind": "member",
    "name": "default_context",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#default_context",
    "access": "private",
    "description": "Context used during initialization.",
    "lineNumber": 163,
    "type": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 20,
    "kind": "member",
    "name": "integer",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#integer",
    "access": "private",
    "description": "Integer part.",
    "lineNumber": 177,
    "type": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 22,
    "kind": "member",
    "name": "int_string",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#int_string",
    "access": "private",
    "description": "Integer part of string (for cache).",
    "lineNumber": 186,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 47,
    "kind": "method",
    "name": "create",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal.create",
    "access": "public",
    "description": "Create an arbitrary-precision floating-point number.\n- When initializing with array. [ integer, [scale = 0], [default_context=default], [context=default] ].\n- When initializing with object. { integer, [scale = 0], [default_context=default], [context=default] }.\n\ndefault_context\n- The \"scale\" is an integer scale factor.\n- The \"default_context\" is the used when no environment settings are specified during calculation.\n- The \"context\" is used to normalize the created floating point.\n\nThese 3 settings can be omitted.",
    "lineNumber": 296,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Real data."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 48,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal.valueOf",
    "access": "public",
    "description": "Convert number to BigDecimal type.",
    "lineNumber": 311,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "scale",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 49,
    "kind": "method",
    "name": "_toBigDecimal",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal._toBigDecimal",
    "access": "private",
    "description": "Convert to BigDecimal.\nIf type conversion is unnecessary, return the value as it is.",
    "lineNumber": 327,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 50,
    "kind": "method",
    "name": "_toBigInteger",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal._toBigInteger",
    "access": "private",
    "description": "Convert to BigInteger.\nIf type conversion is unnecessary, return the value as it is.",
    "lineNumber": 343,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "_toFloat",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal._toFloat",
    "access": "private",
    "description": "Convert to real number.",
    "lineNumber": 361,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "_toInteger",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal._toInteger",
    "access": "private",
    "description": "Convert to integer.",
    "lineNumber": 379,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "_getUnsignedIntegerString",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#_getUnsignedIntegerString",
    "access": "private",
    "description": "Return string of this number without sign.\nIf cache is already created, return cache.",
    "lineNumber": 396,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#clone",
    "access": "public",
    "description": "Deep copy.",
    "lineNumber": 408,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "scale",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#scale",
    "access": "public",
    "description": "The scale of this BigDecimal.",
    "lineNumber": 416,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "signum",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#signum",
    "access": "public",
    "description": "The positive or negative sign of this number.\n- +1 if positive, -1 if negative, 0 if 0.",
    "lineNumber": 425,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "sign",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#sign",
    "access": "public",
    "description": "The positive or negative sign of this number.\n- +1 if positive, -1 if negative, 0 if 0.",
    "lineNumber": 434,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "precision",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#precision",
    "access": "public",
    "description": "Precision.",
    "lineNumber": 442,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "unscaledValue",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#unscaledValue",
    "access": "public",
    "description": "An integer with the exponent part removed.",
    "lineNumber": 450,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "ulp",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#ulp",
    "access": "public",
    "description": "The smallest value that can be represented with the set precision.",
    "lineNumber": 458,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "abs",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#abs",
    "access": "public",
    "description": "Absolute value.",
    "lineNumber": 467,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} abs(A)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of this object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "abs(A)"
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "plus",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#plus",
    "access": "public",
    "description": "this * 1",
    "lineNumber": 478,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} +A"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of this object.."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "+A"
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "negate",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#negate",
    "access": "public",
    "description": "this * -1",
    "lineNumber": 488,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} -A"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of this object.."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A"
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "movePointLeft",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#movePointLeft",
    "access": "public",
    "description": "Move the decimal point to the left.",
    "lineNumber": 499,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "movePointRight",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#movePointRight",
    "access": "public",
    "description": "Move the decimal point to the right.",
    "lineNumber": 511,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "stripTrailingZeros",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#stripTrailingZeros",
    "access": "public",
    "description": "Remove the 0 to the right of the numbers and normalize the scale.",
    "lineNumber": 522,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#add",
    "access": "public",
    "description": "Add.",
    "lineNumber": 547,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A + B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of the B."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A + B"
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "subtract",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#subtract",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 577,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of the B."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "sub",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#sub",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 602,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of the B."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "multiply",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#multiply",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 612,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of the B."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "mul",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#mul",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 629,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of the B."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "divideToIntegralValue",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#divideToIntegralValue",
    "access": "public",
    "description": "Divide not calculated to the decimal point.",
    "lineNumber": 639,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} (int)(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of the B."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "(int)(A / B)"
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "divideAndRemainder",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#divideAndRemainder",
    "access": "public",
    "description": "Divide and remainder.",
    "lineNumber": 716,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<BigDecimal>} [C = (int)(A / B), A - C * B]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of the B."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<BigDecimal>"
      ],
      "spread": false,
      "description": "[C = (int)(A / B), A - C * B]"
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "rem",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#rem",
    "access": "public",
    "description": "Remainder of division.",
    "lineNumber": 746,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A % B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of the B."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A % B"
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "mod",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#mod",
    "access": "public",
    "description": "Modulo, positive remainder of division.",
    "lineNumber": 756,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A mod B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of the B."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A mod B"
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "divide",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#divide",
    "access": "public",
    "description": "Divide.",
    "lineNumber": 769,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BigDecimalDivideType"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": "Scale, MathContext, RoundingMode used for the calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "div",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#div",
    "access": "public",
    "description": "Divide.",
    "lineNumber": 867,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A / B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BigDecimalDivideType"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": "Scale, MathContext, RoundingMode used for the calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A / B"
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "pow",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#pow",
    "access": "public",
    "description": "Power function.\n- Supports only integers.\n- An exception occurs when doing a huge multiplication.",
    "lineNumber": 879,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} pow(A, B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of the B."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "pow(A, B)"
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#factorial",
    "access": "public",
    "description": "Factorial function, x!.\n- Supports only integers.",
    "lineNumber": 911,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} n!"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of the B."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "n!"
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "scaleByPowerOfTen",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#scaleByPowerOfTen",
    "access": "public",
    "description": "Multiply a multiple of ten.\n- Supports only integers.\n- Only the scale is changed without changing the precision.",
    "lineNumber": 924,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A * 10^floor(n)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A * 10^floor(n)"
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "setDefaultContext",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal.setDefaultContext",
    "access": "public",
    "description": "Set default the MathContext.\nThis is used if you do not specify MathContext when creating a new object.",
    "lineNumber": 940,
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "MathContext.DECIMAL128",
        "defaultRaw": "MathContext.DECIMAL128",
        "name": "context",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "getDefaultContext",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal.getDefaultContext",
    "access": "public",
    "description": "Return default MathContext class.\nUsed when MathContext not specified explicitly.",
    "lineNumber": 949,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 84,
    "kind": "get",
    "name": "intValue",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#intValue",
    "access": "public",
    "description": "32-bit integer value.",
    "lineNumber": 961,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "get",
    "name": "intValueExact",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#intValueExact",
    "access": "public",
    "description": "32-bit integer value.\nAn error occurs if conversion fails.",
    "lineNumber": 972,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "get",
    "name": "floatValue",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#floatValue",
    "access": "public",
    "description": "32-bit floating point.",
    "lineNumber": 985,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "get",
    "name": "doubleValue",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#doubleValue",
    "access": "public",
    "description": "64-bit floating point.",
    "lineNumber": 997,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "toBigInteger",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#toBigInteger",
    "access": "public",
    "description": "Get as a BigInteger.",
    "lineNumber": 1009,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#equals",
    "access": "public",
    "description": "Equals.\n- Attention : Test for equality, including the precision and the scale. \n- Use the \"compareTo\" if you only want to find out whether they are also mathematically equal.\n- If you specify a \"tolerance\", it is calculated by ignoring the test of the precision and the scale.",
    "lineNumber": 1026,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#compareTo",
    "access": "public",
    "description": "Compare values.",
    "lineNumber": 1051,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A > B ? 1 : (A === B ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A > B ? 1 : (A === B ? 0 : -1)"
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#max",
    "access": "public",
    "description": "Maximum number.",
    "lineNumber": 1101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#min",
    "access": "public",
    "description": "Minimum number.",
    "lineNumber": 1116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "clip",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#clip",
    "access": "public",
    "description": "Clip number within range.",
    "lineNumber": 1132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} min(max(x, min), max)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "min(max(x, min), max)"
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#toString",
    "access": "public",
    "description": "Convert to string.",
    "lineNumber": 1159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "toScientificNotation",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#toScientificNotation",
    "access": "public",
    "description": "Convert to string using scientific notation.",
    "lineNumber": 1176,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "e_len",
        "description": "Number of digits in exponent part."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "toEngineeringString",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#toEngineeringString",
    "access": "public",
    "description": "Convert to string usding technical notation.",
    "lineNumber": 1224,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "toPlainString",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#toPlainString",
    "access": "public",
    "description": "Convert to string without exponential notation.",
    "lineNumber": 1241,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "setScale",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#setScale",
    "access": "public",
    "description": "Change the scale.",
    "lineNumber": 1267,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "new_scale",
        "description": "New scale."
      },
      {
        "nullable": null,
        "types": [
          "RoundingModeEntity"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "RoundingMode.UNNECESSARY",
        "defaultRaw": "RoundingMode.UNNECESSARY",
        "name": "rounding_mode",
        "description": "Rounding method when converting precision."
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "Rounding setting after calculation. For rounding purposes, use the round method."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "round",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#round",
    "access": "public",
    "description": "Round with specified settings.\n\nThis method is not a method round the decimal point.\nThis method converts numbers in the specified Context and rounds unconvertible digits.\n\nUse this.setScale(0, RoundingMode.HALF_UP) if you want to round the decimal point.\nWhen the argument is omitted, such decimal point rounding operation is performed.",
    "lineNumber": 1339,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "New setting."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "floor",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#floor",
    "access": "public",
    "description": "Floor.",
    "lineNumber": 1376,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} floor(A)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of this object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "floor(A)"
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "ceil",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#ceil",
    "access": "public",
    "description": "Ceil.",
    "lineNumber": 1385,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} ceil(A)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of this object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "ceil(A)"
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "fix",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#fix",
    "access": "public",
    "description": "To integer rounded down to the nearest.",
    "lineNumber": 1394,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} fix(A), trunc(A)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of this object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "fix(A), trunc(A)"
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "fract",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#fract",
    "access": "public",
    "description": "Fraction.",
    "lineNumber": 1403,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} fract(A)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "MathContext setting after calculation. If omitted, use the MathContext of this object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "fract(A)"
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "isZero",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#isZero",
    "access": "public",
    "description": "this === 0",
    "lineNumber": 1415,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "isOne",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#isOne",
    "access": "public",
    "description": "this === 1",
    "lineNumber": 1423,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "isPositive",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#isPositive",
    "access": "public",
    "description": "this > 0",
    "lineNumber": 1431,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "isNegative",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#isNegative",
    "access": "public",
    "description": "this < 0",
    "lineNumber": 1439,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "isNotNegative",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#isNotNegative",
    "access": "public",
    "description": "this >= 0",
    "lineNumber": 1447,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 109,
    "kind": "get",
    "name": "MINUS_ONE",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal.MINUS_ONE",
    "access": "public",
    "description": "-1",
    "lineNumber": 1459,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} -1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "get",
    "name": "ZERO",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal.ZERO",
    "access": "public",
    "description": "0",
    "lineNumber": 1468,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "0"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "get",
    "name": "HALF",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal.HALF",
    "access": "public",
    "description": "0.5",
    "lineNumber": 1477,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 0.5"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "0.5"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "get",
    "name": "ONE",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal.ONE",
    "access": "public",
    "description": "1",
    "lineNumber": 1486,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "get",
    "name": "TWO",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal.TWO",
    "access": "public",
    "description": "2",
    "lineNumber": 1495,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "2"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "get",
    "name": "TEN",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal.TEN",
    "access": "public",
    "description": "10",
    "lineNumber": 1504,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 10"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "10"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "src/math/BigInteger.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport Random from \"./tools/Random.mjs\";\n\n// @ts-ignore\n//import BigDecimal from \"./BigDecimal.mjs\";\n\n/**\n * Random number class to be used when the random number class is not set.\n * @type {Random}\n * @ignore\n */\nlet DEFAULT_RANDOM = new Random();\n\n/**\n * Collection of functions used in BigInteger.\n * @ignore\n */\nclass IntegerTool {\n\n\t/**\n\t * Return a hex array from a string containing numbers.\n\t * @param {string} text - String containing a number (remove the negative sign).\n\t * @param {number} radix - Base number.\n\t * @returns {Array<number>} Hex array.\n\t */\n\tstatic toHexadecimalArrayFromPlainString(text, radix) {\n\t\t// 下の変換をすることで、2進数での変換時に内部のforの繰り返す回数が減る\n\t\t// v0.03 出来る限りまとめてn進数変換する\n\t\tconst max_num = 0x3FFFFFFF;\n\t\tconst keta = Math.floor( Math.log(max_num) / Math.log(radix) );\n\t\tlet x = [];\n\t\tconst y = [];\n\t\tconst len = Math.ceil(text.length / keta);\n\t\tlet offset = text.length;\n\t\tfor(let i = 0; i < len; i++ ) {\n\t\t\toffset -= keta;\n\t\t\tif(offset >= 0) {\n\t\t\t\tx[i] = parseInt(text.substring(offset, offset + keta), radix);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tx[i] = parseInt(text.substring(0, offset + keta), radix);\n\t\t\t}\n\t\t}\n\t\tconst calcradix = Math.round(Math.pow(radix, keta));\n\t\t// v0.03ここまで\n\t\t// 2で割っていくアルゴリズムで2進数に変換する\n\t\twhile(x.length !==  0) {\n\t\t\t// 2で割っていく\n\t\t\t// 隣の桁でたcarryはradix進数をかけて桁上げしてる\n\t\t\tlet carry = 0;\n\t\t\tfor(let i = x.length - 1; i >= 0; i--) {\n\t\t\t\tconst a = x[i] + carry * calcradix;\n\t\t\t\tx[i]  = a >>> 1;\n\t\t\t\tcarry = a & 1;\n\t\t\t}\n\t\t\t// 1余るかどうかをテストする\n\t\t\ty[y.length] = carry;\n\t\t\t// xが0になっている部分は削除していく\n\t\t\tif(x[x.length - 1] === 0) {\n\t\t\t\tx.pop();\n\t\t\t}\n\t\t}\n\t\t// メモリ節約のため1つの変数（16ビット）に収めるだけ収めていく\n\t\tx = [];\n\t\tfor(let i = 0; i < y.length; i++) {\n\t\t\tx[i >>> 4] |= y[i] << (i & 0xF);\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * Remove exponent notation in strings representing unsigned numbers.\n\t * @param {string} ntext \n\t * @returns {string}\n\t */\n\tstatic toPlainStringFromString(ntext) {\n\t\tlet scale = 0;\n\t\tlet buff;\n\t\t// 正規化\n\t\tlet text = ntext.replace(/\\s/g, \"\").toLowerCase();\n\t\tconst number_text = [];\n\t\t// 整数部を抽出\n\t\tbuff = text.match(/^[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tnumber_text.push(buff);\n\t\t}\n\t\t// 小数部があるか\n\t\tbuff = text.match(/^\\.[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tbuff = buff.substr(1);\n\t\t\tscale = scale + buff.length;\n\t\t\tnumber_text.push(buff);\n\t\t}\n\t\t// 指数表記があるか\n\t\tbuff = text.match(/^e[+-]?[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0].substr(1);\n\t\t\tscale -= parseInt(buff, 10);\n\t\t}\n\t\t// 出力用の文字を作成\n\t\tlet output_string;\n\t\tif(scale === 0) {\n\t\t\toutput_string = number_text.join(\"\");\n\t\t}\n\t\tif(scale < 0) {\n\t\t\tfor(let i = 0; i < -scale; i++) {\n\t\t\t\tnumber_text.push(\"0\");\n\t\t\t}\n\t\t\toutput_string = number_text.join(\"\");\n\t\t}\n\t\telse if(scale > 0) {\n\t\t\toutput_string = number_text.join(\"\");\n\t\t\toutput_string = output_string.substring(0, output_string.length - scale);\n\t\t\toutput_string = output_string.length !== 0 ? output_string : \"0\";\n\t\t}\n\t\treturn output_string;\n\t}\n\n\t/**\n\t * Return a hexadecimal array from the number.\n\t * @param {number} num - Target number.\n\t * @returns {{element : Array<number>, _sign : number}} Data for BigInteger.\n\t */\n\tstatic toBigIntegerFromNumber(num) {\n\t\tlet x;\n\t\tlet sign;\n\t\tif(num === 0) {\n\t\t\tsign = 0;\n\t\t\tx = 0;\n\t\t}\n\t\telse if(num > 0) {\n\t\t\tsign = 1;\n\t\t\tx = num;\n\t\t}\n\t\telse {\n\t\t\tsign = -1;\n\t\t\tx = -num;\n\t\t}\n\t\tif(x > 0xFFFFFFFF) {\n\t\t\treturn {\n\t\t\t\telement : IntegerTool.toHexadecimalArrayFromPlainString(IntegerTool.toPlainStringFromString(x.toFixed()), 10),\n\t\t\t\t_sign : sign\n\t\t\t};\n\t\t}\n\t\tconst y = [];\n\t\twhile(x !==  0) {\n\t\t\ty[y.length] = x & 1;\n\t\t\tx >>>= 1;\n\t\t}\n\t\tconst z = [];\n\t\tfor(let i = 0; i < y.length; i++) {\n\t\t\tz[i >>> 4] |= y[i] << (i & 0xF);\n\t\t}\n\t\t\n\t\treturn {\n\t\t\telement : z,\n\t\t\t_sign : sign\n\t\t};\n\t}\n\n\t/**\n\t * Return string of number from a hexadecimal array.\n\t * @param {Array<number>} binary - Hex array.\n\t * @param {number} radix - Base number.\n\t * @returns {Array<number>} Numeric array for each digit in the specified base number.\n\t */\n\tstatic toPlainStringFromHexadecimalArray(binary, radix) {\n\t\tconst add = function(x1, x2, y) {\n\t\t\tconst size = x1.length;\n\t\t\tlet carry = 0;\n\t\t\tfor(let i = 0; i < size; i++) {\n\t\t\t\ty[i] = x1[i] + ((x2.length >= (i + 1)) ? x2[i] : 0) + carry;\n\t\t\t\tif(y[i] >= radix) {\n\t\t\t\t\tcarry = 1;\n\t\t\t\t\ty[i] -= radix;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(carry === 1) {\n\t\t\t\ty[size] = 1;\n\t\t\t}\n\t\t};\n\t\tconst y = [0];\n\t\tconst t = [1];\n\t\tfor(let i = 0;i < binary.length;i++) {\n\t\t\tfor(let j = 0; j < 16; j++) {\n\t\t\t\tif((binary[i] >>> j) & 1) {\n\t\t\t\t\tadd(t, y, y);\n\t\t\t\t}\n\t\t\t\tadd(t, t, t);\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Return data to represent multi-precision numbers from strings.\n\t * @param {string} text - String containing a number.\n\t * @param {number} [radix=10] - Base number.\n\t * @returns {{element : Array<number>, _sign : number}} Data for BigInteger.\n\t */\n\tstatic toBigIntegerFromString(text, radix) {\n\t\tlet x = text.replace(/\\s/g, \"\").toLowerCase();\n\t\tconst sign_text = x.match(/^[-+]+/);\n\n\t\tlet element     = [];\n\t\tlet _sign        = 1;\n\n\t\tif(sign_text !== null) {\n\t\t\tconst hit_text = sign_text[0];\n\t\t\tx = x.substring(hit_text.length, x.length);\n\t\t\tif(hit_text.indexOf(\"-\") !== -1) {\n\t\t\t\t_sign = -1;\n\t\t\t}\n\t\t}\n\n\t\tif(radix) {\n\t\t\telement = IntegerTool.toHexadecimalArrayFromPlainString(x, radix);\n\t\t}\n\t\telse if(/^0x/.test(x)) {\n\t\t\telement = IntegerTool.toHexadecimalArrayFromPlainString(x.substring(2, x.length), 16);\n\t\t}\n\t\telse if(/^0b/.test(x)) {\n\t\t\telement = IntegerTool.toHexadecimalArrayFromPlainString(x.substring(2, x.length), 2);\n\t\t}\n\t\telse if(/^0o/.test(x)) {\n\t\t\telement = IntegerTool.toHexadecimalArrayFromPlainString(x.substring(2, x.length), 8);\n\t\t}\n\t\telse {\n\t\t\tx = IntegerTool.toPlainStringFromString(x);\n\t\t\telement = IntegerTool.toHexadecimalArrayFromPlainString(x, 10);\n\t\t}\n\t\t// \"0\"の場合がある為\n\t\tif((element.length === 1)&&(element[0] === 0)) {\n\t\t\telement = [];\n\t\t\t_sign = 0;\n\t\t}\n\n\t\treturn {\n\t\t\telement : element,\n\t\t\t_sign : _sign\n\t\t};\n\t}\n}\n\n// 内部では1変数内の中の16ビットごとに管理\n// 2変数で16ビット*16ビットで32ビットを表す\n// this.element\t...\t16ビットごとに管理\n// this._sign\t...\t負なら-1、正なら1、ゼロなら0\n//\n// 本クラスはイミュータブルです。\n// 内部の「_」から始まるメソッドは内部計算用で非公開です。またミュータブルです。\n\n/**\n * Arbitrary-precision integer class (immutable).\n */\nexport default class BigInteger {\n\n\t/**\n\t * Create an arbitrary-precision integer.\n\t * \n\t * Initialization can be performed as follows.\n\t * - 1200, \"1200\", \"12e2\", \"1.2e3\", [\"1200\", 10]\n\t * - \"0xff\", [\"ff\", 16]\n\t * - \"0o01234567\", [\"01234567\", 8]\n\t * - \"0b0110101\", [\"0110101\", 2]\n\t * @param {BigInteger|number|string|Array<string|number>|Object} [number] - Numeric data. See how to use the function.\n\t */\n\tconstructor(number) {\n\t\t\n\t\tif(arguments.length === 0) {\n\n\t\t\t/**\n\t\t\t * An integer consisting of 16 bits per element of the array.\n\t\t\t * @private\n\t\t\t * @type {Array<number>}\n\t\t\t */\n\t\t\tthis.element     = [];\n\n\t\t\t/**\n\t\t\t * Positive or negative signs of number.\n\t\t\t * - +1 if positive, -1 if negative, 0 if 0.\n\t\t\t * - This value may not be correct ?\n\t\t\t * @private\n\t\t\t * @type {number}\n\t\t\t */\n\t\t\tthis._sign        = 0;\n\t\t}\n\t\telse if(arguments.length === 1) {\n\t\t\tthis._sign = 1;\n\t\t\tif(number instanceof BigInteger) {\n\t\t\t\tthis.element = number.element.slice(0);\n\t\t\t\tthis._sign = number._sign;\n\t\t\t}\n\t\t\telse if(typeof number === \"number\") {\n\t\t\t\tconst x = IntegerTool.toBigIntegerFromNumber(number);\n\t\t\t\tthis.element = x.element;\n\t\t\t\tthis._sign = x._sign;\n\t\t\t}\n\t\t\telse if(typeof number === \"string\") {\n\t\t\t\tconst x = IntegerTool.toBigIntegerFromString(number);\n\t\t\t\tthis.element = x.element;\n\t\t\t\tthis._sign = x._sign;\n\t\t\t}\n\t\t\telse if(number instanceof Array) {\n\t\t\t\tif((number.length === 2) && (typeof number[0] === \"string\")) {\n\t\t\t\t\tconst x = IntegerTool.toBigIntegerFromString(number[0], number[1]);\n\t\t\t\t\tthis.element = x.element;\n\t\t\t\t\tthis._sign = x._sign;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow \"BigInteger Unsupported argument \" + arguments;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if((number instanceof Object) && (number.toBigInteger)) {\n\t\t\t\tconst x = number.toBigInteger();\n\t\t\t\tthis.element = x.element;\n\t\t\t\tthis._sign = x._sign;\n\t\t\t}\n\t\t\telse if((number instanceof Object) && (number.intValue)) {\n\t\t\t\tconst x = IntegerTool.toBigIntegerFromNumber(number.intValue);\n\t\t\t\tthis.element = x.element;\n\t\t\t\tthis._sign = x._sign;\n\t\t\t}\n\t\t\telse if(number instanceof Object) {\n\t\t\t\tconst x = IntegerTool.toBigIntegerFromString(number.toString());\n\t\t\t\tthis.element = x.element;\n\t\t\t\tthis._sign = x._sign;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow \"BigInteger Unsupported argument \" + number;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow \"BigInteger Unsupported argument \" + number;\n\t\t}\n\t}\n\n\t/**\n\t * Create an entity object of this class.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger}\n\t */\n\tstatic create(number) {\n\t\tif(number instanceof BigInteger) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new BigInteger(number);\n\t\t}\n\t}\n\n\t/**\n\t * Create an arbitrary-precision integer.\n\t * - Does not support strings using exponential notation.\n\t * - If you want to initialize with the specified base number, please set up with an array [\"ff\", 16].\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger}\n\t */\n\tstatic valueOf(number) {\n\t\treturn BigInteger.create(number);\n\t}\n\n\t/**\n\t * Convert to BigInteger.\n\t * If type conversion is unnecessary, return the value as it is.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger}\n\t * @private\n\t */\n\tstatic _toBigInteger(number) {\n\t\tif(number instanceof BigInteger) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new BigInteger(number);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to real number.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toFloat(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn number;\n\t\t}\n\t\telse if(number instanceof BigInteger) {\n\t\t\treturn number.doubleValue;\n\t\t}\n\t\telse {\n\t\t\treturn (new BigInteger(number)).doubleValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert to integer.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toInteger(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn Math.trunc(number);\n\t\t}\n\t\telse if(number instanceof BigInteger) {\n\t\t\treturn number.intValue;\n\t\t}\n\t\telse {\n\t\t\treturn (new BigInteger(number)).intValue;\n\t\t}\n\t}\n\n\t/**\n\t * Random number of specified bit length.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} bitsize - Bit length.\n\t * @param {Random} [random] - Class for creating random numbers.\n\t * @returns {BigInteger}\n\t */\n\tstatic createRandomBigInteger(bitsize, random) {\n\t\tconst rand = (random && (random instanceof Random)) ? random : DEFAULT_RANDOM;\n\t\tconst x = new BigInteger();\n\t\tx._sign = 1;\n\t\tconst bits = BigInteger._toInteger(bitsize);\n\t\tconst size = ((bits - 1) >> 4) + 1;\n\t\tif(bits === 0) {\n\t\t\treturn BigInteger.ZERO;\n\t\t}\n\t\tlet r;\n\t\tfor(let i = 0, j = 0; i < size; i++) {\n\t\t\tif(j === 0) {\n\t\t\t\tr = rand.nextInt(); // 32ビットずつ作成する\n\t\t\t\tx.element[i] = r & 0xFFFF;\n\t\t\t\tj = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tx.element[i] = (r >>> 16) & 0xFFFF;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t\t// 1～15ビット余る場合は、16ビットずつ作成しているので削る\n\t\tif((bits % 16) !== 0) {\n\t\t\tx.element[x.element.length - 1] &= (1 << (bits % 16)) - 1;\n\t\t}\n\t\t// 最後のビットに 0 をたくさん作成していると、\n\t\t// 0のみのデータになる可能性があるためメモリを修正\n\t\tx._memory_reduction();\n\t\treturn x;\n\t}\n\n\t/**\n\t * Convert to string.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} [radix=10] - Base number.\n\t * @returns {string}\n\t */\n\ttoString(radix) {\n\t\tconst radix_ = radix ? BigInteger._toInteger(radix) : 10;\n\n\t\t// int型で扱える数値で toString が可能なので、\n\t\t// せっかくだからより大きな進数で計算していけば、あとでtoStringする回数が減るテクニック\n\t\t// 2進数であれば、2^n乗で計算しても問題がない 4進数や8進数で計算して、2進数に戻せば巡回少数なし\n\t\t// v0.03 出来る限りまとめてn進数変換する\n\t\tconst max_num = 0x3FFFFFFF;\n\t\t//                        max_num > radix^x\n\t\t// floor(log max_num / log radix) = x\n\t\tconst keta = Math.floor( Math.log(max_num) / Math.log(radix_) );\n\t\tconst calcradix = Math.round(Math.pow(radix_, keta));\n\t\t// zeros = \"00000000....\"\n\t\tconst zeros_array = [];\n\t\tfor(let i = 0; i < keta; i++) {\n\t\t\tzeros_array[i] = \"0\";\n\t\t}\n\t\tconst zeros_string = zeros_array.join(\"\");\n\t\t// v0.03ここまで\n\t\tconst x = IntegerTool.toPlainStringFromHexadecimalArray(this.element, calcradix);\n\t\tconst y = [];\n\t\tlet z = \"\";\n\t\tif(this.signum() < 0) {\n\t\t\ty[y.length] = \"-\";\n\t\t}\n\t\tfor(let i = x.length - 1; i >= 0; i--) {\n\t\t\tz = x[i].toString(radix_);\n\t\t\tif(i < (x.length - 1)) {\n\t\t\t\ty[y.length] = zeros_string.substring(0, keta - z.length);\n\t\t\t}\n\t\t\ty[y.length] = z;\n\t\t}\n\t\treturn y.join(\"\");\n\t}\n\n\t/**\n\t * Deep copy.\n\t * @returns {BigInteger}\n\t */\n\tclone() {\n\t\treturn new BigInteger(this);\n\t}\n\n\t/**\n\t * Create a numerical value for addition. If negative, two's complement.\n\t * @param {number} [bit_length] - Bit length. If not set, it will be calculated automatically.\n\t * @returns {BigInteger}\n\t * @private\n\t */\n\tgetTwosComplement(bit_length) {\n\t\tconst y = this.clone();\n\t\tif(y._sign >= 0) {\n\t\t\treturn y;\n\t\t}\n\t\telse {\n\t\t\t// 正にする\n\t\t\ty._sign = 1;\n\t\t\t// ビットの数が存在しない場合は数える\n\t\t\tconst len = (bit_length !== undefined) ? bit_length : y.bitLength();\n\t\t\tconst e = y.element;\n\t\t\t// ビット反転後\n\t\t\tfor(let i = 0; i < e.length; i++) {\n\t\t\t\te[i] ^= 0xFFFF;\n\t\t\t}\n\t\t\t// 1～15ビット余る場合は、16ビットずつ作成しているので削る\n\t\t\t// nビットのマスク（なお負の値を表す最上位ビットは削除する）\n\t\t\tif((len % 16) !== 0) {\n\t\t\t\te[e.length - 1] &= (1 << (len % 16)) - 1;\n\t\t\t}\n\t\t\t// 1を加算\n\t\t\ty._add(new BigInteger(1));\n\t\t\treturn y;\n\t\t}\n\t}\n\n\t/**\n\t * Expand memory to specified bit length. (mutable)\n\t * @param {number} bit_length - Bit length.\n\t * @private\n\t */\n\t_memory_allocation(bit_length) {\n\t\tconst n = BigInteger._toInteger(bit_length);\n\t\tconst elementsize = this.element.length << 4;\n\t\tif(elementsize < n) {\n\t\t\tconst addsize = (((n - elementsize - 1) & 0xFFFFFFF0) >>> 4) + 1;\n\t\t\tfor(let i = 0;i < addsize;i++) {\n\t\t\t\tthis.element[this.element.length] = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Normalization of the internal data. (mutable)\n\t * @private\n\t */\n\t_memory_reduction() {\n\t\tfor(let i = this.element.length - 1;i >= 0;i--) {\n\t\t\tif(this.element[i] !==  0) {\n\t\t\t\tif(i < this.element.length - 1) {\n\t\t\t\t\tthis.element.splice(i + 1, this.element.length - i - 1);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis._sign = 0;\n\t\tthis.element = [];\n\t}\n\n\t/**\n\t * Absolute value. (mutable)\n\t * @returns {BigInteger} A = abs(A)\n\t * @private\n\t */\n\t_abs() {\n\t\t// -1 -> 1, 0 -> 0, 1 -> 1\n\t\tthis._sign *= this._sign;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Absolute value.\n\t * @returns {BigInteger} abs(A)\n\t */\n\tabs() {\n\t\treturn this.clone()._abs();\n\t}\n\n\t/**\n\t * this *= -1\n\t * @returns {BigInteger} A = -A\n\t * @private\n\t */\n\t_negate() {\n\t\tthis._sign *= -1;\n\t\treturn this;\n\t}\n\n\t/**\n\t * this * -1\n\t * @returns {BigInteger} -A\n\t */\n\tnegate() {\n\t\treturn this.clone()._negate();\n\t}\n\n\t/**\n\t * The positive or negative sign of this number.\n\t * - +1 if positive, -1 if negative, 0 if 0.\n\t * @returns {number}\n\t */\n\tsignum() {\n\t\tif(this.element.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this._sign;\n\t}\n\n\t/**\n\t * The positive or negative sign of this number.\n\t * - +1 if positive, -1 if negative, 0 if 0.\n\t * @returns {number}\n\t */\n\tsign() {\n\t\treturn this.signum();\n\t}\n\n\t// ----------------------\n\t// 四則演算\n\t// ----------------------\n\t\n\t/**\n\t * Add. (mutable)\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A += B\n\t * @private\n\t */\n\t_add(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst o1 = this;\n\t\tconst o2 = val;\n\t\tlet x1 = o1.element;\n\t\tlet x2 = o2.element;\n\t\tif(o1._sign === o2._sign) {\n\t\t\t//足し算\n\t\t\tthis._memory_allocation(x2.length << 4);\n\t\t\tlet carry = 0;\n\t\t\tfor(let i = 0; i < x1.length; i++) {\n\t\t\t\tx1[i] += ((x2.length >= (i + 1)) ? x2[i] : 0) + carry;\n\t\t\t\tif(x1[i] > 0xFFFF) {\n\t\t\t\t\tcarry = 1;\n\t\t\t\t\tx1[i] &= 0xFFFF;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(carry !== 0) {\n\t\t\t\tx1[x1.length] = carry;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// 引き算\n\t\t\tconst compare = o1.compareToAbs(o2);\n\t\t\tif(compare === 0) {\n\t\t\t\tthis.element = [];\n\t\t\t\tthis._sign = 1;\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\telse if(compare === -1) {\n\t\t\t\tthis._sign = o2._sign;\n\t\t\t\tconst swap = x1;\n\t\t\t\tx1 = x2.slice(0);\n\t\t\t\tx2 = swap;\n\t\t\t}\n\t\t\tlet carry = 0;\n\t\t\tfor(let i = 0; i < x1.length; i++) {\n\t\t\t\tx1[i] -= ((x2.length >= (i + 1)) ? x2[i] : 0) + carry;\n\t\t\t\tif(x1[i] < 0) {\n\t\t\t\t\tx1[i] += 0x10000;\n\t\t\t\t\tcarry  = 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry  = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.element = x1;\n\t\t\tthis._memory_reduction();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A + B\n\t */\n\tadd(number) {\n\t\treturn this.clone()._add(number);\n\t}\n\n\t/**\n\t * Subtract. (mutable)\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A -= B\n\t * @private\n\t */\n\t_subtract(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst _sign = val._sign;\n\t\tconst out  = this._add(val._negate());\n\t\tval._sign = _sign;\n\t\treturn out;\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A - B\n\t */\n\tsubtract(number) {\n\t\treturn this.clone()._subtract(number);\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A - B\n\t */\n\tsub(number) {\n\t\treturn this.subtract(number);\n\t}\n\n\t/**\n\t * Multiply. (mutable)\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A *= B\n\t * @private\n\t */\n\t_multiply(number) {\n\t\tconst x = this.multiply(number);\n\t\tthis.element = x.element;\n\t\tthis._sign    = x._sign;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A * B\n\t */\n\tmultiply(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst out  = new BigInteger();\n\t\tconst buff = new BigInteger();\n\t\tconst o1 = this;\n\t\tconst o2 = val;\n\t\tconst x1 = o1.element;\n\t\tconst x2 = o2.element;\n\t\tconst y  = out.element;\n\t\tfor(let i = 0; i < x1.length; i++) {\n\t\t\tbuff.element = [];\n\t\t\t// x3 = x1[i] * x2\n\t\t\tconst x3 = buff.element;\n\t\t\tlet carry = 0;\n\t\t\tfor(let j = 0; j < x2.length; j++) {\n\t\t\t\tx3[j] = x1[i] * x2[j] + carry;\n\t\t\t\tif(x3[j] > 0xFFFF) {\n\t\t\t\t\tcarry = x3[j] >>> 16;\n\t\t\t\t\tx3[j] &= 0xFFFF;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(carry !== 0) {\n\t\t\t\tx3[x3.length] = carry;\n\t\t\t}\n\t\t\t// x3 = x3 << (i * 16)\n\t\t\t//buff._shift(i << 4);\n\t\t\tfor(let j = x3.length - 1; j >= 0; j--) {\n\t\t\t\tx3[j + i] = x3[j];\n\t\t\t}\n\t\t\tfor(let j = i - 1; j >= 0; j--) {\n\t\t\t\tx3[j] = 0;\n\t\t\t}\n\t\t\t// y = y + x3 (out._add(buff))\n\t\t\t//out._add(buff);\n\t\t\tcarry = 0;\n\t\t\tout._memory_allocation(x3.length << 4);\n\t\t\tfor(let j = i; j < y.length; j++) {\n\t\t\t\ty[j] += ((x3.length >= (j + 1)) ? x3[j] : 0) + carry;\n\t\t\t\tif(y[j] > 0xFFFF) {\n\t\t\t\t\tcarry = 1;\n\t\t\t\t\ty[j] &= 0xFFFF;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(carry !== 0) {\n\t\t\t\ty[y.length] = carry;\n\t\t\t}\n\t\t}\n\t\tout._sign = this._sign * val._sign;\n\t\treturn out;\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A * B\n\t */\n\tmul(number) {\n\t\treturn this.multiply(number);\n\t}\n\n\t/**\n\t * Divide and remainder. (mutable)\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {Array<BigInteger>} [C = fix(A / B), A - C * B]\n\t * @private\n\t */\n\t_divideAndRemainder(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst out = [];\n\t\tif(val.signum() === 0) {\n\t\t\tthrow \"BigInteger divideAndRemainder [\" + val.toString() +\"]\";\n\t\t}\n\t\tconst compare = this.compareToAbs(val);\n\t\tif(compare < 0) {\n\t\t\tout[0] = new BigInteger(0);\n\t\t\tout[1] = this.clone();\n\t\t\treturn out;\n\t\t}\n\t\telse if(compare === 0) {\n\t\t\tout[0] = new BigInteger(1);\n\t\t\tout[0]._sign = this._sign * val._sign;\n\t\t\tout[1] = new BigInteger(0);\n\t\t\treturn out;\n\t\t}\n\t\tconst ONE = new BigInteger(1);\n\t\tconst size = this.bitLength() - val.bitLength();\n\t\tconst x1 = this.clone()._abs();\n\t\tconst x2 = val.shift(size)._abs();\n\t\tconst y  = new BigInteger();\n\t\tfor(let i = 0; i <= size; i++) {\n\t\t\tif(x1.compareToAbs(x2) >= 0) {\n\t\t\t\tx1._subtract(x2);\n\t\t\t\ty._add(ONE);\n\t\t\t}\n\t\t\tif(i === size) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx2._shift(-1);\n\t\t\ty._shift(1);\n\t\t}\n\t\tout[0] = y;\n\t\tout[0]._sign = this._sign * val._sign;\n\t\tout[1] = x1;\n\t\tout[1]._sign = this._sign;\n\t\treturn out;\n\t}\n\n\t/**\n\t * Divide and remainder.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {Array<BigInteger>} [C = fix(A / B), A - C * B]\n\t */\n\tdivideAndRemainder(number) {\n\t\treturn this.clone()._divideAndRemainder(number);\n\t}\n\n\t/**\n\t * Divide. (mutable)\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} fix(A / B)\n\t * @private\n\t */\n\t_divide(number) {\n\t\treturn this._divideAndRemainder(number)[0];\n\t}\n\n\t/**\n\t * Divide.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} fix(A / B)\n\t */\n\tdivide(number) {\n\t\treturn this.clone()._divide(number);\n\t}\n\n\t/**\n\t * Divide.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} fix(A / B)\n\t */\n\tdiv(number) {\n\t\treturn this.divide(number);\n\t}\n\n\t/**\n\t * Remainder of division. (mutable)\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A %= B\n\t * @private\n\t */\n\t_remainder(number) {\n\t\treturn this._divideAndRemainder(number)[1];\n\t}\n\n\t/**\n\t * Remainder of division.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A % B\n\t */\n\tremainder(number) {\n\t\treturn this.clone()._remainder(number);\n\t}\n\n\t/**\n\t * Remainder of division.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A % B\n\t */\n\trem(number) {\n\t\treturn this.remainder(number);\n\t}\n\n\t/**\n\t * Modulo, positive remainder of division. (mutable)\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A = A mod B\n\t * @private\n\t */\n\t_mod(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tif(val.signum() < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tconst y = this._divideAndRemainder(val);\n\t\tif(y[1] instanceof BigInteger) {\n\t\t\tif(y[1].signum() >= 0) {\n\t\t\t\treturn y[1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn y[1]._add(val);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Modulo, positive remainder of division.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A mod B\n\t */\n\tmod(number) {\n\t\treturn this.clone()._mod(number);\n\t}\n\n\t/**\n\t * Power function.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} exponent\n\t * @returns {BigInteger} pow(A, B)\n\t */\n\tpow(exponent) {\n\t\tconst e = new BigInteger(exponent);\n\t\tlet x = BigInteger._toBigInteger(this);\n\t\tlet y = BigInteger._toBigInteger(1);\n\t\twhile(e.element.length !== 0) {\n\t\t\tif((e.element[0] & 1) !== 0) {\n\t\t\t\ty = y.multiply(x);\n\t\t\t}\n\t\t\tx = x.multiply(x);\n\t\t\te._shift(-1);\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Modular exponentiation.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} exponent\n\t * @param {BigInteger|number|string|Array<string|number>|Object} m \n\t * @returns {BigInteger} A^B mod m\n\t */\n\tmodPow(exponent, m) {\n\t\tconst m_ = BigInteger._toBigInteger(m);\n\t\tlet x = new BigInteger(this);\n\t\tlet y = new BigInteger(1);\n\t\tconst e = new BigInteger(exponent);\n\t\twhile(e.element.length !== 0) {\n\t\t\tif((e.element[0] & 1) !== 0) {\n\t\t\t\ty = y.multiply(x).mod(m_);\n\t\t\t}\n\t\t\tx = x.multiply(x).mod(m_);\n\t\t\te._shift(-1);\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Modular multiplicative inverse.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} m\n\t * @returns {BigInteger} A^(-1) mod m\n\t */\n\tmodInverse(m) {\n\t\tconst m_ = BigInteger._toBigInteger(m);\n\t\tconst y = this.extgcd(m);\n\t\tconst ONE  = new BigInteger(1);\n\t\tif(y[2].compareTo(ONE) !== 0) {\n\t\t\treturn null;\n\t\t}\n\t\t// 正にするため remainder ではなく mod を使用する\n\t\treturn y[0]._add(m_)._mod(m_);\n\t}\n\n\t// ----------------------\n\t// その他の演算\n\t// ----------------------\n\t\n\t/**\n\t * Factorial function, x!.\n\t * @returns {BigInteger} n!\n\t */\n\tfactorial() {\n\t\tconst loop_max = BigInteger._toInteger(this);\n\t\tlet x = BigInteger.ONE;\n\t\tfor(let i = 2; i <= loop_max; i++) {\n\t\t\tx = x.multiply(i);\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * Multiply a multiple of ten.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} n\n\t * @returns {BigInteger} x * 10^n\n\t */\n\tscaleByPowerOfTen(n) {\n\t\tconst x = BigInteger._toInteger(n);\n\t\tif(x === 0) {\n\t\t\treturn this;\n\t\t}\n\t\tif(x > 0) {\n\t\t\treturn this.mul(BigInteger.TEN.pow(x));\n\t\t}\n\t\telse {\n\t\t\treturn this.div(BigInteger.TEN.pow(x));\n\t\t}\n\t}\n\n\t// ----------------------\n\t// 環境設定用\n\t// ----------------------\n\t\n\t/**\n\t * Set default class of random.\n\t * This is used if you do not specify a random number.\n\t * @param {Random} random\n\t */\n\tstatic setDefaultRandom(random) {\n\t\tDEFAULT_RANDOM = random;\n\t}\n\n\t/**\n\t * Return default Random class.\n\t * Used when Random not specified explicitly.\n\t * @returns {Random}\n\t */\n\tstatic getDefaultRandom() {\n\t\treturn DEFAULT_RANDOM;\n\t}\n\n\t// ----------------------\n\t// 他の型に変換用\n\t// ----------------------\n\t\n\t/**\n\t * Value at the specified position of the internally used array that composed of hexadecimal numbers.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} point - Array address.\n\t * @returns {number}\n\t */\n\tgetShort(point) {\n\t\tconst n = BigInteger._toInteger(point);\n\t\tif((n < 0) || (this.element.length <= n)) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.element[n];\n\t}\n\n\t/**\n\t * 32-bit integer value.\n\t * - If it is outside the range of JavaScript Number, it will not be an accurate number.\n\t * @returns {number}\n\t */\n\tget intValue() {\n\t\tlet x = this.getShort(0) + (this.getShort(1) << 16);\n\t\tx &= 0xFFFFFFFF;\n\t\tif((x > 0)&&(this._sign < 0)) {\n\t\t\tx = -x;\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 64-bit integer value.\n\t * - If it is outside the range of JavaScript Number, it will not be an accurate number.\n\t * @returns {number}\n\t */\n\tget longValue() {\n\t\tlet x = 0;\n\t\tfor(let i = 3; i >= 0; i--) {\n\t\t\tx *= 65536;\n\t\t\tx += this.getShort(i);\n\t\t}\n\t\tif(this._sign < 0) {\n\t\t\tx = -x;\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 64-bit floating point.\n\t * - If it is outside the range of JavaScript Number, it will not be an accurate number.\n\t * @returns {number}\n\t */\n\tget doubleValue() {\n\t\treturn parseFloat(this.toString());\n\t}\n\t\n\t// ----------------------\n\t// gcd, lcm\n\t// ----------------------\n\t\n\t/**\n\t * Euclidean algorithm.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} gcd(x, y)\n\t */\n\tgcd(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\t/**\n\t\t * @type {any}\n\t\t */\n\t\tlet x = this, y = val, z;\n\t\twhile(y.signum() !== 0) {\n\t\t\tz = x.remainder(y);\n\t\t\tx = y;\n\t\t\ty = z;\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * Extended Euclidean algorithm.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {Array<BigInteger>} [a, b, gcd(x, y)], Result of calculating a*x + b*y = gcd(x, y).\n\t */\n\textgcd(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\t// 非再帰\n\t\tconst ONE  = new BigInteger(1);\n\t\tconst ZERO = new BigInteger(0);\n\t\t/**\n\t\t * @type {any}\n\t\t */\n\t\tlet r0 = this, r1 = val, r2, q1;\n\t\tlet a0 = ONE,  a1 = ZERO, a2;\n\t\tlet b0 = ZERO, b1 = ONE,  b2;\n\t\twhile(r1.signum() !== 0) {\n\t\t\tconst y = r0.divideAndRemainder(r1);\n\t\t\tq1 = y[0];\n\t\t\tr2 = y[1];\n\t\t\ta2 = a0.subtract(q1.multiply(a1));\n\t\t\tb2 = b0.subtract(q1.multiply(b1));\n\t\t\ta0 = a1;\n\t\t\ta1 = a2;\n\t\t\tb0 = b1;\n\t\t\tb1 = b2;\n\t\t\tr0 = r1;\n\t\t\tr1 = r2;\n\t\t}\n\t\treturn [a0, b0, r0];\n\t}\n\n\t/**\n\t * Least common multiple.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} lcm(x, y)\n\t */\n\tlcm(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\treturn this.mul(val).div(this.gcd(val));\n\t}\n\n\t// ----------------------\n\t// 比較\n\t// ----------------------\n\t\n\t/**\n\t * Equals.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {boolean} A === B\n\t */\n\tequals(number) {\n\t\tconst x = BigInteger._toBigInteger(number);\n\t\tif(this.signum() !== x.signum()) {\n\t\t\treturn false;\n\t\t}\n\t\tif(this.element.length !== x.element.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor(let i = 0; i < x.element.length; i++) {\n\t\t\tif(this.element[i] !==  x.element[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Compare values without sign.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {number} abs(A) < abs(B) ? 1 : (abs(A) === abs(B) ? 0 : -1)\n\t */\n\tcompareToAbs(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tif(this.element.length < val.element.length) {\n\t\t\treturn -1;\n\t\t}\n\t\telse if(this.element.length > val.element.length) {\n\t\t\treturn 1;\n\t\t}\n\t\tfor(let i = this.element.length - 1;i >= 0;i--) {\n\t\t\tif(this.element[i] !== val.element[i]) {\n\t\t\t\tconst x = this.element[i] - val.element[i];\n\t\t\t\treturn ( (x === 0) ? 0 : ((x > 0) ? 1 : -1) );\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Compare values.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {number} A > B ? 1 : (A === B ? 0 : -1)\n\t */\n\tcompareTo(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tif(this.signum() !== val.signum()) {\n\t\t\tif(this._sign > val._sign) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\telse if(this.signum() === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.compareToAbs(val) * this._sign;\n\t}\n\n\t/**\n\t * Maximum number.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} max([A, B])\n\t */\n\tmax(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tif(this.compareTo(val) >= 0) {\n\t\t\treturn this.clone();\n\t\t}\n\t\telse {\n\t\t\treturn val.clone();\n\t\t}\n\t}\n\n\t/**\n\t * Minimum number.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} min([A, B])\n\t */\n\tmin(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tif(this.compareTo(val) >= 0) {\n\t\t\treturn val.clone();\n\t\t}\n\t\telse {\n\t\t\treturn this.clone();\n\t\t}\n\t}\n\n\t/**\n\t * Clip number within range.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} min \n\t * @param {BigInteger|number|string|Array<string|number>|Object} max\n\t * @returns {BigInteger} min(max(x, min), max)\n\t */\n\tclip(min, max) {\n\t\tconst min_ = BigInteger._toBigInteger(min);\n\t\tconst max_ = BigInteger._toBigInteger(max);\n\t\tconst arg_check = min_.compareTo(max_);\n\t\tif(arg_check === 1) {\n\t\t\tthrow \"clip(min, max) error. (min > max)->(\" + min_ + \" > \" + max_ + \")\";\n\t\t}\n\t\telse if(arg_check === 0) {\n\t\t\treturn min_;\n\t\t}\n\t\tif(this.compareTo(max_) === 1) {\n\t\t\treturn max_;\n\t\t}\n\t\telse if(this.compareTo(min_) === -1) {\n\t\t\treturn min_;\n\t\t}\n\t\treturn this;\n\t}\n\n\t// ----------------------\n\t// 素数系\n\t// ----------------------\n\t\n\t/**\n\t * Prime represented within the specified bit length.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} bits - Bit length.\n\t * @param {Random} [random] - Class for creating random numbers.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} [certainty=100] - Repeat count (prime precision).\n\t * @param {BigInteger|number|string|Array<string|number>|Object} [create_count=500] - Number of times to retry if prime generation fails.\n\t * @returns {BigInteger}\n\t */\n\tstatic probablePrime(bits, random, certainty, create_count ) {\n\t\tconst certainty_ = certainty ? BigInteger._toInteger(certainty) : 100;\n\t\tconst create_count_ = create_count ? BigInteger._toInteger(create_count) : 500;\n\t\tfor(let i = 0; i < create_count_; i++) {\n\t\t\tconst x = BigInteger.createRandomBigInteger(bits, random);\n\t\t\tif(x.isProbablePrime(certainty_)) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\t\tthrow \"probablePrime \" + create_count;\n\t}\n\n\t/**\n\t * Return true if the value is prime number by Miller-Labin prime number determination method.\n\t * Attention : it takes a very long time to process.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} [certainty=100] - Repeat count (prime precision).\n\t * @returns {boolean}\n\t */\n\tisProbablePrime(certainty) {\n\t\tconst e = this.element;\n\t\t//0, 1, 2 -> true\n\t\tif( (e.length === 0) || ((e.length === 1)&&(e[0] <= 2)) ) {\n\t\t\treturn true;\n\t\t}\n\t\t//even number -> false\n\t\telse if((e[0] & 1) === 0) {\n\t\t\treturn false;\n\t\t}\n\t\t// ミラーラビン素数判定法\n\t\t// かなり処理が重たいです。まあお遊び程度に使用という感じで。\n\t\tconst loop\t= certainty !== undefined ? BigInteger._toInteger(certainty) : 100;\n\t\tconst ZERO\t= new BigInteger(0);\n\t\tconst ONE\t= new BigInteger(1);\n\t\tconst n\t\t= this;\n\t\tconst LEN\t= n.bitLength();\n\t\tconst n_1\t= n.subtract(ONE);\n\t\tconst s \t= n_1.getLowestSetBit();\n\t\tconst d \t= n_1.shift(-s);\n\n\t\tif(loop <= 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor(let i = 0; i < loop; i++ ) {\n\t\t\t//[ 1, n - 1] の範囲から a を選択\n\t\t\tlet a;\n\t\t\tdo {\n\t\t\t\ta = BigInteger.createRandomBigInteger(LEN);\n\t\t\t} while(( a.compareTo(ZERO) === 0 )||( a.compareTo(n) !== -1 ));\n\n\t\t\tlet t = d;\n\t\t\t// a^t != 1 mod n\n\t\t\tlet y = a.modPow(t, n);\n\t\t\t\n\t\t\twhile(true) {\n\t\t\t\tif((t.equals(n_1)) || (y.equals(ONE)) || (y.equals(n_1))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ty = y.mul(y)._mod(n);\n\t\t\t\tt = t.shiftLeft(1);\n\t\t\t}\n\n\t\t\tif((!y.equals(n_1)) && ((t.element[0] & 1) === 0)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Next prime.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} [certainty=100] - Repeat count (prime precision).\n\t * @param {BigInteger|number|string|Array<string|number>|Object} [search_max=100000] - Search range of next prime.\n\t * @returns {BigInteger}\n\t */\n\tnextProbablePrime(certainty, search_max) {\n\t\tconst loop\t= certainty !== undefined ? (BigInteger._toInteger(certainty) >> 1) : 100 / 2;\n\t\tconst search_max_ = search_max !== undefined ? BigInteger._toInteger(search_max) : 100000;\n\t\tconst x = this.clone();\n\t\tfor(let i = 0; i < search_max_; i++) {\n\t\t\tx._add(BigInteger.ONE);\n\t\t\tif(x.isProbablePrime(loop)) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\t\tthrow \"nextProbablePrime [\" + search_max_ +\"]\";\n\t}\n\n\t// ----------------------\n\t// シフト演算系\n\t// ----------------------\n\t\n\t/**\n\t * this <<= n\n\t * @param {BigInteger|number|string|Array<string|number>|Object} shift_length - Bit shift size.\n\t * @returns {BigInteger} A <<= n\n\t * @private\n\t */\n\t_shift(shift_length) {\n\t\tlet n = BigInteger._toInteger(shift_length);\n\t\tif(n === 0) {\n\t\t\treturn this;\n\t\t}\n\t\tconst x = this.element;\n\t\t// 1ビットなら専用コードで高速計算\n\t\tif(n === 1) {\n\t\t\tlet i = x.length - 1;\n\t\t\tif((x[i] & 0x8000) !==  0) {\n\t\t\t\tx[x.length] = 1;\n\t\t\t}\n\t\t\tfor(;i >= 0;i--) {\n\t\t\t\tx[i] <<= 1;\n\t\t\t\tx[i]  &= 0xFFFF;\n\t\t\t\tif((i > 0) && ((x[i - 1] & 0x8000) !==  0)) {\n\t\t\t\t\tx[i] += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(n === -1) {\n\t\t\tfor(let i = 0;i < x.length;i++) {\n\t\t\t\tx[i] >>>= 1;\n\t\t\t\tif((i < x.length - 1) && ((x[i + 1] & 1) !==  0)) {\n\t\t\t\t\tx[i] |= 0x8000;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(x[x.length - 1] === 0) {\n\t\t\t\tx.pop();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// 16ビット単位なら配列を追加削除する高速計算\n\t\t\tif(n >= 16) {\n\t\t\t\tconst m = n >>> 4;\n\t\t\t\tfor(let i = x.length - 1; i >= 0; i--) {\n\t\t\t\t\tx[i + m] = x[i];\n\t\t\t\t}\n\t\t\t\tfor(let i = m - 1; i >= 0; i--) {\n\t\t\t\t\tx[i] = 0;\n\t\t\t\t}\n\t\t\t\tn &= 0xF;\n\t\t\t}\n\t\t\telse if(n <= -16){\n\t\t\t\tconst m = (-n) >>> 4;\n\t\t\t\tx.splice(0, m);\n\t\t\t\tn += m << 4;\n\t\t\t}\n\t\t\tif(n !== 0) {\n\t\t\t\t// 15ビット以内ならビット演算でまとめて操作\n\t\t\t\tif(0 < n) {\n\t\t\t\t\tlet carry = 0;\n\t\t\t\t\tfor(let i = 0; i < x.length; i++) {\n\t\t\t\t\t\tx[i] = (x[i] << n) + carry;\n\t\t\t\t\t\tif(x[i] > 0xFFFF) {\n\t\t\t\t\t\t\tcarry = x[i] >>> 16;\n\t\t\t\t\t\t\tx[i] &= 0xFFFF;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tcarry = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(carry !== 0) {\n\t\t\t\t\t\tx[x.length] = carry;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tn = -n;\n\t\t\t\t\tfor(let i = 0; i < x.length; i++) {\n\t\t\t\t\t\tif(i !== x.length - 1) {\n\t\t\t\t\t\t\tx[i] += x[i + 1] << 16;\n\t\t\t\t\t\t\tx[i] >>>= n;\n\t\t\t\t\t\t\tx[i] &= 0xFFFF;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tx[i] >>>= n;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(x[x.length - 1] === 0) {\n\t\t\t\t\t\tx.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * this << n\n\t * @param {BigInteger|number|string|Array<string|number>|Object} n\n\t * @returns {BigInteger} A << n\n\t */\n\tshift(n) {\n\t\treturn this.clone()._shift(n);\n\t}\n\n\t/**\n\t * this << n\n\t * @param {BigInteger|number|string|Array<string|number>|Object} n\n\t * @returns {BigInteger} A << n\n\t */\n\tshiftLeft(n) {\n\t\treturn this.shift(n);\n\t}\n\n\t/**\n\t * this >> n\n\t * @param {BigInteger|number|string|Array<string|number>|Object} n\n\t * @returns {BigInteger} A >> n\n\t */\n\tshiftRight(n) {\n\t\treturn this.shift(-n);\n\t}\n\n\t// ----------------------\n\t// ビット演算系\n\t// ----------------------\n\t\n\t/**\n\t * Number of digits in which the number \"1\" appears first when expressed in binary.\n\t * - Return -1 If 1 is not found it.\n\t * @returns {number}\n\t */\n\tgetLowestSetBit() {\n\t\tfor(let i = 0; i < this.element.length; i++) {\n\t\t\tif(this.element[i] !==  0) {\n\t\t\t\tconst x = this.element[i];\n\t\t\t\tfor(let j = 0; j < 16; j++) {\n\t\t\t\t\tif(((x >>> j) & 1) !==  0) {\n\t\t\t\t\t\treturn i * 16 + j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Length when the number is binary.\n\t * @returns {number}\n\t */\n\tbitLength() {\n\t\tfor(let i = this.element.length - 1; i >= 0; i--) {\n\t\t\tif(this.element[i] !==  0) {\n\t\t\t\tconst x = this.element[i];\n\t\t\t\tfor(let j = 15; j >= 0; j--) {\n\t\t\t\t\tif(((x >>> j) & 1) !==  0) {\n\t\t\t\t\t\treturn i * 16 + j + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Sum that the bit is 1 when represented in the two's complement.\n\t * @returns {number}\n\t */\n\tbitCount() {\n\t\tlet target;\n\t\tif(this._sign >= 0) {\n\t\t\ttarget = this;\n\t\t}\n\t\telse {\n\t\t\ttarget = this.add(new BigInteger(1));\n\t\t}\n\t\tconst len = target.bitLength();\n\t\tlet bit = 0;\n\t\tlet count = 0;\n\t\tfor(let i = 0;bit < len;i++) {\n\t\t\tconst x = target.element[i];\n\t\t\tfor(let j = 0;((j < 16) && (bit < len));j++, bit++) {\n\t\t\t\tif(((x >>> j) & 1) !==  0) {\n\t\t\t\t\tcount = count + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * Logical AND. (mutable)\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A &= B\n\t * @private\n\t */\n\t_and(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst e1 = this;\n\t\tconst e2 = val;\n\t\tconst s1  = e1.signum(), s2 = e2.signum();\n\t\tconst len = Math.max(e1.bitLength(), e2.bitLength());\n\t\t// 引数が負の場合は、2の補数\n\t\tconst e1_array = e1.getTwosComplement(len).element;\n\t\tconst e2_array = e2.getTwosComplement(len).element;\n\t\tconst size = Math.max(e1_array.length, e2_array.length);\n\t\tthis.element = [];\n\t\tfor(let i = 0;i < size;i++) {\n\t\t\tconst x1 = (i >= e1_array.length) ? 0 : e1_array[i];\n\t\t\tconst x2 = (i >= e2_array.length) ? 0 : e2_array[i];\n\t\t\tthis.element[i] = x1 & x2;\n\t\t}\n\t\t// 配列の上位が空になる可能性があるためノーマライズが必要\n\t\tthis._memory_reduction();\n\t\t// 符号を計算\n\t\tif((s1 === 1)||(s2 === 1)) {\n\t\t\tthis._sign = 1;\n\t\t}\n\t\t// 出力が負の場合は、2の補数\n\t\telse if(this._sign === -1) {\n\t\t\tthis.element = this.getTwosComplement(len).element;\n\t\t\t// 反転させたことで配列の上位が空になる可能性があるためノーマライズが必要\n\t\t\tthis._memory_reduction();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Logical AND.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A & B\n\t */\n\tand(number) {\n\t\treturn this.clone()._and(number);\n\t}\n\n\t/**\n\t * Logical OR. (mutable)\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A |= B\n\t * @private\n\t */\n\t_or(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst e1 = this;\n\t\tconst e2 = val;\n\t\tconst s1  = e1.signum(), s2 = e2.signum();\n\t\tconst len = Math.max(e1.bitLength(), e2.bitLength());\n\t\t// 引数が負の場合は、2の補数\n\t\tconst e1_array = e1.getTwosComplement(len).element;\n\t\tconst e2_array = e2.getTwosComplement(len).element;\n\t\tconst size = Math.max(e1_array.length, e2_array.length);\n\t\tthis.element = [];\n\t\tfor(let i = 0;i < size;i++) {\n\t\t\tconst x1 = (i >= e1_array.length) ? 0 : e1_array[i];\n\t\t\tconst x2 = (i >= e2_array.length) ? 0 : e2_array[i];\n\t\t\tthis.element[i] = x1 | x2;\n\t\t}\n\t\t// 符号を計算\n\t\tthis._sign = ((s1 === -1)||(s2 === -1)) ? -1 : Math.max(s1, s2);\n\t\t// 出力が負の場合は、2の補数\n\t\tif(this._sign === -1) {\n\t\t\tthis.element = this.getTwosComplement(len).element;\n\t\t\t// 反転させたことで配列の上位が空になる可能性があるためノーマライズが必要\n\t\t\tthis._memory_reduction();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Logical OR.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A | B\n\t */\n\tor(number) {\n\t\treturn this.clone()._or(number);\n\t}\n\n\t/**\n\t * Logical Exclusive-OR. (mutable)\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A ^= B\n\t * @private\n\t */\n\t_xor(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst e1 = this;\n\t\tconst e2 = val;\n\t\tconst s1  = e1.signum(), s2 = e2.signum();\n\t\tconst len = Math.max(e1.bitLength(), e2.bitLength());\n\t\t// 引数が負の場合は、2の補数\n\t\tconst e1_array = e1.getTwosComplement(len).element;\n\t\tconst e2_array = e2.getTwosComplement(len).element;\n\t\tconst size = Math.max(e1_array.length, e2_array.length);\n\t\tthis.element = [];\n\t\tfor(let i = 0;i < size;i++) {\n\t\t\tconst x1 = (i >= e1_array.length) ? 0 : e1_array[i];\n\t\t\tconst x2 = (i >= e2_array.length) ? 0 : e2_array[i];\n\t\t\tthis.element[i] = x1 ^ x2;\n\t\t}\n\t\t// 配列の上位が空になる可能性があるためノーマライズが必要\n\t\tthis._memory_reduction();\n\t\t// 符号を計算\n\t\tthis._sign = ((s1 !== 0)&&(s1 !== s2)) ? -1 : 1;\n\t\t// 出力が負の場合は、2の補数\n\t\tif(this._sign === -1) {\n\t\t\tthis.element = this.getTwosComplement(len).element;\n\t\t\t// 反転したことでさらに空になる可能性がある\n\t\t\tthis._memory_reduction();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Logical Exclusive-OR.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A ^ B\n\t */\n\txor(number) {\n\t\treturn(this.clone()._xor(number));\n\t}\n\n\t/**\n\t * Logical Not.\n\t * @returns {BigInteger} A = !A\n\t * @private\n\t */\n\t_not() {\n\t\treturn(this._add(new BigInteger(1))._negate());\n\t}\n\n\t/**\n\t * Logical Not. (mutable)\n\t * @returns {BigInteger} !A\n\t */\n\tnot() {\n\t\treturn(this.clone()._not());\n\t}\n\n\t/**\n\t * Logical Not-AND. (mutable)\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A &= (!B)\n\t * @private\n\t */\n\t_andNot(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\treturn(this._and(val.not()));\n\t}\n\n\t/**\n\t * Logical Not-AND.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A & (!B)\n\t */\n\tandNot(number) {\n\t\treturn(this.clone()._andNot(number));\n\t}\n\n\t/**\n\t * Logical Not-AND. (mutable)\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A &= (!B)\n\t * @private\n\t */\n\t_nand(number) {\n\t\treturn(this._andNot(number));\n\t}\n\n\t/**\n\t * Logical Not-AND.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A & (!B)\n\t */\n\tnand(number) {\n\t\treturn(this.andNot(number));\n\t}\n\n\t/**\n\t * Logical Not-OR. (mutable)\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A = !(A | B)\n\t * @private\n\t */\n\t_orNot(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\treturn(this._or(val)._not());\n\t}\n\n\t/**\n\t * Logical Not-OR.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} !(A | B)\n\t */\n\torNot(number) {\n\t\treturn(this.clone()._orNot(number));\n\t}\n\n\t/**\n\t * Logical Not-OR. (mutable)\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A = !(A | B)\n\t * @private\n\t */\n\t_nor(number) {\n\t\treturn(this._orNot(number));\n\t}\n\n\t/**\n\t * Logical Not-OR.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} !(A | B)\n\t */\n\tnor(number) {\n\t\treturn(this.orNot(number));\n\t}\n\n\t/**\n\t * this | (1 << n) (mutable)\n\t * @param {BigInteger|number|string|Array<string|number>|Object} bit\n\t * @returns {BigInteger}\n\t * @private\n\t */\n\t_setBit(bit) {\n\t\tconst n = BigInteger._toInteger(bit);\n\t\tthis._memory_allocation(n + 1);\n\t\tthis.element[n >>> 4] |= 1 << (n & 0xF);\n\t\treturn this;\n\t}\n\n\t/**\n\t * this | (1 << n)\n\t * @param {BigInteger|number|string|Array<string|number>|Object} bit\n\t * @returns {BigInteger}\n\t */\n\tsetBit(bit) {\n\t\tconst n = BigInteger._toInteger(bit);\n\t\treturn this.clone()._setBit(n);\n\t}\n\n\t/**\n\t * Invert a specific bit.) (mutable)\n\t * @param {BigInteger|number|string|Array<string|number>|Object} bit\n\t * @returns {BigInteger}\n\t * @private\n\t */\n\t_flipBit(bit) {\n\t\tconst n = BigInteger._toInteger(bit);\n\t\tthis._memory_allocation(n + 1);\n\t\tthis.element[n >>> 4] ^= 1 << (n & 0xF);\n\t\tthis._memory_reduction();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invert a specific bit.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} bit\n\t * @returns {BigInteger}\n\t */\n\tflipBit(bit) {\n\t\tconst n = BigInteger._toInteger(bit);\n\t\treturn this.clone()._flipBit(n);\n\t}\n\n\t/**\n\t * Lower a specific bit.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} bit \n\t * @returns {BigInteger}\n\t */\n\tclearBit(bit) {\n\t\tconst n = BigInteger._toInteger(bit);\n\t\tconst y = this.clone();\n\t\ty.element[n >>> 4] &= ~(1 << (n & 0xF));\n\t\ty._memory_reduction();\n\t\treturn y;\n\t}\n\n\t/**\n\t * Test if a particular bit is on.\n\t * @param {BigInteger|number|string|Array<string|number>|Object} bit\n\t * @returns {boolean}\n\t */\n\ttestBit(bit) {\n\t\tconst n = BigInteger._toInteger(bit);\n\t\treturn ((this.element[n >>> 4] >>> (n & 0xF)) & 1) !== 0;\n\t}\n\n\t// ----------------------\n\t// テスト系\n\t// ----------------------\n\t\n\t/**\n\t * this === 0\n\t * @returns {boolean}\n\t */\n\tisZero() {\n\t\tthis._memory_reduction();\n\t\treturn this._sign === 0;\n\t}\n\t\n\t/**\n\t * this === 1\n\t * @returns {boolean}\n\t */\n\tisOne() {\n\t\treturn this._sign === 1 && this.element.length === 1 && this.element[0] === 1;\n\t}\n\t\n\t/**\n\t * this > 0\n\t * @returns {boolean}\n\t */\n\tisPositive() {\n\t\tthis._memory_reduction();\n\t\treturn this._sign > 0;\n\t}\n\n\t/**\n\t * this < 0\n\t * @returns {boolean}\n\t */\n\tisNegative() {\n\t\treturn this._sign < 0;\n\t}\n\n\t/**\n\t * this >= 0\n\t * @returns {boolean}\n\t */\n\tisNotNegative() {\n\t\treturn this._sign >= 0;\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * -1\n\t * @returns {BigInteger} -1\n\t */\n\tstatic get MINUS_ONE() {\n\t\treturn DEFINE.MINUS_ONE;\n\t}\n\t\n\t/**\n\t * 0\n\t * @returns {BigInteger} 0\n\t */\n\tstatic get ZERO() {\n\t\treturn DEFINE.ZERO;\n\t}\n\n\t/**\n\t * 1\n\t * @returns {BigInteger} 1\n\t */\n\tstatic get ONE() {\n\t\treturn DEFINE.ONE;\n\t}\n\t\n\t/**\n\t * 2\n\t * @returns {BigInteger} 2\n\t */\n\tstatic get TWO() {\n\t\treturn DEFINE.TWO;\n\t}\n\t\n\t/**\n\t * 10\n\t * @returns {BigInteger} 10\n\t */\n\tstatic get TEN() {\n\t\treturn DEFINE.TEN;\n\t}\n\n}\n\n/**\n * Collection of constant values used in the class.\n * @ignore\n */\nconst DEFINE = {\n\n\t/**\n\t * -1\n\t */\n\tMINUS_ONE : new BigInteger(-1),\n\n\t/**\n\t * 0\n\t */\n\tZERO : new BigInteger(0),\n\t\n\t/**\n\t * 1\n\t */\n\tONE : new BigInteger(1),\n\n\t/**\n\t * 2\n\t */\n\tTWO : new BigInteger(2),\n\n\t/**\n\t * 10\n\t */\n\tTEN : new BigInteger(10)\n\n};\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/BigInteger.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "DEFAULT_RANDOM",
    "memberof": "src/math/BigInteger.mjs",
    "static": true,
    "longname": "src/math/BigInteger.mjs~DEFAULT_RANDOM",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/BigInteger.mjs",
    "importStyle": null,
    "description": "Random number class to be used when the random number class is not set.",
    "lineNumber": 23,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Random"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 117,
    "kind": "class",
    "name": "IntegerTool",
    "memberof": "src/math/BigInteger.mjs",
    "static": true,
    "longname": "src/math/BigInteger.mjs~IntegerTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/BigInteger.mjs",
    "importStyle": null,
    "description": "Collection of functions used in BigInteger.",
    "lineNumber": 29,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "toHexadecimalArrayFromPlainString",
    "memberof": "src/math/BigInteger.mjs~IntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~IntegerTool.toHexadecimalArrayFromPlainString",
    "access": "public",
    "description": "Return a hex array from a string containing numbers.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} Hex array."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "String containing a number (remove the negative sign)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radix",
        "description": "Base number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "Hex array."
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "toPlainStringFromString",
    "memberof": "src/math/BigInteger.mjs~IntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~IntegerTool.toPlainStringFromString",
    "access": "public",
    "description": "Remove exponent notation in strings representing unsigned numbers.",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ntext",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "toBigIntegerFromNumber",
    "memberof": "src/math/BigInteger.mjs~IntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~IntegerTool.toBigIntegerFromNumber",
    "access": "public",
    "description": "Return a hexadecimal array from the number.",
    "lineNumber": 139,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{element : Array<number>, _sign : number}} Data for BigInteger."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "Target number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{element : Array<number>, _sign : number}"
      ],
      "spread": false,
      "description": "Data for BigInteger."
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "toPlainStringFromHexadecimalArray",
    "memberof": "src/math/BigInteger.mjs~IntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~IntegerTool.toPlainStringFromHexadecimalArray",
    "access": "public",
    "description": "Return string of number from a hexadecimal array.",
    "lineNumber": 182,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} Numeric array for each digit in the specified base number."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "binary",
        "description": "Hex array."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radix",
        "description": "Base number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "Numeric array for each digit in the specified base number."
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "toBigIntegerFromString",
    "memberof": "src/math/BigInteger.mjs~IntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~IntegerTool.toBigIntegerFromString",
    "access": "public",
    "description": "Return data to represent multi-precision numbers from strings.",
    "lineNumber": 219,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{element : Array<number>, _sign : number}} Data for BigInteger."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "String containing a number."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "radix",
        "description": "Base number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{element : Array<number>, _sign : number}"
      ],
      "spread": false,
      "description": "Data for BigInteger."
    }
  },
  {
    "__docId__": 123,
    "kind": "class",
    "name": "BigInteger",
    "memberof": "src/math/BigInteger.mjs",
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/BigInteger.mjs",
    "importStyle": "BigInteger",
    "description": "Arbitrary-precision integer class (immutable).",
    "lineNumber": 274,
    "interface": false
  },
  {
    "__docId__": 124,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#constructor",
    "access": "public",
    "description": "Create an arbitrary-precision integer.\n\nInitialization can be performed as follows.\n- 1200, \"1200\", \"12e2\", \"1.2e3\", [\"1200\", 10]\n- \"0xff\", [\"ff\", 16]\n- \"0o01234567\", [\"01234567\", 8]\n- \"0b0110101\", [\"0110101\", 2]",
    "lineNumber": 286,
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "number",
        "description": "Numeric data. See how to use the function."
      }
    ]
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "element",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#element",
    "access": "private",
    "description": "An integer consisting of 16 bits per element of the array.",
    "lineNumber": 295,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "_sign",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_sign",
    "access": "private",
    "description": "Positive or negative signs of number.\n- +1 if positive, -1 if negative, 0 if 0.\n- This value may not be correct ?",
    "lineNumber": 304,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "create",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.create",
    "access": "public",
    "description": "Create an entity object of this class.",
    "lineNumber": 361,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.valueOf",
    "access": "public",
    "description": "Create an arbitrary-precision integer.\n- Does not support strings using exponential notation.\n- If you want to initialize with the specified base number, please set up with an array [\"ff\", 16].",
    "lineNumber": 377,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "_toBigInteger",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger._toBigInteger",
    "access": "private",
    "description": "Convert to BigInteger.\nIf type conversion is unnecessary, return the value as it is.",
    "lineNumber": 388,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "_toFloat",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger._toFloat",
    "access": "private",
    "description": "Convert to real number.",
    "lineNumber": 403,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "_toInteger",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger._toInteger",
    "access": "private",
    "description": "Convert to integer.",
    "lineNumber": 421,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "createRandomBigInteger",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.createRandomBigInteger",
    "access": "public",
    "description": "Random number of specified bit length.",
    "lineNumber": 439,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bitsize",
        "description": "Bit length."
      },
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": true,
        "name": "random",
        "description": "Class for creating random numbers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#toString",
    "access": "public",
    "description": "Convert to string.",
    "lineNumber": 475,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "radix",
        "description": "Base number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#clone",
    "access": "public",
    "description": "Deep copy.",
    "lineNumber": 514,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "getTwosComplement",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#getTwosComplement",
    "access": "private",
    "description": "Create a numerical value for addition. If negative, two's complement.",
    "lineNumber": 524,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "bit_length",
        "description": "Bit length. If not set, it will be calculated automatically."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "_memory_allocation",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_memory_allocation",
    "access": "private",
    "description": "Expand memory to specified bit length. (mutable)",
    "lineNumber": 555,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bit_length",
        "description": "Bit length."
      }
    ],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "_memory_reduction",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_memory_reduction",
    "access": "private",
    "description": "Normalization of the internal data. (mutable)",
    "lineNumber": 570,
    "params": [],
    "return": null
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "_abs",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_abs",
    "access": "private",
    "description": "Absolute value. (mutable)",
    "lineNumber": 588,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A = abs(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A = abs(A)"
    },
    "params": []
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "abs",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#abs",
    "access": "public",
    "description": "Absolute value.",
    "lineNumber": 598,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} abs(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "abs(A)"
    },
    "params": []
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "_negate",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_negate",
    "access": "private",
    "description": "this *= -1",
    "lineNumber": 607,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A = -A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A = -A"
    },
    "params": []
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "negate",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#negate",
    "access": "public",
    "description": "this * -1",
    "lineNumber": 616,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} -A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A"
    },
    "params": []
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "signum",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#signum",
    "access": "public",
    "description": "The positive or negative sign of this number.\n- +1 if positive, -1 if negative, 0 if 0.",
    "lineNumber": 625,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "sign",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#sign",
    "access": "public",
    "description": "The positive or negative sign of this number.\n- +1 if positive, -1 if negative, 0 if 0.",
    "lineNumber": 637,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "_add",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_add",
    "access": "private",
    "description": "Add. (mutable)",
    "lineNumber": 651,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A += B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A += B"
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#add",
    "access": "public",
    "description": "Add.",
    "lineNumber": 711,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A + B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A + B"
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "_subtract",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_subtract",
    "access": "private",
    "description": "Subtract. (mutable)",
    "lineNumber": 721,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A -= B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A -= B"
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "subtract",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#subtract",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 734,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "sub",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#sub",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 743,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "_multiply",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_multiply",
    "access": "private",
    "description": "Multiply. (mutable)",
    "lineNumber": 753,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A *= B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A *= B"
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "multiply",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#multiply",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 765,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "mul",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#mul",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 827,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "_divideAndRemainder",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_divideAndRemainder",
    "access": "private",
    "description": "Divide and remainder. (mutable)",
    "lineNumber": 837,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<BigInteger>} [C = fix(A / B), A - C * B]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<BigInteger>"
      ],
      "spread": false,
      "description": "[C = fix(A / B), A - C * B]"
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "divideAndRemainder",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#divideAndRemainder",
    "access": "public",
    "description": "Divide and remainder.",
    "lineNumber": 883,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<BigInteger>} [C = fix(A / B), A - C * B]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<BigInteger>"
      ],
      "spread": false,
      "description": "[C = fix(A / B), A - C * B]"
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "_divide",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_divide",
    "access": "private",
    "description": "Divide. (mutable)",
    "lineNumber": 893,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} fix(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "fix(A / B)"
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "divide",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#divide",
    "access": "public",
    "description": "Divide.",
    "lineNumber": 902,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} fix(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "fix(A / B)"
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "div",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#div",
    "access": "public",
    "description": "Divide.",
    "lineNumber": 911,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} fix(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "fix(A / B)"
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "_remainder",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_remainder",
    "access": "private",
    "description": "Remainder of division. (mutable)",
    "lineNumber": 921,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A %= B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A %= B"
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "remainder",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#remainder",
    "access": "public",
    "description": "Remainder of division.",
    "lineNumber": 930,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A % B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A % B"
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "rem",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#rem",
    "access": "public",
    "description": "Remainder of division.",
    "lineNumber": 939,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A % B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A % B"
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "_mod",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_mod",
    "access": "private",
    "description": "Modulo, positive remainder of division. (mutable)",
    "lineNumber": 949,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A = A mod B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A = A mod B"
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "mod",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#mod",
    "access": "public",
    "description": "Modulo, positive remainder of division.",
    "lineNumber": 971,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A mod B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A mod B"
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "pow",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#pow",
    "access": "public",
    "description": "Power function.",
    "lineNumber": 980,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} pow(A, B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exponent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "pow(A, B)"
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "modPow",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#modPow",
    "access": "public",
    "description": "Modular exponentiation.",
    "lineNumber": 1000,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A^B mod m"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exponent",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A^B mod m"
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "modInverse",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#modInverse",
    "access": "public",
    "description": "Modular multiplicative inverse.",
    "lineNumber": 1020,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A^(-1) mod m"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A^(-1) mod m"
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#factorial",
    "access": "public",
    "description": "Factorial function, x!.",
    "lineNumber": 1039,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} n!"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "n!"
    },
    "params": []
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "scaleByPowerOfTen",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#scaleByPowerOfTen",
    "access": "public",
    "description": "Multiply a multiple of ten.",
    "lineNumber": 1053,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} x * 10^n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "x * 10^n"
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "setDefaultRandom",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.setDefaultRandom",
    "access": "public",
    "description": "Set default class of random.\nThis is used if you do not specify a random number.",
    "lineNumber": 1075,
    "params": [
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": false,
        "name": "random",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "getDefaultRandom",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.getDefaultRandom",
    "access": "public",
    "description": "Return default Random class.\nUsed when Random not specified explicitly.",
    "lineNumber": 1084,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Random}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Random"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "getShort",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#getShort",
    "access": "public",
    "description": "Value at the specified position of the internally used array that composed of hexadecimal numbers.",
    "lineNumber": 1097,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": "Array address."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 195,
    "kind": "get",
    "name": "intValue",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#intValue",
    "access": "public",
    "description": "32-bit integer value.\n- If it is outside the range of JavaScript Number, it will not be an accurate number.",
    "lineNumber": 1110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "get",
    "name": "longValue",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#longValue",
    "access": "public",
    "description": "64-bit integer value.\n- If it is outside the range of JavaScript Number, it will not be an accurate number.",
    "lineNumber": 1124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "get",
    "name": "doubleValue",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#doubleValue",
    "access": "public",
    "description": "64-bit floating point.\n- If it is outside the range of JavaScript Number, it will not be an accurate number.",
    "lineNumber": 1141,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "gcd",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#gcd",
    "access": "public",
    "description": "Euclidean algorithm.",
    "lineNumber": 1154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} gcd(x, y)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "gcd(x, y)"
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "extgcd",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#extgcd",
    "access": "public",
    "description": "Extended Euclidean algorithm.",
    "lineNumber": 1173,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<BigInteger>} [a, b, gcd(x, y)], Result of calculating a*x + b*y = gcd(x, y)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<BigInteger>"
      ],
      "spread": false,
      "description": "[a, b, gcd(x, y)], Result of calculating a*x + b*y = gcd(x, y)."
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "lcm",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#lcm",
    "access": "public",
    "description": "Least common multiple.",
    "lineNumber": 1205,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} lcm(x, y)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "lcm(x, y)"
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#equals",
    "access": "public",
    "description": "Equals.",
    "lineNumber": 1219,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "compareToAbs",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#compareToAbs",
    "access": "public",
    "description": "Compare values without sign.",
    "lineNumber": 1240,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} abs(A) < abs(B) ? 1 : (abs(A) === abs(B) ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "abs(A) < abs(B) ? 1 : (abs(A) === abs(B) ? 0 : -1)"
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#compareTo",
    "access": "public",
    "description": "Compare values.",
    "lineNumber": 1262,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A > B ? 1 : (A === B ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A > B ? 1 : (A === B ? 0 : -1)"
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#max",
    "access": "public",
    "description": "Maximum number.",
    "lineNumber": 1283,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#min",
    "access": "public",
    "description": "Minimum number.",
    "lineNumber": 1298,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "clip",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#clip",
    "access": "public",
    "description": "Clip number within range.",
    "lineNumber": 1314,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} min(max(x, min), max)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "min(max(x, min), max)"
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "probablePrime",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.probablePrime",
    "access": "public",
    "description": "Prime represented within the specified bit length.",
    "lineNumber": 1345,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bits",
        "description": "Bit length."
      },
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": true,
        "name": "random",
        "description": "Class for creating random numbers."
      },
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "certainty",
        "description": "Repeat count (prime precision)."
      },
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "500",
        "defaultRaw": 500,
        "name": "create_count",
        "description": "Number of times to retry if prime generation fails."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "isProbablePrime",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#isProbablePrime",
    "access": "public",
    "description": "Return true if the value is prime number by Miller-Labin prime number determination method.\nAttention : it takes a very long time to process.",
    "lineNumber": 1363,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "certainty",
        "description": "Repeat count (prime precision)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "nextProbablePrime",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#nextProbablePrime",
    "access": "public",
    "description": "Next prime.",
    "lineNumber": 1420,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "certainty",
        "description": "Repeat count (prime precision)."
      },
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100000",
        "defaultRaw": 100000,
        "name": "search_max",
        "description": "Search range of next prime."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "_shift",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_shift",
    "access": "private",
    "description": "this <<= n",
    "lineNumber": 1443,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A <<= n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "shift_length",
        "description": "Bit shift size."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A <<= n"
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "shift",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#shift",
    "access": "public",
    "description": "this << n",
    "lineNumber": 1535,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A << n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A << n"
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "shiftLeft",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#shiftLeft",
    "access": "public",
    "description": "this << n",
    "lineNumber": 1544,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A << n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A << n"
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "shiftRight",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#shiftRight",
    "access": "public",
    "description": "this >> n",
    "lineNumber": 1553,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A >> n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A >> n"
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "getLowestSetBit",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#getLowestSetBit",
    "access": "public",
    "description": "Number of digits in which the number \"1\" appears first when expressed in binary.\n- Return -1 If 1 is not found it.",
    "lineNumber": 1566,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "bitLength",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#bitLength",
    "access": "public",
    "description": "Length when the number is binary.",
    "lineNumber": 1584,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "bitCount",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#bitCount",
    "access": "public",
    "description": "Sum that the bit is 1 when represented in the two's complement.",
    "lineNumber": 1602,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "_and",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_and",
    "access": "private",
    "description": "Logical AND. (mutable)",
    "lineNumber": 1630,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A &= B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A &= B"
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "and",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#and",
    "access": "public",
    "description": "Logical AND.",
    "lineNumber": 1666,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A & B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A & B"
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "_or",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_or",
    "access": "private",
    "description": "Logical OR. (mutable)",
    "lineNumber": 1676,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A |= B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A |= B"
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "or",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#or",
    "access": "public",
    "description": "Logical OR.",
    "lineNumber": 1708,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A | B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A | B"
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "_xor",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_xor",
    "access": "private",
    "description": "Logical Exclusive-OR. (mutable)",
    "lineNumber": 1718,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A ^= B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A ^= B"
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "xor",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#xor",
    "access": "public",
    "description": "Logical Exclusive-OR.",
    "lineNumber": 1752,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A ^ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A ^ B"
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "_not",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_not",
    "access": "private",
    "description": "Logical Not.",
    "lineNumber": 1761,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A = !A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A = !A"
    },
    "params": []
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "not",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#not",
    "access": "public",
    "description": "Logical Not. (mutable)",
    "lineNumber": 1769,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} !A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "!A"
    },
    "params": []
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "_andNot",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_andNot",
    "access": "private",
    "description": "Logical Not-AND. (mutable)",
    "lineNumber": 1779,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A &= (!B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A &= (!B)"
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "andNot",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#andNot",
    "access": "public",
    "description": "Logical Not-AND.",
    "lineNumber": 1789,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A & (!B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A & (!B)"
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "_nand",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_nand",
    "access": "private",
    "description": "Logical Not-AND. (mutable)",
    "lineNumber": 1799,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A &= (!B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A &= (!B)"
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "nand",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#nand",
    "access": "public",
    "description": "Logical Not-AND.",
    "lineNumber": 1808,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A & (!B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A & (!B)"
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "_orNot",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_orNot",
    "access": "private",
    "description": "Logical Not-OR. (mutable)",
    "lineNumber": 1818,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A = !(A | B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A = !(A | B)"
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "orNot",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#orNot",
    "access": "public",
    "description": "Logical Not-OR.",
    "lineNumber": 1828,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} !(A | B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "!(A | B)"
    }
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "_nor",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_nor",
    "access": "private",
    "description": "Logical Not-OR. (mutable)",
    "lineNumber": 1838,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A = !(A | B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A = !(A | B)"
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "nor",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#nor",
    "access": "public",
    "description": "Logical Not-OR.",
    "lineNumber": 1847,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} !(A | B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "!(A | B)"
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "_setBit",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_setBit",
    "access": "private",
    "description": "this | (1 << n) (mutable)",
    "lineNumber": 1857,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "setBit",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#setBit",
    "access": "public",
    "description": "this | (1 << n)",
    "lineNumber": 1869,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "_flipBit",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_flipBit",
    "access": "private",
    "description": "Invert a specific bit.) (mutable)",
    "lineNumber": 1880,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "flipBit",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#flipBit",
    "access": "public",
    "description": "Invert a specific bit.",
    "lineNumber": 1893,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "clearBit",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#clearBit",
    "access": "public",
    "description": "Lower a specific bit.",
    "lineNumber": 1903,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "testBit",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#testBit",
    "access": "public",
    "description": "Test if a particular bit is on.",
    "lineNumber": 1916,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "isZero",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#isZero",
    "access": "public",
    "description": "this === 0",
    "lineNumber": 1929,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "isOne",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#isOne",
    "access": "public",
    "description": "this === 1",
    "lineNumber": 1938,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "isPositive",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#isPositive",
    "access": "public",
    "description": "this > 0",
    "lineNumber": 1946,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "isNegative",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#isNegative",
    "access": "public",
    "description": "this < 0",
    "lineNumber": 1955,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "isNotNegative",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#isNotNegative",
    "access": "public",
    "description": "this >= 0",
    "lineNumber": 1963,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 253,
    "kind": "get",
    "name": "MINUS_ONE",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.MINUS_ONE",
    "access": "public",
    "description": "-1",
    "lineNumber": 1975,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} -1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "get",
    "name": "ZERO",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.ZERO",
    "access": "public",
    "description": "0",
    "lineNumber": 1983,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "0"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "get",
    "name": "ONE",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.ONE",
    "access": "public",
    "description": "1",
    "lineNumber": 1991,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} 1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "get",
    "name": "TWO",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.TWO",
    "access": "public",
    "description": "2",
    "lineNumber": 1999,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} 2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "2"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "get",
    "name": "TEN",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.TEN",
    "access": "public",
    "description": "10",
    "lineNumber": 2007,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} 10"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "10"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "variable",
    "name": "DEFINE",
    "memberof": "src/math/BigInteger.mjs",
    "static": true,
    "longname": "src/math/BigInteger.mjs~DEFINE",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/BigInteger.mjs",
    "importStyle": null,
    "description": "Collection of constant values used in the class.",
    "lineNumber": 2017,
    "ignore": true,
    "type": {
      "types": [
        "{\"MINUS_ONE\": *, \"ZERO\": *, \"ONE\": *, \"TWO\": *, \"TEN\": *}"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "file",
    "name": "src/math/Complex.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport Random from \"./tools/Random.mjs\";\n\n// @ts-ignore\nimport Matrix from \"./Matrix.mjs\";\n\n/**\n * Random number generation class used within Complex.\n * @type {Random}\n * @ignore\n */\nconst random_class = new Random();\n\n/**\n * Collection of functions used in Complex.\n * @ignore\n */\nclass ComplexTool {\n\n\t/**\n\t * Create data for complex numbers from strings.\n\t * @param {string} text - Target strings.\n\t * @returns {{real : number, imag : number}}\n\t */\n\tstatic ToComplexFromString(text) {\n\t\tlet str = text.replace(/\\s/g, \"\").toLowerCase();\n\t\tstr = str.replace(/infinity|inf/g, \"1e100000\");\n\t\t// 複素数の宣言がない場合\n\t\tif(!(/[ij]/.test(str))) {\n\t\t\treturn {\n\t\t\t\treal : parseFloat(str),\n\t\t\t\timag : 0.0\n\t\t\t};\n\t\t}\n\t\t// この時点で複素数である。\n\t\t// 以下真面目に調査\n\t\tlet re = 0;\n\t\tlet im = 0;\n\t\tlet buff;\n\t\t// 最後が$なら右側が実数、最後が[+-]なら左側が実数\n\t\tbuff = str.match(/[+-]?(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))($|[+-])/);\n\t\tif(buff) {\n\t\t\tre = parseFloat(buff[0]);\n\t\t}\n\t\t// 複素数は数値が省略される場合がある\n\t\tbuff = str.match(/[+-]?(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))?[ij]/);\n\t\tif(buff) {\n\t\t\tbuff = buff[0].substring(0, buff[0].length - 1);\n\t\t\t// i, +i, -j のように実数部がなく、数値もない場合\n\t\t\tif((/^[-+]$/.test(buff)) || buff.length === 0) {\n\t\t\t\tim = buff === \"-\" ? -1 : 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tim = parseFloat(buff);\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\treal : re,\n\t\t\timag : im\n\t\t};\n\t}\n\n}\n\n/**\n * Complex number class. (immutable)\n */\nexport default class Complex {\n\n\t/**\n\t * Create a complex number.\n\t * \n\t * Initialization can be performed as follows.\n\t * - 1200, \"1200\", \"12e2\", \"1.2e3\"\n\t * - \"3 + 4i\", \"4j + 3\", [3, 4].\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number - Complex number. See how to use the function.\n\t */\n\tconstructor(number) {\n\t\t// 行列で使うためイミュータブルは必ず守ること。\n\t\tif(arguments.length === 1) {\n\t\t\tconst obj = number;\n\t\t\tif(obj instanceof Complex) {\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * The real part of this Comlex.\n\t\t\t\t * @private\n\t\t\t\t * @type {number}\n\t\t\t\t */\n\t\t\t\tthis._re = obj._re;\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * The imaginary part of this Comlex.\n\t\t\t\t * @private\n\t\t\t\t * @type {number}\n\t\t\t\t */\n\t\t\t\tthis._im = obj._im;\n\t\t\t}\n\t\t\telse if(typeof obj === \"number\") {\n\t\t\t\tthis._re = obj;\n\t\t\t\tthis._im = 0.0;\n\t\t\t}\n\t\t\telse if(obj instanceof Array) {\n\t\t\t\tif(obj.length === 2) {\n\t\t\t\t\tthis._re = obj[0];\n\t\t\t\t\tthis._im = obj[1];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow \"Complex Unsupported argument \" + arguments;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(typeof obj === \"string\") {\n\t\t\t\tconst x = ComplexTool.ToComplexFromString(obj);\n\t\t\t\tthis._re = x.real;\n\t\t\t\tthis._im = x.imag;\n\t\t\t}\n\t\t\telse if((obj instanceof Object) && (typeof obj._re === \"number\") && (typeof obj._im === \"number\")) {\n\t\t\t\tthis._re = obj._re;\n\t\t\t\tthis._im = obj._im;\n\t\t\t}\n\t\t\telse if((number instanceof Object) && (number.doubleValue)) {\n\t\t\t\tthis._re = number.doubleValue;\n\t\t\t\tthis._im = 0.0;\n\t\t\t}\n\t\t\telse if(obj instanceof Object) {\n\t\t\t\tconst x = ComplexTool.ToComplexFromString(obj.toString());\n\t\t\t\tthis._re = x.real;\n\t\t\t\tthis._im = x.imag;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow \"Complex Unsupported argument \" + arguments;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow \"Complex Many arguments : \" + arguments.length;\n\t\t}\n\t}\n\n\t/**\n\t * Create an entity object of this class.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @returns {Complex}\n\t */\n\tstatic create(number) {\n\t\tif(number instanceof Complex) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new Complex(number);\n\t\t}\n\t}\n\t\n\t/**\n\t * Convert number to Complex type.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @returns {Complex}\n\t */\n\tstatic valueOf(number) {\n\t\treturn Complex.create(number);\n\t}\n\t\n\t/**\n\t * Convert to Complex.\n\t * If type conversion is unnecessary, return the value as it is.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number \n\t * @returns {Complex}\n\t * @private\n\t */\n\tstatic _toComplex(number) {\n\t\tif(number instanceof Complex) {\n\t\t\treturn number;\n\t\t}\n\t\telse if(number instanceof Matrix) {\n\t\t\treturn Matrix._toComplex(number);\n\t\t}\n\t\telse {\n\t\t\treturn new Complex(number);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to real number.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toDouble(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn number;\n\t\t}\n\t\tconst complex_number = Complex._toComplex(number);\n\t\tif(complex_number.isReal()) {\n\t\t\treturn complex_number.real;\n\t\t}\n\t\telse {\n\t\t\tthrow \"not support complex numbers.[\" + number + \"]\";\n\t\t}\n\t}\n\n\t/**\n\t * Convert to integer.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toInteger(number) {\n\t\treturn Math.trunc(Complex._toDouble(number));\n\t}\n\n\t/**\n\t * integer value.\n\t * @returns {number}\n\t */\n\tget intValue() {\n\t\treturn Math.trunc(this.real);\n\t}\n\n\t/**\n\t * floating point.\n\t * @returns {number}\n\t */\n\tget doubleValue() {\n\t\treturn this.real;\n\t}\n\n\t/**\n\t * Deep copy.\n\t * @returns {Complex} \n\t */\n\tclone() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Convert to string.\n\t * @returns {string} \n\t */\n\ttoString() {\n\t\tconst formatG = function(x) {\n\t\t\tlet numstr = x.toPrecision(6);\n\t\t\tif(numstr.indexOf(\".\") !== -1) {\n\t\t\t\tnumstr = numstr.replace(/\\.?0+$/, \"\");  // 1.00 , 1.10\n\t\t\t\tnumstr = numstr.replace(/\\.?0+e/, \"e\"); // 1.0e , 1.10e\n\t\t\t}\n\t\t\telse if(/inf/i.test(numstr)) {\n\t\t\t\tif(x === Number.POSITIVE_INFINITY) {\n\t\t\t\t\treturn \"Inf\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn \"-Inf\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(/nan/i.test(numstr)) {\n\t\t\t\treturn \"NaN\";\n\t\t\t}\n\t\t\treturn numstr;\n\t\t};\n\t\tif(!this.isReal()) {\n\t\t\tif(this._re === 0) {\n\t\t\t\treturn formatG(this._im) + \"i\";\n\t\t\t}\n\t\t\telse if((this._im >= 0) || (Number.isNaN(this._im))) {\n\t\t\t\treturn formatG(this._re) + \" + \" + formatG(this._im) + \"i\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn formatG(this._re) + \" - \" + formatG(-this._im) + \"i\";\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn formatG(this._re);\n\t\t}\n\t}\n\t\n\t/**\n\t * Create random values with uniform random numbers.\n\t * @returns {Complex}\n\t */\n\tstatic rand() {\n\t\treturn new Complex(random_class.nextDouble());\n\t}\n\n\t/**\n\t * Create random values with normal distribution.\n\t * @returns {Complex}\n\t */\n\tstatic randn() {\n\t\treturn new Complex(random_class.nextGaussian());\n\t}\n\n\t/**\n\t * The real part of this Comlex.\n\t * @returns {number} real(A)\n\t */\n\tget real() {\n\t\treturn this._re;\n\t}\n\t\n\t/**\n\t * The imaginary part of this Comlex.\n\t * @returns {number} imag(A)\n\t */\n\tget imag() {\n\t\treturn this._im;\n\t}\n\n\t/**\n\t * norm.\n\t * @returns {number} |A|\n\t */\n\tget norm() {\n\t\tif(this._im === 0) {\n\t\t\treturn Math.abs(this._re);\n\t\t}\n\t\telse if(this._re === 0) {\n\t\t\treturn Math.abs(this._im);\n\t\t}\n\t\telse {\n\t\t\treturn Math.sqrt(this._re * this._re + this._im * this._im);\n\t\t}\n\t}\n\n\t/**\n\t * The argument of this complex number.\n\t * @returns {number} arg(A)\n\t */\n\tget arg() {\n\t\tif(this._im === 0) {\n\t\t\treturn this._re >= 0 ? 0 : Math.PI;\n\t\t}\n\t\telse if(this._re === 0) {\n\t\t\treturn Math.PI * (this._im >= 0.0 ? 0.5 : -0.5);\n\t\t}\n\t\telse {\n\t\t\treturn Math.atan2(this._im, this._re);\n\t\t}\n\t}\n\n\t/**\n\t * Return number of decimal places for real and imaginary parts.\n\t * - Used to make a string.\n\t * @returns {number} Number of decimal places.\n\t */\n\tgetDecimalPosition() {\n\t\tconst getDecimal = function(x) {\n\t\t\tif(!Number.isFinite(x)) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tlet a = x;\n\t\t\tlet point = 0;\n\t\t\tfor(let i = 0; i < 20; i++) {\n\t\t\t\tif(Math.abs(a - Math.round(a)) <= Number.EPSILON) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ta *= 10;\n\t\t\t\tpoint++;\n\t\t\t}\n\t\t\treturn point;\n\t\t};\n\t\treturn Math.max( getDecimal(this.real), getDecimal(this.imag) );\n\t}\n\n\t/**\n\t * The positive or negative sign of this number.\n\t * - +1 if positive, -1 if negative, 0 if 0.\n\t * @returns {Complex} \n\t */\n\tsign() {\n\t\tif(this._im === 0) {\n\t\t\tif(this._re === 0) {\n\t\t\t\treturn new Complex(0);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new Complex(this._re > 0 ? 1 : -1);\n\t\t\t}\n\t\t}\n\t\treturn this.div(this.norm);\n\t}\n\t\n\t// ----------------------\n\t// 四則演算\n\t// ----------------------\n\t\n\t/**\n\t * Add.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number \n\t * @returns {Complex} A + B\n\t */\n\tadd(number) {\n\t\tconst x = new Complex(number);\n\t\tx._re = this._re + x._re;\n\t\tx._im = this._im + x._im;\n\t\treturn x;\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @returns {Complex} A - B\n\t */\n\tsub(number) {\n\t\tconst x = new Complex(number);\n\t\tx._re = this._re - x._re;\n\t\tx._im = this._im - x._im;\n\t\treturn x;\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @returns {Complex} A * B\n\t */\n\tmul(number) {\n\t\tconst x = new Complex(number);\n\t\tif((this._im === 0) && (x._im === 0)) {\n\t\t\tx._re = this._re * x._re;\n\t\t\treturn x;\n\t\t}\n\t\telse if((this._re === 0) && (x._re === 0)) {\n\t\t\tx._re = - this._im * x._im;\n\t\t\tx._im = 0;\n\t\t\treturn x;\n\t\t}\n\t\telse {\n\t\t\tconst re = this._re * x._re - this._im * x._im;\n\t\t\tconst im = this._im * x._re + this._re * x._im;\n\t\t\tx._re = re;\n\t\t\tx._im = im;\n\t\t\treturn x;\n\t\t}\n\t}\n\t\n\t/**\n\t * Inner product/Dot product.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @returns {Complex} A * conj(B)\n\t */\n\tdot(number) {\n\t\tconst x = new Complex(number);\n\t\tif((this._im === 0) && (x._im === 0)) {\n\t\t\tx._re = this._re * x._re;\n\t\t\treturn x;\n\t\t}\n\t\telse if((this._re === 0) && (x._re === 0)) {\n\t\t\tx._re = this._im * x._im;\n\t\t\tx._im = 0;\n\t\t\treturn x;\n\t\t}\n\t\telse {\n\t\t\tconst re = this._re * x._re + this._im * x._im;\n\t\t\tconst im = - this._im * x._re + this._re * x._im;\n\t\t\tx._re = re;\n\t\t\tx._im = im;\n\t\t\treturn x;\n\t\t}\n\t}\n\t\n\t/**\n\t * Divide.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @returns {Complex} A / B\n\t */\n\tdiv(number) {\n\t\tconst x = new Complex(number);\n\t\tif((this._im === 0) && (x._im === 0)) {\n\t\t\tx._re = this._re / x._re;\n\t\t\treturn x;\n\t\t}\n\t\telse if((this._re === 0) && (x._re === 0)) {\n\t\t\tx._re = this._im / x._im;\n\t\t\tx._im = 0;\n\t\t\treturn x;\n\t\t}\n\t\telse {\n\t\t\tconst re = this._re * x._re + this._im * x._im;\n\t\t\tconst im = this._im * x._re - this._re * x._im;\n\t\t\tconst denominator = 1.0 / (x._re * x._re + x._im * x._im);\n\t\t\tx._re = re * denominator;\n\t\t\tx._im = im * denominator;\n\t\t\treturn x;\n\t\t}\n\t}\n\n\t/**\n\t * Modulo, positive remainder of division.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number - Divided value (real number only).\n\t * @returns {Complex} A mod B\n\t */\n\tmod(number) {\n\t\tconst x = new Complex(number);\n\t\tif((this._im !== 0) || (x._im !== 0)) {\n\t\t\tthrow \"calculation method is undefined.\";\n\t\t}\n\t\tlet _re = this._re - x._re * (0 | (this._re / x._re));\n\t\tif(_re < 0) {\n\t\t\t_re += x._re;\n\t\t}\n\t\tx._re = _re;\n\t\treturn x;\n\t}\n\n\t/**\n\t * Inverse number of this value.\n\t * @returns {Complex} 1 / A\n\t */\n\tinv() {\n\t\tif(this._im === 0) {\n\t\t\treturn new Complex(1.0 / this._re);\n\t\t}\n\t\telse if(this._re === 0) {\n\t\t\treturn new Complex([0, - 1.0 / this._im]);\n\t\t}\n\t\treturn Complex.ONE.div(this);\n\t}\n\n\t// ----------------------\n\t// 比較\n\t// ----------------------\n\t\n\t/**\n\t * Equals.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean} A === B\n\t */\n\tequals(number, tolerance) {\n\t\tconst x = Complex._toComplex(number);\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\t// 無限大、非数の値も含めて一度確認\n\t\tif((this._re === x._re) && (this._im === x._im)) {\n\t\t\treturn true;\n\t\t}\n\t\t// 誤差を含んだ値の比較\n\t\treturn (Math.abs(this._re - x._re) <  tolerance_) && (Math.abs(this._im - x._im) < tolerance_);\n\t}\n\n\t/**\n\t * Compare values.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {number} A > B ? 1 : (A === B ? 0 : -1)\n\t */\n\tcompareTo(number, tolerance) {\n\t\tconst x1 = this;\n\t\tconst x2 = Complex._toComplex(number);\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\tconst a = x1.real + x1.imag;\n\t\tconst b = x2.real + x2.imag;\n\t\tif((Math.abs(a - b) <= tolerance_)) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn a > b ? 1 : -1;\n\t}\n\t\n\t/**\n\t * Maximum number.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @returns {Complex} max([A, B])\n\t */\n\tmax(number) {\n\t\tconst x = Complex._toComplex(number);\n\t\tif(this.compareTo(x) >= 0) {\n\t\t\treturn this;\n\t\t}\n\t\telse {\n\t\t\treturn x;\n\t\t}\n\t}\n\n\t/**\n\t * Minimum number.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @returns {Complex} min([A, B])\n\t */\n\tmin(number) {\n\t\tconst x = Complex._toComplex(number);\n\t\tif(this.compareTo(x) <= 0) {\n\t\t\treturn this;\n\t\t}\n\t\telse {\n\t\t\treturn x;\n\t\t}\n\t}\n\n\t/**\n\t * Clip number within range.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} min \n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} max\n\t * @returns {Complex} min(max(x, min), max)\n\t */\n\tclip(min, max) {\n\t\tconst min_ = Complex._toComplex(min);\n\t\tconst max_ = Complex._toComplex(max);\n\t\tconst arg_check = min_.compareTo(max_);\n\t\tif(arg_check === 1) {\n\t\t\tthrow \"clip(min, max) error. (min > max)->(\" + min_ + \" > \" + max_ + \")\";\n\t\t}\n\t\telse if(arg_check === 0) {\n\t\t\treturn min_;\n\t\t}\n\t\tif(this.compareTo(max_) === 1) {\n\t\t\treturn max_;\n\t\t}\n\t\telse if(this.compareTo(min_) === -1) {\n\t\t\treturn min_;\n\t\t}\n\t\treturn this;\n\t}\n\n\t// ----------------------\n\t// テスト系\n\t// ----------------------\n\t\n\t/**\n\t * Return true if the value is integer.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisInteger(tolerance) {\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\treturn this.isReal() && (Math.abs(this._re - Math.trunc(this._re)) < tolerance_);\n\t}\n\n\t/**\n\t * Returns true if the vallue is complex integer (including normal integer).\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean} real(A) === integer && imag(A) === integer\n\t */\n\tisComplexInteger(tolerance) {\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\t// 複素整数\n\t\treturn (Math.abs(this._re - Math.trunc(this._re)) < tolerance_) &&\n\t\t\t\t(Math.abs(this._im - Math.trunc(this._im)) < tolerance_);\n\t}\n\n\t/**\n\t * this === 0\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean} A === 0\n\t */\n\tisZero(tolerance) {\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\treturn (Math.abs(this._re) < tolerance_) && (Math.abs(this._im) < tolerance_);\n\t}\n\n\t/**\n\t * this === 1\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean} A === 1\n\t */\n\tisOne(tolerance) {\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\treturn (Math.abs(this._re - 1.0) < tolerance_) && (Math.abs(this._im) < tolerance_);\n\t}\n\n\t/**\n\t * Returns true if the vallue is complex number (imaginary part is not 0).\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean} imag(A) !== 0\n\t */\n\tisComplex(tolerance) {\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\treturn (Math.abs(this._im) >= tolerance_);\n\t}\n\t\n\t/**\n\t * Return true if the value is real number.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [tolerance=Number.EPSILON] - Calculation tolerance of calculation.\n\t * @returns {boolean} imag(A) === 0\n\t */\n\tisReal(tolerance) {\n\t\tconst tolerance_ = tolerance ? Complex._toDouble(tolerance) : Number.EPSILON;\n\t\treturn (Math.abs(this._im) < tolerance_);\n\t}\n\n\t/**\n\t * this === NaN\n\t * @returns {boolean} isNaN(A)\n\t */\n\tisNaN() {\n\t\treturn isNaN(this._re) || isNaN(this._im);\n\t}\n\n\t/**\n\t * Return true if this real part of the complex positive.\n\t * @returns {boolean} real(x) > 0\n\t */\n\tisPositive() {\n\t\t// Number.EPSILONは使用しない。どちらにぶれるか不明な点及び\n\t\t// わずかな負の数だった場合に、sqrtでエラーが発生するため\n\t\treturn 0.0 < this._re;\n\t}\n\n\t/**\n\t * real(this) < 0\n\t * @returns {boolean} real(x) < 0\n\t */\n\tisNegative() {\n\t\treturn 0.0 > this._re;\n\t}\n\n\t/**\n\t * real(this) >= 0\n\t * @returns {boolean} real(x) >= 0\n\t */\n\tisNotNegative() {\n\t\treturn 0.0 <= this._re;\n\t}\n\n\t/**\n\t * this === Infinity\n\t * @returns {boolean} isInfinite(A)\n\t */\n\tisInfinite() {\n\t\treturn\t(this._re === Number.POSITIVE_INFINITY) ||\n\t\t\t\t(this._im === Number.POSITIVE_INFINITY) ||\n\t\t\t\t(this._re === Number.NEGATIVE_INFINITY) ||\n\t\t\t\t(this._im === Number.NEGATIVE_INFINITY);\n\t}\n\t\n\t/**\n\t * Return true if the value is finite number.\n\t * @returns {boolean} !isNaN(A) && !isInfinite(A)\n\t */\n\tisFinite() {\n\t\treturn !this.isNaN() && !this.isInfinite();\n\t}\n\n\t// ----------------------\n\t// 複素数\n\t// ----------------------\n\t\n\t/**\n\t * Absolute value.\n\t * @returns {Complex} abs(A)\n\t */\n\tabs() {\n\t\treturn new Complex(this.norm);\n\t}\n\n\t/**\n\t * Complex conjugate.\n\t * @returns {Complex} real(A) - imag(A)j\n\t */\n\tconj() {\n\t\tif(this._im === 0) {\n\t\t\treturn this;\n\t\t}\n\t\t// 共役複素数\n\t\treturn new Complex([this._re, -this._im]);\n\t}\n\n\t/**\n\t * this * -1\n\t * @returns {Complex} -A\n\t */\n\tnegate() {\n\t\treturn new Complex([-this._re, -this._im]);\n\t}\n\n\t// ----------------------\n\t// 指数\n\t// ----------------------\n\t\n\t/**\n\t * Power function.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @returns {Complex} pow(A, B)\n\t */\n\tpow(number) {\n\t\tconst A = this;\n\t\tconst B = new Complex(number);\n\t\t// -2 ^ 0.5 ... 複素数\n\t\t// -2 ^ 1   ... 実数\n\t\t//  2 ^ 0.5 ... 実数\n\t\tif(B.isReal()) {\n\t\t\tif(A.isReal() && (A.isNotNegative() || B.isInteger())) {\n\t\t\t\tB._re = Math.pow(A._re, B._re);\n\t\t\t\treturn B;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst r = Math.pow(A.norm, B._re);\n\t\t\t\tconst s = A.arg * B._re;\n\t\t\t\tB._re = r * Math.cos(s);\n\t\t\t\tB._im = r * Math.sin(s);\n\t\t\t\treturn B;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn B.mul(A.log()).exp();\n\t\t}\n\t}\n\n\t/**\n\t * Square.\n\t * @returns {Complex} pow(A, 2)\n\t */\n\tsquare() {\n\t\tif(this._im === 0.0) {\n\t\t\treturn new Complex(this._re * this._re);\n\t\t}\n\t\treturn this.mul(this);\n\t}\n\n\t/**\n\t * Square root.\n\t * @returns {Complex} sqrt(A)\n\t */\n\tsqrt() {\n\t\tif(this.isReal()) {\n\t\t\tif(this.isNotNegative()) {\n\t\t\t\treturn new Complex(Math.sqrt(this._re));\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new Complex([0, Math.sqrt(-this._re)]);\n\t\t\t}\n\t\t}\n\t\tconst r = Math.sqrt(this.norm);\n\t\tconst s = this.arg * 0.5;\n\t\treturn new Complex([r * Math.cos(s), r * Math.sin(s)]);\n\t}\n\n\t/**\n\t * Logarithmic function.\n\t * @returns {Complex} log(A)\n\t */\n\tlog() {\n\t\tif(this.isReal() && this.isNotNegative()) {\n\t\t\treturn new Complex(Math.log(this._re));\n\t\t}\n\t\t// 負の値が入っているか、もともと複素数が入っている場合は、複素対数関数\n\t\treturn new Complex([Math.log(this.norm), this.arg]);\n\t}\n\n\t/**\n\t * Exponential function.\n\t * @returns {Complex} exp(A)\n\t */\n\texp() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.exp(this._re));\n\t\t}\n\t\t// 複素指数関数\n\t\tconst r = Math.exp(this._re);\n\t\treturn new Complex([r * Math.cos(this._im), r * Math.sin(this._im)]);\n\t}\n\n\t// ----------------------\n\t// 三角関数\n\t// ----------------------\n\t\n\t/**\n\t * Sine function.\n\t * @returns {Complex} sin(A)\n\t */\n\tsin() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.sin(this._re));\n\t\t}\n\t\t// オイラーの公式より\n\t\t// sin x = (e^ix - e^-ex) / 2i\n\t\tconst a = this.mul(Complex.I).exp();\n\t\tconst b = this.mul(Complex.I.negate()).exp();\n\t\treturn a.sub(b).div([0, 2]);\n\t}\n\n\t/**\n\t * Cosine function.\n\t * @returns {Complex} cos(A)\n\t */\n\tcos() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.cos(this._re));\n\t\t}\n\t\t// オイラーの公式より\n\t\t// cos x = (e^ix + e^-ex) / 2\n\t\tconst a = this.mul(Complex.I).exp();\n\t\tconst b = this.mul(Complex.I.negate()).exp();\n\t\treturn a.add(b).div(2);\n\t}\n\n\t/**\n\t * Tangent function.\n\t * @returns {Complex} tan(A)\n\t */\n\ttan() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.tan(this._re));\n\t\t}\n\t\t// 三角関数の相互関係 tan x = sin x / cos x\n\t\treturn this.sin().div(this.cos());\n\t}\n\n\t/**\n\t * Atan (arc tangent) function.\n\t * - Return the values of [-PI/2, PI/2].\n\t * @returns {Complex} atan(A)\n\t */\n\tatan() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.atan(this._re));\n\t\t}\n\t\t// 逆正接 tan-1 x = i/2 log( i+x / i-x )\n\t\treturn Complex.I.div(Complex.TWO).mul(Complex.I.add(this).div(Complex.I.sub(this)).log());\n\t}\n\n\t/**\n\t * Atan (arc tangent) function.\n\t * Return the values of [-PI, PI] .\n\t * Supports only real numbers.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [number] - X\n\t * @returns {Complex} atan2(Y, X)\n\t */\n\tatan2(number) {\n\t\tif(arguments.length === 0) {\n\t\t\treturn new Complex(this.arg);\n\t\t}\n\t\t// y.atan2(x) とする。\n\t\tconst y = this;\n\t\tconst x = Complex._toComplex(number);\n\t\tif(y.isReal() && x.isReal()) {\n\t\t\treturn new Complex(Math.atan2(y._re, x._re));\n\t\t}\n\t\t// 複素数のatan2は未定義である（実装不可能）\n\t\tthrow \"calculation method is undefined.\";\n\t}\n\t\n\t// ----------------------\n\t// 信号処理系\n\t// ----------------------\n\t\n\t/**\n\t * Normalized sinc function.\n\t * @returns {Complex} sinc(A)\n\t */\n\tsinc() {\n\t\tif(this.isReal()) {\n\t\t\tif(this._re === 0) {\n\t\t\t\treturn(Complex.ONE);\n\t\t\t}\n\t\t\tconst x = Math.PI * this._re;\n\t\t\treturn new Complex(Math.sin(x) / x);\n\t\t}\n\t\tconst x = this.mul(Complex.PI);\n\t\treturn new Complex( x.sin().div(x) );\n\t}\n\n\t// ----------------------\n\t// 丸め\n\t// ----------------------\n\t\n\t/**\n\t * Floor.\n\t * @returns {Complex} floor(A)\n\t */\n\tfloor() {\n\t\treturn new Complex([Math.floor(this._re), Math.floor(this._im)]);\n\t}\n\n\t/**\n\t * Ceil.\n\t * @returns {Complex} ceil(A)\n\t */\n\tceil() {\n\t\treturn new Complex([Math.ceil(this._re), Math.ceil(this._im)]);\n\t}\n\t\n\t/**\n\t * Rounding to the nearest integer.\n\t * @returns {Complex} round(A)\n\t */\n\tround() {\n\t\treturn new Complex([Math.round(this._re), Math.round(this._im)]);\n\t}\n\n\t/**\n\t * To integer rounded down to the nearest.\n\t * @returns {Complex} fix(A), trunc(A)\n\t */\n\tfix() {\n\t\treturn new Complex([Math.trunc(this._re), Math.trunc(this._im)]);\n\t}\n\n\t/**\n\t * Fraction.\n\t * @returns {Complex} fract(A)\n\t */\n\tfract() {\n\t\treturn new Complex([this._re - Math.floor(this._re), this._im - Math.floor(this._im)]);\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * 1\n\t * @returns {Complex} 1\n\t */\n\tstatic get ONE() {\n\t\treturn DEFINE.ONE;\n\t}\n\t\n\t/**\n\t * 2\n\t * @returns {Complex} 2\n\t */\n\tstatic get TWO() {\n\t\treturn DEFINE.TWO;\n\t}\n\t\n\t/**\n\t * 10\n\t * @returns {Complex} 10\n\t */\n\tstatic get TEN() {\n\t\treturn DEFINE.TEN;\n\t}\n\t\n\t/**\n\t * 0\n\t * @returns {Complex} 0\n\t */\n\tstatic get ZERO() {\n\t\treturn DEFINE.ZERO;\n\t}\n\n\t/**\n\t * -1\n\t * @returns {Complex} -1\n\t */\n\tstatic get MINUS_ONE() {\n\t\treturn DEFINE.MINUS_ONE;\n\t}\n\n\t/**\n\t * i, j\n\t * @returns {Complex} i\n\t */\n\tstatic get I() {\n\t\treturn DEFINE.I;\n\t}\n\n\t/**\n\t * Pi.\n\t * @returns {Complex} 3.14...\n\t */\n\tstatic get PI() {\n\t\treturn DEFINE.PI;\n\t}\n\n\t/**\n\t * E, Napier's constant.\n\t * @returns {Complex} 2.71...\n\t */\n\tstatic get E() {\n\t\treturn DEFINE.E;\n\t}\n\n\t/**\n\t * log_e(2)\n\t * @returns {Complex} ln(2)\n\t */\n\tstatic get LN2() {\n\t\treturn DEFINE.LN2;\n\t}\n\n\t/**\n\t * log_e(10)\n\t * @returns {Complex} ln(10)\n\t */\n\tstatic get LN10() {\n\t\treturn DEFINE.LN10;\n\t}\n\n\t/**\n\t * log_2(e)\n\t * @returns {Complex} log_2(e)\n\t */\n\tstatic get LOG2E() {\n\t\treturn DEFINE.LOG2E;\n\t}\n\t\n\t/**\n\t * log_10(e)\n\t * @returns {Complex} log_10(e)\n\t */\n\tstatic get LOG10E() {\n\t\treturn DEFINE.LOG10E;\n\t}\n\t\n\t/**\n\t * sqrt(2)\n\t * @returns {Complex} sqrt(2)\n\t */\n\tstatic get SQRT2() {\n\t\treturn DEFINE.SQRT2;\n\t}\n\t\n\t/**\n\t * sqrt(0.5)\n\t * @returns {Complex} sqrt(0.5)\n\t */\n\tstatic get SQRT1_2() {\n\t\treturn DEFINE.SQRT1_2;\n\t}\n\t\n\t/**\n\t * 0.5\n\t * @returns {Complex} 0.5\n\t */\n\tstatic get HALF() {\n\t\treturn DEFINE.HALF;\n\t}\n\n\t/**\n\t * Positive infinity.\n\t * @returns {Complex} Infinity\n\t */\n\tstatic get POSITIVE_INFINITY() {\n\t\treturn DEFINE.POSITIVE_INFINITY;\n\t}\n\t\n\t/**\n\t * Negative Infinity.\n\t * @returns {Complex} -Infinity\n\t */\n\tstatic get NEGATIVE_INFINITY() {\n\t\treturn DEFINE.NEGATIVE_INFINITY;\n\t}\n\n\t/**\n\t * Not a Number.\n\t * @returns {Complex} NaN\n\t */\n\tstatic get NaN() {\n\t\treturn DEFINE.NaN;\n\t}\n\n}\n\n/**\n * Collection of constant values used in the class.\n * @ignore\n */\nconst DEFINE = {\n\n\t/**\n\t * 0\n\t */\n\tZERO : new Complex(0),\n\n\t/**\n\t * 1\n\t */\n\tONE : new Complex(1),\n\n\t/**\n\t * 2\n\t */\n\tTWO : new Complex(2),\n\n\t/**\n\t * 10\n\t */\n\tTEN : new Complex(10),\n\n\t/**\n\t * -1\n\t */\n\tMINUS_ONE : new Complex(-1),\n\n\t/**\n\t * i, j\n\t */\n\tI : new Complex([0, 1]),\n\n\t/**\n\t * Pi.\n\t */\n\tPI : new Complex(Math.PI),\n\n\t/**\n\t * E, Napier's constant.\n\t */\n\tE : new Complex(Math.E),\n\n\t/**\n\t * log_e(2)\n\t */\n\tLN2 : new Complex(Math.LN2),\n\n\t/**\n\t * log_e(10)\n\t */\n\tLN10 : new Complex(Math.LN10),\n\n\t/**\n\t * log_2(e)\n\t */\n\tLOG2E : new Complex(Math.LOG2E),\n\n\t/**\n\t * log_10(e)\n\t */\n\tLOG10E : new Complex(Math.LOG10E),\n\n\t/**\n\t * sqrt(2)\n\t */\n\tSQRT2 : new Complex(Math.SQRT2),\n\n\t/**\n\t * sqrt(0.5)\n\t */\n\tSQRT1_2 : new Complex(Math.SQRT1_2),\n\n\t/**\n\t * 0.5\n\t */\n\tHALF : new Complex(0.5),\n\n\t/**\n\t * Positive infinity.\n\t */\n\tPOSITIVE_INFINITY : new Complex(Number.POSITIVE_INFINITY),\n\n\t/**\n\t * Negative Infinity.\n\t */\n\tNEGATIVE_INFINITY : new Complex(Number.NEGATIVE_INFINITY),\n\n\t/**\n\t * Not a Number.\n\t */\n\tNaN : new Complex(Number.NaN)\n};\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/Complex.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 260,
    "kind": "variable",
    "name": "random_class",
    "memberof": "src/math/Complex.mjs",
    "static": true,
    "longname": "src/math/Complex.mjs~random_class",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/Complex.mjs",
    "importStyle": null,
    "description": "Random number generation class used within Complex.",
    "lineNumber": 23,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Random"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 261,
    "kind": "class",
    "name": "ComplexTool",
    "memberof": "src/math/Complex.mjs",
    "static": true,
    "longname": "src/math/Complex.mjs~ComplexTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/Complex.mjs",
    "importStyle": null,
    "description": "Collection of functions used in Complex.",
    "lineNumber": 29,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "ToComplexFromString",
    "memberof": "src/math/Complex.mjs~ComplexTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~ComplexTool.ToComplexFromString",
    "access": "public",
    "description": "Create data for complex numbers from strings.",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{real : number, imag : number}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Target strings."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{real : number, imag : number}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 263,
    "kind": "class",
    "name": "Complex",
    "memberof": "src/math/Complex.mjs",
    "static": true,
    "longname": "src/math/Complex.mjs~Complex",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/Complex.mjs",
    "importStyle": "Complex",
    "description": "Complex number class. (immutable)",
    "lineNumber": 79,
    "interface": false
  },
  {
    "__docId__": 264,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#constructor",
    "access": "public",
    "description": "Create a complex number.\n\nInitialization can be performed as follows.\n- 1200, \"1200\", \"12e2\", \"1.2e3\"\n- \"3 + 4i\", \"4j + 3\", [3, 4].",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Complex number. See how to use the function."
      }
    ]
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "_re",
    "memberof": "src/math/Complex.mjs~Complex",
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#_re",
    "access": "private",
    "description": "The real part of this Comlex.",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 266,
    "kind": "member",
    "name": "_im",
    "memberof": "src/math/Complex.mjs~Complex",
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#_im",
    "access": "private",
    "description": "The imaginary part of this Comlex.",
    "lineNumber": 107,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "create",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.create",
    "access": "public",
    "description": "Create an entity object of this class.",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.valueOf",
    "access": "public",
    "description": "Convert number to Complex type.",
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "_toComplex",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex._toComplex",
    "access": "private",
    "description": "Convert to Complex.\nIf type conversion is unnecessary, return the value as it is.",
    "lineNumber": 179,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "_toDouble",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex._toDouble",
    "access": "private",
    "description": "Convert to real number.",
    "lineNumber": 197,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "_toInteger",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex._toInteger",
    "access": "private",
    "description": "Convert to integer.",
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 284,
    "kind": "get",
    "name": "intValue",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#intValue",
    "access": "public",
    "description": "integer value.",
    "lineNumber": 224,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "get",
    "name": "doubleValue",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#doubleValue",
    "access": "public",
    "description": "floating point.",
    "lineNumber": 232,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#clone",
    "access": "public",
    "description": "Deep copy.",
    "lineNumber": 240,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#toString",
    "access": "public",
    "description": "Convert to string.",
    "lineNumber": 248,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "rand",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.rand",
    "access": "public",
    "description": "Create random values with uniform random numbers.",
    "lineNumber": 288,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "randn",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.randn",
    "access": "public",
    "description": "Create random values with normal distribution.",
    "lineNumber": 296,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 290,
    "kind": "get",
    "name": "real",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#real",
    "access": "public",
    "description": "The real part of this Comlex.",
    "lineNumber": 304,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} real(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "real(A)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "get",
    "name": "imag",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#imag",
    "access": "public",
    "description": "The imaginary part of this Comlex.",
    "lineNumber": 312,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} imag(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "imag(A)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "get",
    "name": "norm",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#norm",
    "access": "public",
    "description": "norm.",
    "lineNumber": 320,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} |A|"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "|A|"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "get",
    "name": "arg",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#arg",
    "access": "public",
    "description": "The argument of this complex number.",
    "lineNumber": 336,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} arg(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "arg(A)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "getDecimalPosition",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#getDecimalPosition",
    "access": "public",
    "description": "Return number of decimal places for real and imaginary parts.\n- Used to make a string.",
    "lineNumber": 353,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Number of decimal places."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Number of decimal places."
    },
    "params": []
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "sign",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#sign",
    "access": "public",
    "description": "The positive or negative sign of this number.\n- +1 if positive, -1 if negative, 0 if 0.",
    "lineNumber": 377,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#add",
    "access": "public",
    "description": "Add.",
    "lineNumber": 398,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A + B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A + B"
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "sub",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#sub",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 410,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "mul",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#mul",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 422,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "dot",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#dot",
    "access": "public",
    "description": "Inner product/Dot product.",
    "lineNumber": 447,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A * conj(B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A * conj(B)"
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "div",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#div",
    "access": "public",
    "description": "Divide.",
    "lineNumber": 472,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A / B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A / B"
    }
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "mod",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#mod",
    "access": "public",
    "description": "Modulo, positive remainder of division.",
    "lineNumber": 498,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A mod B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Divided value (real number only)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A mod B"
    }
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "inv",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#inv",
    "access": "public",
    "description": "Inverse number of this value.",
    "lineNumber": 515,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 1 / A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "1 / A"
    },
    "params": []
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#equals",
    "access": "public",
    "description": "Equals.",
    "lineNumber": 535,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#compareTo",
    "access": "public",
    "description": "Compare values.",
    "lineNumber": 552,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A > B ? 1 : (A === B ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A > B ? 1 : (A === B ? 0 : -1)"
    }
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#max",
    "access": "public",
    "description": "Maximum number.",
    "lineNumber": 569,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#min",
    "access": "public",
    "description": "Minimum number.",
    "lineNumber": 584,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "clip",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#clip",
    "access": "public",
    "description": "Clip number within range.",
    "lineNumber": 600,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} min(max(x, min), max)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "min(max(x, min), max)"
    }
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "isInteger",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isInteger",
    "access": "public",
    "description": "Return true if the value is integer.",
    "lineNumber": 628,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "isComplexInteger",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isComplexInteger",
    "access": "public",
    "description": "Returns true if the vallue is complex integer (including normal integer).",
    "lineNumber": 638,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(A) === integer && imag(A) === integer"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(A) === integer && imag(A) === integer"
    }
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "isZero",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isZero",
    "access": "public",
    "description": "this === 0",
    "lineNumber": 650,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === 0"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === 0"
    }
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "isOne",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isOne",
    "access": "public",
    "description": "this === 1",
    "lineNumber": 660,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === 1"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === 1"
    }
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "isComplex",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isComplex",
    "access": "public",
    "description": "Returns true if the vallue is complex number (imaginary part is not 0).",
    "lineNumber": 670,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} imag(A) !== 0"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "imag(A) !== 0"
    }
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "isReal",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isReal",
    "access": "public",
    "description": "Return true if the value is real number.",
    "lineNumber": 680,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} imag(A) === 0"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "imag(A) === 0"
    }
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "isNaN",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isNaN",
    "access": "public",
    "description": "this === NaN",
    "lineNumber": 689,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isNaN(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isNaN(A)"
    },
    "params": []
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "isPositive",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isPositive",
    "access": "public",
    "description": "Return true if this real part of the complex positive.",
    "lineNumber": 697,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(x) > 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(x) > 0"
    },
    "params": []
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "isNegative",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isNegative",
    "access": "public",
    "description": "real(this) < 0",
    "lineNumber": 707,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(x) < 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(x) < 0"
    },
    "params": []
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "isNotNegative",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isNotNegative",
    "access": "public",
    "description": "real(this) >= 0",
    "lineNumber": 715,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(x) >= 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(x) >= 0"
    },
    "params": []
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "isInfinite",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isInfinite",
    "access": "public",
    "description": "this === Infinity",
    "lineNumber": 723,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isInfinite(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isInfinite(A)"
    },
    "params": []
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "isFinite",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isFinite",
    "access": "public",
    "description": "Return true if the value is finite number.",
    "lineNumber": 734,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} !isNaN(A) && !isInfinite(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "!isNaN(A) && !isInfinite(A)"
    },
    "params": []
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "abs",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#abs",
    "access": "public",
    "description": "Absolute value.",
    "lineNumber": 746,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} abs(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "abs(A)"
    },
    "params": []
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "conj",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#conj",
    "access": "public",
    "description": "Complex conjugate.",
    "lineNumber": 754,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} real(A) - imag(A)j"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "real(A) - imag(A)j"
    },
    "params": []
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "negate",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#negate",
    "access": "public",
    "description": "this * -1",
    "lineNumber": 766,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} -A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A"
    },
    "params": []
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "pow",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#pow",
    "access": "public",
    "description": "Power function.",
    "lineNumber": 779,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} pow(A, B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "pow(A, B)"
    }
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "square",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#square",
    "access": "public",
    "description": "Square.",
    "lineNumber": 807,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} pow(A, 2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "pow(A, 2)"
    },
    "params": []
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "sqrt",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#sqrt",
    "access": "public",
    "description": "Square root.",
    "lineNumber": 818,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sqrt(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sqrt(A)"
    },
    "params": []
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "log",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#log",
    "access": "public",
    "description": "Logarithmic function.",
    "lineNumber": 836,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} log(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "log(A)"
    },
    "params": []
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "exp",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#exp",
    "access": "public",
    "description": "Exponential function.",
    "lineNumber": 848,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} exp(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "exp(A)"
    },
    "params": []
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "sin",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#sin",
    "access": "public",
    "description": "Sine function.",
    "lineNumber": 865,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sin(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sin(A)"
    },
    "params": []
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "cos",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#cos",
    "access": "public",
    "description": "Cosine function.",
    "lineNumber": 880,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} cos(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "cos(A)"
    },
    "params": []
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "tan",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#tan",
    "access": "public",
    "description": "Tangent function.",
    "lineNumber": 895,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} tan(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "tan(A)"
    },
    "params": []
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "atan",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#atan",
    "access": "public",
    "description": "Atan (arc tangent) function.\n- Return the values of [-PI/2, PI/2].",
    "lineNumber": 908,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} atan(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "atan(A)"
    },
    "params": []
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "atan2",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#atan2",
    "access": "public",
    "description": "Atan (arc tangent) function.\nReturn the values of [-PI, PI] .\nSupports only real numbers.",
    "lineNumber": 923,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} atan2(Y, X)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "number",
        "description": "X"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "atan2(Y, X)"
    }
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "sinc",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#sinc",
    "access": "public",
    "description": "Normalized sinc function.",
    "lineNumber": 945,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sinc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sinc(A)"
    },
    "params": []
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "floor",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#floor",
    "access": "public",
    "description": "Floor.",
    "lineNumber": 965,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} floor(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "floor(A)"
    },
    "params": []
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "ceil",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#ceil",
    "access": "public",
    "description": "Ceil.",
    "lineNumber": 973,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} ceil(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "ceil(A)"
    },
    "params": []
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "round",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#round",
    "access": "public",
    "description": "Rounding to the nearest integer.",
    "lineNumber": 981,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} round(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "round(A)"
    },
    "params": []
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "fix",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#fix",
    "access": "public",
    "description": "To integer rounded down to the nearest.",
    "lineNumber": 989,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} fix(A), trunc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "fix(A), trunc(A)"
    },
    "params": []
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "fract",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#fract",
    "access": "public",
    "description": "Fraction.",
    "lineNumber": 997,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} fract(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "fract(A)"
    },
    "params": []
  },
  {
    "__docId__": 339,
    "kind": "get",
    "name": "ONE",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.ONE",
    "access": "public",
    "description": "1",
    "lineNumber": 1009,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "get",
    "name": "TWO",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.TWO",
    "access": "public",
    "description": "2",
    "lineNumber": 1017,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "2"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "get",
    "name": "TEN",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.TEN",
    "access": "public",
    "description": "10",
    "lineNumber": 1025,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 10"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "10"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "get",
    "name": "ZERO",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.ZERO",
    "access": "public",
    "description": "0",
    "lineNumber": 1033,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "0"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "get",
    "name": "MINUS_ONE",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.MINUS_ONE",
    "access": "public",
    "description": "-1",
    "lineNumber": 1041,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} -1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "get",
    "name": "I",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.I",
    "access": "public",
    "description": "i, j",
    "lineNumber": 1049,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} i"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "i"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "get",
    "name": "PI",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.PI",
    "access": "public",
    "description": "Pi.",
    "lineNumber": 1057,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 3.14..."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "3.14..."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 346,
    "kind": "get",
    "name": "E",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.E",
    "access": "public",
    "description": "E, Napier's constant.",
    "lineNumber": 1065,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 2.71..."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "2.71..."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 347,
    "kind": "get",
    "name": "LN2",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.LN2",
    "access": "public",
    "description": "log_e(2)",
    "lineNumber": 1073,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} ln(2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "ln(2)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 348,
    "kind": "get",
    "name": "LN10",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.LN10",
    "access": "public",
    "description": "log_e(10)",
    "lineNumber": 1081,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} ln(10)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "ln(10)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 349,
    "kind": "get",
    "name": "LOG2E",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.LOG2E",
    "access": "public",
    "description": "log_2(e)",
    "lineNumber": 1089,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} log_2(e)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "log_2(e)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "get",
    "name": "LOG10E",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.LOG10E",
    "access": "public",
    "description": "log_10(e)",
    "lineNumber": 1097,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} log_10(e)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "log_10(e)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 351,
    "kind": "get",
    "name": "SQRT2",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.SQRT2",
    "access": "public",
    "description": "sqrt(2)",
    "lineNumber": 1105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sqrt(2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sqrt(2)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "get",
    "name": "SQRT1_2",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.SQRT1_2",
    "access": "public",
    "description": "sqrt(0.5)",
    "lineNumber": 1113,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sqrt(0.5)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sqrt(0.5)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "get",
    "name": "HALF",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.HALF",
    "access": "public",
    "description": "0.5",
    "lineNumber": 1121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 0.5"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "0.5"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "get",
    "name": "POSITIVE_INFINITY",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.POSITIVE_INFINITY",
    "access": "public",
    "description": "Positive infinity.",
    "lineNumber": 1129,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} Infinity"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "Infinity"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "get",
    "name": "NEGATIVE_INFINITY",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.NEGATIVE_INFINITY",
    "access": "public",
    "description": "Negative Infinity.",
    "lineNumber": 1137,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} -Infinity"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "Infinity"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "get",
    "name": "NaN",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.NaN",
    "access": "public",
    "description": "Not a Number.",
    "lineNumber": 1145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} NaN"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "NaN"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "variable",
    "name": "DEFINE",
    "memberof": "src/math/Complex.mjs",
    "static": true,
    "longname": "src/math/Complex.mjs~DEFINE",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/Complex.mjs",
    "importStyle": null,
    "description": "Collection of constant values used in the class.",
    "lineNumber": 1155,
    "ignore": true,
    "type": {
      "types": [
        "{\"ZERO\": *, \"ONE\": *, \"TWO\": *, \"TEN\": *, \"MINUS_ONE\": *, \"I\": *, \"PI\": *, \"E\": *, \"LN2\": *, \"LN10\": *, \"LOG2E\": *, \"LOG10E\": *, \"SQRT2\": *, \"SQRT1_2\": *, \"HALF\": *, \"POSITIVE_INFINITY\": *, \"NEGATIVE_INFINITY\": *, \"NaN\": *}"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "file",
    "name": "src/math/context/MathContext.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport RoundingMode, {RoundingModeEntity} from \"./RoundingMode.mjs\";\n\n/**\n * Configuration class for BigDecimal.\n */\nexport default class MathContext {\n\n\t/**\n\t * Create BigDecimal configuration.\n\t * @param {string|number} precision_or_name - Precision. Or String output by MathContext.toString.\n\t * @param {RoundingModeEntity} [roundingMode=RoundingMode.HALF_UP] - RoundingMode.\n\t */\n\tconstructor(precision_or_name, roundingMode) {\n\n\t\t/**\n\t\t * The precision of this BigDecimal.\n\t\t * @type {number}\n\t\t * @private\n\t\t */\n\t\tthis.precision = 0;\n\t\t\n\t\t/**\n\t\t * Method of rounding.\n\t\t * @type {RoundingModeEntity}\n\t\t * @private\n\t\t */\n\t\tthis.roundingMode = roundingMode === undefined ? RoundingMode.HALF_UP : roundingMode;\n\n\t\tif(typeof precision_or_name === \"number\") {\n\t\t\tthis.precision = precision_or_name;\n\t\t}\n\t\tif(typeof precision_or_name === \"string\") {\n\t\t\tlet buff;\n\t\t\tbuff = precision_or_name.match(/precision=\\d+/);\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0].substring(\"precision=\".length, buff[0].length);\n\t\t\t\tthis.precision = parseInt(buff, 10);\n\t\t\t}\n\t\t\tbuff = precision_or_name.match(/roundingMode=\\w+/);\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0].substring(\"roundingMode=\".length, buff[0].length);\n\t\t\t\tthis.roundingMode = RoundingMode.valueOf(buff);\n\t\t\t}\t\n\t\t}\n\t\tif(this.precision < 0) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t}\n\n\t/**\n\t * The precision of this BigDecimal.\n\t * @returns {number}\n\t */\n\tgetPrecision() {\n\t\treturn this.precision;\n\t}\n\n\t/**\n\t * Method of rounding.\n\t * @returns {RoundingModeEntity}\n\t */\n\tgetRoundingMode() {\n\t\treturn this.roundingMode;\n\t}\n\n\t/**\n\t * Equals.\n\t * @param {MathContext} x - Number to compare.\n\t * @returns {boolean}\n\t */\n\tequals(x) {\n\t\tif(x instanceof MathContext) {\n\t\t\tif(x.toString() === this.toString()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Convert to string.\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn (\"precision=\" + this.precision + \" roundingMode=\" + this.roundingMode.toString());\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * No decimal point limit.\n\t * However, an error occurs in the case of cyclic fraction in division.\n\t * @returns {MathContext}\n\t */\n\tstatic get UNLIMITED() {\n\t\treturn DEFINE.UNLIMITED;\n\t}\n\n\t/**\n\t * 32-bit floating point.\n\t * Equivalent of the C language float.\n\t * @returns {MathContext}\n\t */\n\tstatic get DECIMAL32() {\n\t\treturn DEFINE.DECIMAL32;\n\t}\n\n\n\t/**\n\t * 64-bit floating point.\n\t * Equivalent of the C language double.\n\t * @returns {MathContext}\n\t */\n\tstatic get DECIMAL64() {\n\t\treturn DEFINE.DECIMAL64;\n\t}\n\n\t/**\n\t * 128-bit floating point.\n\t * Equivalent of the C language long double.\n\t * @returns {MathContext}\n\t */\n\tstatic get DECIMAL128() {\n\t\treturn DEFINE.DECIMAL128;\n\t}\n\n}\n\n/**\n * Collection of constant values used in the class.\n * @ignore\n */\nconst DEFINE = {\n\n\t/**\n\t * No decimal point limit.\n\t * However, an error occurs in the case of cyclic fraction in division.\n\t * @type {MathContext}\n\t */\n\tUNLIMITED\t: new MathContext(0,\tRoundingMode.HALF_UP),\n\n\t/**\n\t * 32-bit floating point.\n\t * Equivalent of the C language float.\n\t * @type {MathContext}\n\t */\n\tDECIMAL32\t: new MathContext(7,\tRoundingMode.HALF_EVEN),\n\n\t/**\n\t * 64-bit floating point.\n\t * Equivalent of the C language double.\n\t * @type {MathContext}\n\t */\n\tDECIMAL64\t: new MathContext(16,\tRoundingMode.HALF_EVEN),\n\n\t/**\n\t * 128-bit floating point.\n\t * Equivalent of the C language long double.\n\t * @type {MathContext}\n\t */\n\tDECIMAL128\t: new MathContext(34,\tRoundingMode.HALF_EVEN)\n};\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/context/MathContext.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 359,
    "kind": "class",
    "name": "MathContext",
    "memberof": "src/math/context/MathContext.mjs",
    "static": true,
    "longname": "src/math/context/MathContext.mjs~MathContext",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/context/MathContext.mjs",
    "importStyle": "MathContext",
    "description": "Configuration class for BigDecimal.",
    "lineNumber": 18,
    "interface": false
  },
  {
    "__docId__": 360,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/context/MathContext.mjs~MathContext#constructor",
    "access": "public",
    "description": "Create BigDecimal configuration.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "precision_or_name",
        "description": "Precision. Or String output by MathContext.toString."
      },
      {
        "nullable": null,
        "types": [
          "RoundingModeEntity"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "RoundingMode.HALF_UP",
        "defaultRaw": "RoundingMode.HALF_UP",
        "name": "roundingMode",
        "description": "RoundingMode."
      }
    ]
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "precision",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "static": false,
    "longname": "src/math/context/MathContext.mjs~MathContext#precision",
    "access": "private",
    "description": "The precision of this BigDecimal.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "roundingMode",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "static": false,
    "longname": "src/math/context/MathContext.mjs~MathContext#roundingMode",
    "access": "private",
    "description": "Method of rounding.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "getPrecision",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/context/MathContext.mjs~MathContext#getPrecision",
    "access": "public",
    "description": "The precision of this BigDecimal.",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "getRoundingMode",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/context/MathContext.mjs~MathContext#getRoundingMode",
    "access": "public",
    "description": "Method of rounding.",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/context/MathContext.mjs~MathContext#equals",
    "access": "public",
    "description": "Equals.",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Number to compare."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/context/MathContext.mjs~MathContext#toString",
    "access": "public",
    "description": "Convert to string.",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 370,
    "kind": "get",
    "name": "UNLIMITED",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/MathContext.mjs~MathContext.UNLIMITED",
    "access": "public",
    "description": "No decimal point limit.\nHowever, an error occurs in the case of cyclic fraction in division.",
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "get",
    "name": "DECIMAL32",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/MathContext.mjs~MathContext.DECIMAL32",
    "access": "public",
    "description": "32-bit floating point.\nEquivalent of the C language float.",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 372,
    "kind": "get",
    "name": "DECIMAL64",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/MathContext.mjs~MathContext.DECIMAL64",
    "access": "public",
    "description": "64-bit floating point.\nEquivalent of the C language double.",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 373,
    "kind": "get",
    "name": "DECIMAL128",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/MathContext.mjs~MathContext.DECIMAL128",
    "access": "public",
    "description": "128-bit floating point.\nEquivalent of the C language long double.",
    "lineNumber": 137,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "variable",
    "name": "DEFINE",
    "memberof": "src/math/context/MathContext.mjs",
    "static": true,
    "longname": "src/math/context/MathContext.mjs~DEFINE",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/context/MathContext.mjs",
    "importStyle": null,
    "description": "Collection of constant values used in the class.",
    "lineNumber": 147,
    "ignore": true,
    "type": {
      "types": [
        "{\"UNLIMITED\": *, \"DECIMAL32\": *, \"DECIMAL64\": *, \"DECIMAL128\": *}"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "file",
    "name": "src/math/context/RoundingMode.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n/**\n * Base class for rounding mode for BigDecimal.\n */\nexport class RoundingModeEntity {\n\t\n\t/**\n\t * Get rounding mode name in upper case English.\n\t * @returns {string} Rounding method name.\n\t */\n\tstatic toString() {\n\t\treturn \"NONE\";\n\t}\n\n\t/**\n\t * Numeric value to add.\n\t * It is rounded when this value is added.\n\t * @param {number} x - Rounding value. When specified as an integer, the first digit is rounded.\n\t * @returns {number} Numeric value to add.\n\t */\n\tstatic getAddNumber(x) {\n\t\treturn 0;\n\t}\n\n}\n\n/**\n * Directed rounding to an integer.\n * Round towards positive infinity if positive, negative infinity if negative.\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_UP extends RoundingModeEntity {\n\n\t/**\n\t * Get rounding mode name in upper case English.\n\t * @returns {string} Rounding method name.\n\t */\n\tstatic toString() {\n\t\treturn \"UP\";\n\t}\n\n\t/**\n\t * Numeric value to add.\n\t * It is rounded when this value is added.\n\t * @param {number} x - Rounding value. When specified as an integer, the first digit is rounded.\n\t * @returns {number} Numeric value to add.\n\t */\n\tstatic getAddNumber(x) {\n\t\tconst y = x % 10;\n\t\tif(y === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(y > 0) {\n\t\t\treturn 10 - y;\n\t\t}\n\t\telse {\n\t\t\treturn (-(10 + y));\n\t\t}\n\t}\n\n}\n\n/**\n * Directed rounding to an integer.\n * Round towards 0.\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_DOWN extends RoundingModeEntity {\n\n\t/**\n\t * Get rounding mode name in upper case English.\n\t * @returns {string} Rounding method name.\n\t */\n\tstatic toString() {\n\t\treturn \"DOWN\";\n\t}\n\n\t/**\n\t * Numeric value to add.\n\t * It is rounded when this value is added.\n\t * @param {number} x - Rounding value. When specified as an integer, the first digit is rounded.\n\t * @returns {number} Numeric value to add.\n\t */\n\tstatic getAddNumber(x) {\n\t\treturn -(x % 10);\n\t}\n\n}\n\n/**\n * Directed rounding to an integer.\n * Round up to positive infinity.\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_CEILING extends RoundingModeEntity {\n\n\t/**\n\t * Get rounding mode name in upper case English.\n\t * @returns {string} Rounding method name.\n\t */\n\tstatic toString() {\n\t\treturn \"CEILING\";\n\t}\n\n\t/**\n\t * Numeric value to add.\n\t * It is rounded when this value is added.\n\t * @param {number} x - Rounding value. When specified as an integer, the first digit is rounded.\n\t * @returns {number} Numeric value to add.\n\t */\n\tstatic getAddNumber(x) {\n\t\tconst y = x % 10;\n\t\tif(y === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(y > 0) {\n\t\t\treturn 10 - y;\n\t\t}\n\t\telse {\n\t\t\treturn -y;\n\t\t}\n\t}\n\n}\n\n/**\n * Directed rounding to an integer.\n * Round down to negative infinity.\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_FLOOR extends RoundingModeEntity {\n\n\t/**\n\t * Get rounding mode name in upper case English.\n\t * @returns {string} Rounding method name.\n\t */\n\tstatic toString() {\n\t\treturn \"FLOOR\";\n\t}\n\n\t/**\n\t * Numeric value to add.\n\t * It is rounded when this value is added.\n\t * @param {number} x - Rounding value. When specified as an integer, the first digit is rounded.\n\t * @returns {number} Numeric value to add.\n\t */\n\tstatic getAddNumber(x) {\n\t\tconst y = x % 10;\n\t\tif(y === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(y > 0) {\n\t\t\treturn -y;\n\t\t}\n\t\telse {\n\t\t\treturn(-(10 + y));\n\t\t}\n\t}\n\n}\n\n/**\n * Rounding to the nearest integer.\n * Round half towards positive infinity.\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_HALF_UP extends RoundingModeEntity {\n\n\t/**\n\t * Get rounding mode name in upper case English.\n\t * @returns {string} Rounding method name.\n\t */\n\tstatic toString() {\n\t\treturn \"HALF_UP\";\n\t}\n\n\t/**\n\t * Numeric value to add.\n\t * It is rounded when this value is added.\n\t * @param {number} x - Rounding value. When specified as an integer, the first digit is rounded.\n\t * @returns {number} Numeric value to add.\n\t */\n\tstatic getAddNumber(x) {\n\t\tconst y = x % 10;\n\t\tconst sign = y >= 0 ? 1 : -1;\n\t\tif(Math.abs(y) < 5) {\n\t\t\treturn (y * -1);\n\t\t}\n\t\telse {\n\t\t\treturn (sign * (10 - Math.abs(y)));\n\t\t}\n\t}\n\n}\n\n/**\n * Rounding to the nearest integer.\n * Round half towards negative infinity.\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_HALF_DOWN extends RoundingModeEntity {\n\n\t/**\n\t * Get rounding mode name in upper case English.\n\t * @returns {string} Rounding method name.\n\t */\n\tstatic toString() {\n\t\treturn \"HALF_DOWN\";\n\t}\n\n\t/**\n\t * Numeric value to add.\n\t * It is rounded when this value is added.\n\t * @param {number} x - Rounding value. When specified as an integer, the first digit is rounded.\n\t * @returns {number} Numeric value to add.\n\t */\n\tstatic getAddNumber(x) {\n\t\tconst y = x % 10;\n\t\tconst sign = y >= 0 ? 1 : -1;\n\t\tif(Math.abs(y) < 6) {\n\t\t\treturn (y * -1);\n\t\t}\n\t\telse {\n\t\t\treturn (sign * (10 - Math.abs(y)));\n\t\t}\n\t}\n\n}\n\n/**\n * Rounding to the nearest integer\n * Round to the nearest side. If the median, round to the even side.\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_HALF_EVEN extends RoundingModeEntity {\n\n\t/**\n\t * Get rounding mode name in upper case English.\n\t * @returns {string} Rounding method name.\n\t */\n\tstatic toString() {\n\t\treturn \"HALF_EVEN\";\n\t}\n\n\t/**\n\t * Numeric value to add.\n\t * It is rounded when this value is added.\n\t * @param {number} x - Rounding value. When specified as an integer, the first digit is rounded.\n\t * @returns {number} Numeric value to add.\n\t */\n\tstatic getAddNumber(x) {\n\t\tlet y = x % 100;\n\t\tlet sign, even;\n\t\tif(y < 0) {\n\t\t\tsign = -1;\n\t\t\teven = Math.ceil(y / 10) & 1;\n\t\t}\n\t\telse {\n\t\t\tsign = 1;\n\t\t\teven = Math.floor(y / 10) & 1;\n\t\t}\n\t\tlet center;\n\t\tif(even === 1) {\n\t\t\tcenter = 5;\n\t\t}\n\t\telse {\n\t\t\tcenter = 6;\n\t\t}\n\t\ty = y % 10;\n\t\tif(Math.abs(y) < center) {\n\t\t\treturn (y * -1);\n\t\t}\n\t\telse {\n\t\t\treturn (sign * (10 - Math.abs(y)));\n\t\t}\n\t}\n\n}\n\n/**\n * Do not round.\n * Error if you need to round it.\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_UNNECESSARY extends RoundingModeEntity {\n\n\t/**\n\t * Get rounding mode name in upper case English.\n\t * @returns {string} Rounding method name.\n\t */\n\tstatic toString() {\n\t\treturn \"UNNECESSARY\";\n\t}\n\n\t/**\n\t * Numeric value to add.\n\t * It is rounded when this value is added.\n\t * @param {number} x - Rounding value. When specified as an integer, the first digit is rounded.\n\t * @returns {number} Numeric value to add.\n\t */\n\tstatic getAddNumber(x) {\n\t\tconst y = x % 10;\n\t\tif(y === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t}\n\n}\n\n/**\n * Rounding mode class for BigDecimal.\n */\nexport default class RoundingMode {\n\n\t/**\n\t * Get rounding class represented by specified string.\n\t * @param {string|RoundingModeEntity|Object} name - Mode name.\n\t * @returns {typeof RoundingModeEntity}\n\t */\n\tstatic valueOf(name) {\n\t\tlet check_string;\n\t\tif(typeof name === \"string\") {\n\t\t\tcheck_string = name;\n\t\t}\n\t\telse if(name instanceof Object) {\n\t\t\tcheck_string = name.toString();\n\t\t}\n\t\telse {\n\t\t\tthrow \"Unsupported argument \" + name;\n\t\t}\n\t\tconst modetype = [\n\t\t\tRoundingMode_UP,\n\t\t\tRoundingMode_DOWN,\n\t\t\tRoundingMode_FLOOR,\n\t\t\tRoundingMode_CEILING,\n\t\t\tRoundingMode_HALF_UP,\n\t\t\tRoundingMode_HALF_DOWN,\n\t\t\tRoundingMode_HALF_EVEN,\n\t\t\tRoundingMode_UNNECESSARY\n\t\t];\n\t\tconst upper_name = check_string.toUpperCase();\n\t\tfor(let i = 0; i < modetype.length; i++) {\n\t\t\tif(modetype[i].toString() === upper_name) {\n\t\t\t\treturn modetype[i];\n\t\t\t}\n\t\t}\n\t\tthrow \"IllegalArgumentException : \" + check_string;\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * Directed rounding to an integer.\n\t * Round towards positive infinity if positive, negative infinity if negative.\n\t * @returns {typeof RoundingModeEntity}\n\t */\n\tstatic get UP() {\n\t\treturn RoundingMode_UP;\n\t}\n\n\t/**\n\t * Directed rounding to an integer.\n\t * Round towards 0.\n\t * @returns {typeof RoundingModeEntity}\n\t */\n\tstatic get DOWN() {\n\t\treturn RoundingMode_DOWN;\n\t}\n\n\t/**\n\t * Directed rounding to an integer.\n\t * Round up to positive infinity.\n\t * @returns {typeof RoundingModeEntity}\n\t */\n\tstatic get CEILING() {\n\t\treturn RoundingMode_CEILING;\n\t}\n\n\t/**\n\t * Directed rounding to an integer.\n\t * Round down to negative infinity.\n\t * @returns {typeof RoundingModeEntity}\n\t */\n\tstatic get FLOOR() {\n\t\treturn RoundingMode_FLOOR;\n\t}\n\n\t/**\n\t * Rounding to the nearest integer.\n\t * Round half towards positive infinity.\n\t * @returns {typeof RoundingModeEntity}\n\t */\n\tstatic get HALF_UP() {\n\t\treturn RoundingMode_HALF_UP;\n\t}\n\n\t/**\n\t * Rounding to the nearest integer.\n\t * Round half towards negative infinity.\n\t * @returns {typeof RoundingModeEntity}\n\t */\n\tstatic get HALF_DOWN() {\n\t\treturn RoundingMode_HALF_DOWN;\n\t}\n\n\t/**\n\t * Rounding to the nearest integer\n\t * Round to the nearest side. If the median, round to the even side.\n\t * @returns {typeof RoundingModeEntity}\n\t */\n\tstatic get HALF_EVEN() {\n\t\treturn RoundingMode_HALF_EVEN;\n\t}\n\n\t/**\n\t * Do not round.\n\t * Error if you need to round it.\n\t * @returns {typeof RoundingModeEntity}\n\t */\n\tstatic get UNNECESSARY() {\n\t\treturn RoundingMode_UNNECESSARY;\n\t}\n\n}\n\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/context/RoundingMode.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 376,
    "kind": "class",
    "name": "RoundingModeEntity",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingModeEntity",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": "{RoundingModeEntity}",
    "description": "Base class for rounding mode for BigDecimal.",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingModeEntity",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingModeEntity.toString",
    "access": "public",
    "description": "Get rounding mode name in upper case English.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Rounding method name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rounding method name."
    },
    "params": []
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingModeEntity",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingModeEntity.getAddNumber",
    "access": "public",
    "description": "Numeric value to add.\nIt is rounded when this value is added.",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Numeric value to add."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Rounding value. When specified as an integer, the first digit is rounded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Numeric value to add."
    }
  },
  {
    "__docId__": 379,
    "kind": "class",
    "name": "RoundingMode_UP",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_UP",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": null,
    "description": "Directed rounding to an integer.\nRound towards positive infinity if positive, negative infinity if negative.",
    "lineNumber": 42,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_UP",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_UP.toString",
    "access": "public",
    "description": "Get rounding mode name in upper case English.",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Rounding method name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rounding method name."
    },
    "params": []
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_UP",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_UP.getAddNumber",
    "access": "public",
    "description": "Numeric value to add.\nIt is rounded when this value is added.",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Numeric value to add."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Rounding value. When specified as an integer, the first digit is rounded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Numeric value to add."
    }
  },
  {
    "__docId__": 382,
    "kind": "class",
    "name": "RoundingMode_DOWN",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_DOWN",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": null,
    "description": "Directed rounding to an integer.\nRound towards 0.",
    "lineNumber": 78,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_DOWN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_DOWN.toString",
    "access": "public",
    "description": "Get rounding mode name in upper case English.",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Rounding method name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rounding method name."
    },
    "params": []
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_DOWN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_DOWN.getAddNumber",
    "access": "public",
    "description": "Numeric value to add.\nIt is rounded when this value is added.",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Numeric value to add."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Rounding value. When specified as an integer, the first digit is rounded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Numeric value to add."
    }
  },
  {
    "__docId__": 385,
    "kind": "class",
    "name": "RoundingMode_CEILING",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_CEILING",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": null,
    "description": "Directed rounding to an integer.\nRound up to positive infinity.",
    "lineNumber": 105,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_CEILING",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_CEILING.toString",
    "access": "public",
    "description": "Get rounding mode name in upper case English.",
    "lineNumber": 111,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Rounding method name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rounding method name."
    },
    "params": []
  },
  {
    "__docId__": 387,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_CEILING",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_CEILING.getAddNumber",
    "access": "public",
    "description": "Numeric value to add.\nIt is rounded when this value is added.",
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Numeric value to add."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Rounding value. When specified as an integer, the first digit is rounded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Numeric value to add."
    }
  },
  {
    "__docId__": 388,
    "kind": "class",
    "name": "RoundingMode_FLOOR",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_FLOOR",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": null,
    "description": "Directed rounding to an integer.\nRound down to negative infinity.",
    "lineNumber": 141,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_FLOOR",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_FLOOR.toString",
    "access": "public",
    "description": "Get rounding mode name in upper case English.",
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Rounding method name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rounding method name."
    },
    "params": []
  },
  {
    "__docId__": 390,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_FLOOR",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_FLOOR.getAddNumber",
    "access": "public",
    "description": "Numeric value to add.\nIt is rounded when this value is added.",
    "lineNumber": 157,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Numeric value to add."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Rounding value. When specified as an integer, the first digit is rounded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Numeric value to add."
    }
  },
  {
    "__docId__": 391,
    "kind": "class",
    "name": "RoundingMode_HALF_UP",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_UP",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": null,
    "description": "Rounding to the nearest integer.\nRound half towards positive infinity.",
    "lineNumber": 177,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 392,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_UP",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_UP.toString",
    "access": "public",
    "description": "Get rounding mode name in upper case English.",
    "lineNumber": 183,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Rounding method name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rounding method name."
    },
    "params": []
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_UP",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_UP.getAddNumber",
    "access": "public",
    "description": "Numeric value to add.\nIt is rounded when this value is added.",
    "lineNumber": 193,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Numeric value to add."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Rounding value. When specified as an integer, the first digit is rounded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Numeric value to add."
    }
  },
  {
    "__docId__": 394,
    "kind": "class",
    "name": "RoundingMode_HALF_DOWN",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_DOWN",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": null,
    "description": "Rounding to the nearest integer.\nRound half towards negative infinity.",
    "lineNumber": 211,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_DOWN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_DOWN.toString",
    "access": "public",
    "description": "Get rounding mode name in upper case English.",
    "lineNumber": 217,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Rounding method name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rounding method name."
    },
    "params": []
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_DOWN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_DOWN.getAddNumber",
    "access": "public",
    "description": "Numeric value to add.\nIt is rounded when this value is added.",
    "lineNumber": 227,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Numeric value to add."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Rounding value. When specified as an integer, the first digit is rounded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Numeric value to add."
    }
  },
  {
    "__docId__": 397,
    "kind": "class",
    "name": "RoundingMode_HALF_EVEN",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_EVEN",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": null,
    "description": "Rounding to the nearest integer\nRound to the nearest side. If the median, round to the even side.",
    "lineNumber": 245,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_EVEN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_EVEN.toString",
    "access": "public",
    "description": "Get rounding mode name in upper case English.",
    "lineNumber": 251,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Rounding method name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rounding method name."
    },
    "params": []
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_EVEN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_EVEN.getAddNumber",
    "access": "public",
    "description": "Numeric value to add.\nIt is rounded when this value is added.",
    "lineNumber": 261,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Numeric value to add."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Rounding value. When specified as an integer, the first digit is rounded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Numeric value to add."
    }
  },
  {
    "__docId__": 400,
    "kind": "class",
    "name": "RoundingMode_UNNECESSARY",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_UNNECESSARY",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": null,
    "description": "Do not round.\nError if you need to round it.",
    "lineNumber": 295,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 401,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_UNNECESSARY",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_UNNECESSARY.toString",
    "access": "public",
    "description": "Get rounding mode name in upper case English.",
    "lineNumber": 301,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Rounding method name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Rounding method name."
    },
    "params": []
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_UNNECESSARY",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_UNNECESSARY.getAddNumber",
    "access": "public",
    "description": "Numeric value to add.\nIt is rounded when this value is added.",
    "lineNumber": 311,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Numeric value to add."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Rounding value. When specified as an integer, the first digit is rounded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Numeric value to add."
    }
  },
  {
    "__docId__": 403,
    "kind": "class",
    "name": "RoundingMode",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": "RoundingMode",
    "description": "Rounding mode class for BigDecimal.",
    "lineNumber": 326,
    "interface": false
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode.valueOf",
    "access": "public",
    "description": "Get rounding class represented by specified string.",
    "lineNumber": 333,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingModeEntity}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "RoundingModeEntity",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Mode name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 405,
    "kind": "get",
    "name": "UP",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode.UP",
    "access": "public",
    "description": "Directed rounding to an integer.\nRound towards positive infinity if positive, negative infinity if negative.",
    "lineNumber": 372,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 406,
    "kind": "get",
    "name": "DOWN",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode.DOWN",
    "access": "public",
    "description": "Directed rounding to an integer.\nRound towards 0.",
    "lineNumber": 381,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 407,
    "kind": "get",
    "name": "CEILING",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode.CEILING",
    "access": "public",
    "description": "Directed rounding to an integer.\nRound up to positive infinity.",
    "lineNumber": 390,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 408,
    "kind": "get",
    "name": "FLOOR",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode.FLOOR",
    "access": "public",
    "description": "Directed rounding to an integer.\nRound down to negative infinity.",
    "lineNumber": 399,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "get",
    "name": "HALF_UP",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode.HALF_UP",
    "access": "public",
    "description": "Rounding to the nearest integer.\nRound half towards positive infinity.",
    "lineNumber": 408,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "get",
    "name": "HALF_DOWN",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode.HALF_DOWN",
    "access": "public",
    "description": "Rounding to the nearest integer.\nRound half towards negative infinity.",
    "lineNumber": 417,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "get",
    "name": "HALF_EVEN",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode.HALF_EVEN",
    "access": "public",
    "description": "Rounding to the nearest integer\nRound to the nearest side. If the median, round to the even side.",
    "lineNumber": 426,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 412,
    "kind": "get",
    "name": "UNNECESSARY",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode.UNNECESSARY",
    "access": "public",
    "description": "Do not round.\nError if you need to round it.",
    "lineNumber": 435,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{typeof RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "typeof RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 413,
    "kind": "file",
    "name": "src/math/Fraction.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport BigInteger from \"./BigInteger.mjs\";\n\n// @ts-ignore\nimport BigDecimal from \"./BigDecimal.mjs\";\n\n// @ts-ignore\nimport MathContext from \"./context/MathContext.mjs\";\n\n/**\n * Collection of functions used in Fraction.\n * @ignore\n */\nclass FractionTool {\n\n\t/**\n\t * Create data for Fraction from strings.\n\t * @param ntext {string}\n\t * @return {Fraction}\n\t */\n\tstatic to_fraction_data_from_number_string(ntext) {\n\t\tlet scale = 0;\n\t\tlet buff;\n\t\tlet is_negate = false;\n\t\t// 正規化\n\t\tlet text = ntext.replace(/\\s/g, \"\").toLowerCase();\n\t\t// +-の符号があるか\n\t\tconst number_text = [];\n\t\tbuff = text.match(/^[+-]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tif(buff.indexOf(\"-\") !== -1) {\n\t\t\t\tis_negate = true;\n\t\t\t\tnumber_text.push(\"-\");\n\t\t\t}\n\t\t}\n\t\t// 整数部があるか\n\t\tbuff = text.match(/^[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tnumber_text.push(buff);\n\t\t}\n\t\t// 浮動小数点の計算がない場合はここで完了\n\t\tif(text.length === 0) {\n\t\t\treturn new Fraction([new BigInteger([number_text.join(\"\"), 10]), BigInteger.ONE]);\n\t\t}\n\t\t// 巡回小数点指定があるか\n\t\tlet cyclic_decimal = null;\n\t\tif(/[()'\"[\\]]/.test(text)) {\n\t\t\tconst match_data = text.match(/([^.]*)\\.(\\d*)[(['\"](\\d+)[)\\]'\"](.*)/);\n\t\t\tif(match_data === null) {\n\t\t\t\tthrow \"Fraction Unsupported argument \" + text;\n\t\t\t}\n\t\t\t// 巡回少数の場所\n\t\t\tconst cyclic_decimal_scale = match_data[2].length;\n\t\t\tconst cyclic_decimal_text = match_data[3];\n\t\t\t// 巡回少数以外を抽出\n\t\t\tif(cyclic_decimal_scale === 0) {\n\t\t\t\ttext = match_data[1] + match_data[4];\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttext = match_data[1] + \".\" + match_data[2] + match_data[4];\n\t\t\t}\n\n\t\t\tconst numerator = new BigInteger([cyclic_decimal_text, 10]);\n\t\t\tconst denominator_string = [];\n\t\t\tfor(let i = 0; i < cyclic_decimal_text.length; i++) {\n\t\t\t\tdenominator_string.push(\"9\");\n\t\t\t}\n\t\t\tconst denominator = new BigInteger([denominator_string.join(\"\"), 10]);\n\t\t\tcyclic_decimal = new Fraction([numerator, denominator]);\n\t\t\tcyclic_decimal = cyclic_decimal.scaleByPowerOfTen(-cyclic_decimal_scale);\n\t\t}\n\t\t// 小数部があるか\n\t\tbuff = text.match(/^\\.[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tbuff = buff.substr(1);\n\t\t\tscale = scale + buff.length;\n\t\t\tnumber_text.push(buff);\n\t\t}\n\t\t// 指数表記があるか\n\t\tbuff = text.match(/^e[+-]?[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0].substr(1);\n\t\t\tscale = scale - parseInt(buff, 10);\n\t\t}\n\n\t\tlet f = null;\n\t\t{\n\t\t\tlet numerator = null;\n\t\t\tlet denominator = null;\n\t\t\t// 出力用の文字を作成\n\t\t\tif(scale === 0) {\n\t\t\t\tnumerator = new BigInteger([number_text.join(\"\"), 10]);\n\t\t\t\tdenominator = BigInteger.ONE;\n\t\t\t}\n\t\t\tif(scale < 0) {\n\t\t\t\tfor(let i = 0; i < -scale; i++) {\n\t\t\t\t\tnumber_text.push(\"0\");\n\t\t\t\t}\n\t\t\t\tnumerator = new BigInteger([number_text.join(\"\"), 10]);\n\t\t\t\tdenominator = BigInteger.ONE;\n\t\t\t}\n\t\t\telse if(scale > 0) {\n\t\t\t\tnumerator = new BigInteger([number_text.join(\"\"), 10]);\n\t\t\t\tconst denominator_string = [\"1\"];\n\t\t\t\tfor(let i = 0; i < scale; i++) {\n\t\t\t\t\tdenominator_string.push(\"0\");\n\t\t\t\t}\n\t\t\t\tdenominator = new BigInteger([denominator_string.join(\"\"), 10]);\n\t\t\t}\n\t\t\tf = new Fraction([numerator, denominator]);\n\t\t}\n\t\tif(cyclic_decimal) {\n\t\t\tif(!is_negate) {\n\t\t\t\tf = f.add(cyclic_decimal);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tf = f.sub(cyclic_decimal);\n\t\t\t}\n\t\t}\n\t\treturn f;\n\t}\n\n\t/**\n\t * Create data for Fraction from fractional string.\n\t * @param ntext {string}\n\t * @return {Fraction}\n\t */\n\tstatic to_fraction_data_from_fraction_string(ntext) {\n\t\tif(ntext.indexOf(\"/\") === -1) {\n\t\t\treturn FractionTool.to_fraction_data_from_number_string(ntext);\n\t\t}\n\t\telse {\n\t\t\tconst fraction_value = ntext.split(\"/\");\n\t\t\tconst numerator_value = FractionTool.to_fraction_data_from_number_string(fraction_value[0]);\n\t\t\tconst denominator_value = FractionTool.to_fraction_data_from_number_string(fraction_value[1]);\n\t\t\treturn numerator_value.div(denominator_value);\n\t\t}\n\t}\n\n\t/**\n\t * Create data for Fraction from number.\n\t * @param value {number}\n\t * @return {Fraction}\n\t */\n\tstatic to_fraction_data_from_number(value) {\n\t\tlet numerator = null;\n\t\tlet denominator = null;\n\t\t// 整数\n\t\tif(value === Math.floor(value)) {\n\t\t\tnumerator = new BigInteger(value);\n\t\t\tdenominator = BigInteger.ONE;\n\t\t}\n\t\t// 浮動小数\n\t\telse {\n\t\t\tlet scale = Math.trunc(Math.log(Math.abs(value)) / Math.log(10));\n\t\t\tlet x = value / Math.pow(10, scale);\n\t\t\t// スケールを逆にする\n\t\t\tscale = - scale;\n\t\t\tfor(let i = 0; i < 14; i++) {\n\t\t\t\tx = x * 10;\n\t\t\t\tscale = scale + 1;\n\t\t\t\tif(Math.abs(x - Math.round(x)) <= Number.EPSILON) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 最も下の桁は四捨五入する\n\t\t\tx = Math.round(x * 1e14) / 1e14;\n\t\t\tif(scale <= 0) {\n\t\t\t\tnumerator = new BigInteger(value);\n\t\t\t\tdenominator = BigInteger.ONE;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnumerator = new BigInteger(x);\n\t\t\t\tconst denominator_string = [\"1\"];\n\t\t\t\tfor(let i = 0; i < scale; i++) {\n\t\t\t\t\tdenominator_string.push(\"0\");\n\t\t\t\t}\n\t\t\t\tdenominator = new BigInteger([denominator_string.join(\"\"), 10]);\n\t\t\t}\n\t\t}\n\t\treturn new Fraction([numerator, denominator]);\n\t}\n\n\t/**\n\t * Normalization.\n\t * - Reduce fraction using gcd.\n\t * - Add the sign to the numerator.\n\t * - If the number is zero, the denominator is one.\n\t * @param value {Fraction}\n\t */\n\tstatic normalization(value) {\n\t\tif(value.denominator.equals(BigInteger.ONE)) {\n\t\t\treturn;\n\t\t}\n\t\tif(value.denominator.equals(BigInteger.MINUS_ONE)) {\n\t\t\tvalue.numerator = value.numerator.negate();\n\t\t\tvalue.denominator = BigInteger.ONE;\n\t\t\treturn;\n\t\t}\n\t\tif(value.numerator.equals(BigInteger.ZERO)) {\n\t\t\tvalue.denominator = BigInteger.ONE;\n\t\t\treturn;\n\t\t}\n\t\tconst gcd = value.numerator.gcd(value.denominator);\n\t\tlet numerator = value.numerator.div(gcd);\n\t\tlet denominator = value.denominator.div(gcd);\n\t\tif(denominator.sign() < 0) {\n\t\t\tnumerator = numerator.negate();\n\t\t\tdenominator = denominator.negate();\n\t\t}\n\t\tvalue.numerator = numerator;\n\t\tvalue.denominator = denominator;\n\t}\n\n}\n\n/**\n * Fraction class (immutable).\n */\nexport default class Fraction {\n\n\t/**\n\t * Create an fraction.\n\t * \n\t * Initialization can be performed as follows.\n\t * - 10, \"10\", \"10/1\", \"10.0/1.0\", [\"10\", \"1\"], [10, 1]\n\t * - 0.01, \"0.01\", \"0.1e-1\", \"1/100\", [1, 100], [2, 200], [\"2\", \"200\"]\n\t * - \"1/3\", \"0.[3]\", \"0.(3)\", \"0.'3'\", \"0.\"3\"\", [1, 3], [2, 6]\n\t * - \"3.555(123)\" = 3.555123123123..., \"147982 / 41625\"\n\t * @param {Fraction|BigInteger|BigDecimal|number|string|Array<Object>|{numerator:Object,denominator:Object}|Object} [number] - Fraction data. See how to use the function.\n\t */\n\tconstructor(number) {\n\t\t\n\t\t// 分子\n\t\t/**\n\t\t * @type {BigInteger}\n\t\t */\n\t\tthis.numerator = null;\n\n\t\t// 分母\n\t\t/**\n\t\t * @type {BigInteger}\n\t\t */\n\t\tthis.denominator = null;\n\n\t\tif(arguments.length === 0) {\n\t\t\tthis.numerator = BigInteger.ZERO;\n\t\t\tthis.denominator = BigInteger.ONE;\n\t\t}\n\t\telse if(arguments.length === 1) {\n\t\t\tlet is_normalization = false;\n\t\t\tif(typeof number === \"number\") {\n\t\t\t\tconst x = FractionTool.to_fraction_data_from_number(number);\n\t\t\t\tthis.numerator = x.numerator;\n\t\t\t\tthis.denominator = x.denominator;\n\t\t\t}\n\t\t\telse if(typeof number === \"string\") {\n\t\t\t\tconst x = FractionTool.to_fraction_data_from_fraction_string(number);\n\t\t\t\tthis.numerator = x.numerator;\n\t\t\t\tthis.denominator = x.denominator;\n\t\t\t}\n\t\t\telse if(number instanceof BigInteger) {\n\t\t\t\tthis.numerator = number;\n\t\t\t\tthis.denominator = BigInteger.ONE;\n\t\t\t}\n\t\t\telse if(number instanceof Fraction) {\n\t\t\t\tthis.numerator = number.numerator;\n\t\t\t\tthis.denominator = number.denominator;\n\t\t\t}\n\t\t\telse if((number instanceof Array) && (number.length === 2)) {\n\t\t\t\tthis.numerator = (number[0] instanceof BigInteger) ? number[0] : new BigInteger(number[0]);\n\t\t\t\tthis.denominator = (number[1] instanceof BigInteger) ? number[1] : new BigInteger(number[1]);\n\t\t\t\tis_normalization = true;\n\t\t\t}\n\t\t\telse if((number instanceof Object) && number.numerator && number.denominator) {\n\t\t\t\tthis.numerator = (number.numerator instanceof BigInteger) ? number.numerator : new BigInteger(number.numerator);\n\t\t\t\tthis.denominator = (number.denominator instanceof BigInteger) ? number.denominator : new BigInteger(number.denominator);\n\t\t\t\tis_normalization = true;\n\t\t\t}\n\t\t\telse if(number instanceof BigDecimal) {\n\t\t\t\tconst value = new Fraction(number.unscaledValue());\n\t\t\t\tconst x = value.scaleByPowerOfTen(-number.scale());\n\t\t\t\tthis.numerator = x.numerator;\n\t\t\t\tthis.denominator = x.denominator;\n\t\t\t}\n\t\t\telse if((number instanceof Object) && (number.doubleValue)) {\n\t\t\t\tconst x = FractionTool.to_fraction_data_from_number(number.doubleValue);\n\t\t\t\tthis.numerator = x.numerator;\n\t\t\t\tthis.denominator = x.denominator;\n\t\t\t}\n\t\t\telse if(number instanceof Object) {\n\t\t\t\tconst x1 = FractionTool.to_fraction_data_from_fraction_string(number.toString());\n\t\t\t\tthis.numerator = x1.numerator;\n\t\t\t\tthis.denominator = x1.denominator;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow \"Fraction Unsupported argument \" + number;\n\t\t\t}\n\t\t\tif(is_normalization) {\n\t\t\t\tFractionTool.normalization(this);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow \"Fraction Unsupported argument \" + number;\n\t\t}\n\t}\n\n\t/**\n\t * Create an entity object of this class.\n\t * @returns {Fraction}\n\t */\n\tstatic create(number) {\n\t\tif(number instanceof Fraction) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new Fraction(number);\n\t\t}\n\t}\n\n\t/**\n\t * Convert number to Fraction type.\n\t * @returns {Fraction}\n\t */\n\tstatic valueOf(number) {\n\t\treturn Fraction.create(number);\n\t}\n\n\t/**\n\t * Convert to Fraction.\n\t * @param {Fraction|BigInteger|BigDecimal|number|string|Array<Object>|{numerator:Object,denominator:Object}|Object} number \n\t * @returns {Fraction}\n\t * @private\n\t */\n\tstatic _toFraction(number) {\n\t\tif(number instanceof Fraction) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new Fraction(number);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to real number.\n\t * @param {Fraction|BigInteger|BigDecimal|number|string|Array<Object>|{numerator:Object,denominator:Object}|Object} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toFloat(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn number;\n\t\t}\n\t\telse if(number instanceof Fraction) {\n\t\t\treturn number.doubleValue;\n\t\t}\n\t\telse {\n\t\t\treturn (new Fraction(number)).doubleValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert to integer.\n\t * @param {Fraction|BigInteger|BigDecimal|number|string|Array<Object>|{numerator:Object,denominator:Object}|Object} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toInteger(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn Math.trunc(number);\n\t\t}\n\t\telse if(number instanceof Fraction) {\n\t\t\treturn number.intValue;\n\t\t}\n\t\telse {\n\t\t\treturn (new Fraction(number)).intValue;\n\t\t}\n\t}\n\n\t/**\n\t * Deep copy.\n\t * @returns {Fraction} \n\t */\n\tclone() {\n\t\treturn new Fraction(this);\n\t}\n\n\t/**\n\t * Absolute value.\n\t * @returns {Fraction} abs(A)\n\t */\n\tabs() {\n\t\tif(this.sign() >= 0) {\n\t\t\treturn this;\n\t\t}\n\t\treturn this.negate();\n\t}\n\n\t/**\n\t * this * -1\n\t * @returns {Fraction} -A\n\t */\n\tnegate() {\n\t\treturn new Fraction([this.numerator.negate(), this.denominator]);\n\t}\n\n\t/**\n\t * The positive or negative sign of this number.\n\t * - +1 if positive, -1 if negative, 0 if 0.\n\t * @returns {number}\n\t */\n\tsign() {\n\t\treturn this.numerator.sign();\n\t}\n\t\n\t/**\n\t * Convert to string.\n\t * @returns {string} \n\t */\n\ttoString() {\n\t\treturn this.numerator.toString() + \" / \" + this.denominator.toString();\n\t}\n\n\t// ----------------------\n\t// 四則演算\n\t// ----------------------\n\t\n\t/**\n\t * Add.\n\t * @param {Fraction|BigInteger|BigDecimal|number|string|Array<Object>|{numerator:Object,denominator:Object}|Object} num\n\t * @return {Fraction}\n\t */\n\tadd(num) {\n\t\tconst x = this;\n\t\tconst y = Fraction._toFraction(num);\n\t\tlet f;\n\t\tif(x.isInteger() && y.isInteger()) {\n\t\t\tf = new Fraction([ x.numerator.add(y.numerator), BigInteger.ONE]);\n\t\t}\n\t\telse {\n\t\t\tf = new Fraction([\n\t\t\t\tx.numerator.mul(y.denominator).add(y.numerator.mul(x.denominator)),\n\t\t\t\tx.denominator.mul(y.denominator)\n\t\t\t]);\n\t\t}\n\t\treturn f;\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {Fraction|BigInteger|BigDecimal|number|string|Array<Object>|{numerator:Object,denominator:Object}|Object} num\n\t * @return {Fraction}\n\t */\n\tsub(num) {\n\t\tconst x = this;\n\t\tconst y = Fraction._toFraction(num);\n\t\tlet f;\n\t\tif(x.isInteger() && y.isInteger()) {\n\t\t\tf = new Fraction([ x.numerator.sub(y.numerator), BigInteger.ONE]);\n\t\t}\n\t\telse {\n\t\t\tf = new Fraction([\n\t\t\t\tx.numerator.mul(y.denominator).sub(y.numerator.mul(x.denominator)),\n\t\t\t\tx.denominator.mul(y.denominator)\n\t\t\t]);\n\t\t}\n\t\treturn f;\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {Fraction|BigInteger|BigDecimal|number|string|Array<Object>|{numerator:Object,denominator:Object}|Object} num\n\t * @return {Fraction}\n\t */\n\tmul(num) {\n\t\tconst x = this;\n\t\tconst y = Fraction._toFraction(num);\n\t\tlet f;\n\t\tif(x.isInteger() && y.isInteger()) {\n\t\t\tf = new Fraction([ x.numerator.mul(y.numerator), BigInteger.ONE]);\n\t\t}\n\t\telse {\n\t\t\tf = new Fraction([ x.numerator.mul(y.numerator), x.denominator.mul(y.denominator) ]);\n\t\t}\n\t\treturn f;\n\t}\n\n\t/**\n\t * Divide.\n\t * @param {Fraction|BigInteger|BigDecimal|number|string|Array<Object>|{numerator:Object,denominator:Object}|Object} num\n\t * @return {Fraction}\n\t */\n\tdiv(num) {\n\t\tconst x = this;\n\t\tconst y = Fraction._toFraction(num);\n\t\tlet f;\n\t\tif(x.isInteger() && y.isInteger()) {\n\t\t\tf = new Fraction([ x.numerator, y.numerator]);\n\t\t}\n\t\telse {\n\t\t\tf = new Fraction([ x.numerator.mul(y.denominator), y.numerator.mul(x.denominator)]);\n\t\t}\n\t\treturn f;\n\t}\n\n\t/**\n\t * Inverse number of this value.\n\t * @return {Fraction}\n\t */\n\tinv() {\n\t\treturn new Fraction([ this.denominator, this.numerator]);\n\t}\n\n\t/**\n\t * Modulo, positive remainder of division.\n\t * @param {Fraction|BigInteger|BigDecimal|number|string|Array<Object>|{numerator:Object,denominator:Object}|Object} num\n\t * @return {Fraction}\n\t */\n\tmod(num) {\n\t\tconst x = this;\n\t\tconst y = Fraction._toFraction(num);\n\t\t// x - y * floor(x/y)\n\t\treturn x.sub(y.mul(x.div(y).floor()));\n\t}\n\n\t/**\n\t * Power function.\n\t * - Supports only integers.\n\t * @param {Fraction|BigInteger|BigDecimal|number|string|Array<Object>|{numerator:Object,denominator:Object}|Object} num\n\t * @returns {Fraction} pow(A, B)\n\t */\n\tpow(num) {\n\t\tconst x = this;\n\t\tconst y = Fraction._toInteger(num);\n\t\tconst numerator = x.numerator.pow(y);\n\t\tconst denominator = x.denominator.pow(y);\n\t\treturn new Fraction([ numerator, denominator ]);\n\t}\n\n\t// ----------------------\n\t// その他の演算\n\t// ----------------------\n\t\n\t/**\n\t * Factorial function, x!.\n\t * - Supports only integers.\n\t * @returns {Fraction} n!\n\t */\n\tfactorial() {\n\t\treturn new Fraction([this.toBigInteger().factorial(), Fraction.ONE]);\n\t}\n\n\t/**\n\t * Multiply a multiple of ten.\n\t * - Supports only integers.\n\t * @param {Fraction|BigInteger|BigDecimal|number|string|Array<Object>|{numerator:Object,denominator:Object}|Object} n\n\t * @returns {Fraction}\n\t */\n\tscaleByPowerOfTen(n) {\n\t\tconst scale = Fraction._toInteger(n);\n\t\tif(scale === 0) {\n\t\t\treturn this;\n\t\t}\n\t\tlet f;\n\t\tif(scale > 0) {\n\t\t\tf = new Fraction([ this.numerator.scaleByPowerOfTen(scale), this.denominator]);\n\t\t}\n\t\telse if(scale < 0) {\n\t\t\tf = new Fraction([ this.numerator, this.denominator.scaleByPowerOfTen(-scale)]);\n\t\t}\n\t\treturn f;\n\t}\n\n\t// ----------------------\n\t// 他の型に変換用\n\t// ----------------------\n\t\n\t/**\n\t * integer value.\n\t * @returns {number}\n\t */\n\tget intValue() {\n\t\tif(this.isInteger()) {\n\t\t\treturn Math.trunc(this.numerator.doubleValue);\n\t\t}\n\t\treturn Math.trunc(this.doubleValue);\n\t}\n\n\t/**\n\t * floating point.\n\t * @returns {number}\n\t */\n\tget doubleValue() {\n\t\tif(this.isInteger()) {\n\t\t\treturn this.numerator.doubleValue;\n\t\t}\n\t\tconst x = new BigDecimal([this.numerator, MathContext.UNLIMITED]);\n\t\tconst y = new BigDecimal([this.denominator, MathContext.UNLIMITED]);\n\t\treturn x.div(y, {context : MathContext.DECIMAL64}).doubleValue;\n\t}\n\n\t/**\n\t * return BigInteger.\n\t * @returns {BigInteger}\n\t */\n\ttoBigInteger() {\n\t\treturn new BigInteger(this.fix().numerator);\n\t}\n\t\n\t/**\n\t * return BigDecimal.\n\t * @param {MathContext} [mc] - MathContext setting after calculation. \n\t * @returns {BigDecimal}\n\t */\n\ttoBigDecimal(mc) {\n\t\tif(this.isInteger()) {\n\t\t\treturn new BigDecimal(this.numerator);\n\t\t}\n\t\tconst x = new BigDecimal([this.numerator, MathContext.UNLIMITED]);\n\t\tconst y = new BigDecimal([this.denominator, MathContext.UNLIMITED]);\n\t\tif(mc) {\n\t\t\treturn x.div(y, {context: mc});\n\t\t}\n\t\telse {\n\t\t\treturn x.div(y, {context: BigDecimal.getDefaultContext()});\n\t\t}\n\t}\n\n\t// ----------------------\n\t// 比較\n\t// ----------------------\n\t\n\t/**\n\t * Equals.\n\t * @param {Fraction|BigInteger|BigDecimal|number|string|Array<Object>|{numerator:Object,denominator:Object}|Object} num\n\t * @returns {boolean} A === B\n\t */\n\tequals(num) {\n\t\tconst x = this;\n\t\tconst y = Fraction._toFraction(num);\n\t\treturn x.numerator.equals(y.numerator) && x.denominator.equals(y.denominator);\n\t}\n\n\t/**\n\t * Compare values.\n\t * @param {Fraction|BigInteger|BigDecimal|number|string|Array<Object>|{numerator:Object,denominator:Object}|Object} num\n\t * @returns {number} A > B ? 1 : (A === B ? 0 : -1)\n\t */\n\tcompareTo(num) {\n\t\treturn this.sub(num).sign();\n\t}\n\n\t/**\n\t * Maximum number.\n\t * @param {Fraction|BigInteger|BigDecimal|number|string|Array<Object>|{numerator:Object,denominator:Object}|Object} number\n\t * @returns {Fraction} max([A, B])\n\t */\n\tmax(number) {\n\t\tconst val = Fraction._toFraction(number);\n\t\tif(this.compareTo(val) >= 0) {\n\t\t\treturn this;\n\t\t}\n\t\telse {\n\t\t\treturn val;\n\t\t}\n\t}\n\n\t/**\n\t * Minimum number.\n\t * @param {Fraction|BigInteger|BigDecimal|number|string|Array<Object>|{numerator:Object,denominator:Object}|Object} number\n\t * @returns {Fraction} min([A, B])\n\t */\n\tmin(number) {\n\t\tconst val = Fraction._toFraction(number);\n\t\tif(this.compareTo(val) >= 0) {\n\t\t\treturn val;\n\t\t}\n\t\telse {\n\t\t\treturn this;\n\t\t}\n\t}\n\n\t/**\n\t * Clip number within range.\n\t * @param {Fraction|BigInteger|BigDecimal|number|string|Array<Object>|{numerator:Object,denominator:Object}|Object} min \n\t * @param {Fraction|BigInteger|BigDecimal|number|string|Array<Object>|{numerator:Object,denominator:Object}|Object} max\n\t * @returns {Fraction} min(max(x, min), max)\n\t */\n\tclip(min, max) {\n\t\tconst min_ = Fraction._toFraction(min);\n\t\tconst max_ = Fraction._toFraction(max);\n\t\tconst arg_check = min_.compareTo(max_);\n\t\tif(arg_check === 1) {\n\t\t\tthrow \"clip(min, max) error. (min > max)->(\" + min_ + \" > \" + max_ + \")\";\n\t\t}\n\t\telse if(arg_check === 0) {\n\t\t\treturn min_;\n\t\t}\n\t\tif(this.compareTo(max_) === 1) {\n\t\t\treturn max_;\n\t\t}\n\t\telse if(this.compareTo(min_) === -1) {\n\t\t\treturn min_;\n\t\t}\n\t\treturn this;\n\t}\n\n\t// ----------------------\n\t// 丸め\n\t// ----------------------\n\t\n\t/**\n\t * Floor.\n\t * @returns {Fraction} floor(A)\n\t */\n\tfloor() {\n\t\tif(this.isInteger()) {\n\t\t\treturn this;\n\t\t}\n\t\tconst x = this.fix();\n\t\tif(this.sign() > 0) {\n\t\t\treturn x;\n\t\t}\n\t\telse {\n\t\t\treturn new Fraction([x.numerator.sub(BigInteger.ONE), Fraction.ONE]);\n\t\t}\n\t}\n\n\t/**\n\t * Ceil.\n\t * @returns {Fraction} ceil(A)\n\t */\n\tceil() {\n\t\tif(this.isInteger()) {\n\t\t\treturn this;\n\t\t}\n\t\tconst x = this.fix();\n\t\tif(this.sign() > 0) {\n\t\t\treturn new Fraction([x.numerator.add(BigInteger.ONE), Fraction.ONE]);\n\t\t}\n\t\telse {\n\t\t\treturn x;\n\t\t}\n\t}\n\t\n\t/**\n\t * Rounding to the nearest integer.\n\t * @returns {Fraction} round(A)\n\t */\n\tround() {\n\t\tif(this.isInteger()) {\n\t\t\treturn this;\n\t\t}\n\t\tconst x = this.floor();\n\t\tconst fract = this.sub(x);\n\t\tif(fract.compareTo(Fraction.HALF) >= 0) {\n\t\t\treturn new Fraction([x.numerator.add(BigInteger.ONE), Fraction.ONE]);\n\t\t}\n\t\telse {\n\t\t\treturn x;\n\t\t}\n\t}\n\n\t/**\n\t * To integer rounded down to the nearest.\n\t * @returns {Fraction} fix(A), trunc(A)\n\t */\n\tfix() {\n\t\tif(this.isInteger()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new Fraction([this.numerator.div(this.denominator), Fraction.ONE]);\n\t}\n\n\t/**\n\t * Fraction.\n\t * @returns {Fraction} fract(A)\n\t */\n\tfract() {\n\t\tif(this.isInteger()) {\n\t\t\treturn Fraction.ZERO;\n\t\t}\n\t\treturn this.sub(this.floor());\n\t}\n\n\t// ----------------------\n\t// テスト系\n\t// ----------------------\n\t\n\t/**\n\t * Return true if the value is integer.\n\t * @return {boolean}\n\t */\n\tisInteger() {\n\t\treturn this.denominator.equals(BigInteger.ONE);\n\t}\n\n\t/**\n\t * this === 0\n\t * @return {boolean} A === 0\n\t */\n\tisZero() {\n\t\treturn this.numerator.equals(BigInteger.ZERO) && this.denominator.equals(BigInteger.ONE);\n\t}\n\n\t/**\n\t * this === 1\n\t * @return {boolean} A === 1\n\t */\n\tisOne() {\n\t\treturn this.numerator.equals(BigInteger.ONE) && this.denominator.equals(BigInteger.ONE);\n\t}\n\n\t/**\n\t * this > 0\n\t * @returns {boolean}\n\t */\n\tisPositive() {\n\t\treturn this.numerator.isPositive();\n\t}\n\n\t/**\n\t * this < 0\n\t * @returns {boolean}\n\t */\n\tisNegative() {\n\t\treturn this.numerator.isNegative();\n\t}\n\n\t/**\n\t * this >= 0\n\t * @returns {boolean}\n\t */\n\tisNotNegative() {\n\t\treturn this.numerator.isNotNegative();\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * -1\n\t * @returns {Fraction} -1\n\t */\n\tstatic get MINUS_ONE() {\n\t\treturn DEFINE.MINUS_ONE;\n\t}\n\n\t/**\n\t * 0\n\t * @returns {Fraction} 0\n\t */\n\tstatic get ZERO() {\n\t\treturn DEFINE.ZERO;\n\t}\n\n\t/**\n\t * 0.5\n\t * @returns {Fraction} 0.5\n\t */\n\tstatic get HALF() {\n\t\treturn DEFINE.HALF;\n\t}\n\t\n\t/**\n\t * 1\n\t * @returns {Fraction} 1\n\t */\n\tstatic get ONE() {\n\t\treturn DEFINE.ONE;\n\t}\n\t\n\t/**\n\t * 2\n\t * @returns {Fraction} 2\n\t */\n\tstatic get TWO() {\n\t\treturn DEFINE.TWO;\n\t}\n\t\n\t/**\n\t * 10\n\t * @returns {Fraction} 10\n\t */\n\tstatic get TEN() {\n\t\treturn DEFINE.TEN;\n\t}\n\n}\n\n/**\n * Collection of constant values used in the class.\n * @ignore\n */\nconst DEFINE = {\n\n\t/**\n\t * -1\n\t */\n\tMINUS_ONE : new Fraction([BigInteger.MINUS_ONE, BigInteger.ONE]),\n\n\t/**\n\t * 0\n\t */\n\tZERO : new Fraction([BigInteger.ZERO, BigInteger.ONE]),\n\t\n\t/**\n\t * 1\n\t */\n\tONE : new Fraction([BigInteger.ONE, BigInteger.ONE]),\n\n\t/**\n\t * 0.5\n\t */\n\tHALF : new Fraction([BigInteger.ONE, BigInteger.TWO]),\n\n\t/**\n\t * 2\n\t */\n\tTWO : new Fraction([BigInteger.TWO, BigInteger.ONE]),\n\n\t/**\n\t * 10\n\t */\n\tTEN : new Fraction([BigInteger.TEN, BigInteger.ONE])\n\n};\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/Fraction.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 414,
    "kind": "class",
    "name": "FractionTool",
    "memberof": "src/math/Fraction.mjs",
    "static": true,
    "longname": "src/math/Fraction.mjs~FractionTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/Fraction.mjs",
    "importStyle": null,
    "description": "Collection of functions used in Fraction.",
    "lineNumber": 25,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "to_fraction_data_from_number_string",
    "memberof": "src/math/Fraction.mjs~FractionTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Fraction.mjs~FractionTool.to_fraction_data_from_number_string",
    "access": "public",
    "description": "Create data for Fraction from strings.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ntext",
        "description": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "to_fraction_data_from_fraction_string",
    "memberof": "src/math/Fraction.mjs~FractionTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Fraction.mjs~FractionTool.to_fraction_data_from_fraction_string",
    "access": "public",
    "description": "Create data for Fraction from fractional string.",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ntext",
        "description": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "to_fraction_data_from_number",
    "memberof": "src/math/Fraction.mjs~FractionTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Fraction.mjs~FractionTool.to_fraction_data_from_number",
    "access": "public",
    "description": "Create data for Fraction from number.",
    "lineNumber": 162,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "normalization",
    "memberof": "src/math/Fraction.mjs~FractionTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Fraction.mjs~FractionTool.normalization",
    "access": "public",
    "description": "Normalization.\n- Reduce fraction using gcd.\n- Add the sign to the numerator.\n- If the number is zero, the denominator is one.",
    "lineNumber": 208,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "{Fraction}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 419,
    "kind": "class",
    "name": "Fraction",
    "memberof": "src/math/Fraction.mjs",
    "static": true,
    "longname": "src/math/Fraction.mjs~Fraction",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/Fraction.mjs",
    "importStyle": "Fraction",
    "description": "Fraction class (immutable).",
    "lineNumber": 237,
    "interface": false
  },
  {
    "__docId__": 420,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#constructor",
    "access": "public",
    "description": "Create an fraction.\n\nInitialization can be performed as follows.\n- 10, \"10\", \"10/1\", \"10.0/1.0\", [\"10\", \"1\"], [10, 1]\n- 0.01, \"0.01\", \"0.1e-1\", \"1/100\", [1, 100], [2, 200], [\"2\", \"200\"]\n- \"1/3\", \"0.[3]\", \"0.(3)\", \"0.'3'\", \"0.\"3\"\", [1, 3], [2, 6]\n- \"3.555(123)\" = 3.555123123123..., \"147982 / 41625\"",
    "lineNumber": 249,
    "params": [
      {
        "nullable": null,
        "types": [
          "Fraction",
          "BigInteger",
          "BigDecimal",
          "number",
          "string",
          "Array<Object>",
          "{numerator:Object,denominator:Object}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "number",
        "description": "Fraction data. See how to use the function."
      }
    ]
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "numerator",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#numerator",
    "access": "public",
    "description": "",
    "lineNumber": 255,
    "type": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 422,
    "kind": "member",
    "name": "denominator",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#denominator",
    "access": "public",
    "description": "",
    "lineNumber": 261,
    "type": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "create",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Fraction.mjs~Fraction.create",
    "access": "public",
    "description": "Create an entity object of this class.",
    "lineNumber": 329,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Fraction.mjs~Fraction.valueOf",
    "access": "public",
    "description": "Convert number to Fraction type.",
    "lineNumber": 342,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "_toFraction",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Fraction.mjs~Fraction._toFraction",
    "access": "private",
    "description": "Convert to Fraction.",
    "lineNumber": 352,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Fraction",
          "BigInteger",
          "BigDecimal",
          "number",
          "string",
          "Array<Object>",
          "{numerator:Object,denominator:Object}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "_toFloat",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Fraction.mjs~Fraction._toFloat",
    "access": "private",
    "description": "Convert to real number.",
    "lineNumber": 367,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Fraction",
          "BigInteger",
          "BigDecimal",
          "number",
          "string",
          "Array<Object>",
          "{numerator:Object,denominator:Object}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "_toInteger",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Fraction.mjs~Fraction._toInteger",
    "access": "private",
    "description": "Convert to integer.",
    "lineNumber": 385,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Fraction",
          "BigInteger",
          "BigDecimal",
          "number",
          "string",
          "Array<Object>",
          "{numerator:Object,denominator:Object}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#clone",
    "access": "public",
    "description": "Deep copy.",
    "lineNumber": 401,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "abs",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#abs",
    "access": "public",
    "description": "Absolute value.",
    "lineNumber": 409,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} abs(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "abs(A)"
    },
    "params": []
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "negate",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#negate",
    "access": "public",
    "description": "this * -1",
    "lineNumber": 420,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} -A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "A"
    },
    "params": []
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "sign",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#sign",
    "access": "public",
    "description": "The positive or negative sign of this number.\n- +1 if positive, -1 if negative, 0 if 0.",
    "lineNumber": 429,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#toString",
    "access": "public",
    "description": "Convert to string.",
    "lineNumber": 437,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#add",
    "access": "public",
    "description": "Add.",
    "lineNumber": 450,
    "params": [
      {
        "nullable": null,
        "types": [
          "Fraction",
          "BigInteger",
          "BigDecimal",
          "number",
          "string",
          "Array<Object>",
          "{numerator:Object,denominator:Object}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "sub",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#sub",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 471,
    "params": [
      {
        "nullable": null,
        "types": [
          "Fraction",
          "BigInteger",
          "BigDecimal",
          "number",
          "string",
          "Array<Object>",
          "{numerator:Object,denominator:Object}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "mul",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#mul",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 492,
    "params": [
      {
        "nullable": null,
        "types": [
          "Fraction",
          "BigInteger",
          "BigDecimal",
          "number",
          "string",
          "Array<Object>",
          "{numerator:Object,denominator:Object}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 456,
    "kind": "method",
    "name": "div",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#div",
    "access": "public",
    "description": "Divide.",
    "lineNumber": 510,
    "params": [
      {
        "nullable": null,
        "types": [
          "Fraction",
          "BigInteger",
          "BigDecimal",
          "number",
          "string",
          "Array<Object>",
          "{numerator:Object,denominator:Object}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "inv",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#inv",
    "access": "public",
    "description": "Inverse number of this value.",
    "lineNumber": 527,
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "mod",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#mod",
    "access": "public",
    "description": "Modulo, positive remainder of division.",
    "lineNumber": 536,
    "params": [
      {
        "nullable": null,
        "types": [
          "Fraction",
          "BigInteger",
          "BigDecimal",
          "number",
          "string",
          "Array<Object>",
          "{numerator:Object,denominator:Object}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "pow",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#pow",
    "access": "public",
    "description": "Power function.\n- Supports only integers.",
    "lineNumber": 549,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} pow(A, B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Fraction",
          "BigInteger",
          "BigDecimal",
          "number",
          "string",
          "Array<Object>",
          "{numerator:Object,denominator:Object}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "pow(A, B)"
    }
  },
  {
    "__docId__": 460,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#factorial",
    "access": "public",
    "description": "Factorial function, x!.\n- Supports only integers.",
    "lineNumber": 566,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} n!"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "n!"
    },
    "params": []
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "scaleByPowerOfTen",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#scaleByPowerOfTen",
    "access": "public",
    "description": "Multiply a multiple of ten.\n- Supports only integers.",
    "lineNumber": 576,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Fraction",
          "BigInteger",
          "BigDecimal",
          "number",
          "string",
          "Array<Object>",
          "{numerator:Object,denominator:Object}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 462,
    "kind": "get",
    "name": "intValue",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#intValue",
    "access": "public",
    "description": "integer value.",
    "lineNumber": 599,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 463,
    "kind": "get",
    "name": "doubleValue",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#doubleValue",
    "access": "public",
    "description": "floating point.",
    "lineNumber": 610,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "method",
    "name": "toBigInteger",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#toBigInteger",
    "access": "public",
    "description": "return BigInteger.",
    "lineNumber": 623,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "toBigDecimal",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#toBigDecimal",
    "access": "public",
    "description": "return BigDecimal.",
    "lineNumber": 632,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "MathContext setting after calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 466,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#equals",
    "access": "public",
    "description": "Equals.",
    "lineNumber": 655,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Fraction",
          "BigInteger",
          "BigDecimal",
          "number",
          "string",
          "Array<Object>",
          "{numerator:Object,denominator:Object}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 467,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#compareTo",
    "access": "public",
    "description": "Compare values.",
    "lineNumber": 666,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A > B ? 1 : (A === B ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Fraction",
          "BigInteger",
          "BigDecimal",
          "number",
          "string",
          "Array<Object>",
          "{numerator:Object,denominator:Object}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A > B ? 1 : (A === B ? 0 : -1)"
    }
  },
  {
    "__docId__": 468,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#max",
    "access": "public",
    "description": "Maximum number.",
    "lineNumber": 675,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Fraction",
          "BigInteger",
          "BigDecimal",
          "number",
          "string",
          "Array<Object>",
          "{numerator:Object,denominator:Object}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#min",
    "access": "public",
    "description": "Minimum number.",
    "lineNumber": 690,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Fraction",
          "BigInteger",
          "BigDecimal",
          "number",
          "string",
          "Array<Object>",
          "{numerator:Object,denominator:Object}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "clip",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#clip",
    "access": "public",
    "description": "Clip number within range.",
    "lineNumber": 706,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} min(max(x, min), max)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Fraction",
          "BigInteger",
          "BigDecimal",
          "number",
          "string",
          "Array<Object>",
          "{numerator:Object,denominator:Object}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Fraction",
          "BigInteger",
          "BigDecimal",
          "number",
          "string",
          "Array<Object>",
          "{numerator:Object,denominator:Object}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "min(max(x, min), max)"
    }
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "floor",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#floor",
    "access": "public",
    "description": "Floor.",
    "lineNumber": 733,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} floor(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "floor(A)"
    },
    "params": []
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "ceil",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#ceil",
    "access": "public",
    "description": "Ceil.",
    "lineNumber": 750,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} ceil(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "ceil(A)"
    },
    "params": []
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "round",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#round",
    "access": "public",
    "description": "Rounding to the nearest integer.",
    "lineNumber": 767,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} round(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "round(A)"
    },
    "params": []
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "fix",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#fix",
    "access": "public",
    "description": "To integer rounded down to the nearest.",
    "lineNumber": 785,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} fix(A), trunc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "fix(A), trunc(A)"
    },
    "params": []
  },
  {
    "__docId__": 475,
    "kind": "method",
    "name": "fract",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#fract",
    "access": "public",
    "description": "Fraction.",
    "lineNumber": 796,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} fract(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "fract(A)"
    },
    "params": []
  },
  {
    "__docId__": 476,
    "kind": "method",
    "name": "isInteger",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#isInteger",
    "access": "public",
    "description": "Return true if the value is integer.",
    "lineNumber": 811,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "isZero",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#isZero",
    "access": "public",
    "description": "this === 0",
    "lineNumber": 819,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === 0"
    },
    "params": []
  },
  {
    "__docId__": 478,
    "kind": "method",
    "name": "isOne",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#isOne",
    "access": "public",
    "description": "this === 1",
    "lineNumber": 827,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === 1"
    },
    "params": []
  },
  {
    "__docId__": 479,
    "kind": "method",
    "name": "isPositive",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#isPositive",
    "access": "public",
    "description": "this > 0",
    "lineNumber": 835,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "isNegative",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#isNegative",
    "access": "public",
    "description": "this < 0",
    "lineNumber": 843,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 481,
    "kind": "method",
    "name": "isNotNegative",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Fraction.mjs~Fraction#isNotNegative",
    "access": "public",
    "description": "this >= 0",
    "lineNumber": 851,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 482,
    "kind": "get",
    "name": "MINUS_ONE",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Fraction.mjs~Fraction.MINUS_ONE",
    "access": "public",
    "description": "-1",
    "lineNumber": 863,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} -1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 483,
    "kind": "get",
    "name": "ZERO",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Fraction.mjs~Fraction.ZERO",
    "access": "public",
    "description": "0",
    "lineNumber": 871,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "0"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "get",
    "name": "HALF",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Fraction.mjs~Fraction.HALF",
    "access": "public",
    "description": "0.5",
    "lineNumber": 879,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} 0.5"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "0.5"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 485,
    "kind": "get",
    "name": "ONE",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Fraction.mjs~Fraction.ONE",
    "access": "public",
    "description": "1",
    "lineNumber": 887,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} 1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 486,
    "kind": "get",
    "name": "TWO",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Fraction.mjs~Fraction.TWO",
    "access": "public",
    "description": "2",
    "lineNumber": 895,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} 2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "2"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 487,
    "kind": "get",
    "name": "TEN",
    "memberof": "src/math/Fraction.mjs~Fraction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Fraction.mjs~Fraction.TEN",
    "access": "public",
    "description": "10",
    "lineNumber": 903,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Fraction} 10"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fraction"
      ],
      "spread": false,
      "description": "10"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 488,
    "kind": "variable",
    "name": "DEFINE",
    "memberof": "src/math/Fraction.mjs",
    "static": true,
    "longname": "src/math/Fraction.mjs~DEFINE",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/Fraction.mjs",
    "importStyle": null,
    "description": "Collection of constant values used in the class.",
    "lineNumber": 913,
    "ignore": true,
    "type": {
      "types": [
        "{\"MINUS_ONE\": *, \"ZERO\": *, \"ONE\": *, \"HALF\": *, \"TWO\": *, \"TEN\": *}"
      ]
    }
  },
  {
    "__docId__": 489,
    "kind": "file",
    "name": "src/math/Matrix.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport LinearAlgebra from \"./tools/LinearAlgebra.mjs\";\n\n// @ts-ignore\nimport Statistics from \"./tools/Statistics.mjs\";\n\n// @ts-ignore\nimport Signal from \"./tools/Signal.mjs\";\n\n// @ts-ignore\nimport Complex from \"./Complex.mjs\";\n\n/**\n * Collection of calculation settings for matrix.\n * - Available options vary depending on the method.\n * @typedef {Object} MatrixSettings\n * @property {?string|?number} [dimension=\"auto\"] Calculation direction. 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\".\n * @property {Object} [correction] Correction value. For statistics. 0(unbiased), 1(sample).\n */\n\n/**\n * Collection of functions used in Matrix.\n * @ignore\n */\nclass MatrixTool {\n\n\t/**\n\t * Create actual values from data specifying matrix position.\n\t * @param {string|number|Matrix|Complex} data - A value indicating the position in a matrix.\n\t * @param {number} max - Length to initialize. (Used when \":\" is specified at matrix creation.)\n\t * @param {number} geta - Offset at initialization. (Used when \":\" is specified at matrix creation.)\n\t * @returns {Array<number>}\n\t */\n\tstatic toPositionArrayFromObject(data, max, geta) {\n\t\tif(typeof data === \"string\") {\n\t\t\tconst array_or_string = MatrixTool.toArrayFromString(data);\n\t\t\tif(array_or_string === \":\") {\n\t\t\t\t// : が指定された場合\n\t\t\t\tconst y = new Array(max);\n\t\t\t\tfor(let i = 0; i < max; i++) {\n\t\t\t\t\ty[i] =  i + geta;\n\t\t\t\t}\n\t\t\t\treturn y;\n\t\t\t}\n\t\t\telse if(array_or_string instanceof Array) {\n\t\t\t\t// 複素数の配列から中身を取り出す\n\t\t\t\tconst y = array_or_string;\n\t\t\t\tconst num_y = new Array(y.length);\n\t\t\t\tfor(let i = 0; i < y.length; i++) {\n\t\t\t\t\tnum_y[i] = Math.trunc(y[i].real);\n\t\t\t\t}\n\t\t\t\treturn num_y;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow \"toArrayFromString[\" + data + \"][\" + array_or_string + \"]\";\n\t\t\t}\n\t\t}\n\t\tlet t_data = data;\n\t\tif(!(t_data instanceof Matrix) && !(t_data instanceof Complex) && !((typeof t_data === \"number\"))) {\n\t\t\tt_data = Matrix._toMatrix(t_data);\n\t\t}\n\t\tif(t_data instanceof Matrix) {\n\t\t\tif(!t_data.isVector()) {\n\t\t\t\tthrow \"getMatrix argument \" + t_data;\n\t\t\t}\n\t\t\tconst len = t_data.length;\n\t\t\tconst y = new Array(t_data.length);\n\t\t\tif(t_data.isRow()) {\n\t\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\t\ty[i] = Math.trunc(t_data.matrix_array[0][i].real);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(t_data.isColumn()) {\n\t\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\t\ty[i] = Math.trunc(t_data.matrix_array[i][0].real);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\treturn [ Matrix._toInteger(t_data) ];\n\t}\n\n\t/**\n\t * A match function that can also extract strings excluding matched strings.\n\t * @param {string} text - Search target.\n\t * @param {RegExp} regexp - Regular expression.\n\t * @returns {Array<Object<boolean, string>>}\n\t */\n\tstatic match2(text, regexp) {\n\t\t// 対象ではないregexpの情報以外も抽出match\n\t\t// つまり \"1a2b\" で \\d を抽出すると、次のように抽出される\n\t\t// [false \"1\"]\n\t\t// [true \"a\"]\n\t\t// [false \"2\"]\n\t\t// [true \"b\"]\n\t\t// 0 ... 一致したかどうか\n\t\t// 1 ... 一致した文字列、あるいは一致していない文字列\n\t\tconst output = [];\n\t\tlet search_target = text;\n\t\tfor(let x = 0; x < 1000; x++) {\n\t\t\tconst match = search_target.match(regexp);\n\t\t\tif(match === null) {\n\t\t\t\tif(search_target.length) {\n\t\t\t\t\toutput.push([ false, search_target ]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(match.index > 0) {\n\t\t\t\toutput.push([ false, search_target.substr(0, match.index) ]);\n\t\t\t}\n\t\t\toutput.push([ true, match[0] ]);\n\t\t\tsearch_target = search_target.substr(match.index + match[0].length);\n\t\t}\n\t\treturn output;\n\t}\n\t\n\t/**\n\t * Removed front and back brackets when enclosed by brackets.\n\t * - Return null if the string has no brackets.\n\t * @param {string} text - String to be processed.\n\t * @returns {string|null} String after brackets removal or null.\n\t */\n\tstatic trimBracket(text) {\n\t\t// 前後に[]があるか確認\n\t\tif( !(/^\\[/).test(text) || !(/\\]$/).test(text)) {\n\t\t\treturn null;\n\t\t}\n\t\t// 前後の[]を除去\n\t\treturn text.substring(1, text.length - 1);\n\t}\n\n\t/**\n\t * Create Matrix type data from string data defined in JSON.\n\t * - For example, \"[xx,xx,xx], [xx,xx,xx]\"\n\t * @param {string} text - String to be processed.\n\t * @returns {Array<Array<Complex>>} Internal array used by Matrix type.\n\t */\n\tstatic toMatrixArrayFromStringForArrayJSON(text) {\n\t\tconst matrix_array = [];\n\t\t// さらにブランケット内を抽出\n\t\tlet rows = text.match(/\\[[^\\]]+\\]/g);\n\t\tif(rows === null) {\n\t\t\t// ブランケットがない場合は、1行行列である\n\t\t\trows = [text];\n\t\t}\n\t\t// 各ブランケット内を列ごとに調査\n\t\tfor(let row_count = 0; row_count < rows.length; row_count++) {\n\t\t\tconst row = rows[row_count];\n\t\t\tconst column_array = row.substring(1, row.length - 1).split(\",\");\n\t\t\tconst rows_array = [];\n\t\t\tfor(let col_count = 0; col_count < column_array.length; col_count++) {\n\t\t\t\tconst column = column_array[col_count];\n\t\t\t\trows_array[col_count] = new Complex(column);\n\t\t\t}\n\t\t\tmatrix_array[row_count] = rows_array;\n\t\t}\n\t\treturn matrix_array;\n\t}\n\n\t/**\n\t * Create a numeric array from initial values, difference values, and final values.\n\t * @param {Complex} from - Start value.\n\t * @param {Complex} delta - Delta.\n\t * @param {Complex} to - End value.\n\t * @param {boolean} [is_include_last_number=true] - Whether to include the last value.\n\t * @returns {Array<Complex>}\n\t */\n\tstatic InterpolationCalculation(from, delta, to, is_include_last_number) {\n\t\tconst FromIsGreaterThanTo = from.compareTo(to);\n\t\tconst is_include_last_number_ = is_include_last_number !== undefined ? is_include_last_number : true;\n\t\tif(FromIsGreaterThanTo === 0) {\n\t\t\treturn [from];\n\t\t}\n\t\tif(delta.isZero()) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\t// delta が負のため、どれだけたしても to にならない。\n\t\tif(delta.isNegative() && (FromIsGreaterThanTo === -1)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\t// FromIsGreaterThanTo\n\t\t// +1 from の方が大きい。下に減算タイプ\n\t\t// -1 to の方が大きい。上に加算タイプ\n\t\tconst rows_array = [];\n\t\tlet num = from;\n\t\trows_array[0] = num;\n\t\tfor(let i = 1; i < 0x10000; i++) {\n\t\t\tnum = num.add(delta);\n\t\t\tif(is_include_last_number_) {\n\t\t\t\tif(to.compareTo(num) === FromIsGreaterThanTo) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif((to.compareTo(num) * FromIsGreaterThanTo) >= 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\trows_array[i] = num;\n\t\t}\n\t\treturn rows_array;\n\t}\n\n\t/**\n\t * Create an array of numbers from data separated by match2.\n\t * @param {Array<Object<boolean, string>>} match2_string - Data separated by \"toArrayFromString\".\n\t * @returns {Array<Complex>}\n\t */\n\tstatic toArrayFromMatch2String(match2_string) {\n\t\tconst xs = match2_string;\n\t\tconst rows_array = [];\n\t\tfor(let i = 0; i < xs.length; i++) {\n\t\t\tconst xx = xs[i];\n\t\t\tif(!xx[0]) {\n\t\t\t\t// 一致していないデータであれば次へ\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// 「:記法」 1:3 なら 1,2,3。 1:2:9 なら 1:3:5:7:9\n\t\t\tif((i < xs.length - 2) && !xs[i + 1][0] && /:/.test(xs[i + 1][1])) {\n\t\t\t\tlet from, delta, to;\n\t\t\t\tif((i < xs.length - 4) && !xs[i + 3][0] && /:/.test(xs[i + 3][1])) {\n\t\t\t\t\tfrom = new Complex(xx[1]);\n\t\t\t\t\tdelta = new Complex(xs[i + 2][1]);\n\t\t\t\t\tto = new Complex(xs[i + 4][1]);\n\t\t\t\t\ti += 4;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfrom = new Complex(xx[1]);\n\t\t\t\t\tdelta = Complex.ONE;\n\t\t\t\t\tto = new Complex(xs[i + 2][1]);\n\t\t\t\t\ti += 2;\n\t\t\t\t}\n\t\t\t\tconst ip_array = MatrixTool.InterpolationCalculation(from, delta, to, true);\n\t\t\t\tfor(let j = 0; j < ip_array.length; j++) {\n\t\t\t\t\trows_array.push(ip_array[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\trows_array.push(new Complex(xx[1]));\n\t\t\t}\n\t\t}\n\n\t\treturn rows_array;\n\t}\n\n\t/**\n\t * Convert string to row part of matrix type matrix data.\n\t * Estimate the matrix by extracting parts like numbers.\n\t * @param {string} row_text - A string describing one row of the matrix.\n\t * @returns {Array<Complex>|string}\n\t */\n\tstatic toArrayFromString(row_text) {\n\t\t// 「:」のみ記載されていないかの確認\n\t\tif(row_text.trim() === \":\") {\n\t\t\treturn \":\";\n\t\t}\n\t\tconst str = row_text.toLowerCase().replace(/infinity|inf/g, \"1e100000\");\n\t\t// 左が実数（強制）で右が複素数（任意）タイプ\n\t\tconst reg1 = /[+-]? *(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))( *[+-] *[- ]?(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))?[ij])?/;\n\t\t// 左が複素数（強制）で右が実数（任意）タイプ\n\t\tconst reg2 = /[+-]? *(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))?[ij]( *[+] *[- ]?(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan)))?/;\n\t\t// reg2優先で検索\n\t\tconst reg3 = new RegExp(\"(\" + reg2.source + \")|(\" + reg1.source + \")\", \"i\");\n\t\t// 問題として 1 - -jが通る\n\t\treturn MatrixTool.toArrayFromMatch2String(MatrixTool.match2(str, reg3));\n\t}\n\n\t/**\n\t * Create Matrix type data from string data defined by character string with space separation etc.\n\t * @param {string} text - Strings to analyze.\n\t * @returns {Array<Array<Complex>>} Internal array used by Matrix type.\n\t */\n\tstatic toMatrixArrayFromStringForArraySPACE(text) {\n\t\t// 行ごとを抽出して\n\t\tconst rows = text.split(\";\");\n\t\tconst matrix_array = new Array(rows.length);\n\t\tfor(let row_count = 0; row_count < rows.length; row_count++) {\n\t\t\t// 各行の文字を解析\n\t\t\tmatrix_array[row_count] = MatrixTool.toArrayFromString(rows[row_count]);\n\t\t}\n\t\treturn matrix_array;\n\t}\n\n\t/**\n\t * Create Matrix type data composed of string data for matrix.\n\t * @param {string} text - Strings to analyze.\n\t * @returns {Array<Array<Complex>>} Internal array used by Matrix type.\n\t */\n\tstatic toMatrixArrayFromStringInBracket(text) {\n\t\t// ブラケットの中にブラケットがある＝JSON形式\n\t\tif(/[[\\]]/.test(text)) {\n\t\t\treturn MatrixTool.toMatrixArrayFromStringForArrayJSON(text);\n\t\t}\n\t\t// それ以外(MATLAB, Octave, Scilab)\n\t\telse {\n\t\t\treturn MatrixTool.toMatrixArrayFromStringForArraySPACE(text);\n\t\t}\n\t}\n\n\t/**\n\t * Create Matrix type data from string data.\n\t * @param {string} text - Strings to analyze.\n\t * @returns {Array<Array<Complex>>} Internal array used by Matrix type.\n\t */\n\tstatic toMatrixArrayFromString(text) {\n\t\t// 前後のスペースを除去\n\t\tconst trimtext = text.replace(/^\\s*|\\s*$/g, \"\");\n\t\t// ブランケットを外す\n\t\tconst withoutBracket = MatrixTool.trimBracket(trimtext);\n\t\tif(withoutBracket) {\n\t\t\t// 配列用の初期化\n\t\t\treturn MatrixTool.toMatrixArrayFromStringInBracket(withoutBracket);\n\t\t}\n\t\telse {\n\t\t\t// スカラー用の初期化\n\t\t\treturn [[new Complex(text)]];\n\t\t}\n\t}\n\n\t/**\n\t * Returns true if Matrix type internal data is correct as matrix data.\n\t * @param {Array<Array<Complex>>} m_array\n\t * @returns {boolean} \n\t */\n\tstatic isCorrectMatrixArray(m_array) {\n\t\tif(m_array.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tconst num = m_array[0].length;\n\t\tif(num === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tfor(let i = 1; i < m_array.length; i++) {\n\t\t\tif(m_array[i].length !== num) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\n/**\n * Complex matrix class. (immutable)\n */\nexport default class Matrix {\n\t\n\t/**\n\t * Create a complex matrix.\n\t * Initialization can be performed as follows.\n\t * - 10, \"10\", \"3 + 4j\", \"[ 1 ]\", \"[1, 2, 3]\", \"[1 2 3]\", [1, 2, 3],\n\t * - [[1, 2], [3, 4]], \"[1 2; 3 4]\", \"[1+2i 3+4i]\",\n\t * - \"[1:10]\", \"[1:2:3]\" (MATLAB / Octave / Scilab compatible).\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number - Complex matrix. See how to use the function.\n\t */\n\tconstructor(number) {\n\t\tlet matrix_array = null;\n\t\tlet is_check_string = false;\n\t\tif(arguments.length === 1) {\n\t\t\tconst obj = number;\n\t\t\t// 行列型なら中身をディープコピーする\n\t\t\tif(obj instanceof Matrix) {\n\t\t\t\tmatrix_array = new Array(obj.row_length);\n\t\t\t\tfor(let i = 0; i < obj.row_length; i++) {\n\t\t\t\t\tmatrix_array[i] = new Array(obj.column_length);\n\t\t\t\t\tfor(let j = 0; j < obj.column_length; j++) {\n\t\t\t\t\t\tmatrix_array[i][j] = obj.matrix_array[i][j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 複素数型なら1要素の行列\n\t\t\telse if(obj instanceof Complex) {\n\t\t\t\tmatrix_array = [[obj]];\n\t\t\t}\n\t\t\t// 行列の場合は中身を解析していく\n\t\t\telse if(obj instanceof Array) {\n\t\t\t\tmatrix_array = [];\n\t\t\t\tfor(let row_count = 0; row_count < obj.length; row_count++) {\n\t\t\t\t\t// 毎行ごと調査\n\t\t\t\t\tconst row = obj[row_count];\n\t\t\t\t\t// 各行の要素が配列の場合は、配列内配列のため再度for文で調べていく\n\t\t\t\t\tif(row instanceof Array) {\n\t\t\t\t\t\tconst rows_array = new Array(row.length);\n\t\t\t\t\t\t// 1行を調査する\n\t\t\t\t\t\tfor(let col_count = 0; col_count < row.length; col_count++) {\n\t\t\t\t\t\t\tconst column = row[col_count];\n\t\t\t\t\t\t\t// 1要素が複素数ならそのまま代入\n\t\t\t\t\t\t\tif(column instanceof Complex) {\n\t\t\t\t\t\t\t\trows_array[col_count] = column;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// 1要素が行列なら、中身を抽出して代入\n\t\t\t\t\t\t\telse if(column instanceof Matrix) {\n\t\t\t\t\t\t\t\tif(!column.isScalar()) {\n\t\t\t\t\t\t\t\t\tthrow \"Matrix in matrix\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trows_array[col_count] = column.scalar;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// それ以外の場合は、複素数クラスのコンストラクタに判断させる\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\trows_array[col_count] = new Complex(column);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatrix_array[row_count] = rows_array;\n\t\t\t\t\t}\n\t\t\t\t\t// 1つの値のみ宣言の場合は、中の配列を行ベクトルとして定義する\n\t\t\t\t\telse {\n\t\t\t\t\t\t// 行ベクトルの初期化\n\t\t\t\t\t\tif(row_count === 0) {\n\t\t\t\t\t\t\tmatrix_array[0] = new Array(obj.length);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 1要素が複素数ならそのまま代入\n\t\t\t\t\t\tif(row instanceof Complex) {\n\t\t\t\t\t\t\tmatrix_array[0][row_count] = row;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 1要素が行列なら、中身を抽出して代入\n\t\t\t\t\t\telse if(row instanceof Matrix) {\n\t\t\t\t\t\t\tif(!row.isScalar()) {\n\t\t\t\t\t\t\t\tthrow \"Matrix in matrix\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmatrix_array[0][row_count] = row.scalar;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// それ以外の場合は、複素数クラスのコンストラクタに判断させる\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tmatrix_array[0][row_count] = new Complex(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 文字列の場合は、文字列解析を行う\n\t\t\telse if(typeof obj === \"string\") {\n\t\t\t\tis_check_string = true;\n\t\t\t\tmatrix_array = MatrixTool.toMatrixArrayFromString(obj);\n\t\t\t}\n\t\t\t// 数値化できる場合\n\t\t\telse if((obj instanceof Object) && (obj.doubleValue)) {\n\t\t\t\tmatrix_array = [[new Complex(obj.doubleValue)]];\n\t\t\t}\n\t\t\t// 文字列変換できる場合は返還後に、文字列解析を行う\n\t\t\telse if(obj instanceof Object) {\n\t\t\t\tis_check_string = true;\n\t\t\t\tmatrix_array = MatrixTool.toMatrixArrayFromString(obj.toString());\n\t\t\t}\n\t\t\t// 単純なビルトインの数値など\n\t\t\telse {\n\t\t\t\tmatrix_array = [[new Complex(obj)]];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow \"Matrix : Many arguments [\" + arguments.length + \"]\";\n\t\t}\n\t\tif(is_check_string) {\n\t\t\t// 文字列データの解析の場合、\":\" データが紛れていないかを確認する。\n\t\t\t// 紛れていたらその行は削除する。\n\t\t\tfor(let row = 0; row < matrix_array.length; row++) {\n\t\t\t\tif(matrix_array[row] === \":\") {\n\t\t\t\t\tmatrix_array.splice(row--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!MatrixTool.isCorrectMatrixArray(matrix_array)) {\n\t\t\tconsole.log(matrix_array);\n\t\t\tthrow \"new Matrix IllegalArgumentException\";\n\t\t}\n\t\t\n\t\t/**\n\t\t * An array of elements in the matrix.\n\t\t * @private\n\t\t * @type {Array<Array<Complex>>}\n\t\t */\n\t\tthis.matrix_array = matrix_array;\n\n\t\t/**\n\t\t * The number of rows in a matrix.\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.row_length = this.matrix_array.length;\n\t\t\n\t\t/**\n\t\t * The number of columns in a matrix.\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.column_length = this.matrix_array[0].length;\n\n\t\t/**\n\t\t * A cache that records data converted to a string.\n\t\t * @private\n\t\t * @type {string}\n\t\t */\n\t\tthis.string_cash = null;\n\t}\n\n\t/**\n\t * Create an entity object of this class.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number\n\t * @returns {Matrix}\n\t */\n\tstatic create(number) {\n\t\tif((arguments.length === 1) && (number instanceof Matrix)) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new Matrix(number);\n\t\t}\n\t}\n\t\n\t/**\n\t * Convert number to Matrix type.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number\n\t * @returns {Matrix}\n\t */\n\tstatic valueOf(number) {\n\t\treturn Matrix.create(number);\n\t}\n\n\t/**\n\t * Convert to Matrix.\n\t * If type conversion is unnecessary, return the value as it is.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix}\n\t * @private\n\t */\n\tstatic _toMatrix(number) {\n\t\tif(number instanceof Matrix) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new Matrix(number);\n\t\t}\n\t}\n\n\t/**\n\t * Convert to Complex.\n\t * If type conversion is unnecessary, return the value as it is.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Complex}\n\t * @private\n\t */\n\tstatic _toComplex(number) {\n\t\tif(number instanceof Complex) {\n\t\t\treturn number;\n\t\t}\n\t\tconst M = Matrix._toMatrix(number);\n\t\tif(M.isScalar()) {\n\t\t\treturn M.scalar;\n\t\t}\n\t\telse {\n\t\t\tthrow \"not scalar. [\" + number + \"]\";\n\t\t}\n\t}\n\n\t/**\n\t * Convert to real number.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toDouble(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn number;\n\t\t}\n\t\tconst x = Matrix._toComplex(number);\n\t\tif(x.isReal()) {\n\t\t\treturn x.real;\n\t\t}\n\t\telse {\n\t\t\tthrow \"not support complex numbers.\";\n\t\t}\n\t}\n\n\t/**\n\t * Convert to integer.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toInteger(number) {\n\t\treturn Math.trunc(Matrix._toDouble(number));\n\t}\n\n\t/**\n\t * Delete cache.\n\t */\n\t_clearCash() {\n\t\tif(this.string_cash) {\n\t\t\tdelete this.string_cash;\n\t\t}\n\t}\n\n\t/**\n\t * Deep copy.\n\t * @returns {Matrix}\n\t */\n\tclone() {\n\t\treturn new Matrix(this.matrix_array);\n\t}\n\n\t/**\n\t * Convert to string.\n\t * @returns {string} \n\t */\n\ttoString() {\n\t\tif(this.string_cash) {\n\t\t\treturn this.string_cash;\n\t\t}\n\t\tconst exp_turn_point = 9;\n\t\tconst exp_turn_num = Math.pow(10, exp_turn_point);\n\t\tconst exp_point = 4;\n\t\tlet isDrawImag = false;\n\t\tlet isDrawExp = false;\n\t\tlet draw_decimal_position = 0;\n\n\t\t// 行列を確認して表示するための表示方法の確認する\n\t\tthis._each(\n\t\t\tfunction(num) {\n\t\t\t\tif(!num.isReal()) {\n\t\t\t\t\tisDrawImag = true;\n\t\t\t\t}\n\t\t\t\tif(Number.isFinite(num.real)) {\n\t\t\t\t\tif(Math.abs(num.real) >= exp_turn_num) {\n\t\t\t\t\t\tisDrawExp = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(Number.isFinite(num.imag)) {\n\t\t\t\t\tif(Math.abs(num.imag) >= exp_turn_num) {\n\t\t\t\t\t\tisDrawExp = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdraw_decimal_position = Math.max(draw_decimal_position, num.getDecimalPosition());\n\t\t\t}\n\t\t);\n\n\t\tif(draw_decimal_position > 0) {\n\t\t\tdraw_decimal_position = exp_point;\n\t\t}\n\n\t\t// 文字列データを作成とともに、最大の長さを記録する\n\t\tlet str_max = 0;\n\t\tconst draw_buff = [];\n\t\t// 数値データを文字列にする関数（eの桁がある場合は中身は3桁にする）\n\t\tconst toStrFromFloat = function(number) {\n\t\t\tconst str = !isDrawExp ? number.toFixed(draw_decimal_position) : number.toExponential(exp_point);\n\t\t\tif(/inf/i.test(str)) {\n\t\t\t\tif(number === Number.POSITIVE_INFINITY) {\n\t\t\t\t\treturn \"Inf\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn \"-Inf\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(/nan/i.test(str)) {\n\t\t\t\treturn \"NaN\";\n\t\t\t}\n\t\t\telse if(!isDrawExp) {\n\t\t\t\treturn str;\n\t\t\t}\n\t\t\tconst split = str.split(\"e\");\n\t\t\tlet exp_text = split[1];\n\t\t\tif(exp_text.length === 2) {\n\t\t\t\texp_text = exp_text.substr(0, 1) + \"00\" + exp_text.substr(1);\n\t\t\t}\n\t\t\telse if(exp_text.length === 3) {\n\t\t\t\texp_text = exp_text.substr(0, 1) + \"0\" + exp_text.substr(1);\n\t\t\t}\n\t\t\treturn split[0] + \"e\" + exp_text;\n\t\t};\n\t\tthis._each(\n\t\t\tfunction(num) {\n\t\t\t\tconst data = {};\n\t\t\t\tlet real = num.real;\n\t\t\t\tdata.re_sign = real < 0 ? \"-\" : \" \";\n\t\t\t\treal = Math.abs(real);\n\t\t\t\tdata.re_str = toStrFromFloat(real);\n\t\t\t\tstr_max = Math.max(str_max, data.re_str.length + 1);\n\t\t\t\tif(isDrawImag) {\n\t\t\t\t\tlet imag = num.imag;\n\t\t\t\t\tdata.im_sign = imag < 0 ? \"-\" : \"+\";\n\t\t\t\t\timag = Math.abs(imag);\n\t\t\t\t\tdata.im_str = toStrFromFloat(imag);\n\t\t\t\t\tstr_max = Math.max(str_max, data.im_str.length + 1);\n\t\t\t\t}\n\t\t\t\tdraw_buff.push(data);\n\t\t\t}\n\t\t);\n\n\t\t// 右寄せ用関数\n\t\tconst right = function(text, length) {\n\t\t\tconst space = \"                                        \";\n\t\t\treturn space.substr(0, length - text.length) + text;\n\t\t};\n\t\t// 出力用文字列を作成する\n\t\tconst output = [];\n\t\tconst that = this;\n\t\tthis._each(\n\t\t\tfunction(num, row, col) {\n\t\t\t\tconst data = draw_buff.shift();\n\t\t\t\tlet text = right(data.re_sign + data.re_str, str_max);\n\t\t\t\tif(isDrawImag) {\n\t\t\t\t\ttext += \" \" + data.im_sign + right(data.im_str, str_max) + \"i\";\n\t\t\t\t}\n\t\t\t\toutput.push(text);\n\t\t\t\toutput.push((col < that.column_length - 1) ? \" \" : \"\\n\");\n\t\t\t}\n\t\t);\n\n\t\tthis.string_cash = output.join(\"\");\n\n\t\treturn this.string_cash;\n\t}\n\n\t/**\n\t * Convert to string in one line.\n\t * @returns {string} \n\t */\n\ttoOneLineString() {\n\t\tif(this.isScalar()) {\n\t\t\treturn this.scalar.toString();\n\t\t}\n\t\tlet output = \"[ \";\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\toutput += this.matrix_array[row][col].toString();\n\t\t\t\tif(col < this.column_length - 1) {\n\t\t\t\t\toutput += \", \";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(row < this.row_length - 1) {\n\t\t\t\t\t\toutput += \"; \";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\toutput += \" ]\";\n\t\treturn output;\n\t}\n\n\t/**\n\t * Equals.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean} A === B\n\t */\n\tequals(number, tolerance) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif((M1.row_length !== M2.row_length) || (M1.column_length !== M2.column_length)) {\n\t\t\treturn false;\n\t\t}\n\t\tif((M1.row_length === 1) && (M1.column_length ===1)) {\n\t\t\treturn M1.scalar.equals(M2.scalar, tolerance);\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tif(!x1[row][col].equals(x2[row][col], tolerance)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Array of real parts of elements in matrix.\n\t * @returns {Array<Array<number>>}\n\t */\n\tgetNumberMatrixArray() {\n\t\tconst y = new Array(this.row_length);\n\t\tfor(let i = 0; i < this.row_length; i++) {\n\t\t\ty[i] = new Array(this.column_length);\n\t\t\tfor(let j = 0; j < this.column_length; j++) {\n\t\t\t\ty[i][j] = this.matrix_array[i][j].real;\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\t\n\t/**\n\t * Complex array of complex numbers of each element of the matrix.\n\t * @returns {Array<Array<Complex>>}\n\t */\n\tgetComplexMatrixArray() {\n\t\tconst y = new Array(this.row_length);\n\t\tfor(let i = 0; i < this.row_length; i++) {\n\t\t\ty[i] = new Array(this.column_length);\n\t\t\tfor(let j = 0; j < this.column_length; j++) {\n\t\t\t\ty[i][j] = this.matrix_array[i][j];\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\t\n\t/**\n\t * Perform the same process on all elements in the matrix. (mutable)\n\t * @param {function(Complex, number, number): ?Object } eachfunc - Function(num, row, col)\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_each(eachfunc) {\n\t\tlet isclearcash = false;\n\t\t// 行優先ですべての値に対して指定した関数を実行する。内容を書き換える可能性もある\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tconst ret = eachfunc(this.matrix_array[row][col], row, col);\n\t\t\t\tif(ret === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(ret instanceof Complex) {\n\t\t\t\t\tthis.matrix_array[row][col] = ret;\n\t\t\t\t}\n\t\t\t\telse if(ret instanceof Matrix) {\n\t\t\t\t\tthis.matrix_array[row][col] = ret.scalar;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.matrix_array[row][col] = new Complex(ret);\n\t\t\t\t}\n\t\t\t\tisclearcash = true;\n\t\t\t}\n\t\t}\n\t\tif(isclearcash) {\n\t\t\tthis._clearCash();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Perform the same process on all elements in the matrix.\n\t * @param {function(Complex, number, number): ?Object } eachfunc - Function(num, row, col)\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tcloneMatrixDoEachCalculation(eachfunc) {\n\t\treturn this.clone()._each(eachfunc);\n\t}\n\n\t/**\n\t * Create Matrix with specified initialization for each element in matrix.\n\t * @param {function(number, number): ?Object } eachfunc - Function(row, col)\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} dimension - Number of dimensions or rows.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [column_length=dimension] - Number of columns.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tstatic createMatrixDoEachCalculation(eachfunc, dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 3)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\tconst y_row_length = Matrix._toInteger(dimension);\n\t\tconst y_column_length = column_length ? Matrix._toInteger(column_length) : y_row_length;\n\t\tconst y = new Array(y_row_length);\n\t\tfor(let row = 0; row < y_row_length; row++) {\n\t\t\ty[row] = new Array(y_column_length);\n\t\t\tfor(let col = 0; col < y_column_length; col++) {\n\t\t\t\tconst ret = eachfunc(row, col);\n\t\t\t\tif(ret === undefined) {\n\t\t\t\t\ty[row][col] = Complex.ZERO;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ty[row][col] = Matrix._toComplex(ret);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Treat the columns of the matrix as vectors and execute the same process.\n\t * - If the matrix is a row vector, it performs the same processing for the row vector.\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\teachVectorAuto(array_function) {\n\t\tif(this.isRow()) {\n\t\t\t// 1行であれば、その1行に対して処理を行う\n\t\t\tconst row_array = new Array(this.row_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\trow_array[col] = this.matrix_array[0][col];\n\t\t\t}\n\t\t\treturn new Matrix(array_function(row_array));\n\t\t}\n\t\telse {\n\t\t\tconst y = new Matrix(0);\n\t\t\ty._resize(1, this.column_length);\n\t\t\t// 1列、行列であれば、列ごとに処理を行う\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tconst col_array = new Array(this.row_length);\n\t\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\t\tcol_array[row] = this.matrix_array[row][col];\n\t\t\t\t}\n\t\t\t\tconst col_output = array_function(col_array);\n\t\t\t\ty._resize(Math.max(y.row_length, col_output.length), y.column_length);\n\t\t\t\tfor(let row = 0; row < col_output.length; row++) {\n\t\t\t\t\ty.matrix_array[row][col] = col_output[row];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t}\n\n\t/**\n\t * Treat the rows and columns of the matrix as vectors and perform the same processing.\n\t * 1. First run the same process for the row.\n\t * 2. Finally perform the same processing for the column.\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\teachVectorBoth(array_function) {\n\t\tconst y1 = new Matrix(0);\n\t\t// 行ごとに処理を行う\n\t\ty1._resize(this.row_length, 1);\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tconst row_array = new Array(this.column_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\trow_array[col] = this.matrix_array[row][col];\n\t\t\t}\n\t\t\tconst row_output = array_function(row_array);\n\t\t\ty1._resize(y1.row_length, Math.max(y1.column_length, row_output.length));\n\t\t\tfor(let col = 0; col < row_output.length; col++) {\n\t\t\t\ty1.matrix_array[row][col] = row_output[col];\n\t\t\t}\n\t\t}\n\t\tconst y2 = new Matrix(0);\n\t\t// 列ごとに処理を行う\n\t\ty2._resize(1, y1.column_length);\n\t\tfor(let col = 0; col < y1.column_length; col++) {\n\t\t\tconst col_array = new Array(y1.row_length);\n\t\t\tfor(let row = 0; row < y1.row_length; row++) {\n\t\t\t\tcol_array[row] = y1.matrix_array[row][col];\n\t\t\t}\n\t\t\tconst col_output = array_function(col_array);\n\t\t\ty2._resize(Math.max(y2.row_length, col_output.length), y2.column_length);\n\t\t\tfor(let row = 0; row < col_output.length; row++) {\n\t\t\t\ty2.matrix_array[row][col] = col_output[row];\n\t\t\t}\n\t\t}\n\t\treturn y2;\n\t}\n\n\t/**\n\t * Treat the rows of the matrix as vectors and execute the same process.\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\teachVectorRow(array_function) {\n\t\tconst y = new Matrix(0);\n\t\t// 行ごとに処理を行う\n\t\ty._resize(this.row_length, 1);\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tconst row_array = new Array(this.column_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\trow_array[col] = this.matrix_array[row][col];\n\t\t\t}\n\t\t\tconst row_output = array_function(row_array);\n\t\t\ty._resize(y.row_length, Math.max(y.column_length, row_output.length));\n\t\t\tfor(let col = 0; col < row_output.length; col++) {\n\t\t\t\ty.matrix_array[row][col] = row_output[col];\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Treat the columns of the matrix as vectors and execute the same process.\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\teachVectorColumn(array_function) {\n\t\tconst y = new Matrix(0);\n\t\t// 列ごとに処理を行う\n\t\ty._resize(1, this.column_length);\n\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\tconst col_array = new Array(this.row_length);\n\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\tcol_array[row] = this.matrix_array[row][col];\n\t\t\t}\n\t\t\tconst col_output = array_function(col_array);\n\t\t\ty._resize(Math.max(y.row_length, col_output.length), y.column_length);\n\t\t\tfor(let row = 0; row < col_output.length; row++) {\n\t\t\t\ty.matrix_array[row][col] = col_output[row];\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Treat the rows and columns of the matrix as vectors and perform the same processing.\n\t * The arguments of the method can switch the direction of the matrix to be executed.\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @param {string|number} [dimension=\"auto\"] - 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\"\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\teachVector(array_function, dimension) {\n\t\tlet target = dimension !== undefined ? dimension : \"auto\";\n\t\tif(typeof target === \"string\") {\n\t\t\ttarget = target.toLocaleLowerCase();\n\t\t}\n\t\telse if(typeof target !== \"number\") {\n\t\t\ttarget = Matrix._toInteger(target);\n\t\t}\n\t\tif((target === \"auto\") || (target === 0)) {\n\t\t\treturn this.eachVectorAuto(array_function);\n\t\t}\n\t\telse if((target === \"row\") || (target === 1)) {\n\t\t\treturn this.eachVectorRow(array_function);\n\t\t}\n\t\telse if((target === \"column\") || (target === 2)) {\n\t\t\treturn this.eachVectorColumn(array_function);\n\t\t}\n\t\telse if((target === \"both\") || (target === 3)) {\n\t\t\treturn this.eachVectorBoth(array_function);\n\t\t}\n\t\telse {\n\t\t\tthrow \"eachVector argument \" + dimension;\n\t\t}\n\t}\n\n\t/**\n\t * Extract the specified part of the matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} row - A vector containing the row numbers to extract from this matrix. If you specify \":\" select all rows.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} col - A vector containing the column numbers to extract from this matrix. If you specify \":\" select all columns.\n\t * @param {boolean} [isUpOffset=false] - Set offset of matrix position to 1 with true.\n\t * @returns {Matrix} \n\t */\n\tgetMatrix(row, col, isUpOffset=false) {\n\t\tconst geta = isUpOffset ? 1 : 0 ;\n\t\tconst row_array = MatrixTool.toPositionArrayFromObject(row, this.row_length, geta);\n\t\tconst col_array = MatrixTool.toPositionArrayFromObject(col, this.column_length, geta);\n\t\tconst x = this.matrix_array;\n\t\tconst y = new Array(row_array.length);\n\t\tfor(let row = 0; row < row_array.length; row++) {\n\t\t\tconst y_row = new Array(col_array.length);\n\t\t\tfor(let col = 0; col < col_array.length; col++) {\n\t\t\t\ty_row[col] = x[row_array[row] - geta][col_array[col] - geta];\n\t\t\t}\n\t\t\ty[row] = y_row;\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Change specified element in matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} row - A vector containing the row numbers to replace in this matrix. If you specify \":\" select all rows.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} col - A vector containing the column numbers to replace in this matrix. If you specify \":\" select all columns.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} replace - Matrix to be replaced.\n\t * @param {boolean} [isUpOffset=false] - Set offset of matrix position to 1 with true.\n\t * @returns {Matrix} \n\t */\n\tsetMatrix(row, col, replace, isUpOffset=false) {\n\t\tconst geta = isUpOffset ? 1 : 0 ;\n\t\tconst row_array = MatrixTool.toPositionArrayFromObject(row, this.row_length, geta);\n\t\tconst col_array = MatrixTool.toPositionArrayFromObject(col, this.column_length, geta);\n\t\tconst Y = new Matrix(this);\n\t\tconst y = Y.matrix_array;\n\t\tconst X = Matrix._toMatrix(replace);\n\t\tconst x = X.matrix_array;\n\t\tfor(let row = 0; row < row_array.length; row++) {\n\t\t\tfor(let col = 0; col < col_array.length; col++) {\n\t\t\t\ty[row_array[row] - geta][col_array[col] - geta] = x[row % X.row_length][col % X.column_length];\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Returns the specified element in the matrix.\n\t * Each element of the matrix is composed of complex numbers.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} row_or_pos - If this is a matrix, the row number. If this is a vector, the address.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [col] - If this is a matrix, the column number.\n\t * @returns {Complex} \n\t */\n\tgetComplex(row_or_pos, col) {\n\t\tlet row_or_pos_scalar = null;\n\t\tlet col_scalar = null;\n\t\tif(arguments.length === 1) {\n\t\t\trow_or_pos_scalar = Matrix._toInteger(row_or_pos);\n\t\t}\n\t\telse if(arguments.length === 2) {\n\t\t\trow_or_pos_scalar = Matrix._toInteger(row_or_pos);\n\t\t\tcol_scalar = Matrix._toInteger(col);\n\t\t}\n\t\tif(this.isRow()) {\n\t\t\treturn this.matrix_array[0][row_or_pos_scalar];\n\t\t}\n\t\telse if(this.isColumn()) {\n\t\t\treturn this.matrix_array[row_or_pos_scalar][0];\n\t\t}\n\t\telse {\n\t\t\treturn this.matrix_array[row_or_pos_scalar][col_scalar];\n\t\t}\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の基本操作、基本情報の取得\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t\n\t/**\n\t * Integer value of the first element of the matrix.\n\t * @returns {number}\n\t */\n\tget intValue() {\n\t\treturn Math.trunc(this.matrix_array[0][0].real);\n\t}\n\n\t/**\n\t * Real value of first element of the matrix.\n\t * @returns {number}\n\t */\n\tget doubleValue() {\n\t\treturn this.matrix_array[0][0].real;\n\t}\n\n\t/**\n\t * First element of this matrix.\n\t * @returns {Complex}\n\t */\n\tget scalar() {\n\t\treturn this.matrix_array[0][0];\n\t}\n\n\t/**\n\t * Maximum size of rows or columns in the matrix.\n\t * @returns {number}\n\t */\n\tget length() {\n\t\treturn this.row_length > this.column_length ? this.row_length : this.column_length;\n\t}\n\n\t/**\n\t * 1-norm.\n\t * @returns {number}\n\t */\n\tget norm1() {\n\t\treturn LinearAlgebra.norm(this, 1);\n\t}\n\t\n\t/**\n\t * 2-norm.\n\t * @returns {number}\n\t */\n\tget norm2() {\n\t\treturn LinearAlgebra.norm(this, 2);\n\t}\n\n\t/**\n\t * p-norm.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [p=2]\n\t * @returns {number}\n\t */\n\tnorm(p) {\n\t\treturn LinearAlgebra.norm(this, p);\n\t}\n\n\t/**\n\t * Condition number of the matrix\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [p=2]\n\t * @returns {number}\n\t */\n\tcond(p) {\n\t\treturn LinearAlgebra.cond(this, p);\n\t}\n\n\t/**\n\t * Inverse condition number.\n\t * @returns {number}\n\t */\n\trcond() {\n\t\treturn LinearAlgebra.rcond(this);\n\t}\n\n\t/**\n\t * Rank.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {number} rank(A)\n\t */\n\trank(tolerance) {\n\t\treturn LinearAlgebra.rank(this, tolerance);\n\t}\n\n\t/**\n\t * Trace of a matrix.\n\t * Sum of diagonal elements.\n\t * @returns {Complex} trace(A)\n\t */\n\ttrace() {\n\t\treturn LinearAlgebra.trace(this);\n\t}\n\n\t/**\n\t * Determinant.\n\t * @returns {Matrix} |A|\n\t */\n\tdet() {\n\t\treturn LinearAlgebra.det(this);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の作成関係\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t\n\t/**\n\t * Creates a matrix composed of the specified number.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number - Value after initialization.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} dimension - Number of dimensions or rows.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [column_length] - Number of columns.\n\t * @returns {Matrix}\n\t */\n\tstatic memset(number, dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 3)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\tconst M = Matrix._toMatrix(number);\n\t\tif(!M.isScalar()) {\n\t\t\tconst x = M.matrix_array;\n\t\t\tconst x_row_length = M.row_length;\n\t\t\tconst x_column_length = M.column_length;\n\t\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\t\treturn x[row % x_row_length][col % x_column_length];\n\t\t\t}, dimension, column_length);\n\t\t}\n\t\telse {\n\t\t\tconst x = M.scalar;\n\t\t\treturn Matrix.createMatrixDoEachCalculation(function() {\n\t\t\t\treturn x;\n\t\t\t}, dimension, column_length);\n\t\t}\n\t}\n\n\t/**\n\t * Return identity matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} dimension - Number of dimensions or rows.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [column_length] - Number of columns.\n\t * @returns {Matrix}\n\t */\n\tstatic eye(dimension, column_length) {\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn row === col ? Complex.ONE : Complex.ZERO;\n\t\t}, dimension, column_length);\n\t}\n\t\n\t/**\n\t * Create zero matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} dimension - Number of dimensions or rows.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [column_length] - Number of columns.\n\t * @returns {Matrix}\n\t */\n\tstatic zeros(dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 2)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\treturn Matrix.memset(Complex.ZERO, dimension, column_length);\n\t}\n\n\t/**\n\t * Create a matrix of all ones.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} dimension - Number of dimensions or rows.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [column_length] - Number of columns.\n\t * @returns {Matrix}\n\t */\n\tstatic ones(dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 2)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\treturn Matrix.memset(Complex.ONE, dimension, column_length);\n\t}\n\n\t/**\n\t * Generate a matrix composed of random values with uniform random numbers.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} dimension - Number of dimensions or rows.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [column_length] - Number of columns.\n\t * @returns {Matrix}\n\t */\n\tstatic rand(dimension, column_length) {\n\t\treturn Matrix.createMatrixDoEachCalculation(function() {\n\t\t\treturn Complex.rand();\n\t\t}, dimension, column_length);\n\t}\n\n\t/**\n\t * Generate a matrix composed of random values with normal distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} dimension - Number of dimensions or rows.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [column_length] - Number of columns.\n\t * @returns {Matrix}\n\t */\n\tstatic randn(dimension, column_length) {\n\t\treturn Matrix.createMatrixDoEachCalculation(function() {\n\t\t\treturn Complex.randn();\n\t\t}, dimension, column_length);\n\t}\n\n\t/**\n\t * If matrix, generate diagonal column vector.\n\t * If vector, generate a matrix with diagonal elements.\n\t * @returns {Matrix} Matrix or vector created. See how to use the function.\n\t */\n\tdiag() {\n\t\tif(this.isVector()) {\n\t\t\t// 行列を作成\n\t\t\tconst M = this;\n\t\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\t\tif(row === col) {\n\t\t\t\t\treturn M.getComplex(row);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn Complex.ZERO;\n\t\t\t\t}\n\t\t\t}, this.length);\n\t\t}\n\t\telse {\n\t\t\t// 列ベクトルを作成\n\t\t\tconst len = Math.min(this.row_length, this.column_length);\n\t\t\tconst y = new Array(len);\n\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\ty[i] = new Array(1);\n\t\t\t\ty[i][0] = this.matrix_array[i][i];\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t}\n\n\t// TODO 行列の結合がほしい\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 比較や判定\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Return true if the matrix is scalar.\n\t * @returns {boolean}\n\t */\n\tisScalar() {\n\t\treturn this.row_length === 1 && this.column_length == 1;\n\t}\n\t\n\t/**\n\t * Return true if the matrix is row vector.\n\t * @returns {boolean}\n\t */\n\tisRow() {\n\t\treturn this.row_length === 1;\n\t}\n\t\n\t/**\n\t * Return true if the matrix is column vector.\n\t * @returns {boolean}\n\t */\n\tisColumn() {\n\t\treturn this.column_length === 1;\n\t}\n\n\t/**\n\t * Return true if the matrix is vector.\n\t * @returns {boolean}\n\t */\n\tisVector() {\n\t\treturn this.row_length === 1 || this.column_length === 1;\n\t}\n\n\t/**\n\t * Return true if the value is not scalar.\n\t * @returns {boolean}\n\t */\n\tisMatrix() {\n\t\treturn this.row_length !== 1 && this.column_length !== 1;\n\t}\n\n\t/**\n\t * Return true if the matrix is square matrix.\n\t * @returns {boolean}\n\t */\n\tisSquare() {\n\t\treturn this.row_length === this.column_length;\n\t}\n\n\t/**\n\t * Return true if the matrix is real matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisReal(tolerance) {\n\t\tlet is_real = true;\n\t\tthis._each(function(num){\n\t\t\tif(is_real && (num.isComplex(tolerance))) {\n\t\t\t\tis_real = false;\n\t\t\t}\n\t\t});\n\t\treturn is_real;\n\t}\n\n\t/**\n\t * Return true if the matrix is complex matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisComplex(tolerance) {\n\t\treturn !this.isReal(tolerance);\n\t}\n\n\t/**\n\t * Return true if the matrix is zero matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisZeros(tolerance) {\n\t\tlet is_zeros = true;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tthis._each(function(num){\n\t\t\tif(is_zeros && (!num.isZero(tolerance_))) {\n\t\t\t\tis_zeros = false;\n\t\t\t}\n\t\t});\n\t\treturn is_zeros;\n\t}\n\n\t/**\n\t * Return true if the matrix is identity matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisIdentity(tolerance) {\n\t\tlet is_identity = true;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_identity) {\n\t\t\t\tif(row === col) {\n\t\t\t\t\tif(!num.isOne(tolerance_)) {\n\t\t\t\t\t\tis_identity = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(!num.isZero(tolerance_)) {\n\t\t\t\t\t\tis_identity = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn is_identity;\n\t}\n\n\t/**\n\t * Return true if the matrix is diagonal matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisDiagonal(tolerance) {\n\t\tlet is_diagonal = true;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_diagonal && (row !== col) && (!num.isZero(tolerance_))) {\n\t\t\t\tis_diagonal = false;\n\t\t\t}\n\t\t});\n\t\treturn is_diagonal;\n\t}\n\t\n\t/**\n\t * Return true if the matrix is tridiagonal matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisTridiagonal(tolerance) {\n\t\tlet is_tridiagonal = true;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_tridiagonal && (Math.abs(row - col) > 1) && (!num.isZero(tolerance_))) {\n\t\t\t\tis_tridiagonal = false;\n\t\t\t}\n\t\t});\n\t\treturn is_tridiagonal;\n\t}\n\n\t/**\n\t * Return true if the matrix is regular matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisRegular(tolerance) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\t// ランクが行列の次元と等しいかどうかで判定\n\t\t// det(M) != 0 でもよいが、時間がかかる可能性があるので\n\t\t// 誤差は自動で計算など本当はもうすこし良い方法を考える必要がある\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\treturn (this.rank(tolerance_) === this.row_length);\n\t}\n\n\t/**\n\t * Return true if the matrix is orthogonal matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisOrthogonal(tolerance) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\treturn (this.mul(this.transpose()).isIdentity(tolerance_));\n\t}\n\n\t/**\n\t * Return true if the matrix is unitary matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisUnitary(tolerance) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\treturn (this.mul(this.ctranspose()).isIdentity(tolerance_));\n\t}\n\n\t/**\n\t * Return true if the matrix is symmetric matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisSymmetric(tolerance) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = row + 1; col < this.column_length; col++) {\n\t\t\t\tif(!this.matrix_array[row][col].equals(this.matrix_array[col][row], tolerance_)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Return true if the matrix is hermitian matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisHermitian(tolerance) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = row; col < this.column_length; col++) {\n\t\t\t\tif(row === col) {\n\t\t\t\t\tif(!this.matrix_array[row][col].isReal(tolerance_)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(!this.matrix_array[row][col].equals(this.matrix_array[col][row].conj(), tolerance_)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Return true if the matrix is upper triangular matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisTriangleUpper(tolerance) {\n\t\tlet is_upper = true;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_upper && (row > col) && (!num.isZero(tolerance_))) {\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t});\n\t\treturn is_upper;\n\t}\n\n\t/**\n\t * Return true if the matrix is  lower triangular matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisTriangleLower(tolerance) {\n\t\tlet is_lower = true;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_lower && (row < col) && (!num.isZero(tolerance_))) {\n\t\t\t\tis_lower = false;\n\t\t\t}\n\t\t});\n\t\treturn is_lower;\n\t}\n\n\t/**\n\t * Return true if the matrix is permutation matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {boolean}\n\t */\n\tisPermutation(tolerance) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\tconst is_row = new Array(this.row_length);\n\t\tconst is_col = new Array(this.column_length);\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tconst target = this.matrix_array[row][col];\n\t\t\t\tif(target.isOne(tolerance_)) {\n\t\t\t\t\tif(!is_row[row] && !is_col[col]) {\n\t\t\t\t\t\tis_row[row] = 1;\n\t\t\t\t\t\tis_col[col] = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(!target.isZero(tolerance_)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(let i = 0;i < this.row_length; i++) {\n\t\t\tif(is_row[i] === undefined || is_col[i] === undefined) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Number of rows and columns of matrix.\n\t * @returns {Matrix} [row_length, column_length]\n\t */\n\tsize() {\n\t\t// 行列のサイズを取得\n\t\treturn new Matrix([[this.row_length, this.column_length]]);\n\t}\n\n\t/**\n\t * Compare values.\n\t * - Return value between scalars is of type Number.\n\t * - Return value between matrices is type Matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {number|Matrix} A > B ? 1 : (A === B ? 0 : -1)\n\t */\n\tcompareTo(number, tolerance) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\t// ※スカラー同士の場合は、実数を返す\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn M1.scalar.compareTo(M2.scalar, tolerance);\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].compareTo(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 四則演算\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t\n\t/**\n\t * Add.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix} A + B\n\t */\n\tadd(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif((M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].add(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * Subtract.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix} A - B\n\t */\n\tsub(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif((M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].sub(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * Multiply.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix} A * B\n\t */\n\tmul(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn new Matrix(M1.scalar.mul(M2.scalar));\n\t\t}\n\t\tif(M1.isScalar()) {\n\t\t\tconst y = new Array(M2.row_length);\n\t\t\tfor(let row = 0; row < M2.row_length; row++) {\n\t\t\t\ty[row] = new Array(M2.column_length);\n\t\t\t\tfor(let col = 0; col < M2.column_length; col++) {\n\t\t\t\t\ty[row][col] = M1.scalar.mul(x2[row][col]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\telse if(M2.isScalar()) {\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\ty[row] = new Array(M1.column_length);\n\t\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\t\ty[row][col] = x1[row][col].mul(M2.scalar);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\tif(M1.column_length !== M2.row_length) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\t{\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\ty[row] = new Array(M2.column_length);\n\t\t\t\tfor(let col = 0; col < M2.column_length; col++) {\n\t\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\t\tfor(let i = 0; i < M1.column_length; i++) {\n\t\t\t\t\t\tsum = sum.add(x1[row][i].mul(x2[i][col]));\n\t\t\t\t\t}\n\t\t\t\t\ty[row][col] = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t}\n\n\t/**\n\t * Divide.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix} A / B\n\t */\n\tdiv(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tconst x1 = M1.matrix_array;\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn new Matrix(M1.scalar.div(M2.scalar));\n\t\t}\n\t\tif(M2.isScalar()) {\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\ty[row] = new Array(M1.column_length);\n\t\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\t\ty[row][col] = x1[row][col].div(M2.scalar);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\tif(M2.row_length === M2.column_length) {\n\t\t\tconst tolerance = 1.0e-10;\n\t\t\tconst det = M2.det().scalar.norm;\n\t\t\tif(det > tolerance) {\n\t\t\t\t// ランク落ちしていないので通常の逆行列を使用する\n\t\t\t\treturn this.mul(M2.inv());\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// ランク落ちしているので疑似逆行列を使用する\n\t\t\t\treturn this.mul(M2.pinv());\n\t\t\t}\n\t\t}\n\t\tif(M1.column_length !== M2.column_length) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tthrow \"warning\";\n\t}\n\n\t/**\n\t * Power function.\n\t * - Supports only integers.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number - 整数\n\t * @returns {Matrix} pow(A, B)\n\t */\n\tpow(number) {\n\t\tif(!this.isSquare()) {\n\t\t\tthrow \"not square \" + this;\n\t\t}\n\t\tlet n = Matrix._toInteger(number);\n\t\tif(n < 0) {\n\t\t\tthrow \"error negative number \" + n;\n\t\t}\n\t\tlet x, y;\n\t\tx = this.clone();\n\t\ty = Matrix.eye(this.length);\n\t\twhile(n !== 0) {\n\t\t\tif((n & 1) !== 0) {\n\t\t\t\ty = y.mul(x);\n\t\t\t}\n\t\t\tx = x.mul(x);\n\t\t\tn >>>= 1;\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Multiplication for each element of matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix} A .* B\n\t */\n\tdotmul(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif(!M1.isScalar() && !M2.isScalar() && (M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].mul(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * Division for each element of matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix} A ./ B\n\t */\n\tdotdiv(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif(!M1.isScalar() && !M2.isScalar() && (M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].div(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * Inverse of each element of matrix.\n\t * @returns {Matrix} 1 ./ A\n\t */\n\tdotinv() {\n\t\tconst M1 = this;\n\t\tconst x1 = M1.matrix_array;\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row][col].inv();\n\t\t}, M1.row_length, M1.column_length);\n\t}\n\n\t/**\n\t * Power function for each element of the matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix} A .^ B\n\t */\n\tdotpow(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif(!M1.isScalar() && !M2.isScalar() && (M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].pow(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * Multiplication for each element of matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix} A .* B\n\t * @deprecated use the dotmul.\n\t */\n\tnmul(number) {\n\t\treturn this.dotmul(number);\n\t}\n\n\t/**\n\t * Division for each element of matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix} A ./ B\n\t * @deprecated use the dotdiv.\n\t */\n\tndiv(number) {\n\t\treturn this.dotdiv(number);\n\t}\n\n\t/**\n\t * Inverse of each element of matrix.\n\t * @returns {Matrix} 1 ./ A\n\t * @deprecated use the dotinv.\n\t */\n\tninv() {\n\t\treturn this.dotinv();\n\t}\n\n\t/**\n\t * Power function for each element of the matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix} A .^ B\n\t * @deprecated use the dotpow.\n\t */\n\tnpow(number) {\n\t\treturn this.dotpow(number);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// Complexのメソッドにある機能\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Real part of each element.\n\t * @returns {Matrix} real(A)\n\t */\n\treal() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.real);\n\t\t});\n\t}\n\t\n\t/**\n\t * Imaginary part of each element of the matrix.\n\t * @returns {Matrix} imag(A)\n\t */\n\timag() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.imag);\n\t\t});\n\t}\n\n\t/**\n\t * The argument of each element of matrix.\n\t * @returns {Matrix} arg(A)\n\t */\n\targ() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.arg);\n\t\t});\n\t}\n\n\t/**\n\t * The positive or negative signs of each element of the matrix.\n\t * - +1 if positive, -1 if negative, 0 if 0, norm if complex number.\n\t * @returns {Matrix}\n\t */\n\tsign() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.sign());\n\t\t});\n\t}\n\n\t/**\n\t * Test if each element of the matrix is integer.\n\t * - 1 if true, 0 if false.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestInteger(tolerance) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isInteger(tolerance) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * Test if each element of the matrix is complex integer.\n\t * - 1 if true, 0 if false.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestComplexInteger(tolerance) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isComplexInteger(tolerance) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * real(this) === 0\n\t * - 1 if true, 0 if false.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestZero(tolerance) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isZero(tolerance) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * real(this) === 1\n\t * - 1 if true, 0 if false.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestOne(tolerance) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isOne(tolerance) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\t\n\t/**\n\t * Test if each element of the matrix is complex.\n\t * - 1 if true, 0 if false.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestComplex(tolerance) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isComplex(tolerance) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * Test if each element of the matrix is real.\n\t * - 1 if true, 0 if false.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestReal(tolerance) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isReal(tolerance) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * Test if each element of the matrix is NaN.\n\t * - 1 if true, 0 if false.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestNaN() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isNaN() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\n\t/**\n\t * real(this) > 0\n\t * - 1 if true, 0 if false.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestPositive() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isPositive() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * real(this) < 0\n\t * - 1 if true, 0 if false.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestNegative() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isNegative() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * real(this) >= 0\n\t * - 1 if true, 0 if false.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestNotNegative() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isNotNegative() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * Test if each element of the matrix is infinite.\n\t * - 1 if true, 0 if false.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestInfinite() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isInfinite() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\t\n\t/**\n\t * Test if each element of the matrix is finite.\n\t * - 1 if true, 0 if false.\n\t * @returns {Matrix} Matrix with elements of the numerical value of 1 or 0.\n\t */\n\ttestFinite() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isFinite() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * Absolute value.\n\t * @returns {Matrix} abs(A)\n\t */\n\tabs() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.abs();\n\t\t});\n\t}\n\n\t/**\n\t * Complex conjugate matrix.\n\t * @returns {Matrix} real(A) - imag(A)j\n\t */\n\tconj() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.conj();\n\t\t});\n\t}\n\n\t/**\n\t * this * -1\n\t * @returns {Matrix} -A\n\t */\n\tnegate() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.negate();\n\t\t});\n\t}\n\n\t/**\n\t * Square root.\n\t * @returns {Matrix} sqrt(A)\n\t */\n\tsqrt() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sqrt();\n\t\t});\n\t}\n\n\t/**\n\t * Logarithmic function.\n\t * @returns {Matrix} log(A)\n\t */\n\tlog() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.log();\n\t\t});\n\t}\n\n\t/**\n\t * Exponential function.\n\t * @returns {Matrix} exp(A)\n\t */\n\texp() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.exp();\n\t\t});\n\t}\n\n\t/**\n\t * Sine function.\n\t * @returns {Matrix} sin(A)\n\t */\n\tsin() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sin();\n\t\t});\n\t}\n\n\t/**\n\t * Cosine function.\n\t * @returns {Matrix} cos(A)\n\t */\n\tcos() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.cos();\n\t\t});\n\t}\n\n\t/**\n\t * Tangent function.\n\t * @returns {Matrix} tan(A)\n\t */\n\ttan() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tan();\n\t\t});\n\t}\n\t\n\t/**\n\t * Atan (arc tangent) function.\n\t * - Return the values of [-PI/2, PI/2].\n\t * @returns {Matrix} atan(A)\n\t */\n\tatan() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.atan();\n\t\t});\n\t}\n\n\t/**\n\t * Atan (arc tangent) function.\n\t * - Return the values of [-PI, PI].\n\t * - Supports only real numbers.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number - X\n\t * @returns {Matrix} atan2(Y, X)\n\t */\n\tatan2(number) {\n\t\tconst X = Matrix._toComplex(number);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.atan2(X);\n\t\t});\n\t}\n\n\t/**\n\t * Floor.\n\t * @returns {Matrix} floor(A)\n\t */\n\tfloor() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.floor();\n\t\t});\n\t}\n\n\t/**\n\t * Ceil.\n\t * @returns {Matrix} ceil(A)\n\t */\n\tceil() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.ceil();\n\t\t});\n\t}\n\n\t/**\n\t * Rounding to the nearest integer.\n\t * @returns {Matrix} round(A)\n\t */\n\tround() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.round();\n\t\t});\n\t}\n\n\t/**\n\t * To integer rounded down to the nearest.\n\t * @returns {Matrix} fix(A), trunc(A)\n\t */\n\tfix() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.fix();\n\t\t});\n\t}\n\n\t/**\n\t * Fraction.\n\t * @returns {Matrix} fract(A)\n\t */\n\tfract() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.fract();\n\t\t});\n\t}\n\n\t/**\n\t * Normalized sinc function.\n\t * @returns {Matrix} sinc(A)\n\t */\n\tsinc() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sinc();\n\t\t});\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の計算でよく使用する処理。\n\t// メソッド内部の処理を記述する際に使用している。\n\t// 他から使用する場合は注意が必要である。\n\t// 前提条件があるメソッド、ミュータブルとなっている。\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Rotate matrix 90 degrees clockwise. (mutable)\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} rot_90_count - Number of times rotated by 90 degrees.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_rot90(rot_90_count) {\n\t\tconst count = Matrix._toInteger(rot_90_count);\n\t\tlet rot_type = 1;\n\t\tif(arguments.length === 1) {\n\t\t\trot_type = ((count % 4) + 4) % 4;\n\t\t}\n\t\tif(rot_type === 0) {\n\t\t\treturn this;\n\t\t}\n\t\t// バックアップ\n\t\tconst x = new Array(this.row_length);\n\t\tfor(let i = 0; i < this.row_length; i++) {\n\t\t\tx[i] = new Array(this.column_length);\n\t\t\tfor(let j = 0; j < this.column_length; j++) {\n\t\t\t\tx[i][j] = this.matrix_array[i][j];\n\t\t\t}\n\t\t}\n\t\tconst y = this.matrix_array;\n\t\tif(rot_type === 1) {\n\t\t\t// 90度回転\n\t\t\ty.splice(this.column_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tif(col < this.row_length) {\n\t\t\t\t\ty[col].splice(this.row_length);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ty[col] = new Array(this.row_length);\n\t\t\t\t}\n\t\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\t\ty[col][row] = x[this.row_length - row - 1][col];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(rot_type === 2) {\n\t\t\t// 180度回転\n\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\t\ty[row][col] = x[this.row_length - row - 1][this.column_length - col - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(rot_type === 3) {\n\t\t\t// 270度回転\n\t\t\ty.splice(this.column_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tif(col < this.row_length) {\n\t\t\t\t\ty[col].splice(this.row_length);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ty[col] = new Array(this.row_length);\n\t\t\t\t}\n\t\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\t\ty[col][row] = x[row][this.column_length - col - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.row_length = y.length;\n\t\tthis.column_length = y[0].length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Rotate matrix 90 degrees clockwise.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} rot_90_count - Number of times rotated by 90 degrees.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\trot90(rot_90_count) {\n\t\treturn this.clone()._rot90(rot_90_count);\n\t}\n\n\t/**\n\t * Change the size of the matrix. (mutable)\n\t * Initialized with 0 when expanding.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} new_row_length - Number of rows of matrix to resize.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} new_column_length - Number of columns of matrix to resize.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_resize(new_row_length, new_column_length) {\n\t\tconst row_length\t= Matrix._toInteger(new_row_length);\n\t\tconst column_length\t= Matrix._toInteger(new_column_length);\n\t\tif((row_length === this.row_length) && (column_length === this.column_length)) {\n\t\t\treturn this;\n\t\t}\n\t\tif((row_length <= 0) || (column_length <= 0)) {\n\t\t\tthrow \"_resize\";\n\t\t}\n\t\tconst row_max = Math.max(this.row_length, row_length);\n\t\tconst col_max = Math.max(this.column_length, column_length);\n\t\tconst y = this.matrix_array;\n\t\t// 大きくなった行と列に対してゼロで埋める\n\t\tfor(let row = 0; row < row_max; row++) {\n\t\t\tif(row >= this.row_length) {\n\t\t\t\ty[row] = new Array(col_max);\n\t\t\t}\n\t\t\tfor(let col = 0; col < col_max; col++) {\n\t\t\t\tif((row >= this.row_length) || (col >= this.column_length)) {\n\t\t\t\t\ty[row][col] = Complex.ZERO;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// 小さくなった行と列を削除する\n\t\tif(this.row_length > row_length) {\n\t\t\ty.splice(row_length);\n\t\t}\n\t\tif(this.column_length > column_length) {\n\t\t\tfor(let row = 0; row < y.length; row++) {\n\t\t\t\ty[row].splice(column_length);\n\t\t\t}\n\t\t}\n\t\tthis.row_length = row_length;\n\t\tthis.column_length = column_length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Change the size of the matrix.\n\t * Initialized with 0 when expanding.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} row_length - Number of rows of matrix to resize.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} column_length - Number of columns of matrix to resize.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tresize(row_length, column_length) {\n\t\treturn this.clone()._resize(row_length, column_length);\n\t}\n\n\t/**\n\t * Remove the row in this matrix. (mutable)\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} delete_row_index - Number of row of matrix to delete.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_deleteRow(delete_row_index) {\n\t\tconst row_index\t= Matrix._toInteger(delete_row_index);\n\t\tif((this.row_length === 1) || (this.row_length <= row_index)) {\n\t\t\tthrow \"_deleteRow\";\n\t\t}\n\t\tthis.matrix_array.splice(row_index, 1);\n\t\tthis.row_length--;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Remove the column in this matrix. (mutable)\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} delete_column_index - Number of column of matrix to delete.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_deleteColumn(delete_column_index) {\n\t\tconst column_index\t= Matrix._toInteger(delete_column_index);\n\t\tif((this.column_length === 1) || (this.column_length <= column_index)) {\n\t\t\tthrow \"_deleteColumn\";\n\t\t}\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tthis.matrix_array[row].splice(column_index, 1);\n\t\t}\n\t\tthis.column_length--;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove the row in this matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} delete_row_index - Number of row of matrix to delete.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tdeleteRow(delete_row_index) {\n\t\treturn this.clone()._deleteRow(delete_row_index);\n\t}\n\n\t/**\n\t * Remove the column in this matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} delete_column_index - Number of column of matrix to delete.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tdeleteColumn(delete_column_index) {\n\t\treturn this.clone()._deleteColumn(delete_column_index);\n\t}\n\n\t/**\n\t * Swap rows in the matrix. (mutable)\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} exchange_row_index1 - Number 1 of row of matrix to exchange.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} exchange_row_index2 - Number 2 of row of matrix to exchange.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_exchangeRow(exchange_row_index1, exchange_row_index2) {\n\t\tconst row_index1\t= Matrix._toInteger(exchange_row_index1);\n\t\tconst row_index2\t= Matrix._toInteger(exchange_row_index2);\n\t\tif((this.row_length === 1) || (this.row_length <= row_index1) || (this.row_length <= row_index2)) {\n\t\t\tthrow \"_exchangeRow\";\n\t\t}\n\t\tif(row_index1 === row_index2) {\n\t\t\treturn this;\n\t\t}\n\t\tconst swap = this.matrix_array[row_index1];\n\t\tthis.matrix_array[row_index1] = this.matrix_array[row_index2];\n\t\tthis.matrix_array[row_index2] = swap;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Swap columns in the matrix. (mutable)\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} exchange_column_index1 - Number 1 of column of matrix to exchange.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} exchange_column_index2 - Number 2 of column of matrix to exchange.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_exchangeColumn(exchange_column_index1, exchange_column_index2) {\n\t\tconst column_index1\t= Matrix._toInteger(exchange_column_index1);\n\t\tconst column_index2\t= Matrix._toInteger(exchange_column_index2);\n\t\tif((this.column_length === 1) || (this.column_length <= column_index1) || (this.column_length <= column_index2)) {\n\t\t\tthrow \"_exchangeColumn\";\n\t\t}\n\t\tif(column_index1 === column_index2) {\n\t\t\treturn this;\n\t\t}\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tconst swap = this.matrix_array[row][column_index1];\n\t\t\tthis.matrix_array[row][column_index1] = this.matrix_array[row][column_index2];\n\t\t\tthis.matrix_array[row][column_index2] = swap;\n\t\t}\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Swap rows in the matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} exchange_row_index1 - Number 1 of row of matrix to exchange.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} exchange_row_index2 - Number 2 of row of matrix to exchange.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\texchangeRow(exchange_row_index1, exchange_row_index2) {\n\t\treturn this.clone()._exchangeRow(exchange_row_index1, exchange_row_index2);\n\t}\n\n\t/**\n\t * Swap columns in the matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} exchange_column_index1 - Number 1 of column of matrix to exchange.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} exchange_column_index2 - Number 2 of column of matrix to exchange.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\texchangeColumn(exchange_column_index1, exchange_column_index2) {\n\t\treturn this.clone()._exchangeColumn(exchange_column_index1, exchange_column_index2);\n\t}\n\n\t/**\n\t * Combine matrix to the right of this matrix. (mutable)\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} left_matrix - Matrix to combine.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_concatRight(left_matrix) {\n\t\tconst M = Matrix._toMatrix(left_matrix);\n\t\tif(this.row_length != M.row_length) {\n\t\t\tthrow \"_concatRight\";\n\t\t}\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\tthis.matrix_array[row].push(M.matrix_array[row][col]);\n\t\t\t}\n\t\t}\n\t\tthis.column_length += M.column_length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Combine matrix to the bottom of this matrix. (mutable)\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} bottom_matrix - Matrix to combine.\n\t * @returns {Matrix} Matrix after function processing. (this)\n\t * @private\n\t */\n\t_concatBottom(bottom_matrix) {\n\t\tconst M = Matrix._toMatrix(bottom_matrix);\n\t\tif(this.column_length != M.column_length) {\n\t\t\tthrow \"_concatBottom\";\n\t\t}\n\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\tthis.matrix_array.push(M.matrix_array[row]);\n\t\t}\n\t\tthis.row_length += M.row_length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Combine matrix to the right of this matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} left_matrix - Matrix to combine.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tconcatRight(left_matrix) {\n\t\treturn this.clone()._concatRight(left_matrix);\n\t}\n\n\t/**\n\t * Combine matrix to the bottom of this matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} bottom_matrix - Matrix to combine.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tconcatBottom(bottom_matrix) {\n\t\treturn this.clone()._concatBottom(bottom_matrix);\n\t}\n\n\t/**\n\t * Clip each element of matrix to specified range.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} min \n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} max \n\t * @returns {Matrix} min(max(x, min), max)\n\t */\n\tclip(min, max) {\n\t\tconst MIN = Matrix._toMatrix(min);\n\t\tconst MAX = Matrix._toMatrix(max);\n\t\tconst x_min = MIN.matrix_array;\n\t\tconst x_max = MAX.matrix_array;\n\t\treturn this.cloneMatrixDoEachCalculation(\n\t\t\tfunction(num, row, col) {\n\t\t\t\tconst d_min = x_min[row % MIN.row_length][col % MIN.column_length];\n\t\t\t\tconst d_max = x_max[row % MAX.row_length][col % MAX.column_length];\n\t\t\t\treturn num.clip(d_min, d_max);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * Create row vector with specified initial value, step value, end condition.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} start_or_stop \n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [stop]\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [step=1] \n\t * @returns {Matrix}\n\t */\n\tstatic arange(start_or_stop, stop, step) {\n\t\tconst from  = stop !== undefined ? Matrix._toComplex(start_or_stop) : Complex.ZERO;\n\t\tconst to    = stop !== undefined ? Matrix._toComplex(stop) : Matrix._toComplex(start_or_stop);\n\t\tconst delta = step !== undefined ? Matrix._toComplex(step) : Complex.ONE;\n\t\treturn new Matrix(MatrixTool.InterpolationCalculation(from, delta, to, false));\n\t}\n\n\t/**\n\t * Circular shift.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} shift_size \n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tcircshift(shift_size, type) {\n\t\tconst shift = Matrix._toInteger(shift_size);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst main = function(data) {\n\t\t\tconst y = new Array(data.length);\n\t\t\tlet from = ((- shift % data.length) + data.length) % data.length;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = data[from++];\n\t\t\t\tif(from === data.length) {\n\t\t\t\t\tfrom = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn this.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Circular shift.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} shift_size \n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\troll(shift_size, type) {\n\t\treturn this.circshift(shift_size, type);\n\t}\n\n\t/**\n\t * Change the shape of the matrix.\n\t * The number of elements in the matrix doesn't increase or decrease.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} row_length - Number of rows of matrix to reshape.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} column_length - Number of columns of matrix to reshape.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\treshape(row_length, column_length) {\n\t\tconst new_row_length = Matrix._toInteger(row_length);\n\t\tconst new_column_length = Matrix._toInteger(column_length);\n\t\tconst this_size = this.row_length * this.column_length;\n\t\tconst new_size = new_row_length * new_column_length;\n\t\tif(this_size !== new_size) {\n\t\t\tthrow \"reshape error. (this_size !== new_size)->(\" + this_size + \" !== \" + new_size + \")\";\n\t\t}\n\t\tconst m = this.matrix_array;\n\t\tlet m_col = 0;\n\t\tlet m_row = 0;\n\t\tconst y = new Array(new_row_length);\n\t\tfor(let row = 0; row < new_row_length; row++) {\n\t\t\ty[row] = new Array(new_column_length);\n\t\t\tfor(let col = 0; col < new_column_length; col++) {\n\t\t\t\ty[row][col] = m[m_row][m_col];\n\t\t\t\tm_col++;\n\t\t\t\tif(m_col === this.column_length) {\n\t\t\t\t\tm_col = 0;\n\t\t\t\t\tm_row++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Flip this matrix left and right.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tfliplr() {\n\t\treturn this.flip({dimension : \"row\"});\n\t}\n\n\t/**\n\t * Flip this matrix up and down.\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tflipud() {\n\t\treturn this.flip({dimension : \"column\"});\n\t}\n\n\t/**\n\t * Flip this matrix.\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tflip(type) {\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst main = function(data) {\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0, j = data.length - 1; i < data.length; i++, j--) {\n\t\t\t\ty[i] = data[j];\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn this.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Index sort.\n\t * - Sorts by row when setting index by row vector to the argument.\n\t * - Sorts by column when setting index by column vector to the argument.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - Vector with index. (See the description of this function)\n\t * @returns {Matrix} Matrix after function processing.\n\t */\n\tindexsort(v) {\n\t\tconst V = Matrix._toMatrix(v);\n\t\tif(V.isMatrix()) {\n\t\t\tthrow \"argsort error. argsort is not vector. (\" + V.toOneLineString + \")\";\n\t\t}\n\t\tlet is_transpose = false;\n\t\tlet target_array = null;\n\t\tlet index_array = null;\n\t\tif(V.isRow()) {\n\t\t\tif(this.column_length !== V.column_length) {\n\t\t\t\tthrow \"argsort error. (this_size !== new_size)->(\" + this.column_length + \" !== \" + V.column_length + \")\";\n\t\t\t}\n\t\t\t// 列をインデックスソートする\n\t\t\tis_transpose = true;\n\t\t\ttarget_array = this.transpose().matrix_array;\n\t\t\tindex_array = V.matrix_array[0];\n\t\t}\n\t\tif(V.isColumn()) {\n\t\t\tif(this.row_length !== V.row_length) {\n\t\t\t\tthrow \"argsort error. (this_size !== new_size)->(\" + this.row_length + \" !== \" + V.row_length + \")\";\n\t\t\t}\n\t\t\t// 行をインデックスソートする\n\t\t\ttarget_array = this.matrix_array;\n\t\t\tindex_array = V.transpose().matrix_array[0];\n\t\t}\n\t\t// データを付け替える\n\t\tconst sort_data = new Array(index_array.length);\n\t\tfor(let i = 0; i < index_array.length; i++) {\n\t\t\tsort_data[i] = {\n\t\t\t\tindex : index_array[i],\n\t\t\t\tdata : target_array[i]\n\t\t\t};\n\t\t}\n\t\t// 比較関数を作成\n\t\tconst compare = function(a, b) {\n\t\t\treturn a.index.compareTo(b.index);\n\t\t};\n\t\t{\n\t\t\tconst temp = [];\n\t\t\t// ソート関数（安定マージソート）\n\t\t\tconst sort = function(elements, first, last, cmp_function) { \n\t\t\t\tif(first < last) {\n\t\t\t\t\tconst middle = Math.floor((first + last) / 2);\n\t\t\t\t\tsort(elements, first, middle, cmp_function);\n\t\t\t\t\tsort(elements, middle + 1, last, cmp_function);\n\t\t\t\t\tlet p = 0, i, j, k;\n\t\t\t\t\tfor(i = first; i <= middle; i++) {\n\t\t\t\t\t\ttemp[p++] = elements[i];\n\t\t\t\t\t}\n\t\t\t\t\ti = middle + 1;\n\t\t\t\t\tj = 0;\n\t\t\t\t\tk = first;\n\t\t\t\t\twhile((i <= last) && (j < p)) {\n\t\t\t\t\t\tif(cmp_function(elements[i], temp[j]) >= 0) {\n\t\t\t\t\t\t\telements[k++] = temp[j++];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\telements[k++] = elements[i++];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\twhile(j < p) {\n\t\t\t\t\t\telements[k++] = temp[j++];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t};\n\t\t\tsort(sort_data, 0, sort_data.length - 1, compare);\n\t\t}\n\t\t// 行列を組み立てなおす\n\t\tconst y = new Array(index_array.length);\n\t\tfor(let i = 0; i < index_array.length; i++) {\n\t\t\ty[i] = sort_data[i].data;\n\t\t}\n\t\t// 行列を作成する\n\t\tconst Y = new Matrix(y);\n\t\tif(!is_transpose) {\n\t\t\treturn Y;\n\t\t}\n\t\telse {\n\t\t\treturn Y.transpose();\n\t\t}\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の一般計算\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Transpose a matrix.\n\t * @returns {Matrix} A^T\n\t */\n\ttranspose() {\n\t\tconst y = new Array(this.column_length);\n\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\ty[col] = new Array(this.row_length);\n\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\ty[col][row] = this.matrix_array[row][col];\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Hermitian transpose.\n\t * @returns {Matrix} A^T\n\t */\n\tctranspose() {\n\t\treturn this.transpose().conj();\n\t}\n\n\t/**\n\t * Hermitian transpose.\n\t * @returns {Matrix} A^T\n\t */\n\tT() {\n\t\treturn this.ctranspose();\n\t}\n\n\t/**\n\t * Inner product/Dot product.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [dimension=1] - Dimension of matrix used for calculation. (1 or 2)\n\t * @returns {Matrix} A・B\n\t */\n\tinner(number, dimension=1) {\n\t\treturn LinearAlgebra.inner(this, number, dimension);\n\t}\n\t\n\t/**\n\t * LUP decomposition.\n\t * - P'*L*U=A\n\t * - P is permutation matrix.\n\t * - L is lower triangular matrix.\n\t * - U is upper triangular matrix.\n\t * @returns {{P: Matrix, L: Matrix, U: Matrix}} {L, U, P}\n\t */\n\tlup() {\n\t\treturn LinearAlgebra.lup(this);\n\t}\n\n\t/**\n\t * LU decomposition.\n\t * - L*U=A\n\t * - L is lower triangular matrix.\n\t * - U is upper triangular matrix.\n\t * @returns {{L: Matrix, U: Matrix}} {L, U}\n\t */\n\tlu() {\n\t\treturn LinearAlgebra.lu(this);\n\t}\n\n\t/**\n\t * Solving a system of linear equations to be Ax = B\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number - B\n\t * @returns {Matrix} x\n\t */\n\tlinsolve(number) {\n\t\treturn LinearAlgebra.linsolve(this, number);\n\t}\n\n\t/**\n\t * QR decomposition.\n\t * - Q*R=A\n\t * - Q is orthonormal matrix.\n\t * - R is upper triangular matrix.\n\t * @returns {{Q: Matrix, R: Matrix}} {Q, R}\n\t */\n\tqr() {\n\t\treturn LinearAlgebra.qr(this);\n\t}\n\n\t/**\n\t * Tridiagonalization of symmetric matrix.\n\t * - Don't support complex numbers.\n\t * - P*H*P'=A\n\t * - P is orthonormal matrix.\n\t * - H is tridiagonal matrix.\n\t * - The eigenvalues of H match the eigenvalues of A.\n\t * @returns {{P: Matrix, H: Matrix}} {P, H}\n\t */\n\ttridiagonalize() {\n\t\treturn LinearAlgebra.tridiagonalize(this);\n\t}\n\n\t/**\n\t * Eigendecomposition of symmetric matrix.\n\t * - Don't support complex numbers.\n\t * - V*D*V'=A.\n\t * - V is orthonormal matrix. and columns of V are the right eigenvectors.\n\t * - D is a matrix containing the eigenvalues on the diagonal component.\n\t * @returns {{V: Matrix, D: Matrix}} {D, V}\n\t */\n\teig() {\n\t\treturn LinearAlgebra.eig(this);\n\t}\n\n\t/**\n\t * Singular Value Decomposition (SVD).\n\t * - U*S*V'=A\n\t * - U and V are orthonormal matrices.\n\t * - S is a matrix with singular values in the diagonal.\n\t * @returns {{U: Matrix, S: Matrix, V: Matrix}} U*S*V'=A\n\t */\n\tsvd() {\n\t\treturn LinearAlgebra.svd(this);\n\t}\n\n\t/**\n\t * Inverse matrix of this matrix.\n\t * @returns {Matrix} A^-1\n\t */\n\tinv() {\n\t\treturn LinearAlgebra.inv(this);\n\t}\n\n\t/**\n\t * Pseudo-inverse matrix.\n\t * @returns {Matrix} A^+\n\t */\n\tpinv() {\n\t\treturn LinearAlgebra.pinv(this);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// statistics 統計計算用\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Log-gamma function.\n\t * @returns {Matrix}\n\t */\n\tgammaln() {\n\t\treturn Statistics.gammaln(this);\n\t}\n\n\t/**\n\t * Gamma function.\n\t * @returns {Matrix}\n\t */\n\tgamma() {\n\t\treturn Statistics.gamma(this);\n\t}\n\n\t/**\n\t * Incomplete gamma function.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {Matrix}\n\t */\n\tgammainc(a, tail) {\n\t\treturn Statistics.gammainc(this, a, tail);\n\t}\n\n\t/**\n\t * Probability density function (PDF) of the gamma distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - Shape parameter.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} s - Scale parameter.\n\t * @returns {Matrix}\n\t */\n\tgampdf(k, s) {\n\t\treturn Statistics.gampdf(this, k, s);\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of gamma distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - Shape parameter.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} s - Scale parameter.\n\t * @returns {Matrix}\n\t */\n\tgamcdf(k, s) {\n\t\treturn Statistics.gampdf(this, k, s);\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of gamma distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - Shape parameter.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} s - Scale parameter.\n\t * @returns {Matrix}\n\t */\n\tgaminv(k, s) {\n\t\treturn Statistics.gaminv(this, k, s);\n\t}\n\n\t/**\n\t * Beta function.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} y\n\t * @returns {Matrix}\n\t */\n\tbeta(y) {\n\t\treturn Statistics.beta(this, y);\n\t}\n\t\n\t/**\n\t * Incomplete beta function.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} b\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {Matrix}\n\t */\n\tbetainc(a, b, tail) {\n\t\treturn Statistics.betainc(this, a, b, tail);\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of beta distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} b\n\t * @returns {Matrix}\n\t */\n\tbetacdf(a, b) {\n\t\treturn Statistics.betacdf(this, a, b);\n\t}\n\n\t/**\n\t * Probability density function (PDF) of beta distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} b\n\t * @returns {Matrix}\n\t */\n\tbetapdf(a, b) {\n\t\treturn Statistics.betapdf(this, a, b);\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of beta distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} b\n\t * @returns {Matrix}\n\t */\n\tbetainv(a, b) {\n\t\treturn Statistics.betainv(this, a, b);\n\t}\n\n\t/**\n\t * Factorial function, x!.\n\t * @returns {Matrix}\n\t */\n\tfactorial() {\n\t\treturn Statistics.factorial(this);\n\t}\n\t\n\t/**\n\t * Binomial coefficient, number of all combinations, nCk.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k\n\t * @returns {Matrix}\n\t */\n\tnchoosek(k) {\n\t\treturn Statistics.nchoosek(this, k);\n\t}\n\t\n\t/**\n\t * Error function.\n\t * @returns {Matrix}\n\t */\n\terf() {\n\t\treturn Statistics.erf(this);\n\t}\n\n\t/**\n\t * Complementary error function.\n\t * @returns {Matrix}\n\t */\n\terfc() {\n\t\treturn Statistics.erfc(this);\n\t}\n\t\n\t/**\n\t * Probability density function (PDF) of normal distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [u=0.0] - Average value.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [s=1.0] - Variance value.\n\t * @returns {Matrix}\n\t */\n\tnormpdf(u=0.0, s=1.0) {\n\t\treturn Statistics.normpdf(this, u, s);\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of normal distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [u=0.0] - Average value.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [s=1.0] - Variance value.\n\t * @returns {Matrix}\n\t */\n\tnormcdf(u=0.0, s=1.0) {\n\t\treturn Statistics.normcdf(this, u, s);\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of normal distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [u=0.0] - Average value.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [s=1.0] - Variance value.\n\t * @returns {Matrix}\n\t */\n\tnorminv(u=0.0, s=1.0) {\n\t\treturn Statistics.norminv(this, u, s);\n\t}\n\n\t/**\n\t * Probability density function (PDF) of Student's t-distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\ttpdf(v) {\n\t\treturn Statistics.tpdf(this, v);\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\ttcdf(v) {\n\t\treturn Statistics.tcdf(this, v);\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\ttinv(v) {\n\t\treturn Statistics.tinv(this, v);\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.\n\t * - If tails = 1, TDIST returns the one-tailed distribution.\n\t * - If tails = 2, TDIST returns the two-tailed distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - The degrees of freedom. (DF)\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} tails - Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)\n\t * @returns {Matrix}\n\t */\n\ttdist(v, tails) {\n\t\treturn Statistics.tdist(this, v, tails);\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\ttinv2(v) {\n\t\treturn Statistics.tinv2(this, v);\n\t}\n\n\t/**\n\t * Probability density function (PDF) of chi-square distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\tchi2pdf(k) {\n\t\treturn Statistics.chi2pdf(this, k);\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of chi-square distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\tchi2cdf(k) {\n\t\treturn Statistics.chi2cdf(this, k);\n\t}\n\t\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of chi-square distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\tchi2inv(k) {\n\t\treturn Statistics.chi2inv(this, k);\n\t}\n\n\t/**\n\t * Probability density function (PDF) of F-distribution.\n\t * - In the argument, specify the degree of freedom of ratio of two variables according to chi-square distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d1 - The degree of freedom of the molecules.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d2 - The degree of freedom of the denominator\n\t * @returns {Matrix}\n\t */\n\tfpdf(d1, d2) {\n\t\treturn Statistics.fpdf(this, d1, d2);\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of F-distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d1 - The degree of freedom of the molecules.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d2 - The degree of freedom of the denominator\n\t * @returns {Matrix}\n\t */\n\tfcdf(d1, d2) {\n\t\treturn Statistics.fcdf(this, d1, d2);\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of F-distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d1 - The degree of freedom of the molecules.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d2 - The degree of freedom of the denominator\n\t * @returns {Matrix}\n\t */\n\tfinv(d1, d2) {\n\t\treturn Statistics.finv(this, d1, d2);\n\t}\n\t\n\t/**\n\t * Maximum number.\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix} max([A, B])\n\t */\n\tmax(type) {\n\t\treturn Statistics.max(this, type);\n\t}\n\t\n\t/**\n\t * Minimum number.\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix} min([A, B])\n\t */\n\tmin(type) {\n\t\treturn Statistics.min(this, type);\n\t}\n\t\n\t/**\n\t * Sum.\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tsum(type) {\n\t\treturn Statistics.sum(this, type);\n\t}\n\n\t/**\n\t * Arithmetic average.\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tmean(type) {\n\t\treturn Statistics.mean(this, type);\n\t}\n\n\t/**\n\t * Product of array elements.\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tprod(type) {\n\t\treturn Statistics.prod(this, type);\n\t}\n\n\t/**\n\t * Geometric mean.\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tgeomean(type) {\n\t\treturn Statistics.geomean(this, type);\n\t}\n\n\t/**\n\t * Median.\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tmedian(type) {\n\t\treturn Statistics.median(this, type);\n\t}\n\n\t/**\n\t * Mode.\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tmode(type) {\n\t\treturn Statistics.mode(this, type);\n\t}\n\n\t/**\n\t * Moment.\n\t * - Moment of order n. Equivalent to the definition of variance at 2.\n\t * @param {number} nth_order\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tmoment(nth_order, type) {\n\t\treturn Statistics.moment(this, nth_order, type);\n\t}\n\n\t/**\n\t * Variance.\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tvar(type) {\n\t\treturn Statistics.var(this, type);\n\t}\n\n\t/**\n\t * Standard deviation.\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstd(type) {\n\t\treturn Statistics.std(this, type);\n\t}\n\n\t/**\n\t * Mean absolute deviation.\n\t * - The \"algorithm\" can choose \"0/mean\"(default) and \"1/median\".\n\t * @param {?string|?number} [algorithm]\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tmad(algorithm, type) {\n\t\treturn Statistics.mad(this, algorithm, type);\n\t}\n\n\t/**\n\t * Skewness.\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tskewness(type) {\n\t\treturn Statistics.skewness(this, type);\n\t}\n\n\t/**\n\t * Covariance matrix.\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tcov(type) {\n\t\treturn Statistics.cov(this, type);\n\t}\n\n\t/**\n\t * The samples are normalized to a mean value of 0, standard deviation of 1.\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tnormalize(type) {\n\t\treturn Statistics.normalize(this, type);\n\t}\n\n\t/**\n\t * Correlation matrix.\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tcorrcoef(type) {\n\t\treturn Statistics.corrcoef(this, type);\n\t}\n\n\t/**\n\t * Sort.\n\t * - The \"order\" can choose \"ascend\"(default) and \"descend\".\n\t * @param {string} [order]\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tsort(order, type) {\n\t\treturn Statistics.sort(this, order, type);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// signal 信号処理用\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * Discrete Fourier transform (DFT).\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix} fft(x)\n\t */\n\tfft(type) {\n\t\treturn Signal.fft(this, type);\n\t}\n\n\t/**\n\t * Inverse discrete Fourier transform (IDFT).\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix} ifft(x)\n\t */\n\tifft(type) {\n\t\treturn Signal.ifft(this, type);\n\t}\n\n\t/**\n\t * Power spectral density.\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix} abs(fft(x)).^2\n\t */\n\tpowerfft(type) {\n\t\treturn Signal.powerfft(this, type);\n\t}\n\n\t/**\n\t * Discrete cosine transform (DCT-II, DCT).\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix} dct(x)\n\t */\n\tdct(type) {\n\t\treturn Signal.dct(this, type);\n\t}\n\n\t/**\n\t * Inverse discrete cosine transform (DCT-III, IDCT).\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix} idct(x)\n\t */\n\tidct(type) {\n\t\treturn Signal.idct(this, type);\n\t}\n\n\t/**\n\t * Discrete two-dimensional Fourier transform (2D DFT).\n\t * @returns {Matrix}\n\t */\n\tfft2() {\n\t\treturn Signal.fft2(this);\n\t}\n\n\t/**\n\t * Inverse discrete two-dimensional Fourier transform (2D IDFT).\n\t * @returns {Matrix}\n\t */\n\tifft2() {\n\t\treturn Signal.ifft2(this);\n\t}\n\n\t/**\n\t * Discrete two-dimensional cosine transform (2D DCT).\n\t * @returns {Matrix}\n\t */\n\tdct2() {\n\t\treturn Signal.dct2(this);\n\t}\n\n\t/**\n\t * Inverse discrete two-dimensional cosine transform (2D IDCT).\n\t * @returns {Matrix}\n\t */\n\tidct2() {\n\t\treturn Signal.idct2(this);\n\t}\n\n\t/**\n\t * Convolution integral, Polynomial multiplication.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number\n\t * @returns {Matrix}\n\t */\n\tconv(number) {\n\t\treturn Signal.conv(this, number);\n\t}\n\n\t/**\n\t * ACF(Autocorrelation function), cros-correlation function.\n\t * - If the argument is omitted, it is calculated by the autocorrelation function.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [number] - Matrix to calculate the correlation.\n\t * @returns {Matrix}\n\t */\n\txcorr(number) {\n\t\treturn Signal.xcorr(this, number);\n\t}\n\n\t/**\n\t * Create window function for signal processing.\n\t * The following window functions are available.\n\t * - \"rectangle\": Rectangular window\n\t * - \"hann\": Hann/Hanning window.\n\t * - \"hamming\": Hamming window.\n\t * - \"blackman\": Blackman window.\n\t * - \"blackmanharris\": Blackman-Harris window.\n\t * - \"blackmannuttall\": Blackman-Nuttall window.\n\t * - \"flattop\": Flat top window.\n\t * - \"sin\", Half cycle sine window.\n\t * - \"vorbis\", Vorbis window.\n\t * @param {string} name - Window function name.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} size - Window length\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\" (default) , 1/\"periodic\"\n\t * @returns {Matrix} Column vector.\n\t */\n\tstatic window(name, size, periodic) {\n\t\treturn Signal.window(name, size, periodic);\n\t}\n\n\t/**\n\t * Hann (Hanning) window.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} size - Window length\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\" (default) , 1/\"periodic\"\n\t * @returns {Matrix} Column vector.\n\t */\n\tstatic hann(size, periodic) {\n\t\treturn Signal.hann(size, periodic);\n\t}\n\t\n\t/**\n\t * Hamming window.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} size - Window length\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\" (default) , 1/\"periodic\"\n\t * @returns {Matrix} Column vector.\n\t */\n\tstatic hamming(size, periodic) {\n\t\treturn Signal.hamming(size, periodic);\n\t}\n\t\n\t/**\n\t * FFT shift.\n\t * Circular shift beginning at the center of the signal.\n\t * @param {MatrixSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tfftshift(type) {\n\t\treturn Signal.fftshift(this, type);\n\t}\n\n}\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/Matrix.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 490,
    "kind": "typedef",
    "name": "MatrixSettings",
    "memberof": "src/math/Matrix.mjs",
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixSettings",
    "access": "public",
    "description": "Collection of calculation settings for matrix.\n- Available options vary depending on the method.",
    "properties": [
      {
        "nullable": true,
        "types": [
          "string",
          "?number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"auto\"",
        "defaultRaw": "auto",
        "name": "dimension",
        "description": "Calculation direction. 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\"."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "correction",
        "description": "Correction value. For statistics. 0(unbiased), 1(sample)."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "MatrixSettings"
    }
  },
  {
    "__docId__": 491,
    "kind": "class",
    "name": "MatrixTool",
    "memberof": "src/math/Matrix.mjs",
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/Matrix.mjs",
    "importStyle": null,
    "description": "Collection of functions used in Matrix.",
    "lineNumber": 36,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "toPositionArrayFromObject",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.toPositionArrayFromObject",
    "access": "public",
    "description": "Create actual values from data specifying matrix position.",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "Matrix",
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "A value indicating the position in a matrix."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "Length to initialize. (Used when \":\" is specified at matrix creation.)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "geta",
        "description": "Offset at initialization. (Used when \":\" is specified at matrix creation.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "match2",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.match2",
    "access": "public",
    "description": "A match function that can also extract strings excluding matched strings.",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object<boolean, string>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Search target."
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "regexp",
        "description": "Regular expression."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object<boolean, string>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "trimBracket",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.trimBracket",
    "access": "public",
    "description": "Removed front and back brackets when enclosed by brackets.\n- Return null if the string has no brackets.",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string|null} String after brackets removal or null."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "String to be processed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "null"
      ],
      "spread": false,
      "description": "String after brackets removal or null."
    }
  },
  {
    "__docId__": 495,
    "kind": "method",
    "name": "toMatrixArrayFromStringForArrayJSON",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.toMatrixArrayFromStringForArrayJSON",
    "access": "public",
    "description": "Create Matrix type data from string data defined in JSON.\n- For example, \"[xx,xx,xx], [xx,xx,xx]\"",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>} Internal array used by Matrix type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "String to be processed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": "Internal array used by Matrix type."
    }
  },
  {
    "__docId__": 496,
    "kind": "method",
    "name": "InterpolationCalculation",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.InterpolationCalculation",
    "access": "public",
    "description": "Create a numeric array from initial values, difference values, and final values.",
    "lineNumber": 179,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Complex>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "Start value."
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "delta",
        "description": "Delta."
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "End value."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "is_include_last_number",
        "description": "Whether to include the last value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Complex>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 497,
    "kind": "method",
    "name": "toArrayFromMatch2String",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.toArrayFromMatch2String",
    "access": "public",
    "description": "Create an array of numbers from data separated by match2.",
    "lineNumber": 220,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Complex>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Object<boolean, string>>"
        ],
        "spread": false,
        "optional": false,
        "name": "match2_string",
        "description": "Data separated by \"toArrayFromString\"."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Complex>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "toArrayFromString",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.toArrayFromString",
    "access": "public",
    "description": "Convert string to row part of matrix type matrix data.\nEstimate the matrix by extracting parts like numbers.",
    "lineNumber": 263,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Complex>|string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "row_text",
        "description": "A string describing one row of the matrix."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Complex>",
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "toMatrixArrayFromStringForArraySPACE",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.toMatrixArrayFromStringForArraySPACE",
    "access": "public",
    "description": "Create Matrix type data from string data defined by character string with space separation etc.",
    "lineNumber": 284,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>} Internal array used by Matrix type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Strings to analyze."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": "Internal array used by Matrix type."
    }
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "toMatrixArrayFromStringInBracket",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.toMatrixArrayFromStringInBracket",
    "access": "public",
    "description": "Create Matrix type data composed of string data for matrix.",
    "lineNumber": 300,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>} Internal array used by Matrix type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Strings to analyze."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": "Internal array used by Matrix type."
    }
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "toMatrixArrayFromString",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.toMatrixArrayFromString",
    "access": "public",
    "description": "Create Matrix type data from string data.",
    "lineNumber": 316,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>} Internal array used by Matrix type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Strings to analyze."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": "Internal array used by Matrix type."
    }
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "isCorrectMatrixArray",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.isCorrectMatrixArray",
    "access": "public",
    "description": "Returns true if Matrix type internal data is correct as matrix data.",
    "lineNumber": 336,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<Complex>>"
        ],
        "spread": false,
        "optional": false,
        "name": "m_array",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 503,
    "kind": "class",
    "name": "Matrix",
    "memberof": "src/math/Matrix.mjs",
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/Matrix.mjs",
    "importStyle": "Matrix",
    "description": "Complex matrix class. (immutable)",
    "lineNumber": 356,
    "interface": false
  },
  {
    "__docId__": 504,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#constructor",
    "access": "public",
    "description": "Create a complex matrix.\nInitialization can be performed as follows.\n- 10, \"10\", \"3 + 4j\", \"[ 1 ]\", \"[1, 2, 3]\", \"[1 2 3]\", [1, 2, 3],\n- [[1, 2], [3, 4]], \"[1 2; 3 4]\", \"[1+2i 3+4i]\",\n- \"[1:10]\", \"[1:2:3]\" (MATLAB / Octave / Scilab compatible).",
    "lineNumber": 366,
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Complex matrix. See how to use the function."
      }
    ]
  },
  {
    "__docId__": 505,
    "kind": "member",
    "name": "matrix_array",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#matrix_array",
    "access": "private",
    "description": "An array of elements in the matrix.",
    "lineNumber": 480,
    "type": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 506,
    "kind": "member",
    "name": "row_length",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#row_length",
    "access": "private",
    "description": "The number of rows in a matrix.",
    "lineNumber": 487,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 507,
    "kind": "member",
    "name": "column_length",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#column_length",
    "access": "private",
    "description": "The number of columns in a matrix.",
    "lineNumber": 494,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 508,
    "kind": "member",
    "name": "string_cash",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#string_cash",
    "access": "private",
    "description": "A cache that records data converted to a string.",
    "lineNumber": 501,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 509,
    "kind": "method",
    "name": "create",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.create",
    "access": "public",
    "description": "Create an entity object of this class.",
    "lineNumber": 509,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 510,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.valueOf",
    "access": "public",
    "description": "Convert number to Matrix type.",
    "lineNumber": 523,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 511,
    "kind": "method",
    "name": "_toMatrix",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix._toMatrix",
    "access": "private",
    "description": "Convert to Matrix.\nIf type conversion is unnecessary, return the value as it is.",
    "lineNumber": 534,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 512,
    "kind": "method",
    "name": "_toComplex",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix._toComplex",
    "access": "private",
    "description": "Convert to Complex.\nIf type conversion is unnecessary, return the value as it is.",
    "lineNumber": 550,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 513,
    "kind": "method",
    "name": "_toDouble",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix._toDouble",
    "access": "private",
    "description": "Convert to real number.",
    "lineNumber": 569,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 514,
    "kind": "method",
    "name": "_toInteger",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix._toInteger",
    "access": "private",
    "description": "Convert to integer.",
    "lineNumber": 588,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 515,
    "kind": "method",
    "name": "_clearCash",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_clearCash",
    "access": "private",
    "description": "Delete cache.",
    "lineNumber": 595,
    "params": [],
    "return": null
  },
  {
    "__docId__": 516,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#clone",
    "access": "public",
    "description": "Deep copy.",
    "lineNumber": 605,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 517,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#toString",
    "access": "public",
    "description": "Convert to string.",
    "lineNumber": 613,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "toOneLineString",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#toOneLineString",
    "access": "public",
    "description": "Convert to string in one line.",
    "lineNumber": 726,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#equals",
    "access": "public",
    "description": "Equals.",
    "lineNumber": 754,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "getNumberMatrixArray",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#getNumberMatrixArray",
    "access": "public",
    "description": "Array of real parts of elements in matrix.",
    "lineNumber": 779,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<number>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<number>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "getComplexMatrixArray",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#getComplexMatrixArray",
    "access": "public",
    "description": "Complex array of complex numbers of each element of the matrix.",
    "lineNumber": 794,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 523,
    "kind": "method",
    "name": "_each",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_each",
    "access": "private",
    "description": "Perform the same process on all elements in the matrix. (mutable)",
    "lineNumber": 811,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Complex, number, number): ?Object "
        ],
        "spread": false,
        "optional": false,
        "name": "eachfunc",
        "description": "Function(num, row, col)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "cloneMatrixDoEachCalculation",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#cloneMatrixDoEachCalculation",
    "access": "public",
    "description": "Perform the same process on all elements in the matrix.",
    "lineNumber": 843,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Complex, number, number): ?Object "
        ],
        "spread": false,
        "optional": false,
        "name": "eachfunc",
        "description": "Function(num, row, col)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "createMatrixDoEachCalculation",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.createMatrixDoEachCalculation",
    "access": "public",
    "description": "Create Matrix with specified initialization for each element in matrix.",
    "lineNumber": 854,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(number, number): ?Object "
        ],
        "spread": false,
        "optional": false,
        "name": "eachfunc",
        "description": "Function(row, col)"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "dimension",
        "defaultRaw": "dimension",
        "name": "column_length",
        "description": "Number of columns."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "eachVectorAuto",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#eachVectorAuto",
    "access": "public",
    "description": "Treat the columns of the matrix as vectors and execute the same process.\n- If the matrix is a row vector, it performs the same processing for the row vector.",
    "lineNumber": 882,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "eachVectorBoth",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#eachVectorBoth",
    "access": "public",
    "description": "Treat the rows and columns of the matrix as vectors and perform the same processing.\n1. First run the same process for the row.\n2. Finally perform the same processing for the column.",
    "lineNumber": 917,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 528,
    "kind": "method",
    "name": "eachVectorRow",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#eachVectorRow",
    "access": "public",
    "description": "Treat the rows of the matrix as vectors and execute the same process.",
    "lineNumber": 954,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 529,
    "kind": "method",
    "name": "eachVectorColumn",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#eachVectorColumn",
    "access": "public",
    "description": "Treat the columns of the matrix as vectors and execute the same process.",
    "lineNumber": 977,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 530,
    "kind": "method",
    "name": "eachVector",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#eachVector",
    "access": "public",
    "description": "Treat the rows and columns of the matrix as vectors and perform the same processing.\nThe arguments of the method can switch the direction of the matrix to be executed.",
    "lineNumber": 1002,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"auto\"",
        "defaultRaw": "auto",
        "name": "dimension",
        "description": "0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "getMatrix",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#getMatrix",
    "access": "public",
    "description": "Extract the specified part of the matrix.",
    "lineNumber": 1034,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "A vector containing the row numbers to extract from this matrix. If you specify \":\" select all rows."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "col",
        "description": "A vector containing the column numbers to extract from this matrix. If you specify \":\" select all columns."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "isUpOffset",
        "description": "Set offset of matrix position to 1 with true."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 532,
    "kind": "method",
    "name": "setMatrix",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#setMatrix",
    "access": "public",
    "description": "Change specified element in matrix.",
    "lineNumber": 1058,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "A vector containing the row numbers to replace in this matrix. If you specify \":\" select all rows."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "col",
        "description": "A vector containing the column numbers to replace in this matrix. If you specify \":\" select all columns."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "replace",
        "description": "Matrix to be replaced."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "isUpOffset",
        "description": "Set offset of matrix position to 1 with true."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 533,
    "kind": "method",
    "name": "getComplex",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#getComplex",
    "access": "public",
    "description": "Returns the specified element in the matrix.\nEach element of the matrix is composed of complex numbers.",
    "lineNumber": 1081,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "row_or_pos",
        "description": "If this is a matrix, the row number. If this is a vector, the address."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "col",
        "description": "If this is a matrix, the column number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 534,
    "kind": "get",
    "name": "intValue",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#intValue",
    "access": "public",
    "description": "Integer value of the first element of the matrix.",
    "lineNumber": 1110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 535,
    "kind": "get",
    "name": "doubleValue",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#doubleValue",
    "access": "public",
    "description": "Real value of first element of the matrix.",
    "lineNumber": 1118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 536,
    "kind": "get",
    "name": "scalar",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#scalar",
    "access": "public",
    "description": "First element of this matrix.",
    "lineNumber": 1126,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 537,
    "kind": "get",
    "name": "length",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#length",
    "access": "public",
    "description": "Maximum size of rows or columns in the matrix.",
    "lineNumber": 1134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 538,
    "kind": "get",
    "name": "norm1",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#norm1",
    "access": "public",
    "description": "1-norm.",
    "lineNumber": 1142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 539,
    "kind": "get",
    "name": "norm2",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#norm2",
    "access": "public",
    "description": "2-norm.",
    "lineNumber": 1150,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 540,
    "kind": "method",
    "name": "norm",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#norm",
    "access": "public",
    "description": "p-norm.",
    "lineNumber": 1159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 541,
    "kind": "method",
    "name": "cond",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#cond",
    "access": "public",
    "description": "Condition number of the matrix",
    "lineNumber": 1168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 542,
    "kind": "method",
    "name": "rcond",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#rcond",
    "access": "public",
    "description": "Inverse condition number.",
    "lineNumber": 1176,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 543,
    "kind": "method",
    "name": "rank",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#rank",
    "access": "public",
    "description": "Rank.",
    "lineNumber": 1185,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} rank(A)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "rank(A)"
    }
  },
  {
    "__docId__": 544,
    "kind": "method",
    "name": "trace",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#trace",
    "access": "public",
    "description": "Trace of a matrix.\nSum of diagonal elements.",
    "lineNumber": 1194,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} trace(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "trace(A)"
    },
    "params": []
  },
  {
    "__docId__": 545,
    "kind": "method",
    "name": "det",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#det",
    "access": "public",
    "description": "Determinant.",
    "lineNumber": 1202,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} |A|"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "|A|"
    },
    "params": []
  },
  {
    "__docId__": 546,
    "kind": "method",
    "name": "memset",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.memset",
    "access": "public",
    "description": "Creates a matrix composed of the specified number.",
    "lineNumber": 1217,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Value after initialization."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "Number of columns."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 547,
    "kind": "method",
    "name": "eye",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.eye",
    "access": "public",
    "description": "Return identity matrix.",
    "lineNumber": 1244,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "Number of columns."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "zeros",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.zeros",
    "access": "public",
    "description": "Create zero matrix.",
    "lineNumber": 1256,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "Number of columns."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 549,
    "kind": "method",
    "name": "ones",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.ones",
    "access": "public",
    "description": "Create a matrix of all ones.",
    "lineNumber": 1269,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "Number of columns."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 550,
    "kind": "method",
    "name": "rand",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.rand",
    "access": "public",
    "description": "Generate a matrix composed of random values with uniform random numbers.",
    "lineNumber": 1282,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "Number of columns."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "randn",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.randn",
    "access": "public",
    "description": "Generate a matrix composed of random values with normal distribution.",
    "lineNumber": 1294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "Number of dimensions or rows."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "Number of columns."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 552,
    "kind": "method",
    "name": "diag",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#diag",
    "access": "public",
    "description": "If matrix, generate diagonal column vector.\nIf vector, generate a matrix with diagonal elements.",
    "lineNumber": 1305,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix or vector created. See how to use the function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix or vector created. See how to use the function."
    },
    "params": []
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "isScalar",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isScalar",
    "access": "public",
    "description": "Return true if the matrix is scalar.",
    "lineNumber": 1340,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "isRow",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isRow",
    "access": "public",
    "description": "Return true if the matrix is row vector.",
    "lineNumber": 1348,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "isColumn",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isColumn",
    "access": "public",
    "description": "Return true if the matrix is column vector.",
    "lineNumber": 1356,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 556,
    "kind": "method",
    "name": "isVector",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isVector",
    "access": "public",
    "description": "Return true if the matrix is vector.",
    "lineNumber": 1364,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 557,
    "kind": "method",
    "name": "isMatrix",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isMatrix",
    "access": "public",
    "description": "Return true if the value is not scalar.",
    "lineNumber": 1372,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 558,
    "kind": "method",
    "name": "isSquare",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isSquare",
    "access": "public",
    "description": "Return true if the matrix is square matrix.",
    "lineNumber": 1380,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 559,
    "kind": "method",
    "name": "isReal",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isReal",
    "access": "public",
    "description": "Return true if the matrix is real matrix.",
    "lineNumber": 1389,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 560,
    "kind": "method",
    "name": "isComplex",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isComplex",
    "access": "public",
    "description": "Return true if the matrix is complex matrix.",
    "lineNumber": 1404,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 561,
    "kind": "method",
    "name": "isZeros",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isZeros",
    "access": "public",
    "description": "Return true if the matrix is zero matrix.",
    "lineNumber": 1413,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 562,
    "kind": "method",
    "name": "isIdentity",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isIdentity",
    "access": "public",
    "description": "Return true if the matrix is identity matrix.",
    "lineNumber": 1429,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 563,
    "kind": "method",
    "name": "isDiagonal",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isDiagonal",
    "access": "public",
    "description": "Return true if the matrix is diagonal matrix.",
    "lineNumber": 1454,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 564,
    "kind": "method",
    "name": "isTridiagonal",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isTridiagonal",
    "access": "public",
    "description": "Return true if the matrix is tridiagonal matrix.",
    "lineNumber": 1470,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 565,
    "kind": "method",
    "name": "isRegular",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isRegular",
    "access": "public",
    "description": "Return true if the matrix is regular matrix.",
    "lineNumber": 1486,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 566,
    "kind": "method",
    "name": "isOrthogonal",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isOrthogonal",
    "access": "public",
    "description": "Return true if the matrix is orthogonal matrix.",
    "lineNumber": 1502,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "isUnitary",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isUnitary",
    "access": "public",
    "description": "Return true if the matrix is unitary matrix.",
    "lineNumber": 1515,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 568,
    "kind": "method",
    "name": "isSymmetric",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isSymmetric",
    "access": "public",
    "description": "Return true if the matrix is symmetric matrix.",
    "lineNumber": 1528,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 569,
    "kind": "method",
    "name": "isHermitian",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isHermitian",
    "access": "public",
    "description": "Return true if the matrix is hermitian matrix.",
    "lineNumber": 1548,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 570,
    "kind": "method",
    "name": "isTriangleUpper",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isTriangleUpper",
    "access": "public",
    "description": "Return true if the matrix is upper triangular matrix.",
    "lineNumber": 1573,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 571,
    "kind": "method",
    "name": "isTriangleLower",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isTriangleLower",
    "access": "public",
    "description": "Return true if the matrix is  lower triangular matrix.",
    "lineNumber": 1589,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 572,
    "kind": "method",
    "name": "isPermutation",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isPermutation",
    "access": "public",
    "description": "Return true if the matrix is permutation matrix.",
    "lineNumber": 1605,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "size",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#size",
    "access": "public",
    "description": "Number of rows and columns of matrix.",
    "lineNumber": 1641,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} [row_length, column_length]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "[row_length, column_length]"
    },
    "params": []
  },
  {
    "__docId__": 574,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#compareTo",
    "access": "public",
    "description": "Compare values.\n- Return value between scalars is of type Number.\n- Return value between matrices is type Matrix.",
    "lineNumber": 1654,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number|Matrix} A > B ? 1 : (A === B ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "Matrix"
      ],
      "spread": false,
      "description": "A > B ? 1 : (A === B ? 0 : -1)"
    }
  },
  {
    "__docId__": 575,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#add",
    "access": "public",
    "description": "Add.",
    "lineNumber": 1679,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A + B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A + B"
    }
  },
  {
    "__docId__": 576,
    "kind": "method",
    "name": "sub",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#sub",
    "access": "public",
    "description": "Subtract.",
    "lineNumber": 1699,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 577,
    "kind": "method",
    "name": "mul",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#mul",
    "access": "public",
    "description": "Multiply.",
    "lineNumber": 1719,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 578,
    "kind": "method",
    "name": "div",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#div",
    "access": "public",
    "description": "Divide.",
    "lineNumber": 1771,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A / B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A / B"
    }
  },
  {
    "__docId__": 579,
    "kind": "method",
    "name": "pow",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#pow",
    "access": "public",
    "description": "Power function.\n- Supports only integers.",
    "lineNumber": 1812,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} pow(A, B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "整数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "pow(A, B)"
    }
  },
  {
    "__docId__": 580,
    "kind": "method",
    "name": "dotmul",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#dotmul",
    "access": "public",
    "description": "Multiplication for each element of matrix.",
    "lineNumber": 1838,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A .* B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A .* B"
    }
  },
  {
    "__docId__": 581,
    "kind": "method",
    "name": "dotdiv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#dotdiv",
    "access": "public",
    "description": "Division for each element of matrix.",
    "lineNumber": 1858,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A ./ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A ./ B"
    }
  },
  {
    "__docId__": 582,
    "kind": "method",
    "name": "dotinv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#dotinv",
    "access": "public",
    "description": "Inverse of each element of matrix.",
    "lineNumber": 1877,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 ./ A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 ./ A"
    },
    "params": []
  },
  {
    "__docId__": 583,
    "kind": "method",
    "name": "dotpow",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#dotpow",
    "access": "public",
    "description": "Power function for each element of the matrix.",
    "lineNumber": 1890,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A .^ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A .^ B"
    }
  },
  {
    "__docId__": 584,
    "kind": "method",
    "name": "nmul",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#nmul",
    "access": "public",
    "description": "Multiplication for each element of matrix.",
    "lineNumber": 1911,
    "deprecated": "use the dotmul.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A .* B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A .* B"
    }
  },
  {
    "__docId__": 585,
    "kind": "method",
    "name": "ndiv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#ndiv",
    "access": "public",
    "description": "Division for each element of matrix.",
    "lineNumber": 1921,
    "deprecated": "use the dotdiv.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A ./ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A ./ B"
    }
  },
  {
    "__docId__": 586,
    "kind": "method",
    "name": "ninv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#ninv",
    "access": "public",
    "description": "Inverse of each element of matrix.",
    "lineNumber": 1930,
    "deprecated": "use the dotinv.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 ./ A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 ./ A"
    },
    "params": []
  },
  {
    "__docId__": 587,
    "kind": "method",
    "name": "npow",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#npow",
    "access": "public",
    "description": "Power function for each element of the matrix.",
    "lineNumber": 1940,
    "deprecated": "use the dotpow.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A .^ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A .^ B"
    }
  },
  {
    "__docId__": 588,
    "kind": "method",
    "name": "real",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#real",
    "access": "public",
    "description": "Real part of each element.",
    "lineNumber": 1952,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} real(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "real(A)"
    },
    "params": []
  },
  {
    "__docId__": 589,
    "kind": "method",
    "name": "imag",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#imag",
    "access": "public",
    "description": "Imaginary part of each element of the matrix.",
    "lineNumber": 1962,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} imag(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "imag(A)"
    },
    "params": []
  },
  {
    "__docId__": 590,
    "kind": "method",
    "name": "arg",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#arg",
    "access": "public",
    "description": "The argument of each element of matrix.",
    "lineNumber": 1972,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} arg(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "arg(A)"
    },
    "params": []
  },
  {
    "__docId__": 591,
    "kind": "method",
    "name": "sign",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#sign",
    "access": "public",
    "description": "The positive or negative signs of each element of the matrix.\n- +1 if positive, -1 if negative, 0 if 0, norm if complex number.",
    "lineNumber": 1983,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 592,
    "kind": "method",
    "name": "testInteger",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testInteger",
    "access": "public",
    "description": "Test if each element of the matrix is integer.\n- 1 if true, 0 if false.",
    "lineNumber": 1995,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 593,
    "kind": "method",
    "name": "testComplexInteger",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testComplexInteger",
    "access": "public",
    "description": "Test if each element of the matrix is complex integer.\n- 1 if true, 0 if false.",
    "lineNumber": 2007,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 594,
    "kind": "method",
    "name": "testZero",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testZero",
    "access": "public",
    "description": "real(this) === 0\n- 1 if true, 0 if false.",
    "lineNumber": 2019,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 595,
    "kind": "method",
    "name": "testOne",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testOne",
    "access": "public",
    "description": "real(this) === 1\n- 1 if true, 0 if false.",
    "lineNumber": 2031,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 596,
    "kind": "method",
    "name": "testComplex",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testComplex",
    "access": "public",
    "description": "Test if each element of the matrix is complex.\n- 1 if true, 0 if false.",
    "lineNumber": 2043,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 597,
    "kind": "method",
    "name": "testReal",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testReal",
    "access": "public",
    "description": "Test if each element of the matrix is real.\n- 1 if true, 0 if false.",
    "lineNumber": 2055,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    }
  },
  {
    "__docId__": 598,
    "kind": "method",
    "name": "testNaN",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testNaN",
    "access": "public",
    "description": "Test if each element of the matrix is NaN.\n- 1 if true, 0 if false.",
    "lineNumber": 2066,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 599,
    "kind": "method",
    "name": "testPositive",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testPositive",
    "access": "public",
    "description": "real(this) > 0\n- 1 if true, 0 if false.",
    "lineNumber": 2078,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 600,
    "kind": "method",
    "name": "testNegative",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testNegative",
    "access": "public",
    "description": "real(this) < 0\n- 1 if true, 0 if false.",
    "lineNumber": 2089,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 601,
    "kind": "method",
    "name": "testNotNegative",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testNotNegative",
    "access": "public",
    "description": "real(this) >= 0\n- 1 if true, 0 if false.",
    "lineNumber": 2100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 602,
    "kind": "method",
    "name": "testInfinite",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testInfinite",
    "access": "public",
    "description": "Test if each element of the matrix is infinite.\n- 1 if true, 0 if false.",
    "lineNumber": 2111,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 603,
    "kind": "method",
    "name": "testFinite",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testFinite",
    "access": "public",
    "description": "Test if each element of the matrix is finite.\n- 1 if true, 0 if false.",
    "lineNumber": 2122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix with elements of the numerical value of 1 or 0."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix with elements of the numerical value of 1 or 0."
    },
    "params": []
  },
  {
    "__docId__": 604,
    "kind": "method",
    "name": "abs",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#abs",
    "access": "public",
    "description": "Absolute value.",
    "lineNumber": 2132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} abs(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "abs(A)"
    },
    "params": []
  },
  {
    "__docId__": 605,
    "kind": "method",
    "name": "conj",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#conj",
    "access": "public",
    "description": "Complex conjugate matrix.",
    "lineNumber": 2142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} real(A) - imag(A)j"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "real(A) - imag(A)j"
    },
    "params": []
  },
  {
    "__docId__": 606,
    "kind": "method",
    "name": "negate",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#negate",
    "access": "public",
    "description": "this * -1",
    "lineNumber": 2152,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} -A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A"
    },
    "params": []
  },
  {
    "__docId__": 607,
    "kind": "method",
    "name": "sqrt",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#sqrt",
    "access": "public",
    "description": "Square root.",
    "lineNumber": 2162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sqrt(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sqrt(A)"
    },
    "params": []
  },
  {
    "__docId__": 608,
    "kind": "method",
    "name": "log",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#log",
    "access": "public",
    "description": "Logarithmic function.",
    "lineNumber": 2172,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} log(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "log(A)"
    },
    "params": []
  },
  {
    "__docId__": 609,
    "kind": "method",
    "name": "exp",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#exp",
    "access": "public",
    "description": "Exponential function.",
    "lineNumber": 2182,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} exp(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "exp(A)"
    },
    "params": []
  },
  {
    "__docId__": 610,
    "kind": "method",
    "name": "sin",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#sin",
    "access": "public",
    "description": "Sine function.",
    "lineNumber": 2192,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sin(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sin(A)"
    },
    "params": []
  },
  {
    "__docId__": 611,
    "kind": "method",
    "name": "cos",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#cos",
    "access": "public",
    "description": "Cosine function.",
    "lineNumber": 2202,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} cos(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "cos(A)"
    },
    "params": []
  },
  {
    "__docId__": 612,
    "kind": "method",
    "name": "tan",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#tan",
    "access": "public",
    "description": "Tangent function.",
    "lineNumber": 2212,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} tan(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "tan(A)"
    },
    "params": []
  },
  {
    "__docId__": 613,
    "kind": "method",
    "name": "atan",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#atan",
    "access": "public",
    "description": "Atan (arc tangent) function.\n- Return the values of [-PI/2, PI/2].",
    "lineNumber": 2223,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} atan(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "atan(A)"
    },
    "params": []
  },
  {
    "__docId__": 614,
    "kind": "method",
    "name": "atan2",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#atan2",
    "access": "public",
    "description": "Atan (arc tangent) function.\n- Return the values of [-PI, PI].\n- Supports only real numbers.",
    "lineNumber": 2236,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} atan2(Y, X)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "X"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "atan2(Y, X)"
    }
  },
  {
    "__docId__": 615,
    "kind": "method",
    "name": "floor",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#floor",
    "access": "public",
    "description": "Floor.",
    "lineNumber": 2247,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} floor(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "floor(A)"
    },
    "params": []
  },
  {
    "__docId__": 616,
    "kind": "method",
    "name": "ceil",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#ceil",
    "access": "public",
    "description": "Ceil.",
    "lineNumber": 2257,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} ceil(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "ceil(A)"
    },
    "params": []
  },
  {
    "__docId__": 617,
    "kind": "method",
    "name": "round",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#round",
    "access": "public",
    "description": "Rounding to the nearest integer.",
    "lineNumber": 2267,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} round(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "round(A)"
    },
    "params": []
  },
  {
    "__docId__": 618,
    "kind": "method",
    "name": "fix",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#fix",
    "access": "public",
    "description": "To integer rounded down to the nearest.",
    "lineNumber": 2277,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} fix(A), trunc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "fix(A), trunc(A)"
    },
    "params": []
  },
  {
    "__docId__": 619,
    "kind": "method",
    "name": "fract",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#fract",
    "access": "public",
    "description": "Fraction.",
    "lineNumber": 2287,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} fract(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "fract(A)"
    },
    "params": []
  },
  {
    "__docId__": 620,
    "kind": "method",
    "name": "sinc",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#sinc",
    "access": "public",
    "description": "Normalized sinc function.",
    "lineNumber": 2297,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sinc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sinc(A)"
    },
    "params": []
  },
  {
    "__docId__": 621,
    "kind": "method",
    "name": "_rot90",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_rot90",
    "access": "private",
    "description": "Rotate matrix 90 degrees clockwise. (mutable)",
    "lineNumber": 2316,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "rot_90_count",
        "description": "Number of times rotated by 90 degrees."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 624,
    "kind": "method",
    "name": "rot90",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#rot90",
    "access": "public",
    "description": "Rotate matrix 90 degrees clockwise.",
    "lineNumber": 2383,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "rot_90_count",
        "description": "Number of times rotated by 90 degrees."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 625,
    "kind": "method",
    "name": "_resize",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_resize",
    "access": "private",
    "description": "Change the size of the matrix. (mutable)\nInitialized with 0 when expanding.",
    "lineNumber": 2395,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "new_row_length",
        "description": "Number of rows of matrix to resize."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "new_column_length",
        "description": "Number of columns of matrix to resize."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 628,
    "kind": "method",
    "name": "resize",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#resize",
    "access": "public",
    "description": "Change the size of the matrix.\nInitialized with 0 when expanding.",
    "lineNumber": 2440,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "row_length",
        "description": "Number of rows of matrix to resize."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "column_length",
        "description": "Number of columns of matrix to resize."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 629,
    "kind": "method",
    "name": "_deleteRow",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_deleteRow",
    "access": "private",
    "description": "Remove the row in this matrix. (mutable)",
    "lineNumber": 2450,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "delete_row_index",
        "description": "Number of row of matrix to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 630,
    "kind": "method",
    "name": "_deleteColumn",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_deleteColumn",
    "access": "private",
    "description": "Remove the column in this matrix. (mutable)",
    "lineNumber": 2467,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "delete_column_index",
        "description": "Number of column of matrix to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 631,
    "kind": "method",
    "name": "deleteRow",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#deleteRow",
    "access": "public",
    "description": "Remove the row in this matrix.",
    "lineNumber": 2485,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "delete_row_index",
        "description": "Number of row of matrix to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 632,
    "kind": "method",
    "name": "deleteColumn",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#deleteColumn",
    "access": "public",
    "description": "Remove the column in this matrix.",
    "lineNumber": 2494,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "delete_column_index",
        "description": "Number of column of matrix to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 633,
    "kind": "method",
    "name": "_exchangeRow",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_exchangeRow",
    "access": "private",
    "description": "Swap rows in the matrix. (mutable)",
    "lineNumber": 2505,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_row_index1",
        "description": "Number 1 of row of matrix to exchange."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_row_index2",
        "description": "Number 2 of row of matrix to exchange."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 634,
    "kind": "method",
    "name": "_exchangeColumn",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_exchangeColumn",
    "access": "private",
    "description": "Swap columns in the matrix. (mutable)",
    "lineNumber": 2528,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_column_index1",
        "description": "Number 1 of column of matrix to exchange."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_column_index2",
        "description": "Number 2 of column of matrix to exchange."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 635,
    "kind": "method",
    "name": "exchangeRow",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#exchangeRow",
    "access": "public",
    "description": "Swap rows in the matrix.",
    "lineNumber": 2552,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_row_index1",
        "description": "Number 1 of row of matrix to exchange."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_row_index2",
        "description": "Number 2 of row of matrix to exchange."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 636,
    "kind": "method",
    "name": "exchangeColumn",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#exchangeColumn",
    "access": "public",
    "description": "Swap columns in the matrix.",
    "lineNumber": 2562,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_column_index1",
        "description": "Number 1 of column of matrix to exchange."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_column_index2",
        "description": "Number 2 of column of matrix to exchange."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 637,
    "kind": "method",
    "name": "_concatRight",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_concatRight",
    "access": "private",
    "description": "Combine matrix to the right of this matrix. (mutable)",
    "lineNumber": 2572,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "left_matrix",
        "description": "Matrix to combine."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 639,
    "kind": "method",
    "name": "_concatBottom",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_concatBottom",
    "access": "private",
    "description": "Combine matrix to the bottom of this matrix. (mutable)",
    "lineNumber": 2593,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing. (this)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bottom_matrix",
        "description": "Matrix to combine."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing. (this)"
    }
  },
  {
    "__docId__": 641,
    "kind": "method",
    "name": "concatRight",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#concatRight",
    "access": "public",
    "description": "Combine matrix to the right of this matrix.",
    "lineNumber": 2611,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "left_matrix",
        "description": "Matrix to combine."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 642,
    "kind": "method",
    "name": "concatBottom",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#concatBottom",
    "access": "public",
    "description": "Combine matrix to the bottom of this matrix.",
    "lineNumber": 2620,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bottom_matrix",
        "description": "Matrix to combine."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 643,
    "kind": "method",
    "name": "clip",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#clip",
    "access": "public",
    "description": "Clip each element of matrix to specified range.",
    "lineNumber": 2630,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} min(max(x, min), max)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "min(max(x, min), max)"
    }
  },
  {
    "__docId__": 644,
    "kind": "method",
    "name": "arange",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.arange",
    "access": "public",
    "description": "Create row vector with specified initial value, step value, end condition.",
    "lineNumber": 2651,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "start_or_stop",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "stop",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "step",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 645,
    "kind": "method",
    "name": "circshift",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#circshift",
    "access": "public",
    "description": "Circular shift.",
    "lineNumber": 2664,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "shift_size",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 646,
    "kind": "method",
    "name": "roll",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#roll",
    "access": "public",
    "description": "Circular shift.",
    "lineNumber": 2687,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "shift_size",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 647,
    "kind": "method",
    "name": "reshape",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#reshape",
    "access": "public",
    "description": "Change the shape of the matrix.\nThe number of elements in the matrix doesn't increase or decrease.",
    "lineNumber": 2698,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "row_length",
        "description": "Number of rows of matrix to reshape."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "column_length",
        "description": "Number of columns of matrix to reshape."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 648,
    "kind": "method",
    "name": "fliplr",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#fliplr",
    "access": "public",
    "description": "Flip this matrix left and right.",
    "lineNumber": 2728,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    },
    "params": []
  },
  {
    "__docId__": 649,
    "kind": "method",
    "name": "flipud",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#flipud",
    "access": "public",
    "description": "Flip this matrix up and down.",
    "lineNumber": 2736,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    },
    "params": []
  },
  {
    "__docId__": 650,
    "kind": "method",
    "name": "flip",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#flip",
    "access": "public",
    "description": "Flip this matrix.",
    "lineNumber": 2745,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 651,
    "kind": "method",
    "name": "indexsort",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#indexsort",
    "access": "public",
    "description": "Index sort.\n- Sorts by row when setting index by row vector to the argument.\n- Sorts by column when setting index by column vector to the argument.",
    "lineNumber": 2764,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Matrix after function processing."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "Vector with index. (See the description of this function)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Matrix after function processing."
    }
  },
  {
    "__docId__": 652,
    "kind": "method",
    "name": "transpose",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#transpose",
    "access": "public",
    "description": "Transpose a matrix.",
    "lineNumber": 2855,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^T"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^T"
    },
    "params": []
  },
  {
    "__docId__": 653,
    "kind": "method",
    "name": "ctranspose",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#ctranspose",
    "access": "public",
    "description": "Hermitian transpose.",
    "lineNumber": 2870,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^T"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^T"
    },
    "params": []
  },
  {
    "__docId__": 654,
    "kind": "method",
    "name": "T",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#T",
    "access": "public",
    "description": "Hermitian transpose.",
    "lineNumber": 2878,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^T"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^T"
    },
    "params": []
  },
  {
    "__docId__": 655,
    "kind": "method",
    "name": "inner",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#inner",
    "access": "public",
    "description": "Inner product/Dot product.",
    "lineNumber": 2888,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A・B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "dimension",
        "description": "Dimension of matrix used for calculation. (1 or 2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A・B"
    }
  },
  {
    "__docId__": 656,
    "kind": "method",
    "name": "lup",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#lup",
    "access": "public",
    "description": "LUP decomposition.\n- P'*L*U=A\n- P is permutation matrix.\n- L is lower triangular matrix.\n- U is upper triangular matrix.",
    "lineNumber": 2900,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, L: Matrix, U: Matrix}} {L, U, P}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, L: Matrix, U: Matrix}"
      ],
      "spread": false,
      "description": "{L, U, P}"
    },
    "params": []
  },
  {
    "__docId__": 657,
    "kind": "method",
    "name": "lu",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#lu",
    "access": "public",
    "description": "LU decomposition.\n- L*U=A\n- L is lower triangular matrix.\n- U is upper triangular matrix.",
    "lineNumber": 2911,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{L: Matrix, U: Matrix}} {L, U}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{L: Matrix, U: Matrix}"
      ],
      "spread": false,
      "description": "{L, U}"
    },
    "params": []
  },
  {
    "__docId__": 658,
    "kind": "method",
    "name": "linsolve",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#linsolve",
    "access": "public",
    "description": "Solving a system of linear equations to be Ax = B",
    "lineNumber": 2920,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} x"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "B"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "x"
    }
  },
  {
    "__docId__": 659,
    "kind": "method",
    "name": "qr",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#qr",
    "access": "public",
    "description": "QR decomposition.\n- Q*R=A\n- Q is orthonormal matrix.\n- R is upper triangular matrix.",
    "lineNumber": 2931,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{Q: Matrix, R: Matrix}} {Q, R}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{Q: Matrix, R: Matrix}"
      ],
      "spread": false,
      "description": "{Q, R}"
    },
    "params": []
  },
  {
    "__docId__": 660,
    "kind": "method",
    "name": "tridiagonalize",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#tridiagonalize",
    "access": "public",
    "description": "Tridiagonalization of symmetric matrix.\n- Don't support complex numbers.\n- P*H*P'=A\n- P is orthonormal matrix.\n- H is tridiagonal matrix.\n- The eigenvalues of H match the eigenvalues of A.",
    "lineNumber": 2944,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, H: Matrix}} {P, H}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, H: Matrix}"
      ],
      "spread": false,
      "description": "{P, H}"
    },
    "params": []
  },
  {
    "__docId__": 661,
    "kind": "method",
    "name": "eig",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#eig",
    "access": "public",
    "description": "Eigendecomposition of symmetric matrix.\n- Don't support complex numbers.\n- V*D*V'=A.\n- V is orthonormal matrix. and columns of V are the right eigenvectors.\n- D is a matrix containing the eigenvalues on the diagonal component.",
    "lineNumber": 2956,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{V: Matrix, D: Matrix}} {D, V}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{V: Matrix, D: Matrix}"
      ],
      "spread": false,
      "description": "{D, V}"
    },
    "params": []
  },
  {
    "__docId__": 662,
    "kind": "method",
    "name": "svd",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#svd",
    "access": "public",
    "description": "Singular Value Decomposition (SVD).\n- U*S*V'=A\n- U and V are orthonormal matrices.\n- S is a matrix with singular values in the diagonal.",
    "lineNumber": 2967,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{U: Matrix, S: Matrix, V: Matrix}} U*S*V'=A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{U: Matrix, S: Matrix, V: Matrix}"
      ],
      "spread": false,
      "description": "U*S*V'=A"
    },
    "params": []
  },
  {
    "__docId__": 663,
    "kind": "method",
    "name": "inv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#inv",
    "access": "public",
    "description": "Inverse matrix of this matrix.",
    "lineNumber": 2975,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^-1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^-1"
    },
    "params": []
  },
  {
    "__docId__": 664,
    "kind": "method",
    "name": "pinv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#pinv",
    "access": "public",
    "description": "Pseudo-inverse matrix.",
    "lineNumber": 2983,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^+"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^+"
    },
    "params": []
  },
  {
    "__docId__": 665,
    "kind": "method",
    "name": "gammaln",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#gammaln",
    "access": "public",
    "description": "Log-gamma function.",
    "lineNumber": 2995,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 666,
    "kind": "method",
    "name": "gamma",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#gamma",
    "access": "public",
    "description": "Gamma function.",
    "lineNumber": 3003,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 667,
    "kind": "method",
    "name": "gammainc",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#gammainc",
    "access": "public",
    "description": "Incomplete gamma function.",
    "lineNumber": 3013,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 668,
    "kind": "method",
    "name": "gampdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#gampdf",
    "access": "public",
    "description": "Probability density function (PDF) of the gamma distribution.",
    "lineNumber": 3023,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 669,
    "kind": "method",
    "name": "gamcdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#gamcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of gamma distribution.",
    "lineNumber": 3033,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 670,
    "kind": "method",
    "name": "gaminv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#gaminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of gamma distribution.",
    "lineNumber": 3043,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 671,
    "kind": "method",
    "name": "beta",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#beta",
    "access": "public",
    "description": "Beta function.",
    "lineNumber": 3052,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 672,
    "kind": "method",
    "name": "betainc",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#betainc",
    "access": "public",
    "description": "Incomplete beta function.",
    "lineNumber": 3063,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 673,
    "kind": "method",
    "name": "betacdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#betacdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of beta distribution.",
    "lineNumber": 3073,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 674,
    "kind": "method",
    "name": "betapdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#betapdf",
    "access": "public",
    "description": "Probability density function (PDF) of beta distribution.",
    "lineNumber": 3083,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 675,
    "kind": "method",
    "name": "betainv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#betainv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of beta distribution.",
    "lineNumber": 3093,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 676,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#factorial",
    "access": "public",
    "description": "Factorial function, x!.",
    "lineNumber": 3101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 677,
    "kind": "method",
    "name": "nchoosek",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#nchoosek",
    "access": "public",
    "description": "Binomial coefficient, number of all combinations, nCk.",
    "lineNumber": 3110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 678,
    "kind": "method",
    "name": "erf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#erf",
    "access": "public",
    "description": "Error function.",
    "lineNumber": 3118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 679,
    "kind": "method",
    "name": "erfc",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#erfc",
    "access": "public",
    "description": "Complementary error function.",
    "lineNumber": 3126,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 680,
    "kind": "method",
    "name": "normpdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#normpdf",
    "access": "public",
    "description": "Probability density function (PDF) of normal distribution.",
    "lineNumber": 3136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 681,
    "kind": "method",
    "name": "normcdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#normcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of normal distribution.",
    "lineNumber": 3146,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 682,
    "kind": "method",
    "name": "norminv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#norminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of normal distribution.",
    "lineNumber": 3156,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 683,
    "kind": "method",
    "name": "tpdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#tpdf",
    "access": "public",
    "description": "Probability density function (PDF) of Student's t-distribution.",
    "lineNumber": 3165,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 684,
    "kind": "method",
    "name": "tcdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#tcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution.",
    "lineNumber": 3174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 685,
    "kind": "method",
    "name": "tinv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#tinv",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution.",
    "lineNumber": 3183,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 686,
    "kind": "method",
    "name": "tdist",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#tdist",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.\n- If tails = 1, TDIST returns the one-tailed distribution.\n- If tails = 2, TDIST returns the two-tailed distribution.",
    "lineNumber": 3195,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tails",
        "description": "Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 687,
    "kind": "method",
    "name": "tinv2",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#tinv2",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.",
    "lineNumber": 3204,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 688,
    "kind": "method",
    "name": "chi2pdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#chi2pdf",
    "access": "public",
    "description": "Probability density function (PDF) of chi-square distribution.",
    "lineNumber": 3213,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 689,
    "kind": "method",
    "name": "chi2cdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#chi2cdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of chi-square distribution.",
    "lineNumber": 3222,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 690,
    "kind": "method",
    "name": "chi2inv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#chi2inv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of chi-square distribution.",
    "lineNumber": 3231,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 691,
    "kind": "method",
    "name": "fpdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#fpdf",
    "access": "public",
    "description": "Probability density function (PDF) of F-distribution.\n- In the argument, specify the degree of freedom of ratio of two variables according to chi-square distribution.",
    "lineNumber": 3242,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 692,
    "kind": "method",
    "name": "fcdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#fcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of F-distribution.",
    "lineNumber": 3252,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 693,
    "kind": "method",
    "name": "finv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#finv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of F-distribution.",
    "lineNumber": 3262,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 694,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#max",
    "access": "public",
    "description": "Maximum number.",
    "lineNumber": 3271,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 695,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#min",
    "access": "public",
    "description": "Minimum number.",
    "lineNumber": 3280,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 696,
    "kind": "method",
    "name": "sum",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#sum",
    "access": "public",
    "description": "Sum.",
    "lineNumber": 3289,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 697,
    "kind": "method",
    "name": "mean",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#mean",
    "access": "public",
    "description": "Arithmetic average.",
    "lineNumber": 3298,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 698,
    "kind": "method",
    "name": "prod",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#prod",
    "access": "public",
    "description": "Product of array elements.",
    "lineNumber": 3307,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 699,
    "kind": "method",
    "name": "geomean",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#geomean",
    "access": "public",
    "description": "Geometric mean.",
    "lineNumber": 3316,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 700,
    "kind": "method",
    "name": "median",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#median",
    "access": "public",
    "description": "Median.",
    "lineNumber": 3325,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 701,
    "kind": "method",
    "name": "mode",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#mode",
    "access": "public",
    "description": "Mode.",
    "lineNumber": 3334,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 702,
    "kind": "method",
    "name": "moment",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#moment",
    "access": "public",
    "description": "Moment.\n- Moment of order n. Equivalent to the definition of variance at 2.",
    "lineNumber": 3345,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nth_order",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 703,
    "kind": "method",
    "name": "var",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#var",
    "access": "public",
    "description": "Variance.",
    "lineNumber": 3354,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 704,
    "kind": "method",
    "name": "std",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#std",
    "access": "public",
    "description": "Standard deviation.",
    "lineNumber": 3363,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 705,
    "kind": "method",
    "name": "mad",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#mad",
    "access": "public",
    "description": "Mean absolute deviation.\n- The \"algorithm\" can choose \"0/mean\"(default) and \"1/median\".",
    "lineNumber": 3374,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "string",
          "?number"
        ],
        "spread": false,
        "optional": true,
        "name": "algorithm",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 706,
    "kind": "method",
    "name": "skewness",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#skewness",
    "access": "public",
    "description": "Skewness.",
    "lineNumber": 3383,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 707,
    "kind": "method",
    "name": "cov",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#cov",
    "access": "public",
    "description": "Covariance matrix.",
    "lineNumber": 3392,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 708,
    "kind": "method",
    "name": "normalize",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#normalize",
    "access": "public",
    "description": "The samples are normalized to a mean value of 0, standard deviation of 1.",
    "lineNumber": 3401,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 709,
    "kind": "method",
    "name": "corrcoef",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#corrcoef",
    "access": "public",
    "description": "Correlation matrix.",
    "lineNumber": 3410,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 710,
    "kind": "method",
    "name": "sort",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#sort",
    "access": "public",
    "description": "Sort.\n- The \"order\" can choose \"ascend\"(default) and \"descend\".",
    "lineNumber": 3421,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "order",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 711,
    "kind": "method",
    "name": "fft",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#fft",
    "access": "public",
    "description": "Discrete Fourier transform (DFT).",
    "lineNumber": 3434,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} fft(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "fft(x)"
    }
  },
  {
    "__docId__": 712,
    "kind": "method",
    "name": "ifft",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#ifft",
    "access": "public",
    "description": "Inverse discrete Fourier transform (IDFT).",
    "lineNumber": 3443,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} ifft(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "ifft(x)"
    }
  },
  {
    "__docId__": 713,
    "kind": "method",
    "name": "powerfft",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#powerfft",
    "access": "public",
    "description": "Power spectral density.",
    "lineNumber": 3452,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} abs(fft(x)).^2"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "abs(fft(x)).^2"
    }
  },
  {
    "__docId__": 714,
    "kind": "method",
    "name": "dct",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#dct",
    "access": "public",
    "description": "Discrete cosine transform (DCT-II, DCT).",
    "lineNumber": 3461,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} dct(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "dct(x)"
    }
  },
  {
    "__docId__": 715,
    "kind": "method",
    "name": "idct",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#idct",
    "access": "public",
    "description": "Inverse discrete cosine transform (DCT-III, IDCT).",
    "lineNumber": 3470,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} idct(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "idct(x)"
    }
  },
  {
    "__docId__": 716,
    "kind": "method",
    "name": "fft2",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#fft2",
    "access": "public",
    "description": "Discrete two-dimensional Fourier transform (2D DFT).",
    "lineNumber": 3478,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 717,
    "kind": "method",
    "name": "ifft2",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#ifft2",
    "access": "public",
    "description": "Inverse discrete two-dimensional Fourier transform (2D IDFT).",
    "lineNumber": 3486,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 718,
    "kind": "method",
    "name": "dct2",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#dct2",
    "access": "public",
    "description": "Discrete two-dimensional cosine transform (2D DCT).",
    "lineNumber": 3494,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 719,
    "kind": "method",
    "name": "idct2",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#idct2",
    "access": "public",
    "description": "Inverse discrete two-dimensional cosine transform (2D IDCT).",
    "lineNumber": 3502,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 720,
    "kind": "method",
    "name": "conv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#conv",
    "access": "public",
    "description": "Convolution integral, Polynomial multiplication.",
    "lineNumber": 3511,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 721,
    "kind": "method",
    "name": "xcorr",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#xcorr",
    "access": "public",
    "description": "ACF(Autocorrelation function), cros-correlation function.\n- If the argument is omitted, it is calculated by the autocorrelation function.",
    "lineNumber": 3521,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "number",
        "description": "Matrix to calculate the correlation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 722,
    "kind": "method",
    "name": "window",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.window",
    "access": "public",
    "description": "Create window function for signal processing.\nThe following window functions are available.\n- \"rectangle\": Rectangular window\n- \"hann\": Hann/Hanning window.\n- \"hamming\": Hamming window.\n- \"blackman\": Blackman window.\n- \"blackmanharris\": Blackman-Harris window.\n- \"blackmannuttall\": Blackman-Nuttall window.\n- \"flattop\": Flat top window.\n- \"sin\", Half cycle sine window.\n- \"vorbis\", Vorbis window.",
    "lineNumber": 3542,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Column vector."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Window function name."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Window length"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\" (default) , 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Column vector."
    }
  },
  {
    "__docId__": 723,
    "kind": "method",
    "name": "hann",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.hann",
    "access": "public",
    "description": "Hann (Hanning) window.",
    "lineNumber": 3552,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Column vector."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Window length"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\" (default) , 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Column vector."
    }
  },
  {
    "__docId__": 724,
    "kind": "method",
    "name": "hamming",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.hamming",
    "access": "public",
    "description": "Hamming window.",
    "lineNumber": 3562,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Column vector."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Window length"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\" (default) , 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Column vector."
    }
  },
  {
    "__docId__": 725,
    "kind": "method",
    "name": "fftshift",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#fftshift",
    "access": "public",
    "description": "FFT shift.\nCircular shift beginning at the center of the signal.",
    "lineNumber": 3572,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatrixSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 726,
    "kind": "file",
    "name": "src/math/tools/LinearAlgebra.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport Random from \"./Random.mjs\";\n\n// @ts-ignore\nimport Complex from \"../Complex.mjs\";\n\n// @ts-ignore\nimport Matrix from \"../Matrix.mjs\";\n\n/**\n * Collection of functions for linear algebra.\n * @ignore\n */\nclass LinearAlgebraTool {\n\n\t/**\n\t * Tridiagonalization of symmetric matrix.\n\t * - Don't support complex numbers.\n\t * - P*H*P'=A\n\t * - P is orthonormal matrix.\n\t * - H is tridiagonal matrix.\n\t * - The eigenvalues of H match the eigenvalues of A.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat\n\t * @returns {{P: Matrix, H: Matrix}}\n\t */\n\tstatic tridiagonalize(mat) {\n\n\t\tconst A = Matrix._toMatrix(mat);\n\t\tconst a = A.getNumberMatrixArray();\n\t\tconst tolerance_ = 1.0e-10;\n\n\t\t// 参考：奥村晴彦 (1991). C言語による最新アルゴリズム事典.\n\t\t// 3重対角化の成分を取得する\n\t\t\n\t\t/**\n\t\t * Inner product of vector x1 and vector x2.\n\t\t * @param {Array<number>} x1\n\t\t * @param {Array<number>} x2\n\t\t * @param {number} [index_offset=0] - Offset of the position of the vector to be calculated.\n\t\t * @param {number} [index_max=x1.length] - Maximum value of position of vector to be calculated (do not include this value).\n\t\t * @returns {number} \n\t\t */\n\t\tconst innerproduct = function(x1, x2, index_offset, index_max) {\n\t\t\tlet y = 0;\n\t\t\tconst ioffset = index_offset ? index_offset : 0;\n\t\t\tconst imax = index_max ? index_max : x1.length;\n\t\t\tfor(let i = ioffset; i < imax; i++) {\n\t\t\t\ty += x1[i] * x2[i];\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\n\t\t/**\n\t\t * Householder transformation.\n\t\t * @param {Array<number>} x\n\t\t * @param {number} [index_offset=0] - Offset of the position of the vector to be calculated.\n\t\t * @param {number} [index_max=x.length] - Maximum value of position of vector to be calculated (do not include this value).\n\t\t * @returns {{y1: number, v: Array<number>}} \n\t\t */\n\t\tconst house = function(x, index_offset, index_max) {\n\t\t\tconst ioffset = index_offset ? index_offset : 0;\n\t\t\tconst imax = index_max ? index_max : x.length;\n\t\t\t// xの内積の平方根（ノルム）を計算\n\t\t\tlet y1 = Math.sqrt(innerproduct(x, x, ioffset, imax));\n\t\t\tconst v = [];\n\t\t\tif(Math.abs(y1) >= tolerance_) {\n\t\t\t\tif(x[ioffset] < 0) {\n\t\t\t\t\ty1 = - y1;\n\t\t\t\t}\n\t\t\t\tlet t;\n\t\t\t\tfor(let i = ioffset, j = 0; i < imax; i++, j++) {\n\t\t\t\t\tif(i === ioffset) {\n\t\t\t\t\t\tv[j] = x[i] + y1;\n\t\t\t\t\t\tt = 1.0 / Math.sqrt(v[j] * y1);\n\t\t\t\t\t\tv[j] = v[j] * t;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tv[j] = x[i] * t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\ty1: - y1,\t// 鏡像の1番目の要素(y2,y3,...は0)\n\t\t\t\tv : v\t\t// 直行する単位ベクトル vT*v = 2\n\t\t\t};\n\t\t};\n\n\t\tconst n = a.length;\n\t\tconst d = []; // 対角成分\n\t\tconst e = []; // 隣の成分\n\t\t{\n\t\t\tfor(let k = 0; k < n - 2; k++) {\n\t\t\t\tconst v = a[k];\n\t\t\t\td[k] = v[k];\n\t\t\t\t{\n\t\t\t\t\tconst H = house(v, k + 1, n);\n\t\t\t\t\te[k] = H.y1;\n\t\t\t\t\tfor(let i = 0; i < H.v.length; i++) {\n\t\t\t\t\t\tv[k + 1 + i] = H.v[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(Math.abs(e[k]) < tolerance_) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor(let i = k + 1; i < n; i++) {\n\t\t\t\t\tlet s = 0;\n\t\t\t\t\tfor(let j = k + 1; j < i; j++) {\n\t\t\t\t\t\ts += a[j][i] * v[j];\n\t\t\t\t\t}\n\t\t\t\t\tfor(let j = i; j < n; j++) {\n\t\t\t\t\t\ts += a[i][j] * v[j];\n\t\t\t\t\t}\n\t\t\t\t\td[i] = s;\n\t\t\t\t}\n\t\t\t\tconst t = innerproduct(v, d, k + 1, n) / 2.0;\n\t\t\t\tfor(let i = n - 1; i > k; i--) {\n\t\t\t\t\tconst p = v[i];\n\t\t\t\t\tconst q = d[i] - (t * p);\n\t\t\t\t\td[i] = q;\n\t\t\t\t\tfor(let j = i; j < n; j++) {\n\t\t\t\t\t\tconst r = p * d[j] + q * v[j];\n\t\t\t\t\t\ta[i][j] = a[i][j] - r;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(n >= 2) {\n\t\t\t\td[n - 2] = a[n - 2][n - 2];\n\t\t\t\te[n - 2] = a[n - 2][n - 1];\n\t\t\t}\n\t\t\tif(n >= 1) {\n\t\t\t\td[n - 1] = a[n - 1][n - 1];\n\t\t\t}\n\t\t}\n\n\t\t//変換P行列を求める\n\t\tfor(let k = n - 1; k >= 0; k--) {\n\t\t\tconst v = a[k];\n\t\t\tif(k < n - 2) {\n\t\t\t\tfor(let i = k + 1; i < n; i++) {\n\t\t\t\t\tconst w = a[i];\n\t\t\t\t\tconst t = innerproduct(v, w, k + 1, n);\n\t\t\t\t\tfor(let j = k + 1; j < n; j++) {\n\t\t\t\t\t\tw[j] -= t * v[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(let i = 0; i < n; i++) {\n\t\t\t\tv[i] = 0.0;\n\t\t\t}\n\t\t\tv[k] = 1.0;\n\t\t}\n\n\t\t// d と e の配列を使って、三重対角行列を作成する\n\t\tconst H = Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\tif(row === col) {\n\t\t\t\treturn new Complex(d[row]);\n\t\t\t}\n\t\t\telse if(Math.abs(row - col) === 1) {\n\t\t\t\treturn new Complex(e[Math.trunc((row + col) * 0.5)]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Complex.ZERO;\n\t\t\t}\n\t\t}, n, n);\n\n\t\treturn {\n\t\t\tP : (new Matrix(a)).T(),\n\t\t\tH : H\n\t\t};\n\t}\n\n\t/**\n\t * Eigendecomposition of symmetric matrix.\n\t * - Don't support complex numbers.\n\t * - V*D*V'=A.\n\t * - V is orthonormal matrix. and columns of V are the right eigenvectors.\n\t * - D is a matrix containing the eigenvalues on the diagonal component.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - Symmetric matrix.\n\t * @returns {{V: Matrix, D: Matrix}}\n\t */\n\tstatic eig(mat) {\n\t\tconst A = Matrix._toMatrix(mat);\n\t\t\n\t\t// QR法により固有値を求める\n\t\tlet is_error = false;\n\t\tconst tolerance_ = 1.0e-10;\n\t\tconst PH = LinearAlgebraTool.tridiagonalize(A);\n\t\tconst a = PH.P.getNumberMatrixArray();\n\t\tconst h = PH.H.getNumberMatrixArray();\n\t\tconst n = A.row_length;\n\n\t\t// 成分の抽出\n\t\tconst d = []; // 対角成分\n\t\tconst e = []; // 隣の成分\n\t\tfor(let i = 0; i < n; i++) {\n\t\t\td[i] = h[i][i];\n\t\t\te[i] = (i === 0) ? 0.0 : h[i][i - 1];\n\t\t}\n\n\t\t// 参考：奥村晴彦 (1991). C言語による最新アルゴリズム事典.\n\t\tconst MAX_ITER = 100;\n\t\tfor(let h = n - 1; h > 0; h--) {\n\t\t\tlet j = h;\n\t\t\tfor(j = h;j >= 1; j--) {\n\t\t\t\tif(Math.abs(e[j]) <= (tolerance_ * (Math.abs(d[j - 1]) + Math.abs(d[j])))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(j == h) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet iter = 0;\n\t\t\twhile(true) {\n\t\t\t\titer++;\n\t\t\t\tif(iter > MAX_ITER) {\n\t\t\t\t\tis_error = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlet w = (d[h - 1] - d[h]) / 2.0;\n\t\t\t\tlet t = e[h] * e[h];\n\t\t\t\tlet s = Math.sqrt(w * w + t);\n\t\t\t\tif(w < 0) {\n\t\t\t\t\ts = - s;\n\t\t\t\t}\n\t\t\t\tlet x = d[j] - d[h] + (t / (w + s));\n\t\t\t\tlet y = e[j + 1];\n\t\t\t\tfor(let k = j; k < h; k++) {\n\t\t\t\t\tlet c, s;\n\t\t\t\t\tif(Math.abs(x) >= Math.abs(y)) {\n\t\t\t\t\t\tt = - y / x;\n\t\t\t\t\t\tc = 1.0 / Math.sqrt(t * t + 1);\n\t\t\t\t\t\ts = t * c;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tt = - x / y;\n\t\t\t\t\t\ts = 1.0 / Math.sqrt(t * t + 1);\n\t\t\t\t\t\tc = t * s;\n\t\t\t\t\t}\n\t\t\t\t\tw = d[k] - d[k + 1];\n\t\t\t\t\tt = (w * s + 2.0 * c * e[k + 1]) * s;\n\t\t\t\t\td[k] -= t;\n\t\t\t\t\td[k + 1] += t;\n\t\t\t\t\tif(k > j) {\n\t\t\t\t\t\te[k] = c * e[k] - s * y;\n\t\t\t\t\t}\n\t\t\t\t\te[k + 1] += s * (c * w - 2.0 * s * e[k + 1]);\n\t\t\t\t\tfor(let i = 0; i < n; i++) {\n\t\t\t\t\t\tx = a[i][k];\n\t\t\t\t\t\ty = a[i][k + 1];\n\t\t\t\t\t\ta[i][k    ] = c * x - s * y;\n\t\t\t\t\t\ta[i][k + 1] = s * x + c * y;\n\t\t\t\t\t}\n\t\t\t\t\tif(k < h - 1) {\n\t\t\t\t\t\tx = e[k + 1];\n\t\t\t\t\t\ty = -s * e[k + 2];\n\t\t\t\t\t\te[k + 2] *= c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(Math.abs(e[h]) <= tolerance_ * (Math.abs(d[h - 1]) + Math.abs(d[h]))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(is_error) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// 固有値が大きいものから並べるソート\n\t\tconst vd_sort = function(V, d) {\n\t\t\tconst len = d.length;\n\t\t\tconst sortdata = [];\n\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\tsortdata[i] = {\n\t\t\t\t\tsigma : d[i],\n\t\t\t\t\tindex : i\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst compare = function(a, b){\n\t\t\t\tif(a.sigma === b.sigma) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\treturn (a.sigma < b.sigma ? 1 : -1);\n\t\t\t};\n\t\t\tsortdata.sort(compare);\n\t\t\tconst MOVE = Matrix.zeros(len);\n\t\t\tconst ND = Matrix.zeros(len);\n\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\tND.matrix_array[i][i] = new Complex(sortdata[i].sigma);\n\t\t\t\tMOVE.matrix_array[i][sortdata[i].index] = Complex.ONE;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tV : V.mul(MOVE),\n\t\t\t\tD : ND\n\t\t\t};\n\t\t};\n\t\tconst VD = vd_sort(new Matrix(a), d);\n\t\treturn VD;\n\t}\n\n\t/**\n\t * Treat matrices as vectors, make them orthonormal, and make matrices of Q and R.\n\t * The method of Gram-Schmidt orthonormalization is used.\n\t * @param {Matrix} mat - Square matrix.\n\t * @returns {{Q: Matrix, R: Matrix, non_orthogonalized : Array<number>}}\n\t */\n\tstatic doGramSchmidtOrthonormalization(mat) {\n\t\t// グラム・シュミットの正規直交化法を使用する\n\t\t// 参考：Gilbert Strang (2007). Computational Science and Engineering.\n\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tconst len = M.column_length;\n\t\tconst A = M.matrix_array;\n\t\tconst Q_Matrix = Matrix.zeros(len);\n\t\tconst R_Matrix = Matrix.zeros(len);\n\t\tconst Q = Q_Matrix.matrix_array;\n\t\tconst R = R_Matrix.matrix_array;\n\t\tconst non_orthogonalized = [];\n\t\tconst a = new Array(len);\n\t\t\n\t\tfor(let col = 0; col < len; col++) {\n\t\t\t// i列目を抽出\n\t\t\tfor(let row = 0; row < len; row++) {\n\t\t\t\ta[row] = A[row][col];\n\t\t\t}\n\t\t\t// 直行ベクトルを作成\n\t\t\tif(col > 0) {\n\t\t\t\t// Rのi列目を内積で計算する\n\t\t\t\tfor(let j = 0; j < col; j++) {\n\t\t\t\t\tfor(let k = 0; k < len; k++) {\n\t\t\t\t\t\tR[j][col] = R[j][col].add(A[k][col].dot(Q[k][j]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(let j = 0; j < col; j++) {\n\t\t\t\t\tfor(let k = 0; k < len; k++) {\n\t\t\t\t\t\ta[k] = a[k].sub(R[j][col].mul(Q[k][j]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t{\n\t\t\t\t// 正規化と距離を1にする\n\t\t\t\tfor(let j = 0; j < len; j++) {\n\t\t\t\t\tR[col][col] = R[col][col].add(a[j].square());\n\t\t\t\t}\n\t\t\t\tR[col][col] = R[col][col].sqrt();\n\t\t\t\tif(R[col][col].isZero(1e-10)) {\n\t\t\t\t\t// 直行化が不可能だった列の番号をメモして、その列はゼロで埋める\n\t\t\t\t\tnon_orthogonalized.push(col);\n\t\t\t\t\tfor(let j = 0;j < len;j++) {\n\t\t\t\t\t\tQ[j][col] = Complex.ZERO;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// ここで R[i][i] === 0 の場合、直行させたベクトルaは0であり、\n\t\t\t\t\t// ランク落ちしており、計算不可能である。\n\t\t\t\t\t// 0割りした値を、j列目のQに記録していくがInfとなる。\n\t\t\t\t\tfor(let j = 0;j < len;j++) {\n\t\t\t\t\t\tQ[j][col] = a[j].div(R[col][col]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tQ : Q_Matrix,\n\t\t\tR : R_Matrix,\n\t\t\tnon_orthogonalized : non_orthogonalized\n\t\t};\n\t}\n\t\n\t/**\n\t * Create orthogonal vectors for all row vectors of the matrix.\n\t * - If the vector can not be found, it returns NULL.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat\n\t * @param {number} [tolerance=1.0e-10] - Calculation tolerance of calculation.\n\t * @returns {Matrix|null} An orthogonal vector.\n\t */\n\tstatic createOrthogonalVector(mat, tolerance) {\n\t\tconst M = new Matrix(mat);\n\t\tconst column_length = M.column_length;\n\t\tconst m = M.matrix_array;\n\t\tconst tolerance_ = tolerance ? tolerance : 1.0e-10;\n\t\t// 正則行列をなす場合に問題となる行番号を取得\n\t\tconst not_regular_rows = LinearAlgebraTool.getLinearDependenceVector(M, tolerance_);\n\t\t// 不要な行を削除する\n\t\t{\n\t\t\t// not_regular_rowsは昇順リストなので、後ろから消していく\n\t\t\tfor(let i = not_regular_rows.length - 1; i >= 0; i--) {\n\t\t\t\tm.splice(not_regular_rows[i], 1);\n\t\t\t\tM.row_length--;\n\t\t\t}\n\t\t}\n\t\t// 追加できるベクトルの数\n\t\tconst add_vectors = column_length - m.length;\n\t\tif(add_vectors <= 0) {\n\t\t\treturn null;\n\t\t}\n\t\t// ランダムベクトル（seed値は毎回同一とする）\n\t\tconst noise = new Random(0);\n\t\tlet orthogonal_matrix = null;\n\t\tfor(let i = 0; i < 100; i++) {\n\t\t\t// 直行ベクトルを作るために、いったん行と列を交換する\n\t\t\t// これは、グラム・シュミットの正規直交化法が列ごとに行う手法のため。\n\t\t\tconst M2 = M.T();\n\t\t\t// ランダム行列を作成する\n\t\t\tconst R = Matrix.createMatrixDoEachCalculation(function() {\n\t\t\t\treturn new Complex(noise.nextGaussian());\n\t\t\t}, M2.row_length, add_vectors);\n\t\t\t// 列に追加する\n\t\t\tM2._concatRight(R);\n\t\t\t// 正規直行行列を作成する\n\t\t\torthogonal_matrix = LinearAlgebraTool.doGramSchmidtOrthonormalization(M2);\n\t\t\t// 正しく作成できていたら完了\n\t\t\tif(orthogonal_matrix.non_orthogonalized.length === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(orthogonal_matrix.non_orthogonalized.length !== 0) {\n\t\t\t// 普通は作成できないことはないが・・・\n\t\t\tconsole.log(\"miss\");\n\t\t\treturn null;\n\t\t}\n\t\t// 作成した列を切り出す\n\t\tconst y = new Array(add_vectors);\n\t\tconst q = orthogonal_matrix.Q.matrix_array;\n\t\tfor(let row = 0; row < add_vectors; row++) {\n\t\t\ty[row] = new Array(column_length);\n\t\t\tfor(let col = 0; col < column_length; col++) {\n\t\t\t\ty[row][col] = q[col][column_length - add_vectors + row];\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Row number with the largest norm value in the specified column of the matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat\n\t * @param {number} column_index - Number of column of matrix.\n\t * @param {number} [row_index_offset=0] - Offset of the position of the vector to be calculated.\n\t * @param {number} [row_index_max] - Maximum value of position of vector to be calculated (do not include this value).\n\t * @returns {{index: number, max: number}} Matrix row number.\n\t * @private\n\t */\n\tstatic getMaxRowNumber(mat, column_index, row_index_offset, row_index_max) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tlet row_index = 0;\n\t\tlet row_max = 0;\n\t\tlet row = row_index_offset ? row_index_offset : 0;\n\t\tconst row_imax = row_index_max ? row_index_max : M.row_length;\n\t\t// n列目で最も大きな行を取得\n\t\tfor(; row < row_imax; row++) {\n\t\t\tconst norm = M.matrix_array[row][column_index].norm;\n\t\t\tif(norm > row_max) {\n\t\t\t\trow_max = norm;\n\t\t\t\trow_index = row;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tindex : row_index,\n\t\t\tmax : row_max\n\t\t};\n\t}\n\n\t/**\n\t * Extract linearly dependent rows when each row of matrix is a vector.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat\n\t * @param {number} [tolerance=1.0e-10] - Calculation tolerance of calculation.\n\t * @returns {Array} Array of matrix row numbers in ascending order.\n\t * @private\n\t */\n\tstatic getLinearDependenceVector(mat, tolerance) {\n\t\tconst M = new Matrix(mat);\n\t\tconst m = M.matrix_array;\n\t\tconst tolerance_ = tolerance ? Matrix._toDouble(tolerance) : 1.0e-10;\n\t\t// 確認する行番号（ここから終わった行は削除していく）\n\t\tconst row_index_array = new Array(mat.row_length);\n\t\tfor(let i = 0; i < mat.row_length; i++) {\n\t\t\trow_index_array[i] = i;\n\t\t}\n\t\t// ガウスの消去法を使用して、行ベクトルを抽出していく\n\t\tfor(let col_target = 0; col_target < M.column_length; col_target++) {\n\t\t\tlet row_max_index = 0;\n\t\t\t{\n\t\t\t\tlet row_max = 0;\n\t\t\t\tlet row_max_key = 0;\n\t\t\t\t// n列目で絶対値が最も大きな行を取得\n\t\t\t\tfor(const row_key in row_index_array) {\n\t\t\t\t\tconst row = row_index_array[row_key];\n\t\t\t\t\tconst norm = m[row][col_target].norm;\n\t\t\t\t\tif(norm > row_max) {\n\t\t\t\t\t\trow_max = norm;\n\t\t\t\t\t\trow_max_key = parseInt(row_key, 10);\n\t\t\t\t\t\trow_max_index = row;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 大きいのが0である＝その列は全て0である\n\t\t\t\tif(row_max <= tolerance_) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// 大きな値があった行は、リストから除去する\n\t\t\t\trow_index_array.splice(row_max_key, 1);\n\t\t\t\tif(col_target === M.column_length - 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 次の列から、大きな値があった行の成分を削除\n\t\t\tfor(const row_key in row_index_array) {\n\t\t\t\tconst row = row_index_array[row_key];\n\t\t\t\tconst inv = m[row][col_target].div(m[row_max_index][col_target]);\n\t\t\t\tfor(let col = col_target; col < M.column_length; col++) {\n\t\t\t\t\tm[row][col] = m[row][col].sub(m[row_max_index][col].mul(inv));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn row_index_array;\n\t}\n\n}\n\n/**\n * Class for linear algebra for Matrix class.\n */\nexport default class LinearAlgebra {\n\n\t/**\n\t * Inner product/Dot product.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} A\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} B\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [dimension=1] - Dimension of matrix used for calculation. (1 or 2)\n\t * @returns {Matrix} A・B\n\t */\n\tstatic inner(A, B, dimension) {\n\t\tconst M1 = Matrix._toMatrix(A);\n\t\tconst M2 = Matrix._toMatrix(B);\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst dim = dimension ? Matrix._toInteger(dimension) : 1;\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn new Matrix(M1.scalar.dot(M2.scalar));\n\t\t}\n\t\tif(M1.isVector() && M2.isVector()) {\n\t\t\tlet sum = Complex.ZERO;\n\t\t\tfor(let i = 0; i < M1.length; i++) {\n\t\t\t\tsum = sum.add(M1.getComplex(i).dot(M2.getComplex(i)));\n\t\t\t}\n\t\t\treturn new Matrix(sum);\n\t\t}\n\t\tif((M1.row_length !== M2.row_length) || (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tif(dim === 1) {\n\t\t\tconst y = new Array(1);\n\t\t\ty[0] = new Array(M1.column_length);\n\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\t\tsum = sum.add(x1[row][col].dot(x2[row][col]));\n\t\t\t\t}\n\t\t\t\ty[0][col] = sum;\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\telse if(dim === 2) {\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\t\tsum = sum.add(x1[row][col].dot(x2[row][col]));\n\t\t\t\t}\n\t\t\t\ty[row] = [sum];\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\telse {\n\t\t\tthrow \"dim\";\n\t\t}\n\t}\n\n\t/**\n\t * p-norm.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [p=2]\n\t * @returns {number}\n\t */\n\tstatic norm(mat, p) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tconst p_number = (p === undefined) ? 2 : Matrix._toDouble(p);\n\t\tif(p_number === 1) {\n\t\t\t// 行列の1ノルム\n\t\t\tconst y = M.matrix_array;\n\t\t\t// 行ノルムを計算する\n\t\t\tif(M.isRow()) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\t\tsum += y[0][col].norm;\n\t\t\t\t}\n\t\t\t\treturn sum;\n\t\t\t}\n\t\t\t// 列ノルムを計算する\n\t\t\telse if(M.isColumn()) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\t\tsum += y[row][0].norm;\n\t\t\t\t}\n\t\t\t\treturn sum;\n\t\t\t}\n\t\t\t// 列の和の最大値\n\t\t\tlet max = 0;\n\t\t\t// 列を固定して行の和を計算\n\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\tlet sum = 0;\n\t\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\t\tsum += y[row][col].norm;\n\t\t\t\t}\n\t\t\t\tif(max < sum) {\n\t\t\t\t\tmax = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn max;\n\t\t}\n\t\telse if(p_number === 2) {\n\t\t\t// 行列の2ノルム\n\t\t\tconst y = M.matrix_array;\n\t\t\t// 行ノルムを計算する\n\t\t\tif(M.isRow()) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\t\tsum += y[0][col].square().real;\n\t\t\t\t}\n\t\t\t\treturn Math.sqrt(sum);\n\t\t\t}\n\t\t\t// 列ノルムを計算する\n\t\t\telse if(M.isColumn()) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\t\tsum += y[row][0].square().real;\n\t\t\t\t}\n\t\t\t\treturn Math.sqrt(sum);\n\t\t\t}\n\t\t\treturn M.svd().S.diag().max().scalar.real;\n\t\t}\n\t\telse if((p_number === Number.POSITIVE_INFINITY) || (p_number === Number.NEGATIVE_INFINITY)) {\n\t\t\tconst y = M.matrix_array;\n\t\t\tlet compare_number = p_number === Number.POSITIVE_INFINITY ? 0 : Number.POSITIVE_INFINITY;\n\t\t\tconst compare_func = p_number === Number.POSITIVE_INFINITY ? Math.max : Math.min;\n\t\t\t// 行ノルムを計算する\n\t\t\tif(M.isRow()) {\n\t\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\t\tcompare_number = compare_func(compare_number, y[0][col].norm);\n\t\t\t\t}\n\t\t\t\treturn compare_number;\n\t\t\t}\n\t\t\t// 列ノルムを計算する\n\t\t\tif(M.isColumn()) {\n\t\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\t\tcompare_number = compare_func(compare_number, y[row][0].norm);\n\t\t\t\t}\n\t\t\t\treturn compare_number;\n\t\t\t}\n\t\t\t// 行列の場合は、列の和の最大値\n\t\t\tcompare_number = 0;\n\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\t\tsum += y[row][col].norm;\n\t\t\t\t}\n\t\t\t\tcompare_number = Math.max(compare_number, sum);\n\t\t\t}\n\t\t\treturn compare_number;\n\t\t}\n\t\telse if(M.isVector()) {\n\t\t\t// 一般化ベクトルpノルム\n\t\t\tlet sum = 0.0;\n\t\t\tfor(let i = 0; i < M.length; i++) {\n\t\t\t\tsum += Math.pow(M.getComplex(i).norm, p_number);\n\t\t\t}\n\t\t\treturn Math.pow(sum, 1.0 / p_number);\n\t\t}\n\t\t// 未実装\n\t\tthrow \"norm\";\n\t}\n\t\n\t/**\n\t * Condition number of the matrix\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [p=2]\n\t * @returns {number}\n\t */\n\tstatic cond(mat, p) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tconst p_number = (p === undefined) ? 2 : Matrix._toInteger(p);\n\t\tif(p_number === 2) {\n\t\t\t// 零行列は Inf\n\t\t\tif(M.isZeros()) {\n\t\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t\t}\n\t\t\t// ベクトルは1\n\t\t\tif(M.isVector()) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\t// ユニタリは1\n\t\t\tif(M.isUnitary()) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tconst s = M.svd().S.diag();\n\t\t\treturn s.max().scalar.real / s.min().scalar.real;\n\t\t}\n\t\treturn M.norm(p) * M.pinv().norm(p);\n\t}\n\n\t/**\n\t * Inverse condition number.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat\n\t * @returns {number}\n\t */\n\tstatic rcond(mat) {\n\t\treturn 1.0 / LinearAlgebra.cond(Matrix._toMatrix(mat), 1);\n\t}\n\n\t/**\n\t * Rank.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [tolerance] - Calculation tolerance of calculation.\n\t * @returns {number} rank(A)\n\t */\n\tstatic rank(mat, tolerance) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\t// 横が長い行列の場合\n\t\tif(M.row_length <= M.column_length) {\n\t\t\treturn Math.min(M.row_length, M.column_length) - (LinearAlgebraTool.getLinearDependenceVector(M, tolerance)).length;\n\t\t}\n\t\telse {\n\t\t\treturn M.row_length - (LinearAlgebraTool.getLinearDependenceVector(M, tolerance)).length;\n\t\t}\n\t}\n\n\t/**\n\t * Trace of a matrix.\n\t * Sum of diagonal elements.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat\n\t * @returns {Complex}\n\t */\n\tstatic trace(mat) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tconst len = Math.min(M.row_length, M.column_length);\n\t\tlet sum = Complex.ZERO;\n\t\tfor(let i = 0; i < len; i++) {\n\t\t\tsum = sum.add(M.matrix_array[i][i]);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t * Determinant.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat\n\t * @returns {Matrix} |A|\n\t */\n\tstatic det(mat) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tif(!M.isSquare()) {\n\t\t\tthrow \"not square\";\n\t\t}\n\t\tconst len = M.length;\n\t\tif(len < 5) {\n\t\t\tconst calcDet = function(x) {\n\t\t\t\tif(x.length === 2) {\n\t\t\t\t\t// 2次元の行列式になったら、たすき掛け計算する\n\t\t\t\t\treturn x[0][0].mul(x[1][1]).sub(x[0][1].mul(x[1][0]));\n\t\t\t\t}\n\t\t\t\tlet y = Complex.ZERO;\n\t\t\t\tfor(let i = 0; i < x.length; i++) {\n\t\t\t\t\t// N次元の行列式を、N-1次元の行列式に分解していく\n\t\t\t\t\tconst D = [];\n\t\t\t\t\tconst a = x[i][0];\n\t\t\t\t\tfor(let row = 0, D_low = 0; row < x.length; row++) {\n\t\t\t\t\t\tif(i === row) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tD[D_low] = [];\n\t\t\t\t\t\tfor(let col = 1, D_col = 0; col < x.length; col++, D_col++) {\n\t\t\t\t\t\t\tD[D_low][D_col] = x[row][col];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tD_low++;\n\t\t\t\t\t}\n\t\t\t\t\tif((i % 2) === 0) {\n\t\t\t\t\t\ty = y.add(a.mul(calcDet(D)));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ty = y.sub(a.mul(calcDet(D)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn y;\n\t\t\t};\n\t\t\treturn new Matrix(calcDet(M.matrix_array));\n\t\t}\n\t\telse {\n\t\t\t// サイズが大きい場合は、lu分解を利用する\n\t\t\tconst lup = LinearAlgebra.lup(M);\n\t\t\tconst exchange_count = (len - lup.P.diag().sum().scalar.real) / 2;\n\t\t\t// 上行列の対角線上の値を掛け算する\n\t\t\tlet y = lup.U.diag().prod();\n\t\t\tif((exchange_count % 2) === 1) {\n\t\t\t\ty = y.negate();\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t}\n\n\t/**\n\t * LUP decomposition.\n\t * - P'*L*U=A\n\t * - P is permutation matrix.\n\t * - L is lower triangular matrix.\n\t * - U is upper triangular matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - A\n\t * @returns {{P: Matrix, L: Matrix, U: Matrix}} {L, U, P}\n\t */\n\tstatic lup(mat) {\n\t\tconst A = new Matrix(mat);\n\t\tconst L = Matrix.zeros(A.row_length);\n\t\tconst U = A;\n\t\tconst P = Matrix.eye(A.row_length);\n\t\tconst l = L.matrix_array;\n\t\tconst u = U.matrix_array;\n\t\t// ガウスの消去法で連立1次方程式の未知数を求める\n\t\t//前進消去\n\t\tfor(let k = 0; k < A.column_length; k++) {\n\t\t\t// ピポットの選択\n\t\t\tlet pivot;\n\t\t\t{\n\t\t\t\t// k列目で最も大きな行を取得(k列目から調べる)\n\t\t\t\tconst max_row_number = LinearAlgebraTool.getMaxRowNumber(U, k, k);\n\t\t\t\tpivot = max_row_number.index;\n\t\t\t\tif(max_row_number.max === 0.0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t//交換を行う\n\t\t\t\tif(k !== pivot) {\n\t\t\t\t\tL._exchangeRow(k, pivot);\n\t\t\t\t\tU._exchangeRow(k, pivot);\n\t\t\t\t\tP._exchangeRow(k, pivot);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 消去\n\t\t\tfor(let row = k + 1;row < A.row_length; row++) {\n\t\t\t\tconst temp = u[row][k].div(u[k][k]);\n\t\t\t\tl[row][k] = temp;\n\t\t\t\t//lの値だけ行交換が必要？\n\t\t\t\tfor(let col = k; col < A.column_length; col++) {\n\t\t\t\t\tu[row][col] = u[row][col].sub(u[k][col].mul(temp));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tL._resize(A.row_length, Math.min(A.row_length, A.column_length));\n\t\tU._resize(Math.min(A.row_length, A.column_length), A.column_length);\n\t\t// L の対角線に1を代入\n\t\tL._each(function(num, row, col) {\n\t\t\treturn row === col ? Complex.ONE : num;\n\t\t});\n\t\treturn {\n\t\t\tL : L,\n\t\t\tU : U,\n\t\t\tP : P\n\t\t};\n\t}\n\n\t/**\n\t * LU decomposition.\n\t * - L*U=A\n\t * - L is lower triangular matrix.\n\t * - U is upper triangular matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - A\n\t * @returns {{L: Matrix, U: Matrix}} {L, U}\n\t */\n\tstatic lu(mat) {\n\t\tconst lup = LinearAlgebra.lup(mat);\n\t\tconst L = lup.P.T().mul(lup.L);\n\t\treturn {\n\t\t\tL : L,\n\t\t\tU : lup.U\n\t\t};\n\t}\n\n\t/**\n\t * Solving a system of linear equations to be Ax = B\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - A\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number - B\n\t * @returns {Matrix} x\n\t * @todo 安定化のためQR分解を用いた手法に切り替える。あるいはlup分解を使用した関数に作り替える。\n\t */\n\tstatic linsolve(mat, number) {\n\t\tconst A = Matrix._toMatrix(mat);\n\t\tconst B = Matrix._toMatrix(number);\n\t\tif(!A.isSquare()) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\t// 連立一次方程式を解く\n\t\tconst arg = B;\n\t\tif((B.row_length !== A.row_length) || (B.column_length > 1)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\t// 行列を準備する\n\t\tconst M = new Matrix(A);\n\t\tM._concatRight(arg);\n\t\tconst long_matrix_array = M.matrix_array;\n\t\tconst long_length = M.column_length;\n\t\tconst len = A.column_length;\n\t\t// ガウスの消去法で連立1次方程式の未知数を求める\n\t\t//前進消去\n\t\tfor(let k = 0; k < (len - 1); k++) {\n\t\t\t//ピポットの選択\n\t\t\t{\n\t\t\t\t// k列目で最も大きな行を取得(k列目から調べる)\n\t\t\t\tconst row_num = LinearAlgebraTool.getMaxRowNumber(M, k, k).index;\n\t\t\t\t//交換を行う\n\t\t\t\tM._exchangeRow(k, row_num);\n\t\t\t}\n\t\t\t//ピポットの正規化\n\t\t\t{\n\t\t\t\tconst normalize_value = long_matrix_array[k][k].inv();\n\t\t\t\tfor(let row = k, col = k; col < long_length; col++) {\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].mul(normalize_value);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//消去\n\t\t\tfor(let row = k + 1;row < len; row++) {\n\t\t\t\tconst temp = long_matrix_array[row][k];\n\t\t\t\tfor(let col = k; col < long_length; col++) {\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].sub(long_matrix_array[k][col].mul(temp));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//後退代入\n\t\tconst y = new Array(len);\n\t\ty[len - 1] = long_matrix_array[len - 1][len].div(long_matrix_array[len - 1][len - 1]);\n\t\tfor(let row = len - 2; row >= 0; row--) {\n\t\t\ty[row] = long_matrix_array[row][long_length - 1];\n\t\t\tfor(let j = row + 1; j < len; j++) {\n\t\t\t\ty[row] = y[row].sub(long_matrix_array[row][j].mul(y[j]));\n\t\t\t}\n\t\t\ty[row] = y[row].div(long_matrix_array[row][row]);\n\t\t}\n\t\tconst y2 = new Array(A.row_length);\n\t\tfor(let row = 0; row < A.row_length; row++) {\n\t\t\ty2[row] = [y[row]];\n\t\t}\n\n\t\treturn new Matrix(y2);\n\t}\n\n\t/**\n\t * QR decomposition.\n\t * - Q*R=A\n\t * - Q is orthonormal matrix.\n\t * - R is upper triangular matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - A\n\t * @returns {{Q: Matrix, R: Matrix}} {Q, R}\n\t */\n\tstatic qr(mat) {\n\t\t// 行列を準備する\n\t\tconst M = new Matrix(mat);\n\t\t// 作成後のQとRのサイズ\n\t\tconst Q_row_length = M.row_length;\n\t\tconst Q_column_length = M.row_length;\n\t\tconst R_row_length = M.row_length;\n\t\tconst R_column_length = M.column_length;\n\t\t// 計算時の行と列のサイズ\n\t\tconst dummy_size = Math.max(M.row_length, M.column_length);\n\t\t// 正方行列にする\n\t\tM._resize(dummy_size, dummy_size);\n\t\t// 正規直行化\n\t\tconst orthogonal_matrix = LinearAlgebraTool.doGramSchmidtOrthonormalization(M);\n\t\t// 計算したデータを取得\n\t\tlet Q_Matrix = orthogonal_matrix.Q;\n\t\tconst R_Matrix = orthogonal_matrix.R;\n\t\tconst non_orthogonalized = orthogonal_matrix.non_orthogonalized;\n\n\t\t// Qのサイズを成型する\n\t\tif(non_orthogonalized.length === M.row_length) {\n\t\t\t// 零行列の場合の特別処理\n\t\t\tQ_Matrix = Matrix.eye(M.row_length);\n\t\t}\n\t\telse if(non_orthogonalized.length !== 0) {\n\t\t\t// 一部、直行化できていない列があるため直行化できてない列以外を抽出\n\t\t\tconst map = {};\n\t\t\tfor(let i = 0; i < non_orthogonalized.length; i++) {\n\t\t\t\tmap[non_orthogonalized[i]] = 1;\n\t\t\t}\n\t\t\tconst orthogonalized = [];\n\t\t\tfor(let i = 0; i < dummy_size; i++) {\n\t\t\t\tif(map[i]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst array = [];\n\t\t\t\tfor(let j = 0; j < dummy_size; j++) {\n\t\t\t\t\tarray[j] = Q_Matrix.matrix_array[j][i];\n\t\t\t\t}\n\t\t\t\torthogonalized.push(array);\n\t\t\t}\n\t\t\t// 直行ベクトルを作成する\n\t\t\tconst orthogonal_vector = LinearAlgebraTool.createOrthogonalVector(orthogonalized);\n\t\t\t// 直行化できていない列を差し替える\n\t\t\tfor(let i = 0; i < non_orthogonalized.length; i++) {\n\t\t\t\tconst q_col = non_orthogonalized[i];\n\t\t\t\tfor(let j = 0; j < dummy_size; j++) {\n\t\t\t\t\tQ_Matrix.matrix_array[j][q_col] = orthogonal_vector.matrix_array[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tQ_Matrix._resize(Q_row_length, Q_column_length);\n\t\t// Rのサイズを成形する\n\t\tR_Matrix._resize(R_row_length, R_column_length);\n\t\treturn {\n\t\t\tQ : Q_Matrix,\n\t\t\tR : R_Matrix\n\t\t};\n\t}\n\n\t/**\n\t * Tridiagonalization of symmetric matrix.\n\t * - Don't support complex numbers.\n\t * - P*H*P'=A\n\t * - P is orthonormal matrix.\n\t * - H is tridiagonal matrix.\n\t * - The eigenvalues of H match the eigenvalues of A.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - A\n\t * @returns {{P: Matrix, H: Matrix}} {P, H}\n\t */\n\tstatic tridiagonalize(mat) {\n\t\tconst M = new Matrix(mat);\n\t\tif(!M.isSquare()) {\n\t\t\tthrow \"not square matrix\";\n\t\t}\n\t\tif(!M.isSymmetric()) {\n\t\t\tthrow \"not Symmetric\";\n\t\t}\n\t\tif(M.isComplex()) {\n\t\t\tthrow \"not Real Matrix\";\n\t\t}\n\t\treturn LinearAlgebraTool.tridiagonalize(M);\n\t}\n\n\t/**\n\t * Eigendecomposition of symmetric matrix.\n\t * - Don't support complex numbers.\n\t * - V*D*V'=A.\n\t * - V is orthonormal matrix. and columns of V are the right eigenvectors.\n\t * - D is a matrix containing the eigenvalues on the diagonal component.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - A\n\t * @returns {{V: Matrix, D: Matrix}} {D, V}\n\t * @todo 対称行列しか対応できていないので、対称行列ではないものはQR分解を用いた手法に切り替える予定。\n\t */\n\tstatic eig(mat) {\n\t\tconst M = new Matrix(mat);\n\t\tif(!M.isSquare()) {\n\t\t\tthrow \"not square matrix\";\n\t\t}\n\t\tif(!M.isSymmetric()) {\n\t\t\tthrow \"not Symmetric\";\n\t\t}\n\t\tif(M.isComplex()) {\n\t\t\tthrow \"not Real Matrix\";\n\t\t}\n\t\treturn LinearAlgebraTool.eig(M);\n\t}\n\n\t/**\n\t * Singular Value Decomposition (SVD).\n\t * - U*S*V'=A\n\t * - U and V are orthonormal matrices.\n\t * - S is a matrix with singular values in the diagonal.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - A\n\t * @returns {{U: Matrix, S: Matrix, V: Matrix}} U*S*V'=A\n\t */\n\tstatic svd(mat) {\n\t\tconst M = new Matrix(mat);\n\t\tif(M.isComplex()) {\n\t\t\t// 複素数が入っている場合は、eig関数が使用できないので非対応\n\t\t\tthrow \"Unimplemented\";\n\t\t}\n\t\tconst rank = LinearAlgebra.rank(M);\n\t\t// SVD分解\n\t\t// 参考：Gilbert Strang (2007). Computational Science and Engineering.\n\t\tconst VD = LinearAlgebra.eig(M.T().mul(M));\n\t\tconst sigma = Matrix.zeros(M.row_length, M.column_length);\n\t\tsigma._each(function(num, row, col) {\n\t\t\tif((row === col) && (row < rank)) {\n\t\t\t\treturn VD.D.getComplex(row, row).sqrt();\n\t\t\t}\n\t\t});\n\t\tconst s_size = Math.min(M.row_length, M.column_length);\n\t\tconst sing = Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\tif(row === col) {\n\t\t\t\tconst x = sigma.matrix_array[row][row];\n\t\t\t\tif(x.isZero()) {\n\t\t\t\t\treturn Complex.ZERO;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn x.inv();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Complex.ZERO;\n\t\t\t}\n\t\t}, s_size);\n\t\tconst V_rank = VD.V.resize(VD.V.row_length, s_size);\n\t\tconst u = M.mul(V_rank).mul(sing);\n\t\tconst QR = LinearAlgebra.qr(u);\n\t\treturn {\n\t\t\tU : QR.Q,\n\t\t\tS : sigma,\n\t\t\tV : VD.V\n\t\t};\n\t}\n\n\t/**\n\t * Inverse matrix of this matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - A\n\t * @returns {Matrix} A^-1\n\t */\n\tstatic inv(mat) {\n\t\tconst X = new Matrix(mat);\n\t\tif(X.isScalar()) {\n\t\t\treturn new Matrix(Complex.ONE.div(X.scalar));\n\t\t}\n\t\tif(!X.isSquare()) {\n\t\t\tthrow \"not square\";\n\t\t}\n\t\tif(X.isDiagonal()) {\n\t\t\t// 対角行列の場合は、対角成分のみ逆数をとる\n\t\t\tconst y = X.T();\n\t\t\tconst size = Math.min(y.row_length, y.column_length);\n\t\t\tfor(let i = 0; i < size; i++) {\n\t\t\t\ty.matrix_array[i][i] = y.matrix_array[i][i].inv();\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\t// (ここで正規直交行列の場合なら、転置させるなど入れてもいい？判定はできないけども)\n\t\tconst len = X.column_length;\n\t\t// ガウス・ジョルダン法\n\t\t// 初期値の設定\n\t\tconst M = new Matrix(X);\n\t\tM._concatRight(Matrix.eye(len));\n\t\tconst long_matrix_array = M.matrix_array;\n\t\tconst long_length = M.column_length;\n\n\t\t//前進消去\n\t\tfor(let k = 0; k < len; k++) {\n\t\t\t//ピポットの選択\n\t\t\t{\n\t\t\t\t// k列目で最も大きな行を取得(k列目から調べる)\n\t\t\t\tconst row_num = LinearAlgebraTool.getMaxRowNumber(M, k, k).index;\n\t\t\t\t//交換を行う\n\t\t\t\tM._exchangeRow(k, row_num);\n\t\t\t}\n\t\t\t//ピポットの正規化\n\t\t\t{\n\t\t\t\tconst normalize_value = long_matrix_array[k][k].inv();\n\t\t\t\tfor(let row = k, col = k; col < long_length; col++) {\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].mul(normalize_value);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//消去\n\t\t\tfor(let row = 0;row < len; row++) {\n\t\t\t\tif(row === k) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst temp = long_matrix_array[row][k];\n\t\t\t\tfor(let col = k; col < long_length; col++)\n\t\t\t\t{\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].sub(long_matrix_array[k][col].mul(temp));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst y = new Array(len);\n\t\t//右の列を抜き取る\n\t\tfor(let row = 0; row < len; row++) {\n\t\t\ty[row] = new Array(len);\n\t\t\tfor(let col = 0; col < len; col++) {\n\t\t\t\ty[row][col] = long_matrix_array[row][len + col];\n\t\t\t}\n\t\t}\n\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * Pseudo-inverse matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - A\n\t * @returns {Matrix} A^+\n\t */\n\tstatic pinv(mat) {\n\t\tconst M = new Matrix(mat);\n\t\tconst USV = LinearAlgebra.svd(M);\n\t\tconst U = USV.U;\n\t\tconst S = USV.S;\n\t\tconst V = USV.V;\n\t\tconst sing = Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\tif(row === col) {\n\t\t\t\tconst x = S.matrix_array[row][row];\n\t\t\t\tif(x.isZero()) {\n\t\t\t\t\treturn Complex.ZERO;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn x.inv();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Complex.ZERO;\n\t\t\t}\n\t\t}, M.column_length, M.row_length);\n\t\treturn V.mul(sing).mul(U.T());\n\t}\n\n\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/tools/LinearAlgebra.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 727,
    "kind": "class",
    "name": "LinearAlgebraTool",
    "memberof": "src/math/tools/LinearAlgebra.mjs",
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/LinearAlgebra.mjs",
    "importStyle": null,
    "description": "Collection of functions for linear algebra.",
    "lineNumber": 25,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 728,
    "kind": "method",
    "name": "tridiagonalize",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool.tridiagonalize",
    "access": "public",
    "description": "Tridiagonalization of symmetric matrix.\n- Don't support complex numbers.\n- P*H*P'=A\n- P is orthonormal matrix.\n- H is tridiagonal matrix.\n- The eigenvalues of H match the eigenvalues of A.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, H: Matrix}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, H: Matrix}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 729,
    "kind": "method",
    "name": "eig",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool.eig",
    "access": "public",
    "description": "Eigendecomposition of symmetric matrix.\n- Don't support complex numbers.\n- V*D*V'=A.\n- V is orthonormal matrix. and columns of V are the right eigenvectors.\n- D is a matrix containing the eigenvalues on the diagonal component.",
    "lineNumber": 192,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{V: Matrix, D: Matrix}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "Symmetric matrix."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{V: Matrix, D: Matrix}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 730,
    "kind": "method",
    "name": "doGramSchmidtOrthonormalization",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool.doGramSchmidtOrthonormalization",
    "access": "public",
    "description": "Treat matrices as vectors, make them orthonormal, and make matrices of Q and R.\nThe method of Gram-Schmidt orthonormalization is used.",
    "lineNumber": 317,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{Q: Matrix, R: Matrix, non_orthogonalized : Array<number>}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "Square matrix."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{Q: Matrix, R: Matrix, non_orthogonalized : Array<number>}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 731,
    "kind": "method",
    "name": "createOrthogonalVector",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool.createOrthogonalVector",
    "access": "public",
    "description": "Create orthogonal vectors for all row vectors of the matrix.\n- If the vector can not be found, it returns NULL.",
    "lineNumber": 387,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix|null} An orthogonal vector."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0e-10",
        "defaultRaw": 1e-10,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix",
        "null"
      ],
      "spread": false,
      "description": "An orthogonal vector."
    }
  },
  {
    "__docId__": 732,
    "kind": "method",
    "name": "getMaxRowNumber",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool.getMaxRowNumber",
    "access": "private",
    "description": "Row number with the largest norm value in the specified column of the matrix.",
    "lineNumber": 453,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{index: number, max: number}} Matrix row number."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "column_index",
        "description": "Number of column of matrix."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "row_index_offset",
        "description": "Offset of the position of the vector to be calculated."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "row_index_max",
        "description": "Maximum value of position of vector to be calculated (do not include this value)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{index: number, max: number}"
      ],
      "spread": false,
      "description": "Matrix row number."
    }
  },
  {
    "__docId__": 733,
    "kind": "method",
    "name": "getLinearDependenceVector",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool.getLinearDependenceVector",
    "access": "private",
    "description": "Extract linearly dependent rows when each row of matrix is a vector.",
    "lineNumber": 480,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Array of matrix row numbers in ascending order."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0e-10",
        "defaultRaw": 1e-10,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Array of matrix row numbers in ascending order."
    }
  },
  {
    "__docId__": 734,
    "kind": "class",
    "name": "LinearAlgebra",
    "memberof": "src/math/tools/LinearAlgebra.mjs",
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/tools/LinearAlgebra.mjs",
    "importStyle": "LinearAlgebra",
    "description": "Class for linear algebra for Matrix class.",
    "lineNumber": 532,
    "interface": false
  },
  {
    "__docId__": 735,
    "kind": "method",
    "name": "inner",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.inner",
    "access": "public",
    "description": "Inner product/Dot product.",
    "lineNumber": 541,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A・B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "B",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "dimension",
        "description": "Dimension of matrix used for calculation. (1 or 2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A・B"
    }
  },
  {
    "__docId__": 736,
    "kind": "method",
    "name": "norm",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.norm",
    "access": "public",
    "description": "p-norm.",
    "lineNumber": 594,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 737,
    "kind": "method",
    "name": "cond",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.cond",
    "access": "public",
    "description": "Condition number of the matrix",
    "lineNumber": 698,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 738,
    "kind": "method",
    "name": "rcond",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.rcond",
    "access": "public",
    "description": "Inverse condition number.",
    "lineNumber": 725,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 739,
    "kind": "method",
    "name": "rank",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.rank",
    "access": "public",
    "description": "Rank.",
    "lineNumber": 735,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} rank(A)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "tolerance",
        "description": "Calculation tolerance of calculation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "rank(A)"
    }
  },
  {
    "__docId__": 740,
    "kind": "method",
    "name": "trace",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.trace",
    "access": "public",
    "description": "Trace of a matrix.\nSum of diagonal elements.",
    "lineNumber": 752,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 741,
    "kind": "method",
    "name": "det",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.det",
    "access": "public",
    "description": "Determinant.",
    "lineNumber": 767,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} |A|"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "|A|"
    }
  },
  {
    "__docId__": 742,
    "kind": "method",
    "name": "lup",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.lup",
    "access": "public",
    "description": "LUP decomposition.\n- P'*L*U=A\n- P is permutation matrix.\n- L is lower triangular matrix.\n- U is upper triangular matrix.",
    "lineNumber": 827,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, L: Matrix, U: Matrix}} {L, U, P}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, L: Matrix, U: Matrix}"
      ],
      "spread": false,
      "description": "{L, U, P}"
    }
  },
  {
    "__docId__": 743,
    "kind": "method",
    "name": "lu",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.lu",
    "access": "public",
    "description": "LU decomposition.\n- L*U=A\n- L is lower triangular matrix.\n- U is upper triangular matrix.",
    "lineNumber": 884,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{L: Matrix, U: Matrix}} {L, U}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{L: Matrix, U: Matrix}"
      ],
      "spread": false,
      "description": "{L, U}"
    }
  },
  {
    "__docId__": 744,
    "kind": "method",
    "name": "linsolve",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.linsolve",
    "access": "public",
    "description": "Solving a system of linear equations to be Ax = B",
    "lineNumber": 900,
    "todo": [
      "安定化のためQR分解を用いた手法に切り替える。あるいはlup分解を使用した関数に作り替える。"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} x"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "B"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "x"
    }
  },
  {
    "__docId__": 745,
    "kind": "method",
    "name": "qr",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.qr",
    "access": "public",
    "description": "QR decomposition.\n- Q*R=A\n- Q is orthonormal matrix.\n- R is upper triangular matrix.",
    "lineNumber": 968,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{Q: Matrix, R: Matrix}} {Q, R}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{Q: Matrix, R: Matrix}"
      ],
      "spread": false,
      "description": "{Q, R}"
    }
  },
  {
    "__docId__": 746,
    "kind": "method",
    "name": "tridiagonalize",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.tridiagonalize",
    "access": "public",
    "description": "Tridiagonalization of symmetric matrix.\n- Don't support complex numbers.\n- P*H*P'=A\n- P is orthonormal matrix.\n- H is tridiagonal matrix.\n- The eigenvalues of H match the eigenvalues of A.",
    "lineNumber": 1038,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, H: Matrix}} {P, H}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, H: Matrix}"
      ],
      "spread": false,
      "description": "{P, H}"
    }
  },
  {
    "__docId__": 747,
    "kind": "method",
    "name": "eig",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.eig",
    "access": "public",
    "description": "Eigendecomposition of symmetric matrix.\n- Don't support complex numbers.\n- V*D*V'=A.\n- V is orthonormal matrix. and columns of V are the right eigenvectors.\n- D is a matrix containing the eigenvalues on the diagonal component.",
    "lineNumber": 1062,
    "todo": [
      "対称行列しか対応できていないので、対称行列ではないものはQR分解を用いた手法に切り替える予定。"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{V: Matrix, D: Matrix}} {D, V}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{V: Matrix, D: Matrix}"
      ],
      "spread": false,
      "description": "{D, V}"
    }
  },
  {
    "__docId__": 748,
    "kind": "method",
    "name": "svd",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.svd",
    "access": "public",
    "description": "Singular Value Decomposition (SVD).\n- U*S*V'=A\n- U and V are orthonormal matrices.\n- S is a matrix with singular values in the diagonal.",
    "lineNumber": 1084,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{U: Matrix, S: Matrix, V: Matrix}} U*S*V'=A"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{U: Matrix, S: Matrix, V: Matrix}"
      ],
      "spread": false,
      "description": "U*S*V'=A"
    }
  },
  {
    "__docId__": 749,
    "kind": "method",
    "name": "inv",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.inv",
    "access": "public",
    "description": "Inverse matrix of this matrix.",
    "lineNumber": 1130,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^-1"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^-1"
    }
  },
  {
    "__docId__": 750,
    "kind": "method",
    "name": "pinv",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.pinv",
    "access": "public",
    "description": "Pseudo-inverse matrix.",
    "lineNumber": 1202,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^+"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^+"
    }
  },
  {
    "__docId__": 751,
    "kind": "file",
    "name": "src/math/tools/Random.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n/**\n * Collection of tools used in the Random.\n * @ignore\n */\nclass RandomTool {\n\n\t/**\n\t * Create a 32-bit nonnegative integer.\n\t * @param {number} x \n\t * @returns {number}\n\t */\n\tstatic unsigned32(x) {\n\t\treturn ((x < 0) ? ((x & 0x7FFFFFFF) + 0x80000000) : x);\n\t}\n\n\t/**\n\t * Multiply two 32-bit integers and output a 32-bit integer.\n\t * @param {number} x1 \n\t * @param {number} x2 \n\t * @returns {number}\n\t */\n\tstatic multiplication32(x1, x2) {\n\t\tlet b = (x1 & 0xFFFF) * (x2 & 0xFFFF);\n\t\tlet y = RandomTool.unsigned32(b);\n\t\tb = (x1 & 0xFFFF) * (x2 >>> 16);\n\t\ty = RandomTool.unsigned32(y + ((b & 0xFFFF) << 16));\n\t\tb = (x1 >>> 16) * (x2 & 0xFFFF);\n\t\ty = RandomTool.unsigned32(y + ((b & 0xFFFF) << 16));\n\t\treturn (y & 0xFFFFFFFF);\n\t}\n\n\n}\n\n/**\n * Random number class.\n */\nexport default class Random {\n\t\n\t/**\n\t * Create Random.\n\t * @param {number} [seed] - Seed number for random number generation. If not specified, create from time.\n\t */\n\tconstructor(seed) {\n\t\t// 「M系列乱数」で乱数を作成します。\n\t\t// 参考：奥村晴彦 (1991). C言語による最新アルゴリズム事典.\n\t\t// 比較的長い 2^521 - 1通りを出力します。\n\t\t// 乱数はCでの動作と同じ値が出ることを確認。(seed = 1として1000番目の値が等しいことを確認)\n\n\t\t/**\n\t\t * Random number array.\n\t\t * @private\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.x = [];\n\t\tfor(let i = 0;i < 521;i++) {\n\t\t\tthis.x[i] = 0;\n\t\t}\n\t\tif(arguments.length >= 1) {\n\t\t\tthis.setSeed(seed);\n\t\t}\n\t\telse {\n\t\t\t// 線形合同法で適当に乱数を作成する\n\t\t\tconst seed = ((new Date()).getTime() + Random.seedUniquifier) & 0xFFFFFFFF;\n\t\t\tRandom.seedUniquifier = (Random.seedUniquifier + 1) & 0xFFFFFFFF;\n\t\t\tthis.setSeed(seed);\n\t\t}\n\t}\n\n\t/**\n\t * 内部データをシャッフル\n\t */\n\t_rnd521() {\n\t\tconst x = this.x;\n\t\tfor(let i = 0; i < 32; i++) {\n\t\t\tx[i] ^= x[i + 489];\n\t\t}\n\t\tfor(let i = 32; i < 521; i++) {\n\t\t\tx[i] ^= x[i - 32];\n\t\t}\n\t}\n\n\t/**\n\t * Initialize random seed.\n\t * @param {number} seed\n\t */\n\tsetSeed(seed) {\n\t\t// 伏見「乱数」東京大学出版会,1989 の方法により初期値を設定\n\t\tlet u = 0;\n\t\tconst x = this.x;\n\t\t// seedを使用して線形合同法でx[0-16]まで初期値を設定\n\t\tlet random_seed = seed;\n\t\tfor(let i = 0; i <= 16; i++) {\n\t\t\tfor(let j = 0; j < 32; j++) {\n\t\t\t\trandom_seed = RandomTool.multiplication32(random_seed, 0x5D588B65) + 1;\n\t\t\t\tu = (u >>> 1) + ((random_seed < 0) ? 0x80000000 : 0);\n\t\t\t}\n\t\t\tx[i] = u;\n\t\t}\n\t\t// 残りのビットはx[i] = x[i-32] ^ x[i-521]で生成\n\t\tfor(let i = 16; i < 521; i++) {\n\t\t\tu = (i === 16) ? i : (i - 17);\n\t\t\tx[i] = ((x[u] << 23) & 0xFFFFFFFF) ^ (x[i - 16] >>> 9) ^ x[i - 1];\n\t\t}\n\t\t// ビットをシャッフル\n\t\tfor(let i = 0; i < 4; i++) {\n\t\t\tthis._rnd521();\n\t\t}\n\t\t\n\t\t/**\n\t\t * Number of random number array to use.\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.xi = 0;\n\t\t\n\t\t/**\n\t\t * Is keep random numbers based on Gaussian distribution.\n\t\t * @private\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.haveNextNextGaussian = false;\n\t\t\n\t\t/**\n\t\t * Next random number based on Gaussian distribution.\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.nextNextGaussian = 0;\n\t}\n\n\t/**\n\t * 32-bit random number.\n\t * @returns {number} - 32ビットの乱数\n\t */\n\tgenrand_int32() {\n\t\t// 全て使用したら、再び混ぜる\n\t\tif(this.xi === 521) {\n\t\t\tthis._rnd521();\n\t\t\tthis.xi = 0;\n\t\t}\n\t\tconst y = RandomTool.unsigned32(this.x[this.xi]);\n\t\tthis.xi = this.xi + 1;\n\t\treturn y;\n\t}\n\n\t/**\n\t * Random number of specified bit length.\n\t * @param {number} bits - Required number of bits (up to 64 possible).\n\t * @returns {number}\n\t */\n\tnext(bits) {\n\t\tif(bits === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(bits === 32) {\n\t\t\treturn this.genrand_int32();\n\t\t}\n\t\telse if(bits < 32) {\n\t\t\t// 線形合同法ではないため\n\n\t\t\t// 上位のビットを使用しなくてもいいがJavaっぽく。\n\t\t\treturn (this.genrand_int32() >>> (32 - bits));\n\t\t}\n\t\t// double型のため、52ビットまでは、整数として出力可能\n\t\telse if(bits === 63) {\n\t\t\t// 正の値を出力するように調節\n\t\t\treturn (this.next(32) * 0x80000000 + this.next(32));\n\t\t}\n\t\telse if(bits === 64) {\n\t\t\treturn (this.next(32) * 0x100000000 + this.next(32));\n\t\t}\n\t\telse if(bits < 64) {\n\t\t\treturn (this.genrand_int32() * (1 << (bits - 32)) + (this.genrand_int32()  >>> (64 - bits)));\n\t\t}\n\t}\n\n\t/**\n\t * 8-bit random number array of specified length.\n\t * @param {number} size - 必要な長さ\n\t * @returns {Array<number>}\n\t */\n\tnextBytes(size) {\n\t\tconst y = new Array(size);\n\t\t// 配列yに乱数を入れる\n\t\t// 8ビットのために、32ビット乱数を1回回すのはもったいない\n\t\tfor(let i = 0;i < y.length; i++) {\n\t\t\ty[i] = this.next(8);\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * 16-bit random number.\n\t * @returns {number}\n\t */\n\tnextShort() {\n\t\treturn (this.next(16));\n\t}\n\n\t/**\n\t * 32-bit random number.\n\t * @param {number} [x] - 指定した値未満の数値を作る\n\t * @returns {number}\n\t */\n\tnextInt(x) {\n\t\tif((x !== undefined) && (typeof x === \"number\")) {\n\t\t\tlet r, y;\n\t\t\tdo {\n\t\t\t\tr = RandomTool.unsigned32(this.genrand_int32());\n\t\t\t\ty = r % x;\n\t\t\t} while((r - y + x) > 0x100000000 );\n\t\t\treturn y;\n\t\t}\n\t\treturn (this.next(32) & 0xFFFFFFFF);\n\t}\n\n\t/**\n\t * 64-bit random number.\n\t * @returns {number}\n\t */\n\tnextLong() {\n\t\treturn this.next(64);\n\t}\n\n\t/**\n\t * Random boolean.\n\t * @returns {boolean}\n\t */\n\tnextBoolean() {\n\t\t// 1ビットのために、32ビット乱数を1回回すのはもったいない\n\t\treturn (this.next(1) !== 0);\n\t}\n\n\t/**\n\t * Float type random number in the range of [0, 1).\n\t * @returns {number}\n\t */\n\tnextFloat() {\n\t\treturn (this.next(24) / 0x1000000);\n\t}\n\n\t/**\n\t * Double type random number in the range of [0, 1).\n\t * @returns {number}\n\t */\n\tnextDouble() {\n\t\tconst a1 = this.next(26) * 0x8000000 + this.next(27);\n\t\tconst a2 = 0x8000000 * 0x4000000;\n\t\treturn (a1 / a2);\n\t}\n\n\t/**\n\t * Random numbers from a Gaussian distribution.\n\t * This random number is a distribution with an average value of 0 and a standard deviation of 1.\n\t * @returns {number}\n\t */\n\tnextGaussian() {\n\t\tif(this.haveNextNextGaussian) {\n\t\t\tthis.haveNextNextGaussian = false;\n\t\t\treturn this.nextNextGaussian;\n\t\t}\n\t\t// Box-Muller法\n\t\tconst a = Math.sqrt( -2 * Math.log( this.nextDouble() ) );\n\t\tconst b = 2 * Math.PI * this.nextDouble();\n\t\tconst y = a * Math.sin(b);\n\t\tthis.nextNextGaussian = a * Math.cos(b);\n\t\tthis.haveNextNextGaussian = true;\n\t\treturn y;\n\t}\n}\n\n/**\n * Random number creation integer when no seed is set.\n * @type {number}\n * @ignore\n */\nRandom.seedUniquifier = 0x87654321;\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/tools/Random.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 752,
    "kind": "class",
    "name": "RandomTool",
    "memberof": "src/math/tools/Random.mjs",
    "static": true,
    "longname": "src/math/tools/Random.mjs~RandomTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Random.mjs",
    "importStyle": null,
    "description": "Collection of tools used in the Random.",
    "lineNumber": 16,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 753,
    "kind": "method",
    "name": "unsigned32",
    "memberof": "src/math/tools/Random.mjs~RandomTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Random.mjs~RandomTool.unsigned32",
    "access": "public",
    "description": "Create a 32-bit nonnegative integer.",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 754,
    "kind": "method",
    "name": "multiplication32",
    "memberof": "src/math/tools/Random.mjs~RandomTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Random.mjs~RandomTool.multiplication32",
    "access": "public",
    "description": "Multiply two 32-bit integers and output a 32-bit integer.",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 755,
    "kind": "class",
    "name": "Random",
    "memberof": "src/math/tools/Random.mjs",
    "static": true,
    "longname": "src/math/tools/Random.mjs~Random",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/tools/Random.mjs",
    "importStyle": "Random",
    "description": "Random number class.",
    "lineNumber": 49,
    "interface": false
  },
  {
    "__docId__": 756,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#constructor",
    "access": "public",
    "description": "Create Random.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "seed",
        "description": "Seed number for random number generation. If not specified, create from time."
      }
    ]
  },
  {
    "__docId__": 757,
    "kind": "member",
    "name": "x",
    "memberof": "src/math/tools/Random.mjs~Random",
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#x",
    "access": "private",
    "description": "Random number array.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 758,
    "kind": "method",
    "name": "_rnd521",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#_rnd521",
    "access": "private",
    "description": "内部データをシャッフル",
    "lineNumber": 84,
    "params": [],
    "return": null
  },
  {
    "__docId__": 759,
    "kind": "method",
    "name": "setSeed",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#setSeed",
    "access": "public",
    "description": "Initialize random seed.",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 760,
    "kind": "member",
    "name": "xi",
    "memberof": "src/math/tools/Random.mjs~Random",
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#xi",
    "access": "private",
    "description": "Number of random number array to use.",
    "lineNumber": 126,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 761,
    "kind": "member",
    "name": "haveNextNextGaussian",
    "memberof": "src/math/tools/Random.mjs~Random",
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#haveNextNextGaussian",
    "access": "private",
    "description": "Is keep random numbers based on Gaussian distribution.",
    "lineNumber": 133,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 762,
    "kind": "member",
    "name": "nextNextGaussian",
    "memberof": "src/math/tools/Random.mjs~Random",
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#nextNextGaussian",
    "access": "private",
    "description": "Next random number based on Gaussian distribution.",
    "lineNumber": 140,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 763,
    "kind": "method",
    "name": "genrand_int32",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#genrand_int32",
    "access": "public",
    "description": "32-bit random number.",
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} - 32ビットの乱数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "32ビットの乱数"
    },
    "params": []
  },
  {
    "__docId__": 766,
    "kind": "method",
    "name": "next",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#next",
    "access": "public",
    "description": "Random number of specified bit length.",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bits",
        "description": "Required number of bits (up to 64 possible)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 767,
    "kind": "method",
    "name": "nextBytes",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#nextBytes",
    "access": "public",
    "description": "8-bit random number array of specified length.",
    "lineNumber": 194,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "必要な長さ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 768,
    "kind": "method",
    "name": "nextShort",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#nextShort",
    "access": "public",
    "description": "16-bit random number.",
    "lineNumber": 208,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 769,
    "kind": "method",
    "name": "nextInt",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#nextInt",
    "access": "public",
    "description": "32-bit random number.",
    "lineNumber": 217,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "x",
        "description": "指定した値未満の数値を作る"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 770,
    "kind": "method",
    "name": "nextLong",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#nextLong",
    "access": "public",
    "description": "64-bit random number.",
    "lineNumber": 233,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 771,
    "kind": "method",
    "name": "nextBoolean",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#nextBoolean",
    "access": "public",
    "description": "Random boolean.",
    "lineNumber": 241,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 772,
    "kind": "method",
    "name": "nextFloat",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#nextFloat",
    "access": "public",
    "description": "Float type random number in the range of [0, 1).",
    "lineNumber": 250,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 773,
    "kind": "method",
    "name": "nextDouble",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#nextDouble",
    "access": "public",
    "description": "Double type random number in the range of [0, 1).",
    "lineNumber": 258,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 774,
    "kind": "method",
    "name": "nextGaussian",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#nextGaussian",
    "access": "public",
    "description": "Random numbers from a Gaussian distribution.\nThis random number is a distribution with an average value of 0 and a standard deviation of 1.",
    "lineNumber": 269,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 778,
    "kind": "file",
    "name": "src/math/tools/Signal.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport Complex from \"../Complex.mjs\";\n\n// @ts-ignore\nimport Matrix from \"../Matrix.mjs\";\n\n/**\n * Collection of calculation settings for matrix.\n * - Available options vary depending on the method.\n * @typedef {Object} SignalSettings\n * @property {?string|?number} [dimension=\"auto\"] Calculation direction. 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\".\n */\n\n/**\n * Fast Fourier Transform (FFT) Class.\n * @ignore\n */\nclass FFT {\n\n\t/**\n\t * Return the number with reversed bits.\n\t * @param {number} x - Bit-reversed value. (32-bit integer)\n\t * @returns {number} ビット反転した値\n\t */\n\tstatic bit_reverse_32(x) {\n\t\tlet y = x & 0xffffffff;\n\t\t// 1,2,4,8,16ビット単位で交換\n\t\ty = ((y & 0x55555555) << 1) | ((y >> 1) & 0x55555555);\n\t\ty = ((y & 0x33333333) << 2) | ((y >> 2) & 0x33333333);\n\t\ty = ((y & 0x0f0f0f0f) << 4) | ((y >> 4) & 0x0f0f0f0f);\n\t\ty = ((y & 0x00ff00ff) << 8) | ((y >> 8) & 0x00ff00ff);\n\t\ty = ((y & 0x0000ffff) << 16) | ((y >> 16) & 0x0000ffff);\n\t\treturn y;\n\t}\n\t\n\t/**\n\t * Create a bit reversal lookup table.\n\t * @param {number} bit - ビット数\n\t * @returns {Array<number>} ビット反転した値の配列\n\t */\n\tstatic create_bit_reverse_table(bit) {\n\t\tconst size = 1 << bit;\n\t\tconst bitrv = [];\n\t\tfor(let i = 0; i < size; i++) {\n\t\t\tbitrv[i] = FFT.bit_reverse_32(i) >>> (32 - bit);\n\t\t}\n\t\treturn bitrv;\n\t}\n\n\t/**\n\t * Create FFT.\n\t * @param {number} size - Signal length.\n\t */\n\tconstructor(size) {\n\t\t\n\t\t/**\n\t\t * Signal length.\n\t\t */\n\t\tthis.size = size;\n\n\t\t/**\n\t\t * Inverse of signal length.\n\t\t */\n\t\tthis.inv_size = 1.0 / this.size;\n\n\t\t/**\n\t\t * Number of bits when the signal length is expressed in binary number.\n\t\t */\n\t\tthis.bit_size = Math.round(Math.log(this.size)/Math.log(2));\n\n\t\t/**\n\t\t * FFT algorithm available.\n\t\t */\n\t\tthis.is_fast = (1 << this.bit_size) === this.size;\n\n\t\t/**\n\t\t * Bit reverse table for butterfly operation.\n\t\t */\n\t\tthis.bitrv = null;\n\n\t\t/**\n\t\t * Real part table used for multiplication of complex numbers.\n\t\t */\n\t\tthis.fft_re = new Array(this.size);\n\t\t\n\t\t/**\n\t\t * Imaginary table used for multiplication of complex numbers.\n\t\t */\n\t\tthis.fft_im = new Array(this.size);\n\t\t{\n\t\t\tconst delta = - 2.0 * Math.PI / this.size;\n\t\t\tlet err = 0.0;\n\t\t\tfor(let n = 0, x = 0; n < this.size; n++) {\n\t\t\t\tthis.fft_re[n] = Math.cos(x);\n\t\t\t\tthis.fft_im[n] = Math.sin(x);\n\t\t\t\t// カハンの加算アルゴリズム\n\t\t\t\tconst y = delta + err;\n\t\t\t\tconst t = x + y;\n\t\t\t\terr = t - x - y;\n\t\t\t\tx = t;\n\t\t\t}\n\t\t}\n\t\tif(this.is_fast) {\n\t\t\tthis.bitrv = FFT.create_bit_reverse_table(this.bit_size);\n\t\t}\n\t}\n\n\t/**\n\t * Frees the memory reserved.\n\t */\n\tdelete() {\n\t\tdelete this.size;\n\t\tdelete this.inv_size;\n\t\tdelete this.bit_size;\n\t\tdelete this.is_fast;\n\t\tdelete this.bitrv;\n\t\tdelete this.fft_re;\n\t\tdelete this.fft_im;\n\t}\n\t\n\t/**\n\t * Discrete Fourier transform (DFT).\n\t * @param {Array<number>} real - Array of real parts of vector.\n\t * @param {Array<number>} imag - Array of imaginary parts of vector.\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tfft(real, imag) {\n\t\tconst f_re = new Array(this.size);\n\t\tconst f_im = new Array(this.size);\n\t\tif(this.is_fast) {\n\t\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\t\tf_re[i] = real[this.bitrv[i]];\n\t\t\t\tf_im[i] = imag[this.bitrv[i]];\n\t\t\t}\n\t\t\t{\n\t\t\t\t// Fast Fourier Transform 時間間引き(前処理にビットリバース)\n\t\t\t\t// 段々ブロックが大きくなっていくタイプ。\n\t\t\t\tlet center = 1;\n\t\t\t\tlet blocklength = this.size / 2;\n\t\t\t\tlet pointlength = 2;\n\t\t\t\tfor(let delta = 1 << (this.bit_size - 1); delta > 0; delta >>= 1) {\n\t\t\t\t\tfor(let blocks = 0; blocks < blocklength; blocks++) {\n\t\t\t\t\t\tlet i = blocks * pointlength;\n\t\t\t\t\t\tfor(let point = 0, n = 0; point < center; point++, i++, n += delta) {\n\t\t\t\t\t\t\tconst re = f_re[i + center] * this.fft_re[n] - f_im[i + center] * this.fft_im[n];\n\t\t\t\t\t\t\tconst im = f_im[i + center] * this.fft_re[n] + f_re[i + center] * this.fft_im[n];\n\t\t\t\t\t\t\tf_re[i + center] = f_re[i] - re;\n\t\t\t\t\t\t\tf_im[i + center] = f_im[i] - im;\n\t\t\t\t\t\t\tf_re[i] += re;\n\t\t\t\t\t\t\tf_im[i] += im;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tblocklength /= 2;\n\t\t\t\t\tpointlength *= 2;\n\t\t\t\t\tcenter *= 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif(!SignalTool.isContainsZero(imag)) {\n\t\t\t\t// 実数部分のみのフーリエ変換\n\t\t\t\tfor(let t = 0; t < this.size; t++) {\n\t\t\t\t\tf_re[t] = 0.0;\n\t\t\t\t\tf_im[t] = 0.0;\n\t\t\t\t\tfor(let x = 0, n = 0; x < this.size; x++, n = (x * t) % this.size) {\n\t\t\t\t\t\tf_re[t] += real[x] * this.fft_re[n];\n\t\t\t\t\t\tf_im[t] += real[x] * this.fft_im[n];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// 実数部分と複素数部分のフーリエ変換\n\t\t\t\tfor(let t = 0; t < this.size; t++) {\n\t\t\t\t\tf_re[t] = 0.0;\n\t\t\t\t\tf_im[t] = 0.0;\n\t\t\t\t\tfor(let x = 0, n = 0; x < this.size; x++, n = (x * t) % this.size) {\n\t\t\t\t\t\tf_re[t] += real[x] * this.fft_re[n] - imag[x] * this.fft_im[n];\n\t\t\t\t\t\tf_im[t] += real[x] * this.fft_im[n] + imag[x] * this.fft_re[n];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\treal : f_re,\n\t\t\timag : f_im\n\t\t};\n\t}\n\n\t/**\n\t * Inverse discrete Fourier transform (IDFT),\n\t * @param {Array} real - Array of real parts of vector.\n\t * @param {Array} imag - Array of imaginary parts of vector.\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tifft(real, imag) {\n\t\tconst f_re = new Array(this.size);\n\t\tconst f_im = new Array(this.size);\n\t\tif(this.is_fast) {\n\t\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\t\tf_re[i] = real[this.bitrv[i]];\n\t\t\t\tf_im[i] = imag[this.bitrv[i]];\n\t\t\t}\n\t\t\t{\n\t\t\t\t// Inverse Fast Fourier Transform 時間間引き(前処理にビットリバース)\n\t\t\t\t// 段々ブロックが大きくなっていくタイプ。\n\t\t\t\tlet center = 1;\n\t\t\t\tlet blocklength = this.size / 2;\n\t\t\t\tlet pointlength = 2;\n\t\t\t\tlet re, im;\n\t\t\t\tfor(let delta = 1 << (this.bit_size - 1); delta > 0; delta >>= 1) {\n\t\t\t\t\tfor(let blocks = 0; blocks < blocklength; blocks++) {\n\t\t\t\t\t\tlet i = blocks * pointlength;\n\t\t\t\t\t\tfor(let point = 0, n = 0; point < center; point++, i++, n += delta) {\n\t\t\t\t\t\t\tre = f_re[i + center] * this.fft_re[n] + f_im[i + center] * this.fft_im[n];\n\t\t\t\t\t\t\tim = f_im[i + center] * this.fft_re[n] - f_re[i + center] * this.fft_im[n];\n\t\t\t\t\t\t\tf_re[i + center] = f_re[i] - re;\n\t\t\t\t\t\t\tf_im[i + center] = f_im[i] - im;\n\t\t\t\t\t\t\tf_re[i] += re;\n\t\t\t\t\t\t\tf_im[i] += im;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tblocklength /= 2;\n\t\t\t\t\tpointlength *= 2;\n\t\t\t\t\tcenter *= 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif(!SignalTool.isContainsZero(imag)) {\n\t\t\t\t// 実数部分のみの逆フーリエ変換\n\t\t\t\tfor(let x = 0; x < this.size; x++) {\n\t\t\t\t\tf_re[x] = 0.0;\n\t\t\t\t\tf_im[x] = 0.0;\n\t\t\t\t\tfor(let t = 0, n = 0; t < this.size; t++, n = (x * t) % this.size) {\n\t\t\t\t\t\tf_re[x] +=   real[t] * this.fft_re[n];\n\t\t\t\t\t\tf_im[x] += - real[t] * this.fft_im[n];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// 実数部分と複素数部分の逆フーリエ変換\n\t\t\t\tfor(let x = 0; x < this.size; x++) {\n\t\t\t\t\tf_re[x] = 0.0;\n\t\t\t\t\tf_im[x] = 0.0;\n\t\t\t\t\tfor(let t = 0, n = 0; t < this.size; t++, n = (x * t) % this.size) {\n\t\t\t\t\t\tf_re[x] +=   real[t] * this.fft_re[n] + imag[t] * this.fft_im[n];\n\t\t\t\t\t\tf_im[x] += - real[t] * this.fft_im[n] + imag[t] * this.fft_re[n];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\tf_re[i] *= this.inv_size;\n\t\t\tf_im[i] *= this.inv_size;\n\t\t}\n\t\treturn {\n\t\t\treal : f_re,\n\t\t\timag : f_im\n\t\t};\n\t}\n}\n\n/**\n * Simple cache class.\n * Cache tables used in FFT.\n * @ignore\n */\nclass Cache {\n\t\n\t/**\n\t * Create Cache.\n\t * @param {number} cache_size - Maximum number of caches.\n\t * @param {*} object - Target class you want to build a cache.\n\t */\n\tconstructor(cache_size, object) {\n\n\t\t/**\n\t\t * Class for cache.\n\t\t */\n\t\tthis.object = object;\n\n\t\t/**\n\t\t * Maximum number of caches.\n\t\t */\n\t\tthis.table_max = cache_size;\n\n\t\t/**\n\t\t * Number of caches currently.\n\t\t */\n\t\tthis.table_size = 0;\n\n\t\t/**\n\t\t * Cache table.\n\t\t */\n\t\tthis.table = [];\n\t}\n\n\t/**\n\t * Create a class initialized with the specified data length.\n\t * Use from cache if it exists in cache.\n\t * @param {number} size - Data length.\n\t * @returns {*}\n\t */\n\tget(size) {\n\t\tfor(let index = 0; index < this.table_size; index++) {\n\t\t\tif(this.table[index].size === size) {\n\t\t\t\t// 先頭にもってくる\n\t\t\t\tconst object = this.table.splice(index, 1);\n\t\t\t\tthis.table.unshift(object);\n\t\t\t\treturn object;\n\t\t\t}\n\t\t}\n\t\tconst new_object = new this.object(size);\n\t\tif(this.table_size === this.table_max) {\n\t\t\t// 後ろのデータを消去\n\t\t\tconst delete_object = this.table.pop();\n\t\t\tdelete_object.delete();\n\t\t}\n\t\t// 前方に追加\n\t\tthis.table.unshift(new_object);\n\t\treturn new_object;\n\t}\n\n}\n\n/**\n * Cache for FFT.\n * @type {Cache}\n * @ignore\n */\nconst fft_cache = new Cache(4, FFT);\n\n/**\n * Discrete cosine transform (DCT) class.\n * @ignore\n */\nclass DCT {\n\t\n\t/**\n\t * Create DCT.\n\t * @param {number} size - Signal length.\n\t */\n\tconstructor(size) {\n\n\t\t/**\n\t\t * Signal length.\n\t\t */\n\t\tthis.size = size;\n\n\t\t/**\n\t\t * Twice the signal length.\n\t\t * In the DCT conversion, an actual signal is zero-filled with a doubled signal length, and an FFT is performed on it.\n\t\t */\n\t\tthis.dct_size = size * 2;\n\n\t\t/**\n\t\t * Calculation table used for DCT conversion.\n\t\t */\n\t\tthis.dct_re = new Array(this.size);\n\n\t\t/**\n\t\t * Calculation table used for DCT conversion.\n\t\t */\n\t\tthis.dct_im = new Array(this.size);\n\t\t{\n\t\t\tconst x_0 = 1.0 / Math.sqrt(this.size);\n\t\t\tconst x_n = x_0 * Math.sqrt(2);\n\t\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\t\tconst x = - Math.PI * i / this.dct_size;\n\t\t\t\tthis.dct_re[i] = Math.cos(x) * (i === 0 ? x_0 : x_n);\n\t\t\t\tthis.dct_im[i] = Math.sin(x) * (i === 0 ? x_0 : x_n);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Frees the memory reserved.\n\t */\n\tdelete() {\n\t\tdelete this.size;\n\t\tdelete this.dct_size;\n\t\tdelete this.dct_re;\n\t\tdelete this.dct_im;\n\t}\n\n\t/**\n\t * Discrete cosine transform (DCT-II, DCT).\n\t * @param {Array<number>} real - Array of real parts of vector.\n\t * @returns {Array<number>}\n\t */\n\tdct(real) {\n\t\tconst re = new Array(this.dct_size);\n\t\tconst im = new Array(this.dct_size);\n\t\tfor(let i = 0; i < this.dct_size; i++) {\n\t\t\tre[i] = i < this.size ? real[i] : 0.0;\n\t\t\tim[i] = 0.0;\n\t\t}\n\t\tconst fft = fft_cache.get(this.dct_size).fft(re, im);\n\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\tre[i] = fft.real[i] * this.dct_re[i] - fft.imag[i] * this.dct_im[i];\n\t\t}\n\t\tre.splice(this.size);\n\t\treturn re;\n\t}\n\n\t/**\n\t * Inverse discrete cosine transform (DCT-III, IDCT),\n\t * @param {Array<number>} real - Array of real parts of vector.\n\t * @returns {Array<number>}\n\t */\n\tidct(real) {\n\t\tconst re = new Array(this.dct_size);\n\t\tconst im = new Array(this.dct_size);\n\t\tconst denormlize = this.size * 2.0;\n\t\tfor(let i = 0; i < this.dct_size; i++) {\n\t\t\tre[i] = i < this.size ? (denormlize * real[i] *    this.dct_re[i])  : 0.0;\n\t\t\tim[i] = i < this.size ? (denormlize * real[i] * (- this.dct_im[i])) : 0.0;\n\t\t}\n\t\tconst ifft = fft_cache.get(this.dct_size).ifft(re, im);\n\t\tifft.real.splice(this.size);\n\t\treturn ifft.real;\n\t}\n\t\n}\n\n/**\n * Cache for discrete cosine transform.\n * @ignore\n */\nconst dct_cache = new Cache(4, DCT);\n\n/**\n * Collection of functions used inside Signal class.\n * @ignore\n */\nclass SignalTool {\n\t\n\t/**\n\t * Returns true if the array contains 0.\n\t * @param {Array<number>} x - 調べたい配列\n\t * @returns {boolean}\n\t */\n\tstatic isContainsZero(x) {\n\t\tfor(let i = 0; i < x.length; i++) {\n\t\t\tif(x[i] !== 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Discrete Fourier transform (DFT).\n\t * @param {Array<number>} real - Array of real parts of vector.\n\t * @param {Array<number>} imag - Array of imaginary parts of vector.\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tstatic fft(real, imag) {\n\t\tconst obj = fft_cache.get(real.length);\n\t\treturn obj.fft(real, imag);\n\t}\n\n\t/**\n\t * Inverse discrete Fourier transform (IDFT),\n\t * @param {Array<number>} real - Array of real parts of vector.\n\t * @param {Array<number>} imag - Array of imaginary parts of vector.\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tstatic ifft(real, imag) {\n\t\tconst obj = fft_cache.get(real.length);\n\t\treturn obj.ifft(real, imag);\n\t}\n\n\t/**\n\t * Discrete cosine transform (DCT-II, DCT).\n\t * @param {Array<number>} real - Array of real parts of vector.\n\t * @returns {Array<number>}\n\t */\n\tstatic dct(real) {\n\t\tconst obj = dct_cache.get(real.length);\n\t\treturn obj.dct(real);\n\t}\n\n\t/**\n\t * Inverse discrete cosine transform (DCT-III, IDCT),\n\t * @param {Array<number>} real - Array of real parts of vector.\n\t * @returns {Array<number>}\n\t */\n\tstatic idct(real) {\n\t\tconst obj = dct_cache.get(real.length);\n\t\treturn obj.idct(real);\n\t}\n\n\t/**\n\t * Power spectral density.\n\t * @param {Array<number>} real - Array of real parts of vector.\n\t * @param {Array<number>} imag - Array of imaginary parts of vector.\n\t * @returns {Array<number>}\n\t */\n\tstatic powerfft(real, imag) {\n\t\tconst size = real.length;\n\t\tconst X = SignalTool.fft(real, imag);\n\t\tconst power = new Array(size);\n\t\tfor(let i = 0; i < size; i++) {\n\t\t\tpower[i] = X.real[i] * X.real[i] + X.imag[i] * X.imag[i];\n\t\t}\n\t\treturn power;\n\t}\n\n\t/**\n\t * Convolution integral, Polynomial multiplication.\n\t * @param {Array} x1_real - Array of real parts of vector.\n\t * @param {Array} x1_imag - Array of imaginary parts of vector.\n\t * @param {Array} x2_real - Array of real parts of vector.\n\t * @param {Array} x2_imag - Array of imaginary parts of vector.\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tstatic conv(x1_real, x1_imag, x2_real, x2_imag) {\n\t\tlet is_self = false;\n\t\tif(x1_real.length === x2_real.length) {\n\t\t\tis_self = true;\n\t\t\tfor(let i = 0; i < x1_real.length;i++) {\n\t\t\t\tif((x1_real[i] !== x2_real[i]) || (x1_imag[i] !== x2_imag[i])) {\n\t\t\t\t\tis_self = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst size = x1_real.length;\n\t\tconst N2 = size * 2;\n\t\tconst bit_size = Math.round(Math.log(size)/Math.log(2));\n\t\tconst is_fast = (1 << bit_size) === size;\n\t\tif(is_fast) {\n\t\t\t// FFTを用いた手法へ切り替え\n\t\t\t// 周波数空間上では掛け算になる\n\t\t\tif(is_self) {\n\t\t\t\tconst size = x1_real.length;\n\t\t\t\tconst real = new Array(N2);\n\t\t\t\tconst imag = new Array(N2);\n\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\treal[i] = i < size ? x1_real[i] : 0.0;\n\t\t\t\t\timag[i] = i < size ? x1_imag[i] : 0.0;\n\t\t\t\t}\n\t\t\t\tconst X = SignalTool.fft(real, imag);\n\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\treal[i] = X.real[i] * X.real[i] - X.imag[i] * X.imag[i];\n\t\t\t\t\timag[i] = X.real[i] * X.imag[i] + X.imag[i] * X.real[i];\n\t\t\t\t}\n\t\t\t\tconst x = SignalTool.ifft(real, imag);\n\t\t\t\tx.real.splice(N2 - 1);\n\t\t\t\tx.imag.splice(N2 - 1);\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\telse if(x1_real.length === x2_real.length) {\n\t\t\t\tconst size = x1_real.length;\n\t\t\t\tconst real1 = new Array(N2);\n\t\t\t\tconst imag1 = new Array(N2);\n\t\t\t\tconst real2 = new Array(N2);\n\t\t\t\tconst imag2 = new Array(N2);\n\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\treal1[i] = i < size ? x1_real[i] : 0.0;\n\t\t\t\t\timag1[i] = i < size ? x1_imag[i] : 0.0;\n\t\t\t\t\treal2[i] = i < size ? x2_real[i] : 0.0;\n\t\t\t\t\timag2[i] = i < size ? x2_imag[i] : 0.0;\n\t\t\t\t}\n\t\t\t\tconst F = SignalTool.fft(real1, imag1);\n\t\t\t\tconst G = SignalTool.fft(real2, imag2);\n\t\t\t\tconst real = new Array(N2);\n\t\t\t\tconst imag = new Array(N2);\n\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\treal[i] = F.real[i] * G.real[i] - F.imag[i] * G.imag[i];\n\t\t\t\t\timag[i] = F.real[i] * G.imag[i] + F.imag[i] * G.real[i];\n\t\t\t\t}\n\t\t\t\tconst fg = SignalTool.ifft(real, imag);\n\t\t\t\tfg.real.splice(N2 - 1);\n\t\t\t\tfg.imag.splice(N2 - 1);\n\t\t\t\treturn fg;\n\t\t\t}\n\t\t}\n\t\tlet is_real_number = !SignalTool.isContainsZero(x1_imag);\n\t\tif(is_real_number) {\n\t\t\tis_real_number = !SignalTool.isContainsZero(x2_imag);\n\t\t}\n\t\t{\n\t\t\t// まじめに計算する\n\t\t\tconst real = new Array(x1_real.length + x2_real.length - 1);\n\t\t\tconst imag = new Array(x1_real.length + x2_real.length - 1);\n\t\t\tfor(let i = 0; i < real.length; i++) {\n\t\t\t\treal[i] = 0;\n\t\t\t\timag[i] = 0;\n\t\t\t}\n\t\t\tif(is_real_number) {\n\t\t\t\t// 実数部分のみの畳み込み積分\n\t\t\t\t// スライドさせていく\n\t\t\t\t// AAAA\n\t\t\t\t//  BBBB\n\t\t\t\t//   CCCC\n\t\t\t\tfor(let y = 0; y < x2_real.length; y++) {\n\t\t\t\t\tfor(let x = 0; x < x1_real.length; x++) {\n\t\t\t\t\t\treal[y + x] += x1_real[x] * x2_real[y];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// 実数部分と複素数部分の畳み込み積分\n\t\t\t\tfor(let y = 0; y < x2_real.length; y++) {\n\t\t\t\t\tfor(let x = 0; x < x1_real.length; x++) {\n\t\t\t\t\t\treal[y + x] += x1_real[x] * x2_real[y] - x1_imag[x] * x2_imag[y];\n\t\t\t\t\t\timag[y + x] += x1_real[x] * x2_imag[y] + x1_imag[x] * x2_real[y];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\treal : real,\n\t\t\t\timag : imag\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * ACF(Autocorrelation function), Cros-correlation function.\n\t * @param {Array} x1_real - Array of real parts of vector.\n\t * @param {Array} x1_imag - Array of imaginary parts of vector.\n\t * @param {Array} x2_real - Array of real parts of vector.\n\t * @param {Array} x2_imag - Array of imaginary parts of vector.\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tstatic xcorr(x1_real, x1_imag, x2_real, x2_imag) {\n\t\tlet is_self = false;\n\t\tif(x1_real.length === x2_real.length) {\n\t\t\tis_self = true;\n\t\t\tfor(let i = 0; i < x1_real.length;i++) {\n\t\t\t\tif((x1_real[i] !== x2_real[i]) || (x1_imag[i] !== x2_imag[i])) {\n\t\t\t\t\tis_self = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(x1_real.length === x2_real.length) {\n\t\t\tconst size = x1_real.length;\n\t\t\tconst N2 = size * 2;\n\t\t\tconst bit_size = Math.round(Math.log(size)/Math.log(2));\n\t\t\tconst is_fast = (1 << bit_size) === size;\n\t\t\tif(is_fast) {\n\t\t\t\tlet fg = null;\n\t\t\t\tif(is_self) {\n\t\t\t\t\tconst real = new Array(N2);\n\t\t\t\t\tconst imag = new Array(N2);\n\t\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\t\treal[i] = i < size ? x1_real[i] : 0.0;\n\t\t\t\t\t\timag[i] = i < size ? x1_imag[i] : 0.0;\n\t\t\t\t\t}\n\t\t\t\t\t// パワースペクトル密度は、自己相関のフーリエ変換のため、\n\t\t\t\t\t// パワースペクトル密度の逆変換で求められる。\n\t\t\t\t\tconst power = SignalTool.powerfft(real, imag);\n\t\t\t\t\tfg = SignalTool.ifft(power, imag);\n\t\t\t\t\t// シフト\n\t\t\t\t\treal.pop();\n\t\t\t\t\timag.pop();\n\t\t\t\t\tfor(let i = 0, j = size + 1 ; i < real.length; i++, j++) {\n\t\t\t\t\t\tif(N2 <= j) {\n\t\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treal[i] = fg.real[j];\n\t\t\t\t\t\timag[i] = fg.imag[j];\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\treal : real,\n\t\t\t\t\t\timag : imag\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst f_real = new Array(N2);\n\t\t\t\t\tconst f_imag = new Array(N2);\n\t\t\t\t\tconst g_real = new Array(N2);\n\t\t\t\t\tconst g_imag = new Array(N2);\n\t\t\t\t\t// gの順序を反転かつ共役複素数にする\n\t\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\t\tf_real[i] = i < size ?   x1_real[i] : 0.0;\n\t\t\t\t\t\tf_imag[i] = i < size ?   x1_imag[i] : 0.0;\n\t\t\t\t\t\tg_real[i] = i < size ?   x2_real[size - i - 1] : 0.0;\n\t\t\t\t\t\tg_imag[i] = i < size ? - x2_imag[size - i - 1] : 0.0;\n\t\t\t\t\t}\n\t\t\t\t\t// 畳み込み掛け算\n\t\t\t\t\tconst F = SignalTool.fft(f_real, f_imag);\n\t\t\t\t\tconst G = SignalTool.fft(g_real, g_imag);\n\t\t\t\t\tconst real = new Array(N2);\n\t\t\t\t\tconst imag = new Array(N2);\n\t\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\t\treal[i] = F.real[i] * G.real[i] - F.imag[i] * G.imag[i];\n\t\t\t\t\t\timag[i] = F.real[i] * G.imag[i] + F.imag[i] * G.real[i];\n\t\t\t\t\t}\n\t\t\t\t\tfg = SignalTool.ifft(real, imag);\n\t\t\t\t\tfg.real.splice(N2 - 1);\n\t\t\t\t\tfg.imag.splice(N2 - 1);\n\t\t\t\t\treturn fg;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet is_real_number = !SignalTool.isContainsZero(x1_imag);\n\t\tif(is_real_number) {\n\t\t\tis_real_number = !SignalTool.isContainsZero(x2_imag);\n\t\t}\n\t\tif(is_self) {\n\t\t\tconst size = x1_real.length;\n\t\t\tconst N2 = size * 2;\n\t\t\t// 実数の自己相関関数\n\t\t\tif(is_real_number) {\n\t\t\t\tconst fg = new Array(size);\n\t\t\t\tfor(let m = 0; m < size; m++) {\n\t\t\t\t\tfg[m] = 0;\n\t\t\t\t\tconst tmax = size - m;\n\t\t\t\t\tfor(let t = 0; t < tmax; t++) {\n\t\t\t\t\t\tfg[m] += x1_real[t] * x2_real[t + m];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 半分の値は同一なので折り返して計算を省く\n\t\t\t\tconst real = new Array(N2 - 1);\n\t\t\t\tconst imag = new Array(N2 - 1);\n\t\t\t\tfor(let i = 0, j = size - 1 ; i < size; i++, j--) {\n\t\t\t\t\treal[i] = fg[j];\n\t\t\t\t\treal[size + i - 1] = fg[i];\n\t\t\t\t}\n\t\t\t\tfor(let i = 0; i < imag.length; i++) {\n\t\t\t\t\timag[i] = 0.0;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\treal : real,\n\t\t\t\t\timag : imag\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t// 2つの信号の長さが違う、又は2の累乗の長さではない別のデータの場合は通常計算\n\t\t{\n\t\t\tconst g_real = new Array(x2_real.length);\n\t\t\tconst g_imag = new Array(x2_real.length);\n\t\t\t// gの順序を反転かつ共役複素数にする\n\t\t\tfor(let i = 0; i < x2_real.length; i++) {\n\t\t\t\tg_real[i] =   x2_real[x2_real.length - i - 1];\n\t\t\t\tg_imag[i] = - x2_imag[x2_real.length - i - 1];\n\t\t\t}\n\t\t\tconst y = SignalTool.conv(x1_real, x1_imag, g_real, g_imag);\n\t\t\tif(x1_real.length === x2_real.length) {\n\t\t\t\treturn y;\n\t\t\t}\n\t\t\tconst delta = Math.abs(x1_real.length - x2_real.length);\n\t\t\tconst zeros = new Array(delta);\n\t\t\tfor(let i = 0; i < delta; i++) {\n\t\t\t\tzeros[i] = 0;\n\t\t\t}\n\t\t\tif(x1_real.length > x2_real.length) {\n\t\t\t\t// データの最初に「0」を加える\n\t\t\t\treturn {\n\t\t\t\t\treal : zeros.concat(y.real),\n\t\t\t\t\timag : zeros.concat(y.imag)\n\t\t\t\t};\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// データの最後に「0」を加える\n\t\t\t\treturn {\n\t\t\t\t\treal : y.real.concat(zeros),\n\t\t\t\t\timag : y.imag.concat(zeros)\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Create window function for signal processing.\n\t * The following window functions are available.\n\t * - \"rectangle\": Rectangular window\n\t * - \"hann\": Hann/Hanning window.\n\t * - \"hamming\": Hamming window.\n\t * - \"blackman\": Blackman window.\n\t * - \"blackmanharris\": Blackman-Harris window.\n\t * - \"blackmannuttall\": Blackman-Nuttall window.\n\t * - \"flattop\": Flat top window.\n\t * - \"sin\", Half cycle sine window.\n\t * - \"vorbis\", Vorbis window.\n\t * @param {string} name - Window function name.\n\t * @param {number} size - Window length.\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\" (default) , 1/\"periodic\"\n\t * @returns {Array<number>}\n\t */\n\tstatic window(name, size, periodic) {\n\t\tconst periodic_ = periodic !== undefined ? periodic : \"symmetric\";\n\t\tconst name_ = name.toLocaleLowerCase();\n\t\tconst size_ = size;\n\t\tconst window = new Array(size_);\n\t\t\n\t\tlet normalzie;\n\t\tif((periodic_ === \"symmetric\") || (periodic_ === 0)) {\n\t\t\tnormalzie = function(y) {\n\t\t\t\treturn (y / (size_ - 1) * (Math.PI * 2.0));\n\t\t\t};\n\t\t}\n\t\telse if((periodic_ === \"periodic\") || (periodic_ !== 0)) {\n\t\t\tnormalzie = function(y) {\n\t\t\t\treturn (y / size_ * (Math.PI * 2.0));\n\t\t\t};\n\t\t}\n\n\t\tconst setBlackmanWindow = function( alpha0, alpha1, alpha2, alpha3, alpha4) {\n\t\t\tfor(let i = 0; i < size_; i++) {\n\t\t\t\twindow[i]  = alpha0;\n\t\t\t\twindow[i] -= alpha1 * Math.cos(1.0 * normalzie(i));\n\t\t\t\twindow[i] += alpha2 * Math.cos(2.0 * normalzie(i));\n\t\t\t\twindow[i] -= alpha3 * Math.cos(3.0 * normalzie(i));\n\t\t\t\twindow[i] += alpha4 * Math.cos(4.0 * normalzie(i));\n\t\t\t}\n\t\t};\n\n\t\tswitch(name_) {\n\t\t\t// rect 矩形窓(rectangular window)\n\t\t\tcase \"rectangle\":\n\t\t\t\tsetBlackmanWindow(1.0, 0.0, 0.0, 0.0, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// hann ハン窓・ハニング窓(hann/hanning window)\n\t\t\tcase \"hann\":\n\t\t\t\tsetBlackmanWindow(0.5, 0.5, 0.0, 0.0, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// hamming ハミング窓(hamming window)\n\t\t\tcase \"hamming\":\n\t\t\t\tsetBlackmanWindow(0.54, 0.46, 0.0, 0.0, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// blackman ブラックマン窓(Blackman window)\n\t\t\tcase \"blackman\":\n\t\t\t\tsetBlackmanWindow(0.42, 0.50, 0.08, 0.0, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// blackmanharris Blackman-Harris window\n\t\t\tcase \"blackmanharris\":\n\t\t\t\tsetBlackmanWindow(0.35875, 0.48829, 0.14128, 0.01168, 0);\n\t\t\t\tbreak;\n\n\t\t\t// blackmannuttall Blackman-Nuttall window\n\t\t\tcase \"blackmannuttall\":\n\t\t\t\tsetBlackmanWindow(0.3635819, 0.4891775, 0.1365995, 0.0106411, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// flattop Flat top window\n\t\t\tcase \"flattop\":\n\t\t\t\tsetBlackmanWindow(1.0, 1.93, 1.29, 0.388, 0.032);\n\t\t\t\tbreak;\n\n\t\t\t// Half cycle sine window(MDCT窓)\n\t\t\tcase \"sin\":\n\t\t\t\tfor(let i = 0; i < size_; i++) {\n\t\t\t\t\twindow[i]  = Math.sin(normalzie(i) * 0.5);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t// Vorbis window(MDCT窓)\n\t\t\tcase \"vorbis\":\n\t\t\t\tfor(let i = 0; i < size_; i++) {\n\t\t\t\t\tconst x = Math.sin(normalzie(i) * 0.5);\n\t\t\t\t\twindow[i]  = Math.sin(Math.PI * 0.5 * x * x);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn window;\n\t}\n\n\t/**\n\t * Hann (Hanning) window.\n\t * @param {number} size - Window length.\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\" (default) , 1/\"periodic\"\n\t * @returns {Array<number>}\n\t */\n\tstatic hann(size, periodic) {\n\t\treturn SignalTool.window(\"hann\", size, periodic);\n\t}\n\t\n\t/**\n\t * Hamming window.\n\t * @param {number} size - Window length.\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\" (default) , 1/\"periodic\"\n\t * @returns {Array<number>}\n\t */\n\tstatic hamming(size, periodic) {\n\t\treturn SignalTool.window(\"hamming\", size, periodic);\n\t}\n\t\n}\n\n/**\n * Signal processing class for Matrix class.\n */\nexport default class Signal {\n\t\n\t/**\n\t * Discrete Fourier transform (DFT).\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {SignalSettings} [type]\n\t * @returns {Matrix} fft(x)\n\t */\n\tstatic fft(x, type) {\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Matrix._toMatrix(x);\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tconst imag = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t\timag[i] = data[i].imag;\n\t\t\t}\n\t\t\tconst result = SignalTool.fft(real, imag);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex([result.real[i], result.imag[i]]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn M.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Inverse discrete Fourier transform (IDFT),\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} X\n\t * @param {SignalSettings} [type]\n\t * @returns {Matrix} ifft(X)\n\t */\n\tstatic ifft(X, type) {\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Matrix._toMatrix(X);\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tconst imag = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t\timag[i] = data[i].imag;\n\t\t\t}\n\t\t\tconst result = SignalTool.ifft(real, imag);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex([result.real[i], result.imag[i]]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn M.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Power spectral density.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {SignalSettings} [type]\n\t * @returns {Matrix} abs(fft(x)).^2\n\t */\n\tstatic powerfft(x, type) {\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Matrix._toMatrix(x);\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tconst imag = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t\timag[i] = data[i].imag;\n\t\t\t}\n\t\t\tconst result = SignalTool.powerfft(real, imag);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex(result[i]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn M.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Discrete cosine transform (DCT-II, DCT).\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {SignalSettings} [type]\n\t * @returns {Matrix} dct(x)\n\t */\n\tstatic dct(x, type) {\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Matrix._toMatrix(x);\n\t\tif(M.isComplex()) {\n\t\t\tthrow \"dct don't support complex numbers.\";\n\t\t}\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t}\n\t\t\tconst result = SignalTool.dct(real);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex(result[i]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn M.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Inverse discrete cosine transform (DCT-III, IDCT),\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} X\n\t * @param {SignalSettings} [type]\n\t * @returns {Matrix} idct(x)\n\t */\n\tstatic idct(X, type) {\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Matrix._toMatrix(X);\n\t\tif(M.isComplex()) {\n\t\t\tthrow \"idct don't support complex numbers.\";\n\t\t}\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t}\n\t\t\tconst result = SignalTool.idct(real);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex(result[i]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn M.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Discrete two-dimensional Fourier transform (2D DFT).\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @returns {Matrix}\n\t */\n\tstatic fft2(x) {\n\t\treturn Signal.fft(x, {dimension : \"both\"});\n\t}\n\n\t/**\n\t * Inverse discrete two-dimensional Fourier transform (2D IDFT),\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} X\n\t * @returns {Matrix}\n\t */\n\tstatic ifft2(X) {\n\t\treturn Signal.ifft(X, {dimension : \"both\"});\n\t}\n\n\t/**\n\t * Discrete two-dimensional cosine transform (2D DCT).\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @returns {Matrix}\n\t */\n\tstatic dct2(x) {\n\t\treturn Signal.dct(x, {dimension : \"both\"});\n\t}\n\n\t/**\n\t * Inverse discrete two-dimensional cosine transform (2D IDCT),\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} X\n\t * @returns {Matrix}\n\t */\n\tstatic idct2(X) {\n\t\treturn Signal.idct(X, {dimension : \"both\"});\n\t}\n\n\t/**\n\t * Convolution integral, Polynomial multiplication.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x1\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x2\n\t * @returns {Matrix}\n\t */\n\tstatic conv(x1, x2) {\n\t\tconst M1 = Matrix._toMatrix(x1);\n\t\tconst M2 = Matrix._toMatrix(x2);\n\t\tif(M1.isMatrix() || M2.isMatrix()) {\n\t\t\tthrow \"conv don't support matrix numbers.\";\n\t\t}\n\t\tconst M1_real = new Array(M1.length);\n\t\tconst M1_imag = new Array(M1.length);\n\t\tconst M2_real = new Array(M2.length);\n\t\tconst M2_imag = new Array(M2.length);\n\t\tif(M1.isRow()) {\n\t\t\tfor(let i = 0; i < M1.column_length; i++) {\n\t\t\t\tM1_real[i] = M1.matrix_array[0][i].real;\n\t\t\t\tM1_imag[i] = M1.matrix_array[0][i].imag;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor(let i = 0; i < M1.row_length; i++) {\n\t\t\t\tM1_real[i] = M1.matrix_array[i][0].real;\n\t\t\t\tM1_imag[i] = M1.matrix_array[i][0].imag;\n\t\t\t}\n\t\t}\n\t\tif(M2.isRow()) {\n\t\t\tfor(let i = 0; i < M2.column_length; i++) {\n\t\t\t\tM2_real[i] = M2.matrix_array[0][i].real;\n\t\t\t\tM2_imag[i] = M2.matrix_array[0][i].imag;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor(let i = 0; i < M2.row_length; i++) {\n\t\t\t\tM2_real[i] = M2.matrix_array[i][0].real;\n\t\t\t\tM2_imag[i] = M2.matrix_array[i][0].imag;\n\t\t\t}\n\t\t}\n\t\tconst y = SignalTool.conv(M1_real, M1_imag, M2_real, M2_imag);\n\t\tconst m = new Array(y.real.length);\n\t\tfor(let i = 0; i < y.real.length; i++) {\n\t\t\tm[i] = new Complex([y.real[i], y.imag[i]]);\n\t\t}\n\t\tconst M = new Matrix([m]);\n\t\treturn M2.isRow() ? M : M.transpose();\n\t}\n\n\t/**\n\t * ACF(Autocorrelation function), cros-correlation function.\n\t * - If the argument is omitted, it is calculated by the autocorrelation function.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x1\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [x2] - Matrix to calculate the correlation.\n\t * @returns {Matrix}\n\t */\n\tstatic xcorr(x1, x2) {\n\t\tconst M1 = Matrix._toMatrix(x1);\n\t\tif(!x2) {\n\t\t\treturn M1.xcorr(M1);\n\t\t}\n\t\tconst M2 = Matrix._toMatrix(x2);\n\t\tif(M1.isMatrix() || M2.isMatrix()) {\n\t\t\tthrow \"conv don't support matrix numbers.\";\n\t\t}\n\t\tconst M1_real = new Array(M1.length);\n\t\tconst M1_imag = new Array(M1.length);\n\t\tconst M2_real = new Array(M2.length);\n\t\tconst M2_imag = new Array(M2.length);\n\t\tif(M1.isRow()) {\n\t\t\tfor(let i = 0; i < M1.column_length; i++) {\n\t\t\t\tM1_real[i] = M1.matrix_array[0][i].real;\n\t\t\t\tM1_imag[i] = M1.matrix_array[0][i].imag;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor(let i = 0; i < M1.row_length; i++) {\n\t\t\t\tM1_real[i] = M1.matrix_array[i][0].real;\n\t\t\t\tM1_imag[i] = M1.matrix_array[i][0].imag;\n\t\t\t}\n\t\t}\n\t\tif(M2.isRow()) {\n\t\t\tfor(let i = 0; i < M2.column_length; i++) {\n\t\t\t\tM2_real[i] = M2.matrix_array[0][i].real;\n\t\t\t\tM2_imag[i] = M2.matrix_array[0][i].imag;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor(let i = 0; i < M2.row_length; i++) {\n\t\t\t\tM2_real[i] = M2.matrix_array[i][0].real;\n\t\t\t\tM2_imag[i] = M2.matrix_array[i][0].imag;\n\t\t\t}\n\t\t}\n\t\tconst y = SignalTool.xcorr(M1_real, M1_imag, M2_real, M2_imag);\n\t\tconst m = new Array(y.real.length);\n\t\tfor(let i = 0; i < y.real.length; i++) {\n\t\t\tm[i] = new Complex([y.real[i], y.imag[i]]);\n\t\t}\n\t\tconst M = new Matrix([m]);\n\t\treturn M1.isRow() ? M : M.transpose();\n\t}\n\n\t/**\n\t * Create window function for signal processing.\n\t * The following window functions are available.\n\t * - \"rectangle\": Rectangular window\n\t * - \"hann\": Hann/Hanning window.\n\t * - \"hamming\": Hamming window.\n\t * - \"blackman\": Blackman window.\n\t * - \"blackmanharris\": Blackman-Harris window.\n\t * - \"blackmannuttall\": Blackman-Nuttall window.\n\t * - \"flattop\": Flat top window.\n\t * - \"sin\", Half cycle sine window.\n\t * - \"vorbis\", Vorbis window.\n\t * @param {string} name - Window function name.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} size - Window length\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\" (default) , 1/\"periodic\"\n\t * @returns {Matrix} Column vector.\n\t */\n\tstatic window(name, size, periodic) {\n\t\tconst size_ = Matrix._toInteger(size);\n\t\tconst y = SignalTool.window(name, size_, periodic);\n\t\treturn (new Matrix(y)).transpose();\n\t}\n\n\t/**\n\t * Hann (Hanning) window.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} size - Window length\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\" (default) , 1/\"periodic\"\n\t * @returns {Matrix} Column vector.\n\t */\n\tstatic hann(size, periodic) {\n\t\treturn Signal.window(\"hann\", size, periodic);\n\t}\n\t\n\t/**\n\t * Hamming window.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} size - Window length\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\" (default) , 1/\"periodic\"\n\t * @returns {Matrix} Column vector.\n\t */\n\tstatic hamming(size, periodic) {\n\t\treturn Signal.window(\"hamming\", size, periodic);\n\t}\n\t\n\t/**\n\t * FFT shift.\n\t * Circular shift beginning at the center of the signal.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x \n\t * @param {SignalSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic fftshift(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tif(X.isVector()) {\n\t\t\tconst shift_size = Math.floor(X.length / 2);\n\t\t\treturn X.circshift(shift_size, type);\n\t\t}\n\t\tconst shift_size_col = Math.floor(X.column_length / 2);\n\t\tconst shift_size_row = Math.floor(X.row_length / 2);\n\t\tif(type !== undefined) {\n\t\t\tconst target = type.dimension;\n\t\t\tif((target === \"row\") || (target === 1)) {\n\t\t\t\treturn X.circshift(shift_size_col, type);\n\t\t\t}\n\t\t\telse if((target === \"column\") || (target === 2)) {\n\t\t\t\treturn X.circshift(shift_size_row, type);\n\t\t\t}\n\t\t}\n\t\tconst Y = X.circshift(shift_size_col, {dimension : \"row\"});\n\t\treturn Y.circshift(shift_size_row, {dimension : \"column\"});\n\t}\n\t\n}\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/tools/Signal.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 779,
    "kind": "typedef",
    "name": "SignalSettings",
    "memberof": "src/math/tools/Signal.mjs",
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalSettings",
    "access": "public",
    "description": "Collection of calculation settings for matrix.\n- Available options vary depending on the method.",
    "properties": [
      {
        "nullable": true,
        "types": [
          "string",
          "?number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"auto\"",
        "defaultRaw": "auto",
        "name": "dimension",
        "description": "Calculation direction. 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\"."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SignalSettings"
    }
  },
  {
    "__docId__": 780,
    "kind": "class",
    "name": "FFT",
    "memberof": "src/math/tools/Signal.mjs",
    "static": true,
    "longname": "src/math/tools/Signal.mjs~FFT",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Signal.mjs",
    "importStyle": null,
    "description": "Fast Fourier Transform (FFT) Class.",
    "lineNumber": 29,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 781,
    "kind": "method",
    "name": "bit_reverse_32",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~FFT.bit_reverse_32",
    "access": "public",
    "description": "Return the number with reversed bits.",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} ビット反転した値"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Bit-reversed value. (32-bit integer)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "ビット反転した値"
    }
  },
  {
    "__docId__": 782,
    "kind": "method",
    "name": "create_bit_reverse_table",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~FFT.create_bit_reverse_table",
    "access": "public",
    "description": "Create a bit reversal lookup table.",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} ビット反転した値の配列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": "ビット数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "ビット反転した値の配列"
    }
  },
  {
    "__docId__": 783,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#constructor",
    "access": "public",
    "description": "Create FFT.",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Signal length."
      }
    ]
  },
  {
    "__docId__": 784,
    "kind": "member",
    "name": "size",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#size",
    "access": "public",
    "description": "Signal length.",
    "lineNumber": 70,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 785,
    "kind": "member",
    "name": "inv_size",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#inv_size",
    "access": "public",
    "description": "Inverse of signal length.",
    "lineNumber": 75,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 786,
    "kind": "member",
    "name": "bit_size",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#bit_size",
    "access": "public",
    "description": "Number of bits when the signal length is expressed in binary number.",
    "lineNumber": 80,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 787,
    "kind": "member",
    "name": "is_fast",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#is_fast",
    "access": "public",
    "description": "FFT algorithm available.",
    "lineNumber": 85,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 788,
    "kind": "member",
    "name": "bitrv",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#bitrv",
    "access": "public",
    "description": "Bit reverse table for butterfly operation.",
    "lineNumber": 90,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 789,
    "kind": "member",
    "name": "fft_re",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#fft_re",
    "access": "public",
    "description": "Real part table used for multiplication of complex numbers.",
    "lineNumber": 95,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 790,
    "kind": "member",
    "name": "fft_im",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#fft_im",
    "access": "public",
    "description": "Imaginary table used for multiplication of complex numbers.",
    "lineNumber": 100,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 792,
    "kind": "method",
    "name": "delete",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#delete",
    "access": "public",
    "description": "Frees the memory reserved.",
    "lineNumber": 122,
    "params": [],
    "return": null
  },
  {
    "__docId__": 793,
    "kind": "method",
    "name": "fft",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#fft",
    "access": "public",
    "description": "Discrete Fourier transform (DFT).",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "Array of real parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "Array of imaginary parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 794,
    "kind": "method",
    "name": "ifft",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#ifft",
    "access": "public",
    "description": "Inverse discrete Fourier transform (IDFT),",
    "lineNumber": 206,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "Array of real parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "Array of imaginary parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 795,
    "kind": "class",
    "name": "Cache",
    "memberof": "src/math/tools/Signal.mjs",
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Cache",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Signal.mjs",
    "importStyle": null,
    "description": "Simple cache class.\nCache tables used in FFT.",
    "lineNumber": 279,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 796,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/tools/Signal.mjs~Cache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~Cache#constructor",
    "access": "public",
    "description": "Create Cache.",
    "lineNumber": 286,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "cache_size",
        "description": "Maximum number of caches."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "Target class you want to build a cache."
      }
    ]
  },
  {
    "__docId__": 797,
    "kind": "member",
    "name": "object",
    "memberof": "src/math/tools/Signal.mjs~Cache",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~Cache#object",
    "access": "public",
    "description": "Class for cache.",
    "lineNumber": 291,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 798,
    "kind": "member",
    "name": "table_max",
    "memberof": "src/math/tools/Signal.mjs~Cache",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~Cache#table_max",
    "access": "public",
    "description": "Maximum number of caches.",
    "lineNumber": 296,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 799,
    "kind": "member",
    "name": "table_size",
    "memberof": "src/math/tools/Signal.mjs~Cache",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~Cache#table_size",
    "access": "public",
    "description": "Number of caches currently.",
    "lineNumber": 301,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 800,
    "kind": "member",
    "name": "table",
    "memberof": "src/math/tools/Signal.mjs~Cache",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~Cache#table",
    "access": "public",
    "description": "Cache table.",
    "lineNumber": 306,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 801,
    "kind": "method",
    "name": "get",
    "memberof": "src/math/tools/Signal.mjs~Cache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~Cache#get",
    "access": "public",
    "description": "Create a class initialized with the specified data length.\nUse from cache if it exists in cache.",
    "lineNumber": 315,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Data length."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 802,
    "kind": "variable",
    "name": "fft_cache",
    "memberof": "src/math/tools/Signal.mjs",
    "static": true,
    "longname": "src/math/tools/Signal.mjs~fft_cache",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Signal.mjs",
    "importStyle": null,
    "description": "Cache for FFT.",
    "lineNumber": 342,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Cache"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 803,
    "kind": "class",
    "name": "DCT",
    "memberof": "src/math/tools/Signal.mjs",
    "static": true,
    "longname": "src/math/tools/Signal.mjs~DCT",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Signal.mjs",
    "importStyle": null,
    "description": "Discrete cosine transform (DCT) class.",
    "lineNumber": 348,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 804,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/tools/Signal.mjs~DCT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~DCT#constructor",
    "access": "public",
    "description": "Create DCT.",
    "lineNumber": 354,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Signal length."
      }
    ]
  },
  {
    "__docId__": 805,
    "kind": "member",
    "name": "size",
    "memberof": "src/math/tools/Signal.mjs~DCT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~DCT#size",
    "access": "public",
    "description": "Signal length.",
    "lineNumber": 359,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 806,
    "kind": "member",
    "name": "dct_size",
    "memberof": "src/math/tools/Signal.mjs~DCT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~DCT#dct_size",
    "access": "public",
    "description": "Twice the signal length.\nIn the DCT conversion, an actual signal is zero-filled with a doubled signal length, and an FFT is performed on it.",
    "lineNumber": 365,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 807,
    "kind": "member",
    "name": "dct_re",
    "memberof": "src/math/tools/Signal.mjs~DCT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~DCT#dct_re",
    "access": "public",
    "description": "Calculation table used for DCT conversion.",
    "lineNumber": 370,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 808,
    "kind": "member",
    "name": "dct_im",
    "memberof": "src/math/tools/Signal.mjs~DCT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~DCT#dct_im",
    "access": "public",
    "description": "Calculation table used for DCT conversion.",
    "lineNumber": 375,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 809,
    "kind": "method",
    "name": "delete",
    "memberof": "src/math/tools/Signal.mjs~DCT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~DCT#delete",
    "access": "public",
    "description": "Frees the memory reserved.",
    "lineNumber": 390,
    "params": [],
    "return": null
  },
  {
    "__docId__": 810,
    "kind": "method",
    "name": "dct",
    "memberof": "src/math/tools/Signal.mjs~DCT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~DCT#dct",
    "access": "public",
    "description": "Discrete cosine transform (DCT-II, DCT).",
    "lineNumber": 402,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "Array of real parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 811,
    "kind": "method",
    "name": "idct",
    "memberof": "src/math/tools/Signal.mjs~DCT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~DCT#idct",
    "access": "public",
    "description": "Inverse discrete cosine transform (DCT-III, IDCT),",
    "lineNumber": 422,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "Array of real parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 812,
    "kind": "variable",
    "name": "dct_cache",
    "memberof": "src/math/tools/Signal.mjs",
    "static": true,
    "longname": "src/math/tools/Signal.mjs~dct_cache",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Signal.mjs",
    "importStyle": null,
    "description": "Cache for discrete cosine transform.",
    "lineNumber": 441,
    "ignore": true,
    "type": {
      "types": [
        "src/math/tools/Signal.mjs~Cache"
      ]
    }
  },
  {
    "__docId__": 813,
    "kind": "class",
    "name": "SignalTool",
    "memberof": "src/math/tools/Signal.mjs",
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Signal.mjs",
    "importStyle": null,
    "description": "Collection of functions used inside Signal class.",
    "lineNumber": 447,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 814,
    "kind": "method",
    "name": "isContainsZero",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.isContainsZero",
    "access": "public",
    "description": "Returns true if the array contains 0.",
    "lineNumber": 454,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "調べたい配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 815,
    "kind": "method",
    "name": "fft",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.fft",
    "access": "public",
    "description": "Discrete Fourier transform (DFT).",
    "lineNumber": 469,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "Array of real parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "Array of imaginary parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 816,
    "kind": "method",
    "name": "ifft",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.ifft",
    "access": "public",
    "description": "Inverse discrete Fourier transform (IDFT),",
    "lineNumber": 480,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "Array of real parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "Array of imaginary parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 817,
    "kind": "method",
    "name": "dct",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.dct",
    "access": "public",
    "description": "Discrete cosine transform (DCT-II, DCT).",
    "lineNumber": 490,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "Array of real parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 818,
    "kind": "method",
    "name": "idct",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.idct",
    "access": "public",
    "description": "Inverse discrete cosine transform (DCT-III, IDCT),",
    "lineNumber": 500,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "Array of real parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 819,
    "kind": "method",
    "name": "powerfft",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.powerfft",
    "access": "public",
    "description": "Power spectral density.",
    "lineNumber": 511,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "Array of real parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "Array of imaginary parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 820,
    "kind": "method",
    "name": "conv",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.conv",
    "access": "public",
    "description": "Convolution integral, Polynomial multiplication.",
    "lineNumber": 529,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x1_real",
        "description": "Array of real parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x1_imag",
        "description": "Array of imaginary parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x2_real",
        "description": "Array of real parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x2_imag",
        "description": "Array of imaginary parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 821,
    "kind": "method",
    "name": "xcorr",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.xcorr",
    "access": "public",
    "description": "ACF(Autocorrelation function), Cros-correlation function.",
    "lineNumber": 639,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x1_real",
        "description": "Array of real parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x1_imag",
        "description": "Array of imaginary parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x2_real",
        "description": "Array of real parts of vector."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x2_imag",
        "description": "Array of imaginary parts of vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 822,
    "kind": "method",
    "name": "window",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.window",
    "access": "public",
    "description": "Create window function for signal processing.\nThe following window functions are available.\n- \"rectangle\": Rectangular window\n- \"hann\": Hann/Hanning window.\n- \"hamming\": Hamming window.\n- \"blackman\": Blackman window.\n- \"blackmanharris\": Blackman-Harris window.\n- \"blackmannuttall\": Blackman-Nuttall window.\n- \"flattop\": Flat top window.\n- \"sin\", Half cycle sine window.\n- \"vorbis\", Vorbis window.",
    "lineNumber": 796,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Window function name."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Window length."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\" (default) , 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 823,
    "kind": "method",
    "name": "hann",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.hann",
    "access": "public",
    "description": "Hann (Hanning) window.",
    "lineNumber": 885,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Window length."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\" (default) , 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 824,
    "kind": "method",
    "name": "hamming",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.hamming",
    "access": "public",
    "description": "Hamming window.",
    "lineNumber": 895,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Window length."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\" (default) , 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 825,
    "kind": "class",
    "name": "Signal",
    "memberof": "src/math/tools/Signal.mjs",
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/tools/Signal.mjs",
    "importStyle": "Signal",
    "description": "Signal processing class for Matrix class.",
    "lineNumber": 904,
    "interface": false
  },
  {
    "__docId__": 826,
    "kind": "method",
    "name": "fft",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.fft",
    "access": "public",
    "description": "Discrete Fourier transform (DFT).",
    "lineNumber": 912,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} fft(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "SignalSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "fft(x)"
    }
  },
  {
    "__docId__": 827,
    "kind": "method",
    "name": "ifft",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.ifft",
    "access": "public",
    "description": "Inverse discrete Fourier transform (IDFT),",
    "lineNumber": 938,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} ifft(X)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "X",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "SignalSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "ifft(X)"
    }
  },
  {
    "__docId__": 828,
    "kind": "method",
    "name": "powerfft",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.powerfft",
    "access": "public",
    "description": "Power spectral density.",
    "lineNumber": 964,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} abs(fft(x)).^2"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "SignalSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "abs(fft(x)).^2"
    }
  },
  {
    "__docId__": 829,
    "kind": "method",
    "name": "dct",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.dct",
    "access": "public",
    "description": "Discrete cosine transform (DCT-II, DCT).",
    "lineNumber": 990,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} dct(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "SignalSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "dct(x)"
    }
  },
  {
    "__docId__": 830,
    "kind": "method",
    "name": "idct",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.idct",
    "access": "public",
    "description": "Inverse discrete cosine transform (DCT-III, IDCT),",
    "lineNumber": 1017,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} idct(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "X",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "SignalSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "idct(x)"
    }
  },
  {
    "__docId__": 831,
    "kind": "method",
    "name": "fft2",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.fft2",
    "access": "public",
    "description": "Discrete two-dimensional Fourier transform (2D DFT).",
    "lineNumber": 1043,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 832,
    "kind": "method",
    "name": "ifft2",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.ifft2",
    "access": "public",
    "description": "Inverse discrete two-dimensional Fourier transform (2D IDFT),",
    "lineNumber": 1052,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "X",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 833,
    "kind": "method",
    "name": "dct2",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.dct2",
    "access": "public",
    "description": "Discrete two-dimensional cosine transform (2D DCT).",
    "lineNumber": 1061,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 834,
    "kind": "method",
    "name": "idct2",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.idct2",
    "access": "public",
    "description": "Inverse discrete two-dimensional cosine transform (2D IDCT),",
    "lineNumber": 1070,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "X",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 835,
    "kind": "method",
    "name": "conv",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.conv",
    "access": "public",
    "description": "Convolution integral, Polynomial multiplication.",
    "lineNumber": 1080,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 836,
    "kind": "method",
    "name": "xcorr",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.xcorr",
    "access": "public",
    "description": "ACF(Autocorrelation function), cros-correlation function.\n- If the argument is omitted, it is calculated by the autocorrelation function.",
    "lineNumber": 1130,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "x2",
        "description": "Matrix to calculate the correlation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 837,
    "kind": "method",
    "name": "window",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.window",
    "access": "public",
    "description": "Create window function for signal processing.\nThe following window functions are available.\n- \"rectangle\": Rectangular window\n- \"hann\": Hann/Hanning window.\n- \"hamming\": Hamming window.\n- \"blackman\": Blackman window.\n- \"blackmanharris\": Blackman-Harris window.\n- \"blackmannuttall\": Blackman-Nuttall window.\n- \"flattop\": Flat top window.\n- \"sin\", Half cycle sine window.\n- \"vorbis\", Vorbis window.",
    "lineNumber": 1193,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Column vector."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Window function name."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Window length"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\" (default) , 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Column vector."
    }
  },
  {
    "__docId__": 838,
    "kind": "method",
    "name": "hann",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.hann",
    "access": "public",
    "description": "Hann (Hanning) window.",
    "lineNumber": 1205,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Column vector."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Window length"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\" (default) , 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Column vector."
    }
  },
  {
    "__docId__": 839,
    "kind": "method",
    "name": "hamming",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.hamming",
    "access": "public",
    "description": "Hamming window.",
    "lineNumber": 1215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Column vector."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Window length"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\" (default) , 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Column vector."
    }
  },
  {
    "__docId__": 840,
    "kind": "method",
    "name": "fftshift",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.fftshift",
    "access": "public",
    "description": "FFT shift.\nCircular shift beginning at the center of the signal.",
    "lineNumber": 1226,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "SignalSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 841,
    "kind": "file",
    "name": "src/math/tools/Statistics.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport Complex from \"../Complex.mjs\";\n\n// @ts-ignore\nimport Matrix from \"../Matrix.mjs\";\n\n/**\n * Collection of calculation settings for matrix.\n * - Available options vary depending on the method.\n * @typedef {Object} StatisticsSettings\n * @property {?string|?number} [dimension=\"auto\"] Calculation direction. 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\".\n * @property {Object} [correction] Correction value. For statistics. 0(unbiased), 1(sample).\n */\n\n/**\n * Collection of statistical functions using real numbers.\n * @ignore\n */\nclass StatisticsTool {\n\n\t/**\n\t * Log-gamma function.\n\t * @param {number} x\n\t * @returns {number}\n\t */\n\tstatic gammaln(x) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p30,技術評論社,1991\n\t\tconst LOG_2PI = Math.log(2.0 * Math.PI);\n\t\t//ベルヌーイ数\n\t\t//http://fr.wikipedia.org/wiki/Nombre_de_Bernoulli\n\t\tconst K2 = ( 1.0 / 6.0)\t\t\t\t\t/ (2 * 1);\n\t\tconst K4 = (-1.0 / 30.0)\t\t\t\t/ (4 * 3);\n\t\tconst K6 = ( 1.0 / 42.0)\t\t\t\t/ (6 * 5);\n\t\tconst K8 = (-1.0 / 30.0)\t\t\t\t/ (8 * 7);\n\t\tconst K10 = ( 5.0 / 66.0)\t\t\t\t/ (10 * 9);\n\t\tconst K12 = (-691.0 / 2730.0)\t\t\t/ (12 * 11);\n\t\tconst K14 = ( 7.0 / 6.0)\t\t\t\t/ (14 * 13);\n\t\tconst K16 = (-3617.0 / 510.0)\t\t\t/ (16 * 15);\n\t\tconst K18 = (43867.0 / 798.0)\t\t\t/ (18 * 17);\n\t\tconst K20 = (-174611.0 / 330.0)\t\t\t/ (20 * 19);\n\t\tconst K22 = (854513.0 / 138.0)\t\t\t/ (22 * 21);\n\t\tconst K24 = (-236364091.0 / 2730.0)\t\t/ (24 * 23);\n\t\tconst K26 = (8553103.0 / 6.0)\t\t\t/ (26 * 25);\n\t\tconst K28 = (-23749461029.0 / 870.0)\t/ (28 * 27);\n\t\tconst K30 = (8615841276005.0 / 14322.0)\t/ (30 * 29);\n\t\tconst K32 = (-7709321041217.0 / 510.0)\t/ (32 * 31);\n\t\tconst LIST = [\n\t\t\tK32, K30, K28, K26, K24, K22, K20, K18,\n\t\t\tK16, K14, K12, K10, K8, K6, K4, K2\n\t\t];\n\t\tlet v = 1;\n\t\tlet lx = x;\n\t\twhile(lx < LIST.length) {\n\t\t\tv *= lx;\n\t\t\tlx++;\n\t\t}\n\t\tconst w = 1 / (lx * lx);\n\t\tlet y = LIST[0];\n\t\tfor(let i = 1; i < LIST.length; i++) {\n\t\t\ty *= w;\n\t\t\ty += LIST[i];\n\t\t}\n\t\ty /= lx;\n\t\ty += 0.5 * LOG_2PI;\n\t\ty += - Math.log(v) - lx + (lx - 0.5) * Math.log(lx);\n\t\treturn(y);\n\t}\n\n\t/**\n\t * Incomplete gamma function upper side.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} gammaln_a\n\t * @returns {number}\n\t */\n\tstatic q_gamma(x, a, gammaln_a) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p227,技術評論社,1991\n\t\tlet k;\n\t\tlet result, w, temp, previous;\n\t\t// Laguerreの多項式\n\t\tlet la = 1.0, lb = 1.0 + x - a;\n\t\tif(x < 1.0 + a) {\n\t\t\treturn (1 - StatisticsTool.p_gamma(x, a, gammaln_a));\n\t\t}\n\t\tw = Math.exp(a * Math.log(x) - x - gammaln_a);\n\t\tresult = w / lb;\n\t\tfor(k = 2; k < 1000; k++) {\n\t\t\ttemp = ((k - 1.0 - a) * (lb - la) + (k + x) * lb) / k;\n\t\t\tla = lb;\n\t\t\tlb = temp;\n\t\t\tw *= (k - 1.0 - a) / k;\n\t\t\ttemp = w / (la * lb);\n\t\t\tprevious = result;\n\t\t\tresult += temp;\n\t\t\tif(result == previous) {\n\t\t\t\treturn(result);\n\t\t\t}\n\t\t}\n\t\treturn Number.NaN;\n\t}\n\n\t/**\n\t * Incomplete gamma function lower side.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} gammaln_a\n\t * @returns {number}\n\t */\n\tstatic p_gamma(x, a, gammaln_a) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p227,技術評論社,1991\n\t\tlet k;\n\t\tlet result, term, previous;\n\t\tif(x >= 1.0 + a) {\n\t\t\treturn (1.0 - StatisticsTool.q_gamma(x, a, gammaln_a));\n\t\t}\n\t\tif(x === 0.0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tresult = term = Math.exp(a * Math.log(x) - x - gammaln_a) / a;\n\t\tfor(k = 1; k < 1000; k++) {\n\t\t\tterm *= x / (a + k);\n\t\t\tprevious = result;\n\t\t\tresult += term;\n\t\t\tif(result == previous) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn Number.NaN;\n\t}\n\n\t/**\n\t * Gamma function.\n\t * @param {number} z\n\t * @returns {number}\n\t */\n\tstatic gamma(z) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p30,技術評論社,1991\n\t\tif(z < 0) {\n\t\t\treturn (Math.PI / (Math.sin(Math.PI * z) * Math.exp(StatisticsTool.gammaln(1.0 - z))));\n\t\t}\n\t\treturn Math.exp(StatisticsTool.gammaln(z));\n\t}\n\n\t/**\n\t * Incomplete gamma function.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {number}\n\t */\n\tstatic gammainc(x, a, tail) {\n\t\tif(tail === \"lower\") {\n\t\t\treturn StatisticsTool.p_gamma(x, a, StatisticsTool.gammaln(a));\n\t\t}\n\t\telse if(tail === \"upper\") {\n\t\t\treturn StatisticsTool.q_gamma(x, a, StatisticsTool.gammaln(a));\n\t\t}\n\t\telse if(arguments.length === 2) {\n\t\t\t// 引数を省略した場合\n\t\t\treturn StatisticsTool.gammainc(x, a, \"lower\");\n\t\t}\n\t\telse {\n\t\t\tthrow \"gammainc unsupported argument [\" + tail + \"]\";\n\t\t}\n\t}\n\t\n\t/**\n\t * Probability density function (PDF) of the gamma distribution.\n\t * @param {number} x\n\t * @param {number} k - Shape parameter.\n\t * @param {number} s - Scale parameter.\n\t * @returns {number}\n\t */\n\tstatic gampdf(x, k, s) {\n\t\tlet y = 1.0 / (StatisticsTool.gamma(k) * Math.pow(s, k));\n\t\ty *= Math.pow( x, k - 1);\n\t\ty *= Math.exp( - x / s );\n\t\treturn y;\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of gamma distribution.\n\t * @param {number} x\n\t * @param {number} k - Shape parameter.\n\t * @param {number} s - Scale parameter.\n\t * @returns {number}\n\t */\n\tstatic gamcdf(x, k, s) {\n\t\treturn StatisticsTool.gammainc(x / s, k);\n\t}\n\t\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of gamma distribution.\n\t * @param {number} p\n\t * @param {number} k - Shape parameter.\n\t * @param {number} s - Scale parameter.\n\t * @returns {number}\n\t */\n\tstatic gaminv(p, k, s) {\n\t\tif((p < 0.0) || (p > 1.0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if(p == 0.0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\telse if(p == 1.0) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\tconst eps = 1.0e-12;\n\t\t// 初期値を決める\n\t\tlet y = k * s;\n\t\t// 単調増加関数なのでニュートン・ラフソン法で解く\n\t\t// x_n+1 = x_n - f(x) / f'(x)\n\t\t// ここで f(x) は累積分布関数、f'(x) は確率密度関数\n\t\t// a = 累積分関数 → f(x)  = 累積分関数 - a と置く。\n\t\t// aの微分は0なので無関係\n\t\tlet delta, y2;\n\t\tfor(let i = 0; i < 100; i++) {\n\t\t\ty2 = y - ((StatisticsTool.gamcdf(y, k, s) - p) / StatisticsTool.gampdf(y, k, s));\n\t\t\tdelta = y2 - y;\n\t\t\tif(Math.abs(delta) <= eps) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y2;\n\t\t\tif(y < 0.0) {\n\t\t\t\ty = eps;\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Beta function.\n\t * @param {number} x\n\t * @param {number} y\n\t * @returns {number}\n\t */\n\tstatic beta(x, y) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p30,技術評論社,1991\n\t\treturn (Math.exp(StatisticsTool.gammaln(x) + StatisticsTool.gammaln(y) - StatisticsTool.gammaln(x + y)));\n\t}\n\t\n\t/**\n\t * Incomplete beta function lower side.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic p_beta(x, a, b) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p231,技術評論社,1991\n\t\tlet k;\n\t\tlet result, term, previous;\n\t\tif(a <= 0.0) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\tif(b <= 0.0) {\n\t\t\tif(x < 1.0) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\telse if(x === 1.0) {\n\t\t\t\treturn 1.0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\tif(x > (a + 1.0) / (a + b + 2.0)) {\n\t\t\treturn (1.0 - StatisticsTool.p_beta(1.0 - x, b, a));\n\t\t}\n\t\tif(x <= 0.0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tterm = a * Math.log(x);\n\t\tterm += b * Math.log(1.0 - x);\n\t\tterm += StatisticsTool.gammaln(a + b);\n\t\tterm -= StatisticsTool.gammaln(a) + StatisticsTool.gammaln(b);\n\t\tterm = Math.exp(term);\n\t\tterm /= a;\n\t\tresult = term;\n\t\tfor(k = 1; k < 1000; k++) {\n\t\t\tterm *= a + b + k - 1.0;\n\t\t\tterm *= x;\n\t\t\tterm /= a + k;\n\t\t\tprevious = result;\n\t\t\tresult += term;\n\t\t\tif(result === previous) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn Number.NaN;\n\t}\n\n\t/**\n\t * Incomplete beta function upper side.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic q_beta(x, a, b) {\n\t\treturn (1.0 - StatisticsTool.p_beta(x, a, b));\n\t}\n\n\t/**\n\t * Incomplete beta function.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {number}\n\t */\n\tstatic betainc(x, a, b, tail) {\n\t\tif(tail === \"lower\") {\n\t\t\treturn StatisticsTool.p_beta(x, a, b);\n\t\t}\n\t\telse if(tail === \"upper\") {\n\t\t\treturn StatisticsTool.q_beta(x, a, b);\n\t\t}\n\t\telse if(arguments.length === 3) {\n\t\t\t// 引数を省略した場合\n\t\t\treturn StatisticsTool.betainc(x, a, b, \"lower\");\n\t\t}\n\t\telse {\n\t\t\tthrow \"betainc unsupported argument [\" + tail + \"]\";\n\t\t}\n\t}\n\t\n\t/**\n\t * Return true if the value is integer.\n\t * @param {number} x\n\t * @returns {boolean}\n\t */\n\tstatic isInteger(x) {\n\t\treturn (x - Math.trunc(x) !== 0.0);\n\t}\n\t\n\t/**\n\t * Probability density function (PDF) of beta distribution.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic betapdf(x, a, b) {\n\t\t// powの計算結果が複素数になる場合は計算を行わない\n\t\tif\t(\n\t\t\t((x < 0) && (StatisticsTool.isInteger(b - 1))) ||\n\t\t\t((1 - x < 0) && (StatisticsTool.isInteger(b - 1)))\n\t\t) {\n\t\t\treturn 0.0;\n\t\t}\n\t\t// 以下の式でも求められるが betapdf(0, 1, 1)で、Log(0)の計算が発生しNaNを返してしまう。実際は1を返すべき。\n\t\t//return(Math.exp((a - 1) * Math.log(x) + (b - 1) * Math.log(1 - x)) / StatisticsTool.beta(a,  b));\n\t\treturn (Math.pow(x, a - 1) * Math.pow(1 - x, b - 1) / StatisticsTool.beta(a,  b));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of beta distribution.\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic betacdf(x, a, b) {\n\t\treturn StatisticsTool.betainc(x, a, b);\n\t}\n\t\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of beta distribution.\n\t * @param {number} p\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic betainv(p, a, b) {\n\t\tif((p < 0.0) || (p > 1.0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if((p == 0.0) && (a > 0.0) && (b > 0.0)) {\n\t\t\treturn 0.0;\n\t\t}\n\t\telse if((p == 1.0) && (a > 0.0) && (b > 0.0)) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tconst eps = 1.0e-14;\n\t\t// 初期値を決める\n\t\tlet y;\n\t\tif(b == 0) {\n\t\t\ty = 1.0 - eps;\n\t\t}\n\t\telse if(a == 0) {\n\t\t\ty = eps;\n\t\t}\n\t\telse {\n\t\t\ty = a / (a + b);\n\t\t}\n\t\t// 単調増加関数なのでニュートン・ラフソン法で解く\n\t\t// x_n+1 = x_n - f(x) / f'(x)\n\t\t// ここで f(x) は累積分布関数、f'(x) は確率密度関数\n\t\t// a = 累積分関数 → f(x)  = 累積分関数 - a と置く。\n\t\t// aの微分は0なので無関係\n\t\tlet delta, y2;\n\t\tfor(let i = 0; i < 100; i++) {\n\t\t\ty2 = y - ((StatisticsTool.betacdf(y, a, b) - p) / StatisticsTool.betapdf(y, a, b));\n\t\t\tdelta = y2 - y;\n\t\t\tif(Math.abs(delta) <= eps) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y2;\n\t\t\tif(y > 1.0) {\n\t\t\t\ty = 1.0 - eps;\n\t\t\t}\n\t\t\telse if(y < 0.0) {\n\t\t\t\ty = eps;\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Factorial function, x!.\n\t * @param {number} n\n\t * @returns {number}\n\t */\n\tstatic factorial(n) {\n\t\tconst y = StatisticsTool.gamma(n + 1.0);\n\t\tif(Math.trunc(n) === n) {\n\t\t\treturn Math.round(y);\n\t\t}\n\t\telse {\n\t\t\treturn y;\n\t\t}\n\t}\n\n\t/**\n\t * Binomial coefficient, number of all combinations, nCk.\n\t * @param {number} n\n\t * @param {number} k\n\t * @returns {number} nCk\n\t */\n\tstatic nchoosek(n, k) {\n\t\treturn (Math.round(StatisticsTool.factorial(n) / (StatisticsTool.factorial(n - k) * StatisticsTool.factorial(k))));\n\t}\n\n\t/**\n\t * Error function.\n\t * @param {number} x\n\t * @returns {number}\n\t */\n\tstatic erf(x) {\n\t\treturn (StatisticsTool.p_gamma(x * x, 0.5, Math.log(Math.PI) * 0.5) * (x >= 0 ? 1.0 : -1.0));\n\t}\n\n\t/**\n\t * Complementary error function.\n\t * @param {number} x\n\t * @returns {number}\n\t */\n\tstatic erfc(x) {\n\t\treturn 1.0 - StatisticsTool.erf(x);\n\t}\n\n\t/**\n\t\t erfinv(p) 誤差逆関数\n\t\t @param_ {number} p\n\t\t @returns_ {number}\n\t\t\n\t\tstatic erfinv(p) {\n\t\t\tif((p < 0.0) || (p > 1.0)) {\n\t\t\t\treturn Number.NaN;\n\t\t\t}\n\t\t\telse if(p == 0.0) {\n\t\t\t\treturn Number.NEGATIVE_INFINITY;\n\t\t\t}\n\t\t\telse if(p == 1.0) {\n\t\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t\t}\n\t\t\tlet y = 0;\n\t\t\tconst c = [];\n\t\t\tfor(let k = 0; k < 100; k++) {\n\t\t\t\tlet ck = 0;\n\t\t\t\tif(0 === k) {\n\t\t\t\t\tck = 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfor(let m = 0; m < k; m++) {\n\t\t\t\t\t\tck += c[m] * c[k - 1 - m] / ((m + 1) * (2 * m + 1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tc.push(ck);\n\t\t\t\tconsole.log(y + \"\\t\" + ck / (2 * k + 1) + \"\\t\" + Math.pow(Math.sqrt(Math.PI) * 0.5 * p, 2 * k + 1))\n\t\t\t\ty += ck / (2 * k + 1) * Math.pow(Math.sqrt(Math.PI) * 0.5 * p, 2 * k + 1);\n\t\t\t}\n\t\t\treturn y;\n\t\t\t// 0.5 * Math.sqrt(Math.PI) = 0.8862269254527579\n\t\t\t// Math.PI / 12 = 0.2617993877991494\n\t\t\t// 7 * Math.pow(Math.PI, 2) / 480 = 0.14393173084921979\n\t\t\t// 127 * Math.pow(Math.PI, 3) / 40320 = 0.09766361950392055\n\t\t\t// 4369 * Math.pow(Math.PI, 4) / 5806080 = 0.07329907936638086\n\t\t\t// 34807 * Math.pow(Math.PI, 5) / 182476800 = 0.05837250087858452\n\t\t\treturn (p\n\t\t\t\t+ 0.2617993877991494 * Math.pow(p, 3)\n\t\t\t\t+ 0.14393173084921979 * Math.pow(p, 5)\n\t\t\t\t+ 0.09766361950392055 * Math.pow(p, 7)\n\t\t\t\t+ 0.07329907936638086 * Math.pow(p, 9)\n\t\t\t\t+ 0.05837250087858452 * Math.pow(p, 11)\n\t\t\t) * 0.8862269254527579;\n\t\t}\n\t*/\n\n\t/**\n\t * Probability density function (PDF) of normal distribution.\n\t * @param {number} x\n\t * @param {number} [u=0.0] - Average value.\n\t * @param {number} [s=1.0] - Variance value.\n\t * @returns {number}\n\t */\n\tstatic normpdf(x, u, s) {\n\t\tconst u_ = typeof u === \"number\" ? u : 0.0;\n\t\tconst s_ = typeof s === \"number\" ? s : 1.0;\n\t\tlet y = 1.0 / Math.sqrt( 2.0 * Math.PI * s_ * s_ );\n\t\ty *= Math.exp( - (x - u_) * (x - u_) / (2.0 * s_ * s_));\n\t\treturn y;\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of normal distribution.\n\t * @param {number} x\n\t * @param {number} [u=0.0] - Average value.\n\t * @param {number} [s=1.0] - Variance value.\n\t * @returns {number}\n\t */\n\tstatic normcdf(x, u, s) {\n\t\tconst u_ = typeof u === \"number\" ? u : 0.0;\n\t\tconst s_ = typeof s === \"number\" ? s : 1.0;\n\t\treturn (1.0 + StatisticsTool.erf( (x - u_) / (s_ * Math.sqrt(2.0)) )) / 2.0;\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of normal distribution.\n\t * @param {number} p - Probability.\n\t * @param {number} [u=0.0] - Average value.\n\t * @param {number} [s=1.0] - Variance value.\n\t * @returns {number}\n\t */\n\tstatic norminv(p, u, s) {\n\t\tif((p < 0.0) || (p > 1.0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if(p == 0.0) {\n\t\t\treturn Number.NEGATIVE_INFINITY;\n\t\t}\n\t\telse if(p == 1.0) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\tconst u_ = typeof u === \"number\" ? u : 0.0;\n\t\tconst s_ = typeof s === \"number\" ? s : 1.0;\n\t\tconst eps = 1.0e-12;\n\t\t// 初期値を決める\n\t\tlet y = u_;\n\t\t// 単調増加関数なのでニュートン・ラフソン法で解く\n\t\t// x_n+1 = x_n - f(x) / f'(x)\n\t\t// ここで f(x) は累積分布関数、f'(x) は確率密度関数\n\t\t// a = 累積分関数 → f(x)  = 累積分関数 - a と置く。\n\t\t// aの微分は0なので無関係\n\t\tlet delta, y2;\n\t\tfor(let i = 0; i < 200; i++) {\n\t\t\ty2 = y - ((StatisticsTool.normcdf(y, u_, s_) - p) / StatisticsTool.normpdf(y, u_, s_));\n\t\t\tdelta = y2 - y;\n\t\t\tif(Math.abs(delta) <= eps) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y2;\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * Probability density function (PDF) of Student's t-distribution.\n\t * @param {number} t - T-value.\n\t * @param {number} v - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic tpdf(t, v) {\n\t\tlet y = 1.0 / (Math.sqrt(v) * StatisticsTool.beta(0.5, v * 0.5));\n\t\ty *= Math.pow( 1 + t * t / v, - (v + 1) * 0.5);\n\t\treturn y;\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution.\n\t * @param {number} t - T-value.\n\t * @param {number} v - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic tcdf(t, v) {\n\t\tconst y = (t * t) / (v + t * t) ;\n\t\tconst p = StatisticsTool.betainc( y, 0.5, v * 0.5 ) * (t < 0 ? -1 : 1);\n\t\treturn 0.5 * (1 + p);\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution.\n\t * @param {number} p - Probability.\n\t * @param {number} v - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic tinv(p, v) {\n\t\tif((p < 0) || (p > 1)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\tif(p == 0) {\n\t\t\treturn Number.NEGATIVE_INFINITY;\n\t\t}\n\t\telse if(p == 1) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\telse if(p < 0.5) {\n\t\t\tconst y = StatisticsTool.betainv(2.0 * p, 0.5 * v, 0.5);\n\t\t\treturn - Math.sqrt(v / y - v);\n\t\t}\n\t\telse {\n\t\t\tconst y = StatisticsTool.betainv(2.0 * (1.0 - p), 0.5 * v, 0.5);\n\t\t\treturn Math.sqrt(v / y - v);\n\t\t}\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.\n\t * @param {number} t - T-value.\n\t * @param {number} v - The degrees of freedom. (DF)\n\t * @param {number} tails - Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)\n\t * @returns {number}\n\t */\n\tstatic tdist(t, v, tails) {\n\t\treturn (1.0 - StatisticsTool.tcdf(t, v)) * tails;\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.\n\t * @param {number} p - Probability.\n\t * @param {number} v - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic tinv2(p, v) {\n\t\treturn - StatisticsTool.tinv( p * 0.5, v);\n\t}\n\n\t/**\n\t * Probability density function (PDF) of chi-square distribution.\n\t * @param {number} x \n\t * @param {number} k - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic chi2pdf(x, k) {\n\t\tif(x < 0.0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(x === 0.0) {\n\t\t\treturn 0.5;\n\t\t}\n\t\tlet y = Math.pow(x, k / 2.0 - 1.0) * Math.exp( - x / 2.0 );\n\t\ty /= Math.pow(2, k / 2.0) * StatisticsTool.gamma( k / 2.0);\n\t\treturn y;\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of chi-square distribution.\n\t * @param {number} x \n\t * @param {number} k - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic chi2cdf(x, k) {\n\t\treturn StatisticsTool.gammainc(x / 2.0, k / 2.0);\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of chi-square distribution.\n\t * @param {number} p - Probability.\n\t * @param {number} k - The degrees of freedom. (DF)\n\t * @returns {number}\n\t */\n\tstatic chi2inv(p, k) {\n\t\treturn StatisticsTool.gaminv(p, k / 2.0, 2);\n\t}\n\n\t/**\n\t * Probability density function (PDF) of F-distribution.\n\t * @param {number} x\n\t * @param {number} d1 - The degree of freedom of the molecules.\n\t * @param {number} d2 - The degree of freedom of the denominator\n\t * @returns {number}\n\t */\n\tstatic fpdf(x, d1, d2) {\n\t\tif((d1 < 0) || (d2 < 0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if(x <= 0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tlet y = 1.0;\n\t\ty *= Math.pow( (d1 * x) / (d1 * x + d2) , d1 / 2.0);\n\t\ty *= Math.pow( 1.0 - ((d1 * x) / (d1 * x + d2)), d2 / 2.0);\n\t\ty /= x * StatisticsTool.beta(d1 / 2.0, d2 / 2.0);\n\t\treturn y;\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of F-distribution.\n\t * @param {number} x\n\t * @param {number} d1 - The degree of freedom of the molecules.\n\t * @param {number} d2 - The degree of freedom of the denominator\n\t * @returns {number}\n\t */\n\tstatic fcdf(x, d1, d2) {\n\t\treturn StatisticsTool.betacdf( d1 * x / (d1 * x + d2), d1 / 2.0, d2 / 2.0 );\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of F-distribution.\n\t * @param {number} p - Probability.\n\t * @param {number} d1 - The degree of freedom of the molecules.\n\t * @param {number} d2 - The degree of freedom of the denominator\n\t * @returns {number}\n\t */\n\tstatic finv(p, d1, d2) {\n\t\treturn (1.0 / StatisticsTool.betainv( 1.0 - p, d2 / 2.0, d1 / 2.0 ) - 1.0) * d2 / d1;\n\t}\n\n}\n\n/**\n * typeof this === string\n * @param text \n * @ignore\n */\nconst isStr = function(text) {\n\treturn (text && (typeof text === \"string\" || text instanceof String));\n};\n\n/**\n * Collection of statistical functions used from the Complex class.\n * @ignore\n */\nclass StatisticsComplex {\n\n\t/**\n\t * Log-gamma function.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} x\n\t * @returns {Complex}\n\t */\n\tstatic gammaln(x) {\n\t\treturn new Complex(StatisticsTool.gammaln(Complex._toDouble(x)));\n\t}\n\t\n\t/**\n\t * Gamma function.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} z\n\t * @returns {Complex}\n\t */\n\tstatic gamma(z) {\n\t\treturn new Complex(StatisticsTool.gamma(Complex._toDouble(z)));\n\t}\n\t\n\t/**\n\t * Incomplete gamma function.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} x\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} a\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {Complex}\n\t */\n\tstatic gammainc(x, a, tail) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst a_ = Complex._toDouble(a);\n\t\tconst tail_ = isStr(tail) ? tail : \"lower\";\n\t\treturn new Complex(StatisticsTool.gammainc(X, a_, tail_));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of the gamma distribution.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} x\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} k - Shape parameter.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} s - Scale parameter.\n\t * @returns {Complex}\n\t */\n\tstatic gampdf(x, k, s) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst k_ = Complex._toDouble(k);\n\t\tconst s_ = Complex._toDouble(s);\n\t\treturn new Complex(StatisticsTool.gampdf(X, k_, s_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of gamma distribution.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} x\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} k - Shape parameter.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} s - Scale parameter.\n\t * @returns {Complex}\n\t */\n\tstatic gamcdf(x, k, s) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst k_ = Complex._toDouble(k);\n\t\tconst s_ = Complex._toDouble(s);\n\t\treturn new Complex(StatisticsTool.gamcdf(X, k_, s_));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of gamma distribution.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} p\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} k - Shape parameter.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} s - Scale parameter.\n\t * @returns {Complex}\n\t */\n\tstatic gaminv(p, k, s) {\n\t\tconst p_ = Complex._toDouble(p);\n\t\tconst k_ = Complex._toDouble(k);\n\t\tconst s_ = Complex._toDouble(s);\n\t\treturn new Complex(StatisticsTool.gaminv(p_, k_, s_));\n\t}\n\n\t/**\n\t * Beta function.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} x\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} y\n\t * @returns {Complex}\n\t */\n\tstatic beta(x, y) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst y_ = Complex._toDouble(y);\n\t\treturn new Complex(StatisticsTool.beta(X, y_));\n\t}\n\n\t/**\n\t * Incomplete beta function.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} x\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} a\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} b\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {Complex}\n\t */\n\tstatic betainc(x, a, b, tail) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst a_ = Complex._toDouble(a);\n\t\tconst b_ = Complex._toDouble(b);\n\t\tconst tail_ = isStr(tail) ? tail : \"lower\";\n\t\treturn new Complex(StatisticsTool.betainc(X, a_, b_, tail_));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of beta distribution.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} x\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} a\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} b\n\t * @returns {Complex}\n\t */\n\tstatic betapdf(x, a, b) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst a_ = Complex._toDouble(a);\n\t\tconst b_ = Complex._toDouble(b);\n\t\treturn new Complex(StatisticsTool.betapdf(X, a_, b_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of beta distribution.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} x\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} a\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} b\n\t * @returns {Complex}\n\t */\n\tstatic betacdf(x, a, b) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst a_ = Complex._toDouble(a);\n\t\tconst b_ = Complex._toDouble(b);\n\t\treturn new Complex(StatisticsTool.betacdf(X, a_, b_));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of beta distribution.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} p\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} a\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} b\n\t * @returns {Complex}\n\t */\n\tstatic betainv(p, a, b) {\n\t\tconst p_ = Complex._toDouble(p);\n\t\tconst a_ = Complex._toDouble(a);\n\t\tconst b_ = Complex._toDouble(b);\n\t\treturn new Complex(StatisticsTool.betainv(p_, a_, b_));\n\t}\n\n\t/**\n\t * Factorial function, x!.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} n\n\t * @returns {Complex}\n\t */\n\tstatic factorial(n) {\n\t\treturn new Complex(StatisticsTool.factorial(Complex._toDouble(n)));\n\t}\n\n\t/**\n\t * Binomial coefficient, number of all combinations, nCk.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} n\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} k\n\t * @returns {Complex}\n\t */\n\tstatic nchoosek(n, k) {\n\t\tconst n_ = Complex._toDouble(n);\n\t\tconst k_ = Complex._toDouble(k);\n\t\treturn new Complex(StatisticsTool.nchoosek(n_, k_));\n\t}\n\t\n\t/**\n\t * Error function.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} x\n\t * @returns {Complex}\n\t */\n\tstatic erf(x) {\n\t\tconst X = Complex._toDouble(x);\n\t\treturn new Complex(StatisticsTool.erf(X));\n\t}\n\n\t/**\n\t * Complementary error function.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} x\n\t * @returns {Complex}\n\t */\n\tstatic erfc(x) {\n\t\tconst X = Complex._toDouble(x);\n\t\treturn new Complex(StatisticsTool.erfc(X));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of normal distribution.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} x\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [u=0.0] - Average value.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [s=1.0] - Variance value.\n\t * @returns {Complex}\n\t */\n\tstatic normpdf(x, u, s) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst u_ = u !== undefined ? Complex._toDouble(u) : 0.0;\n\t\tconst s_ = s !== undefined ? Complex._toDouble(s) : 1.0;\n\t\treturn new Complex(StatisticsTool.normpdf(X, u_, s_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of normal distribution.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} x\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [u=0.0] - Average value.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [s=1.0] - Variance value.\n\t * @returns {Complex}\n\t */\n\tstatic normcdf(x, u, s) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst u_ = u !== undefined ? Complex._toDouble(u) : 0.0;\n\t\tconst s_ = s !== undefined ? Complex._toDouble(s) : 1.0;\n\t\treturn new Complex(StatisticsTool.normcdf(X, u_, s_));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of normal distribution.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} x\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [u=0.0] - Average value.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [s=1.0] - Variance value.\n\t * @returns {Complex}\n\t */\n\tstatic norminv(x, u, s) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst u_ = u !== undefined ? Complex._toDouble(u) : 0.0;\n\t\tconst s_ = s !== undefined ? Complex._toDouble(s) : 1.0;\n\t\treturn new Complex(StatisticsTool.norminv(X, u_, s_));\n\t}\n\t\n\t/**\n\t * Probability density function (PDF) of Student's t-distribution.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} x\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} v - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\tstatic tpdf(x, v) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst v_ = Complex._toDouble(v);\n\t\treturn new Complex(StatisticsTool.tpdf(X, v_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} t\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} v - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\tstatic tcdf(t, v) {\n\t\tconst t_ = Complex._toDouble(t);\n\t\tconst v_ = Complex._toDouble(v);\n\t\treturn new Complex(StatisticsTool.tcdf(t_, v_));\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} p\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} v - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\tstatic tinv(p, v) {\n\t\tconst p_ = Complex._toDouble(p);\n\t\tconst v_ = Complex._toDouble(v);\n\t\treturn new Complex(StatisticsTool.tinv(p_, v_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} t\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} v - The degrees of freedom. (DF)\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} tails - Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)\n\t * @returns {Complex}\n\t */\n\tstatic tdist(t, v, tails) {\n\t\tconst t_ = Complex._toDouble(t);\n\t\tconst v_ = Complex._toDouble(v);\n\t\tconst tails_ = Complex._toInteger(tails);\n\t\treturn new Complex(StatisticsTool.tdist(t_, v_, tails_));\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} p\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} v - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\tstatic tinv2(p, v) {\n\t\tconst p_ = Complex._toDouble(p);\n\t\tconst v_ = Complex._toDouble(v);\n\t\treturn new Complex(StatisticsTool.tinv2(p_, v_));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of chi-square distribution.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} x\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} k - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\tstatic chi2pdf(x, k) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst k_ = Complex._toDouble(k);\n\t\treturn new Complex(StatisticsTool.chi2pdf(X, k_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of chi-square distribution.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} x\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} k - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\tstatic chi2cdf(x, k) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst k_ = Complex._toDouble(k);\n\t\treturn new Complex(StatisticsTool.chi2cdf(X, k_));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of chi-square distribution.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} p\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} k - The degrees of freedom. (DF)\n\t * @returns {Complex}\n\t */\n\tstatic chi2inv(p, k) {\n\t\tconst p_ = Complex._toDouble(p);\n\t\tconst k_ = Complex._toDouble(k);\n\t\treturn new Complex(StatisticsTool.chi2inv(p_, k_));\n\t}\n\n\t/**\n\t * Probability density function (PDF) of F-distribution.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} x\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} d1 - The degree of freedom of the molecules.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} d2 - The degree of freedom of the denominator\n\t * @returns {Complex}\n\t */\n\tstatic fpdf(x, d1, d2) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst d1_ = Complex._toDouble(d1);\n\t\tconst d2_ = Complex._toDouble(d2);\n\t\treturn new Complex(StatisticsTool.fpdf(X, d1_, d2_));\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of F-distribution.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} x\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} d1 - The degree of freedom of the molecules.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} d2 - The degree of freedom of the denominator\n\t * @returns {Complex}\n\t */\n\tstatic fcdf(x, d1, d2) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst d1_ = Complex._toDouble(d1);\n\t\tconst d2_ = Complex._toDouble(d2);\n\t\treturn new Complex(StatisticsTool.fcdf(X, d1_, d2_));\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of F-distribution.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} p\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} d1 - The degree of freedom of the molecules.\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} d2 - The degree of freedom of the denominator\n\t * @returns {Complex}\n\t */\n\tstatic finv(p, d1, d2) {\n\t\tconst p_ = Complex._toDouble(p);\n\t\tconst d1_ = Complex._toDouble(d1);\n\t\tconst d2_ = Complex._toDouble(d2);\n\t\treturn new Complex(StatisticsTool.finv(p_, d1_, d2_));\n\t}\n\n}\n\n/**\n * Class for statistical processing for Matrix class.\n */\nexport default class Statistics {\n\n\t/**\n\t * Log-gamma function.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @returns {Matrix}\n\t */\n\tstatic gammaln(x) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.gammaln(num);\n\t\t});\n\t}\n\n\t/**\n\t * Gamma function.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @returns {Matrix}\n\t */\n\tstatic gamma(x) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.gamma(num);\n\t\t});\n\t}\n\n\t/**\n\t * Incomplete gamma function.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {Matrix}\n\t */\n\tstatic gammainc(x, a, tail) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst a_ = Matrix._toDouble(a);\n\t\tconst tail_ = isStr(tail) ? tail : \"lower\";\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.gammainc(num, a_, tail_);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of the gamma distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - Shape parameter.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} s - Scale parameter.\n\t * @returns {Matrix}\n\t */\n\tstatic gampdf(x, k, s) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst k_ = Matrix._toDouble(k);\n\t\tconst s_ = Matrix._toDouble(s);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.gampdf(num, k_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of gamma distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - Shape parameter.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} s - Scale parameter.\n\t * @returns {Matrix}\n\t */\n\tstatic gamcdf(x, k, s) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst k_ = Matrix._toDouble(k);\n\t\tconst s_ = Matrix._toDouble(s);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.gamcdf(num, k_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of gamma distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - Shape parameter.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} s - Scale parameter.\n\t * @returns {Matrix}\n\t */\n\tstatic gaminv(x, k, s) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst k_ = Matrix._toDouble(k);\n\t\tconst s_ = Matrix._toDouble(s);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.gaminv(num, k_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * Beta function.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} y\n\t * @returns {Matrix}\n\t */\n\tstatic beta(x, y) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst y_ = Matrix._toDouble(y);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.beta(num, y_);\n\t\t});\n\t}\n\t\n\t/**\n\t * Incomplete beta function.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} b\n\t * @param {string} [tail=\"lower\"] - lower (default) , \"upper\"\n\t * @returns {Matrix}\n\t */\n\tstatic betainc(x, a, b, tail) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst a_ = Matrix._toDouble(a);\n\t\tconst b_ = Matrix._toDouble(b);\n\t\tconst tail_ = isStr(tail) ? tail : \"lower\";\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.betainc(num, a_, b_, tail_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of beta distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} b\n\t * @returns {Matrix}\n\t */\n\tstatic betacdf(x, a, b) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst a_ = Matrix._toDouble(a);\n\t\tconst b_ = Matrix._toDouble(b);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.betacdf(num, a_, b_);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of beta distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} b\n\t * @returns {Matrix}\n\t */\n\tstatic betapdf(x, a, b) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst a_ = Matrix._toDouble(a);\n\t\tconst b_ = Matrix._toDouble(b);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.betapdf(num, a_, b_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of beta distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} b\n\t * @returns {Matrix}\n\t */\n\tstatic betainv(x, a, b) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst a_ = Matrix._toDouble(a);\n\t\tconst b_ = Matrix._toDouble(b);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.betainv(num, a_, b_);\n\t\t});\n\t}\n\n\t/**\n\t * Factorial function, x!.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @returns {Matrix}\n\t */\n\tstatic factorial(x) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.factorial(num);\n\t\t});\n\t}\n\t\n\t/**\n\t * Binomial coefficient, number of all combinations, nCk.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k\n\t * @returns {Matrix}\n\t */\n\tstatic nchoosek(x, k) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst k_ = Matrix._toDouble(k);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.nchoosek(num, k_);\n\t\t});\n\t}\n\t\n\t/**\n\t * Error function.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @returns {Matrix}\n\t */\n\tstatic erf(x) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.erf(num);\n\t\t});\n\t}\n\n\t/**\n\t * Complementary error function.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @returns {Matrix}\n\t */\n\tstatic erfc(x) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.erfc(num);\n\t\t});\n\t}\n\t\n\t/**\n\t * Probability density function (PDF) of normal distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [u=0.0] - Average value.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [s=1.0] - Variance value.\n\t * @returns {Matrix}\n\t */\n\tstatic normpdf(x, u, s) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst u_ = u !== undefined ? Matrix._toDouble(u) : 0.0;\n\t\tconst s_ = s !== undefined ? Matrix._toDouble(s) : 1.0;\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.normpdf(num, u_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of normal distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [u=0.0] - Average value.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [s=1.0] - Variance value.\n\t * @returns {Matrix}\n\t */\n\tstatic normcdf(x, u, s) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst u_ = u !== undefined ? Matrix._toDouble(u) : 0.0;\n\t\tconst s_ = s !== undefined ? Matrix._toDouble(s) : 1.0;\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.normcdf(num, u_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of normal distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [u=0.0] - Average value.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [s=1.0] - Variance value.\n\t * @returns {Matrix}\n\t */\n\tstatic norminv(x, u, s) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst u_ = u !== undefined ? Matrix._toDouble(u) : 0.0;\n\t\tconst s_ = s !== undefined ? Matrix._toDouble(s) : 1.0;\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.norminv(num, u_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of Student's t-distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\tstatic tpdf(x, v) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst v_ = Matrix._toDouble(v);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.tpdf(num, v_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\tstatic tcdf(x, v) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst v_ = Matrix._toDouble(v);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.tcdf(num, v_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\tstatic tinv(x, v) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst v_ = Matrix._toDouble(v);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.tinv(num, v_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - The degrees of freedom. (DF)\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} tails - Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)\n\t * @returns {Matrix}\n\t */\n\tstatic tdist(x, v, tails) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst v_ = Matrix._toDouble(v);\n\t\tconst tails_ = Matrix._toDouble(tails);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.tdist(num, v_, tails_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\tstatic tinv2(x, v) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst v_ = Matrix._toDouble(v);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.tinv2(num, v_);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of chi-square distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\tstatic chi2pdf(x, k) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst k_ = Matrix._toDouble(k);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.chi2pdf(num, k_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of chi-square distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\tstatic chi2cdf(x, k) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst k_ = Matrix._toDouble(k);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.chi2cdf(num, k_);\n\t\t});\n\t}\n\t\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of chi-square distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - The degrees of freedom. (DF)\n\t * @returns {Matrix}\n\t */\n\tstatic chi2inv(x, k) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst k_ = Matrix._toDouble(k);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.chi2inv(num, k_);\n\t\t});\n\t}\n\n\t/**\n\t * Probability density function (PDF) of F-distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d1 - The degree of freedom of the molecules.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d2 - The degree of freedom of the denominator\n\t * @returns {Matrix}\n\t */\n\tstatic fpdf(x, d1, d2) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst d1_ = Matrix._toDouble(d1);\n\t\tconst d2_ = Matrix._toDouble(d2);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.fpdf(num, d1_, d2_);\n\t\t});\n\t}\n\n\t/**\n\t * Cumulative distribution function (CDF) of F-distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d1 - The degree of freedom of the molecules.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d2 - The degree of freedom of the denominator\n\t * @returns {Matrix}\n\t */\n\tstatic fcdf(x, d1, d2) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst d1_ = Matrix._toDouble(d1);\n\t\tconst d2_ = Matrix._toDouble(d2);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.fcdf(num, d1_, d2_);\n\t\t});\n\t}\n\n\t/**\n\t * Inverse function of cumulative distribution function (CDF) of F-distribution.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d1 - The degree of freedom of the molecules.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d2 - The degree of freedom of the denominator\n\t * @returns {Matrix}\n\t */\n\tstatic finv(x, d1, d2) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst d1_ = Matrix._toDouble(d1);\n\t\tconst d2_ = Matrix._toDouble(d2);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.finv(num, d1_, d2_);\n\t\t});\n\t}\n\t\n\t/**\n\t * Maximum number.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {StatisticsSettings} [type]\n\t * @returns {Matrix} max([A, B])\n\t */\n\tstatic max(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst main = function(data) {\n\t\t\tlet x = data[0];\n\t\t\tfor(let i = 1; i < data.length; i++) {\n\t\t\t\tif(x.compareTo(data[i]) < 0) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [x];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\t\n\t/**\n\t * Minimum number.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {StatisticsSettings} [type]\n\t * @returns {Matrix} min([A, B])\n\t */\n\tstatic min(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst main = function(data) {\n\t\t\tlet x = data[0];\n\t\t\tfor(let i = 1; i < data.length; i++) {\n\t\t\t\tif(x.compareTo(data[i]) > 0) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [x];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Sum.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {StatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic sum(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst main = function(data) {\n\t\t\t// カハンの加算アルゴリズム\n\t\t\tlet sum = Complex.ZERO;\n\t\t\tlet delta = Complex.ZERO;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst new_number = data[i].add(delta);\n\t\t\t\tconst new_sum = sum.add(new_number);\n\t\t\t\tdelta = new_sum.sub(sum).sub(new_number);\n\t\t\t\tsum = new_sum;\n\t\t\t}\n\t\t\treturn [sum];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Arithmetic average.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {StatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic mean(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst main = function(data) {\n\t\t\t// カハンの加算アルゴリズム\n\t\t\tlet sum = Complex.ZERO;\n\t\t\tlet delta = Complex.ZERO;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst new_number = data[i].add(delta);\n\t\t\t\tconst new_sum = sum.add(new_number);\n\t\t\t\tdelta = new_sum.sub(sum).sub(new_number);\n\t\t\t\tsum = new_sum;\n\t\t\t}\n\t\t\treturn [sum.div(data.length)];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Product of array elements.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {StatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic prod(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst main = function(data) {\n\t\t\tlet x = Complex.ONE;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tx = x.mul(data[i]);\n\t\t\t}\n\t\t\treturn [x];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Geometric mean.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {StatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic geomean(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst main = function(data) {\n\t\t\tlet x = Complex.ONE;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tx = x.mul(data[i]);\n\t\t\t}\n\t\t\treturn [x.pow(Complex.create(data.length).inv())];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\t\n\t/**\n\t * Median.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {StatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic median(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst compare = function(a, b){\n\t\t\treturn a.compareTo(b);\n\t\t};\n\t\tconst main = function(data) {\n\t\t\tdata.sort(compare);\n\t\t\tlet y;\n\t\t\tif((data.length % 2) === 1) {\n\t\t\t\ty = data[Math.floor(data.length / 2)];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst x1 = data[Math.floor(data.length / 2) - 1];\n\t\t\t\tconst x2 = data[Math.floor(data.length / 2)];\n\t\t\t\ty = x1.add(x2).div(Complex.TWO);\n\t\t\t}\n\t\t\treturn [y];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Mode.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {StatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic mode(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst compare = function(a, b){\n\t\t\treturn a.compareTo(b);\n\t\t};\n\t\tconst main = function(data) {\n\t\t\tdata.sort(compare);\n\t\t\tconst map = {};\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst str = data[i].real + \" \" + data[i].imag;\n\t\t\t\tif(!map[str]) {\n\t\t\t\t\tmap[str] = {\n\t\t\t\t\t\tcomplex : data[i],\n\t\t\t\t\t\tvalue : 1\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmap[str].value++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet max_complex = Complex.ZERO;\n\t\t\tlet max_number = Number.NEGATIVE_INFINITY;\n\t\t\tfor(const key in map) {\n\t\t\t\tconst tgt = map[key];\n\t\t\t\tif(tgt.value > max_number) {\n\t\t\t\t\tmax_number\t= tgt.value;\n\t\t\t\t\tmax_complex\t= tgt.complex;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [max_complex];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Moment.\n\t * - Moment of order n. Equivalent to the definition of variance at 2.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {number} nth_order\n\t * @param {StatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic moment(x, nth_order, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst M = Statistics.mean(X);\n\t\t// 補正値 0(不偏分散), 1(標本分散)。規定値は、標本分散とする\n\t\tconst cor = !(type && typeof type.correction === \"number\") ? 1: Matrix._toDouble(type.correction);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst order = Matrix._toComplex(nth_order);\n\t\tlet col = 0;\n\t\tconst main = function(data) {\n\t\t\tlet mean;\n\t\t\tif(M.isScalar()) {\n\t\t\t\tmean = M.scalar;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmean = M.getComplex(col++);\n\t\t\t}\n\t\t\tlet x = Complex.ZERO;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\t// 計算方法について\n\t\t\t\t// ・複素数は、ノルムをとらずに複素数用のpowを使用したほうがいいのか\n\t\t\t\t// ・分散と同様にnormで計算したほうがいいのか\n\t\t\t\t// 複素数でのモーメントの定義がないため不明であるが、\n\t\t\t\t// 分散を拡張した考えであれば、normをとった累乗のほうが良いと思われる。\n\t\t\t\tconst a = data[i].sub(mean);\n\t\t\t\tx = x.add(a.pow(order));\n\t\t\t}\n\t\t\tif(data.length === 1) {\n\t\t\t\treturn [x.div(data.length)];\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn [x.div(data.length - 1 + cor)];\n\t\t\t}\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Variance.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {StatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic var(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst M = Statistics.mean(X);\n\t\t// 補正値 0(不偏分散), 1(標本分散)。規定値は、不偏分散とする\n\t\tconst cor = !(type && typeof type.correction === \"number\") ? 0: Matrix._toDouble(type.correction);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tlet col = 0;\n\t\tconst main = function(data) {\n\t\t\tif(data.length === 1) {\n\t\t\t\t// 要素が1であれば、分散は0固定\n\t\t\t\treturn [Complex.ZERO];\n\t\t\t}\n\t\t\tconst mean = M.getComplex(col++);\n\t\t\t// 分散は、ノルムの2乗で計算するため必ず実数になる。\n\t\t\tlet x = 0;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst a = data[i].sub(mean).norm;\n\t\t\t\tx += a * a;\n\t\t\t}\n\t\t\treturn [Complex.create(x / (data.length - 1 + cor))];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * Standard deviation.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {StatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic std(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\t// 補正値 0(不偏分散), 1(標本分散)。規定値は、不偏分散とする\n\t\tconst cor = !(type && typeof type.correction === \"number\") ? 0: Matrix._toDouble(type.correction);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Statistics.var(X, { correction : cor, dimension : dim });\n\t\tM._each(function(num) {\n\t\t\treturn num.sqrt();\n\t\t});\n\t\treturn M;\n\t}\n\n\t/**\n\t * Mean absolute deviation.\n\t * - The \"algorithm\" can choose \"0/mean\"(default) and \"1/median\".\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {?string|?number} [algorithm]\n\t * @param {StatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic mad(x, algorithm, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst alg = !algorithm ? \"mean\" : (typeof algorithm === \"string\" ? algorithm : Matrix._toInteger(algorithm));\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tif((alg === \"mean\") || (alg === 0)) {\n\t\t\treturn Statistics.mean(X.sub(Statistics.mean(X, {dimension : dim} )).abs(), {dimension : dim});\n\t\t}\n\t\telse if((alg === \"median\") || (alg === 1)) {\n\t\t\treturn Statistics.median(X.sub(Statistics.median(X, {dimension : dim} )).abs(), {dimension : dim});\n\t\t}\n\t\telse {\n\t\t\tthrow \"mad unsupported argument \" + alg;\n\t\t}\n\t}\n\n\t/**\n\t * Skewness.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {StatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic skewness(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\t// 補正値 0(不偏), 1(標本)。規定値は、標本とする\n\t\tconst cor = !(type && typeof type.correction === \"number\") ? 1: Matrix._toDouble(type.correction);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst order = Statistics.moment(X, 3, { correction : cor, dimension : dim });\n\t\tconst std = Statistics.std(X, { correction : cor, dimension : dim });\n\t\tif(cor === 1) {\n\t\t\treturn order.dotdiv(std.dotpow(3));\n\t\t}\n\t\telse {\n\t\t\treturn order.dotdiv(std.dotpow(3)).dotmul(2);\n\t\t}\n\t}\n\n\t/**\n\t * Covariance matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {StatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic cov(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\t// 補正値 0(不偏分散), 1(標本分散)。規定値は、不偏分散とする\n\t\tconst cor = !(type && typeof type.correction === \"number\") ? 0: Matrix._toDouble(type.correction);\n\t\tif(X.isVector()) {\n\t\t\treturn Statistics.var(X, type);\n\t\t}\n\t\tconst correction = X.row_length === 1 ? 1 : cor;\n\t\tconst arr = X.matrix_array;\n\t\tconst mean = Statistics.mean(X).matrix_array[0];\n\t\t// 上三角行列、対角行列\n\t\tconst y = new Array(X.column_length);\n\t\tfor(let a = 0; a < X.column_length; a++) {\n\t\t\tconst a_mean = mean[a];\n\t\t\ty[a] = new Array(X.column_length);\n\t\t\tfor(let b = a; b < X.column_length; b++) {\n\t\t\t\tconst b_mean = mean[b];\n\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\tfor(let row = 0; row < X.row_length; row++) {\n\t\t\t\t\tsum = sum.add((arr[row][a].sub(a_mean)).dot(arr[row][b].sub(b_mean)));\n\t\t\t\t}\n\t\t\t\ty[a][b] = sum.div(X.row_length - 1 + correction);\n\t\t\t}\n\t\t}\n\t\t// 下三角行列を作る\n\t\tfor(let row = 1; row < y[0].length; row++) {\n\t\t\tfor(let col = 0; col < row; col++) {\n\t\t\t\ty[row][col] = y[col][row];\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * The samples are normalized to a mean value of 0, standard deviation of 1.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {StatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic normalize(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst mean_zero = X.sub(Statistics.mean(X, type));\n\t\tconst std_one = mean_zero.dotdiv(Statistics.std(mean_zero, type));\n\t\treturn std_one;\n\t}\n\n\t/**\n\t * Correlation matrix.\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {StatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic corrcoef(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\treturn Statistics.cov(Statistics.normalize(X, type), type);\n\t}\n\n\t/**\n\t * Sort.\n\t * - The \"order\" can choose \"ascend\"(default) and \"descend\".\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {string} [order]\n\t * @param {StatisticsSettings} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic sort(x, order, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst order_type = !order ? \"ascend\" : order;\n\t\tlet compare;\n\t\tif(order_type === \"ascend\") {\n\t\t\tcompare = function(a, b){\n\t\t\t\treturn a.compareTo(b);\n\t\t\t};\n\t\t}\n\t\telse {\n\t\t\tcompare = function(a, b){\n\t\t\t\treturn b.compareTo(a);\n\t\t\t};\n\t\t}\n\t\tconst main = function(data) {\n\t\t\tdata.sort(compare);\n\t\t\treturn data;\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/tools/Statistics.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 842,
    "kind": "typedef",
    "name": "StatisticsSettings",
    "memberof": "src/math/tools/Statistics.mjs",
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsSettings",
    "access": "public",
    "description": "Collection of calculation settings for matrix.\n- Available options vary depending on the method.",
    "properties": [
      {
        "nullable": true,
        "types": [
          "string",
          "?number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"auto\"",
        "defaultRaw": "auto",
        "name": "dimension",
        "description": "Calculation direction. 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\"."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "correction",
        "description": "Correction value. For statistics. 0(unbiased), 1(sample)."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "StatisticsSettings"
    }
  },
  {
    "__docId__": 843,
    "kind": "class",
    "name": "StatisticsTool",
    "memberof": "src/math/tools/Statistics.mjs",
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Statistics.mjs",
    "importStyle": null,
    "description": "Collection of statistical functions using real numbers.",
    "lineNumber": 30,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 844,
    "kind": "method",
    "name": "gammaln",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.gammaln",
    "access": "public",
    "description": "Log-gamma function.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 845,
    "kind": "method",
    "name": "q_gamma",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.q_gamma",
    "access": "public",
    "description": "Incomplete gamma function upper side.",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "gammaln_a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 846,
    "kind": "method",
    "name": "p_gamma",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.p_gamma",
    "access": "public",
    "description": "Incomplete gamma function lower side.",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "gammaln_a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 847,
    "kind": "method",
    "name": "gamma",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.gamma",
    "access": "public",
    "description": "Gamma function.",
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 848,
    "kind": "method",
    "name": "gammainc",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.gammainc",
    "access": "public",
    "description": "Incomplete gamma function.",
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 849,
    "kind": "method",
    "name": "gampdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.gampdf",
    "access": "public",
    "description": "Probability density function (PDF) of the gamma distribution.",
    "lineNumber": 185,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 850,
    "kind": "method",
    "name": "gamcdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.gamcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of gamma distribution.",
    "lineNumber": 199,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 851,
    "kind": "method",
    "name": "gaminv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.gaminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of gamma distribution.",
    "lineNumber": 210,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 852,
    "kind": "method",
    "name": "beta",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.beta",
    "access": "public",
    "description": "Beta function.",
    "lineNumber": 249,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 853,
    "kind": "method",
    "name": "p_beta",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.p_beta",
    "access": "public",
    "description": "Incomplete beta function lower side.",
    "lineNumber": 261,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 854,
    "kind": "method",
    "name": "q_beta",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.q_beta",
    "access": "public",
    "description": "Incomplete beta function upper side.",
    "lineNumber": 312,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 855,
    "kind": "method",
    "name": "betainc",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.betainc",
    "access": "public",
    "description": "Incomplete beta function.",
    "lineNumber": 324,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 856,
    "kind": "method",
    "name": "isInteger",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.isInteger",
    "access": "public",
    "description": "Return true if the value is integer.",
    "lineNumber": 345,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 857,
    "kind": "method",
    "name": "betapdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.betapdf",
    "access": "public",
    "description": "Probability density function (PDF) of beta distribution.",
    "lineNumber": 356,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 858,
    "kind": "method",
    "name": "betacdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.betacdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of beta distribution.",
    "lineNumber": 376,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 859,
    "kind": "method",
    "name": "betainv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.betainv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of beta distribution.",
    "lineNumber": 387,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 860,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.factorial",
    "access": "public",
    "description": "Factorial function, x!.",
    "lineNumber": 437,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 861,
    "kind": "method",
    "name": "nchoosek",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.nchoosek",
    "access": "public",
    "description": "Binomial coefficient, number of all combinations, nCk.",
    "lineNumber": 453,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} nCk"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "nCk"
    }
  },
  {
    "__docId__": 862,
    "kind": "method",
    "name": "erf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.erf",
    "access": "public",
    "description": "Error function.",
    "lineNumber": 462,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 863,
    "kind": "method",
    "name": "erfc",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.erfc",
    "access": "public",
    "description": "Complementary error function.",
    "lineNumber": 471,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 864,
    "kind": "method",
    "name": "normpdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.normpdf",
    "access": "public",
    "description": "Probability density function (PDF) of normal distribution.",
    "lineNumber": 530,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 865,
    "kind": "method",
    "name": "normcdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.normcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of normal distribution.",
    "lineNumber": 545,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 866,
    "kind": "method",
    "name": "norminv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.norminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of normal distribution.",
    "lineNumber": 558,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "Probability."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 867,
    "kind": "method",
    "name": "tpdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.tpdf",
    "access": "public",
    "description": "Probability density function (PDF) of Student's t-distribution.",
    "lineNumber": 596,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "T-value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 868,
    "kind": "method",
    "name": "tcdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.tcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution.",
    "lineNumber": 608,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "T-value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 869,
    "kind": "method",
    "name": "tinv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.tinv",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution.",
    "lineNumber": 620,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "Probability."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 870,
    "kind": "method",
    "name": "tdist",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.tdist",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.",
    "lineNumber": 647,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "T-value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "tails",
        "description": "Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 871,
    "kind": "method",
    "name": "tinv2",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.tinv2",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.",
    "lineNumber": 657,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "Probability."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 872,
    "kind": "method",
    "name": "chi2pdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.chi2pdf",
    "access": "public",
    "description": "Probability density function (PDF) of chi-square distribution.",
    "lineNumber": 667,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 873,
    "kind": "method",
    "name": "chi2cdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.chi2cdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of chi-square distribution.",
    "lineNumber": 685,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 874,
    "kind": "method",
    "name": "chi2inv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.chi2inv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of chi-square distribution.",
    "lineNumber": 695,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "Probability."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 875,
    "kind": "method",
    "name": "fpdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.fpdf",
    "access": "public",
    "description": "Probability density function (PDF) of F-distribution.",
    "lineNumber": 706,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 876,
    "kind": "method",
    "name": "fcdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.fcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of F-distribution.",
    "lineNumber": 727,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 877,
    "kind": "method",
    "name": "finv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.finv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of F-distribution.",
    "lineNumber": 738,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "Probability."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 878,
    "kind": "function",
    "name": "isStr",
    "memberof": "src/math/tools/Statistics.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~isStr",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Statistics.mjs",
    "importStyle": null,
    "description": "typeof this === string",
    "lineNumber": 749,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 879,
    "kind": "class",
    "name": "StatisticsComplex",
    "memberof": "src/math/tools/Statistics.mjs",
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Statistics.mjs",
    "importStyle": null,
    "description": "Collection of statistical functions used from the Complex class.",
    "lineNumber": 757,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 880,
    "kind": "method",
    "name": "gammaln",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.gammaln",
    "access": "public",
    "description": "Log-gamma function.",
    "lineNumber": 764,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 881,
    "kind": "method",
    "name": "gamma",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.gamma",
    "access": "public",
    "description": "Gamma function.",
    "lineNumber": 773,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 882,
    "kind": "method",
    "name": "gammainc",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.gammainc",
    "access": "public",
    "description": "Incomplete gamma function.",
    "lineNumber": 784,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 883,
    "kind": "method",
    "name": "gampdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.gampdf",
    "access": "public",
    "description": "Probability density function (PDF) of the gamma distribution.",
    "lineNumber": 798,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 884,
    "kind": "method",
    "name": "gamcdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.gamcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of gamma distribution.",
    "lineNumber": 812,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 885,
    "kind": "method",
    "name": "gaminv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.gaminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of gamma distribution.",
    "lineNumber": 826,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 886,
    "kind": "method",
    "name": "beta",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.beta",
    "access": "public",
    "description": "Beta function.",
    "lineNumber": 839,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 887,
    "kind": "method",
    "name": "betainc",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.betainc",
    "access": "public",
    "description": "Incomplete beta function.",
    "lineNumber": 853,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 888,
    "kind": "method",
    "name": "betapdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.betapdf",
    "access": "public",
    "description": "Probability density function (PDF) of beta distribution.",
    "lineNumber": 868,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 889,
    "kind": "method",
    "name": "betacdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.betacdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of beta distribution.",
    "lineNumber": 882,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 890,
    "kind": "method",
    "name": "betainv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.betainv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of beta distribution.",
    "lineNumber": 896,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 891,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.factorial",
    "access": "public",
    "description": "Factorial function, x!.",
    "lineNumber": 908,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 892,
    "kind": "method",
    "name": "nchoosek",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.nchoosek",
    "access": "public",
    "description": "Binomial coefficient, number of all combinations, nCk.",
    "lineNumber": 918,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 893,
    "kind": "method",
    "name": "erf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.erf",
    "access": "public",
    "description": "Error function.",
    "lineNumber": 929,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 894,
    "kind": "method",
    "name": "erfc",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.erfc",
    "access": "public",
    "description": "Complementary error function.",
    "lineNumber": 939,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 895,
    "kind": "method",
    "name": "normpdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.normpdf",
    "access": "public",
    "description": "Probability density function (PDF) of normal distribution.",
    "lineNumber": 951,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 896,
    "kind": "method",
    "name": "normcdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.normcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of normal distribution.",
    "lineNumber": 965,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 897,
    "kind": "method",
    "name": "norminv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.norminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of normal distribution.",
    "lineNumber": 979,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 898,
    "kind": "method",
    "name": "tpdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.tpdf",
    "access": "public",
    "description": "Probability density function (PDF) of Student's t-distribution.",
    "lineNumber": 992,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 899,
    "kind": "method",
    "name": "tcdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.tcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution.",
    "lineNumber": 1004,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 900,
    "kind": "method",
    "name": "tinv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.tinv",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution.",
    "lineNumber": 1016,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 901,
    "kind": "method",
    "name": "tdist",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.tdist",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.",
    "lineNumber": 1029,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tails",
        "description": "Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 902,
    "kind": "method",
    "name": "tinv2",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.tinv2",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.",
    "lineNumber": 1042,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 903,
    "kind": "method",
    "name": "chi2pdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.chi2pdf",
    "access": "public",
    "description": "Probability density function (PDF) of chi-square distribution.",
    "lineNumber": 1054,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 904,
    "kind": "method",
    "name": "chi2cdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.chi2cdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of chi-square distribution.",
    "lineNumber": 1066,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 905,
    "kind": "method",
    "name": "chi2inv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.chi2inv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of chi-square distribution.",
    "lineNumber": 1078,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 906,
    "kind": "method",
    "name": "fpdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.fpdf",
    "access": "public",
    "description": "Probability density function (PDF) of F-distribution.",
    "lineNumber": 1091,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 907,
    "kind": "method",
    "name": "fcdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.fcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of F-distribution.",
    "lineNumber": 1105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 908,
    "kind": "method",
    "name": "finv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.finv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of F-distribution.",
    "lineNumber": 1119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 909,
    "kind": "class",
    "name": "Statistics",
    "memberof": "src/math/tools/Statistics.mjs",
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/tools/Statistics.mjs",
    "importStyle": "Statistics",
    "description": "Class for statistical processing for Matrix class.",
    "lineNumber": 1131,
    "interface": false
  },
  {
    "__docId__": 910,
    "kind": "method",
    "name": "gammaln",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.gammaln",
    "access": "public",
    "description": "Log-gamma function.",
    "lineNumber": 1138,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 911,
    "kind": "method",
    "name": "gamma",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.gamma",
    "access": "public",
    "description": "Gamma function.",
    "lineNumber": 1150,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 912,
    "kind": "method",
    "name": "gammainc",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.gammainc",
    "access": "public",
    "description": "Incomplete gamma function.",
    "lineNumber": 1164,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 913,
    "kind": "method",
    "name": "gampdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.gampdf",
    "access": "public",
    "description": "Probability density function (PDF) of the gamma distribution.",
    "lineNumber": 1180,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 914,
    "kind": "method",
    "name": "gamcdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.gamcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of gamma distribution.",
    "lineNumber": 1196,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 915,
    "kind": "method",
    "name": "gaminv",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.gaminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of gamma distribution.",
    "lineNumber": 1212,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "Shape parameter."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 916,
    "kind": "method",
    "name": "beta",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.beta",
    "access": "public",
    "description": "Beta function.",
    "lineNumber": 1227,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 917,
    "kind": "method",
    "name": "betainc",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.betainc",
    "access": "public",
    "description": "Incomplete beta function.",
    "lineNumber": 1243,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower (default) , \"upper\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 918,
    "kind": "method",
    "name": "betacdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.betacdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of beta distribution.",
    "lineNumber": 1260,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 919,
    "kind": "method",
    "name": "betapdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.betapdf",
    "access": "public",
    "description": "Probability density function (PDF) of beta distribution.",
    "lineNumber": 1276,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 920,
    "kind": "method",
    "name": "betainv",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.betainv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of beta distribution.",
    "lineNumber": 1292,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 921,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.factorial",
    "access": "public",
    "description": "Factorial function, x!.",
    "lineNumber": 1306,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 922,
    "kind": "method",
    "name": "nchoosek",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.nchoosek",
    "access": "public",
    "description": "Binomial coefficient, number of all combinations, nCk.",
    "lineNumber": 1319,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 923,
    "kind": "method",
    "name": "erf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.erf",
    "access": "public",
    "description": "Error function.",
    "lineNumber": 1332,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 924,
    "kind": "method",
    "name": "erfc",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.erfc",
    "access": "public",
    "description": "Complementary error function.",
    "lineNumber": 1344,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 925,
    "kind": "method",
    "name": "normpdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.normpdf",
    "access": "public",
    "description": "Probability density function (PDF) of normal distribution.",
    "lineNumber": 1358,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 926,
    "kind": "method",
    "name": "normcdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.normcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of normal distribution.",
    "lineNumber": 1374,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 927,
    "kind": "method",
    "name": "norminv",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.norminv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of normal distribution.",
    "lineNumber": 1390,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "Average value."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "Variance value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 928,
    "kind": "method",
    "name": "tpdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.tpdf",
    "access": "public",
    "description": "Probability density function (PDF) of Student's t-distribution.",
    "lineNumber": 1405,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 929,
    "kind": "method",
    "name": "tcdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.tcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution.",
    "lineNumber": 1419,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 930,
    "kind": "method",
    "name": "tinv",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.tinv",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution.",
    "lineNumber": 1433,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 931,
    "kind": "method",
    "name": "tdist",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.tdist",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of Student's t-distribution that can specify tail.",
    "lineNumber": 1448,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tails",
        "description": "Tail. (1 = the one-tailed distribution, 2 =  the two-tailed distribution.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 932,
    "kind": "method",
    "name": "tinv2",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.tinv2",
    "access": "public",
    "description": "Inverse of cumulative distribution function (CDF) of Student's t-distribution in two-sided test.",
    "lineNumber": 1463,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 933,
    "kind": "method",
    "name": "chi2pdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.chi2pdf",
    "access": "public",
    "description": "Probability density function (PDF) of chi-square distribution.",
    "lineNumber": 1477,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 934,
    "kind": "method",
    "name": "chi2cdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.chi2cdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of chi-square distribution.",
    "lineNumber": 1491,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 935,
    "kind": "method",
    "name": "chi2inv",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.chi2inv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of chi-square distribution.",
    "lineNumber": 1505,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "The degrees of freedom. (DF)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 936,
    "kind": "method",
    "name": "fpdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.fpdf",
    "access": "public",
    "description": "Probability density function (PDF) of F-distribution.",
    "lineNumber": 1520,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 937,
    "kind": "method",
    "name": "fcdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.fcdf",
    "access": "public",
    "description": "Cumulative distribution function (CDF) of F-distribution.",
    "lineNumber": 1536,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 938,
    "kind": "method",
    "name": "finv",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.finv",
    "access": "public",
    "description": "Inverse function of cumulative distribution function (CDF) of F-distribution.",
    "lineNumber": 1552,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "The degree of freedom of the molecules."
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "The degree of freedom of the denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 939,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.max",
    "access": "public",
    "description": "Maximum number.",
    "lineNumber": 1567,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 940,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.min",
    "access": "public",
    "description": "Minimum number.",
    "lineNumber": 1588,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 941,
    "kind": "method",
    "name": "sum",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.sum",
    "access": "public",
    "description": "Sum.",
    "lineNumber": 1609,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 942,
    "kind": "method",
    "name": "mean",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.mean",
    "access": "public",
    "description": "Arithmetic average.",
    "lineNumber": 1633,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 943,
    "kind": "method",
    "name": "prod",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.prod",
    "access": "public",
    "description": "Product of array elements.",
    "lineNumber": 1657,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 944,
    "kind": "method",
    "name": "geomean",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.geomean",
    "access": "public",
    "description": "Geometric mean.",
    "lineNumber": 1676,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 945,
    "kind": "method",
    "name": "median",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.median",
    "access": "public",
    "description": "Median.",
    "lineNumber": 1695,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 946,
    "kind": "method",
    "name": "mode",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.mode",
    "access": "public",
    "description": "Mode.",
    "lineNumber": 1723,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 947,
    "kind": "method",
    "name": "moment",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.moment",
    "access": "public",
    "description": "Moment.\n- Moment of order n. Equivalent to the definition of variance at 2.",
    "lineNumber": 1766,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nth_order",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 948,
    "kind": "method",
    "name": "var",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.var",
    "access": "public",
    "description": "Variance.",
    "lineNumber": 1808,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 949,
    "kind": "method",
    "name": "std",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.std",
    "access": "public",
    "description": "Standard deviation.",
    "lineNumber": 1838,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 950,
    "kind": "method",
    "name": "mad",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.mad",
    "access": "public",
    "description": "Mean absolute deviation.\n- The \"algorithm\" can choose \"0/mean\"(default) and \"1/median\".",
    "lineNumber": 1858,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "string",
          "?number"
        ],
        "spread": false,
        "optional": true,
        "name": "algorithm",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 951,
    "kind": "method",
    "name": "skewness",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.skewness",
    "access": "public",
    "description": "Skewness.",
    "lineNumber": 1879,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 952,
    "kind": "method",
    "name": "cov",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.cov",
    "access": "public",
    "description": "Covariance matrix.",
    "lineNumber": 1900,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 953,
    "kind": "method",
    "name": "normalize",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.normalize",
    "access": "public",
    "description": "The samples are normalized to a mean value of 0, standard deviation of 1.",
    "lineNumber": 1939,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 954,
    "kind": "method",
    "name": "corrcoef",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.corrcoef",
    "access": "public",
    "description": "Correlation matrix.",
    "lineNumber": 1952,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 955,
    "kind": "method",
    "name": "sort",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.sort",
    "access": "public",
    "description": "Sort.\n- The \"order\" can choose \"ascend\"(default) and \"descend\".",
    "lineNumber": 1965,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "order",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StatisticsSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "kind": "index",
    "content": "# konpeito\n[![Build Status](https://travis-ci.org/natade-jp/konpeito.svg?branch=master)](https://travis-ci.org/natade-jp/konpeito)\n[![ESDoc coverage badge](https://natade-jp.github.io/konpeito/docs/badge.svg)](https://natade-jp.github.io/konpeito/docs/)\n![MIT License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat)\n\n\"konpeito\" is a library to \"compute\". :)\n\n## What\n- The library for math calculations.\n- When calculating, use method chain.\n- Coding in ES6, and published ES6 modules and UMD.\n- [API reference is complete](https://natade-jp.github.io/konpeito/docs/).\n\n## Features\nThis library has 4 functions.\n- BigInteger\n- BigDecimal\n- Fraction\n- Matrix\n\nHas the following features.\n- BigDecimal and Fraction are constructed by BigInteger.\n- Matrix is constructed by array of Complex.\n- Matrix can't use huge real numbers like BigInteger or BigDecimal, but they are powerful. Initialization can be described as Scilab, Octave, MATLAB.\n\nPlease check the console and main.mjs.\n- [BigDecimal](https://natade-jp.github.io/konpeito/html/examples/demos/BigDecimal/)\n- [BigInteger](https://natade-jp.github.io/konpeito/html/examples/demos/BigInteger/)\n- [Matrix](https://natade-jp.github.io/konpeito/html/examples/demos/Matrix/)\n- [UMD](https://natade-jp.github.io/konpeito/html/examples/demos/UMD/)\n\n## Install for node.js\n\n1. This library can be installed using [npm](https://www.npmjs.com/package/konpeito).\n```\nnpm install konpeito\n```\n\n2. Then you can include it in your code:\n```\nvar konpeito = require(\"konpeito\");\n```\n\nIf you want to use in the ES6 module, please execute with the following command.\n```\nnode --experimental-modules main.mjs\n```\n\n## Install for browser\n\n1. Download the [zip](https://github.com/natade-jp/konpeito/archive/master.zip) by [GitHub](https://github.com/natade-jp/konpeito).\n\n2. Please use mjs file when using ES6 modules. And use js file when using UMD.\n- `./build/konpeito.module.min.mjs`\n- `./build/konpeito.umd.min.js`\n\n### with ES6 module.\n```\n<script type=\"module\" src=\"./main.mjs\" charset=\"utf-8\"></script>\n```\n\n### with UMD\n```\n<script src=\"./konpeito.umd.js\" charset=\"utf-8\"></script>\n<script src=\"./main.js\" charset=\"utf-8\"></script>\n```\n\n## Repository\n- https://github.com/natade-jp/konpeito.git\n\n## Sample\n\n### BigInteger\n- A calculation class for arbitrary-precision integer arithmetic.\n- BigInt of ES2019 is not used.\n\n```\nimport konpeito from \"konpeito.module.min.mjs\";\nconst BigInteger = konpeito.BigInteger;\nconst $ = BigInteger.create;\n\nconsole.log($(\"-1234567890\").mul(\"987654321098765432109876543210\").toString());\nconsole.log($(\"7\").pow(\"50\").toString());\n```\n```\n> -1219326311248285321124828532111263526900\n> 1798465042647412146620280340569649349251249\n```\n\n### BigDecimal\n- A calculation class for arbitrary-precision floating point arithmetic.\n- The calculation uses the BigInteger.\n\n```\nimport konpeito from \"konpeito.module.min.mjs\";\nconst BigDecimal = konpeito.BigDecimal;\nconst MathContext = konpeito.MathContext;\nconst $ = BigDecimal.create;\n\nBigDecimal.setDefaultContext(MathContext.UNLIMITED);\nconsole.log($(\"-123456.7890\").mul(\"987654321098765.432109876543210\").toString());\n```\n```\n> -121932631124828532112.4828532111263526900\n```\n\n### Fraction\n- A calculation class for fractions with infinite precision.\n- The calculation uses the BigInteger.\n\n```\nimport konpeito from \"konpeito.module.min.mjs\";\nconst Fraction = konpeito.Fraction;\nconst $ = Fraction.create;\n\nconsole.log($(\"1/3\").add(\"0.(3)\").mul(10).toString());\n```\n```\n> 20 / 3\n```\n\n### Matrix\n- Matrix is a general-purpose calculation class with signal processing and statistical processing.\n- The calculation uses the Complex.\n- Some methods do not support complex arithmetic.\n\n```\nimport konpeito from \"konpeito.module.min.mjs\";\nconst Matrix = konpeito.Matrix;\nconst $ = Matrix.create;\n\nconsole.log($(\"[1 2;3 4;5 6]\").toString());\nconst USV = $(\"[1 2;3 4;5 6]\").svd();\nconsole.log(USV.U.toString());\nconsole.log(USV.S.toString());\nconsole.log(USV.V.toString());\nconsole.log(USV.U.mul(USV.S).mul(USV.V.T()).toString());\n\nconsole.log($(\"[1+j 2-3j -3 -4]\").fft().toString());\nconsole.log($(\"[1 2 30]\").dct().toString());\n```\n```\n>\n 1  2\n 3  4\n 5  6\n> \n 0.2298 -0.8835  0.4082\n 0.5247 -0.2408 -0.8165\n 0.8196  0.4019  0.4082\n> \n 9.5255  0.0000\n 0.0000  0.5143\n 0.0000  0.0000\n> \n 0.7849  0.6196\n-0.6196  0.7849\n> \n 1.0000  2.0000\n 3.0000  4.0000\n 5.0000  6.0000\n> -4.0000 - 2.0000i  1.0000 - 5.0000i  0.0000 + 4.0000i  7.0000 + 7.0000i\n> 19.0526 -20.5061  11.0227\n```\n",
    "longname": "D:\\JavaScript\\konpeito\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]