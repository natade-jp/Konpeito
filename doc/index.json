[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/konpeito.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport Log from \"./utility/Log.mjs\";\n\n// @ts-ignore\nimport Random from \"./math/tools/Random.mjs\";\n\n// @ts-ignore\nimport RoundingMode from \"./math/context/RoundingMode.mjs\";\n\n// @ts-ignore\nimport MathContext from \"./math/context/MathContext.mjs\";\n\n// @ts-ignore\nimport BigDecimal from \"./math/BigDecimal.mjs\";\n\n// @ts-ignore\nimport BigInteger from \"./math/BigInteger.mjs\";\n\n// @ts-ignore\nimport Complex from \"./math/Complex.mjs\";\n\n// @ts-ignore\nimport Matrix from \"./math/Matrix.mjs\";\n\n/**\n * 計算に利用できるデータを提供するクラス\n * 大まかに、 BigInteger, BigDecimal, Matrix の3つに分かれる。\n * Matrix は、 Complex を包括している。\n * 多倍長整数演算を特化した計算クラスは、 BigInteger 。\n * 任意精度浮動小数点演算を特化した計算クラスは、 BigDecimal 。\n * 信号処理や統計処理等を備えた汎用的な計算クラスは、 Matrix 。\n */\nexport default class konpeito {\n\n\t/**\n\t * フォーマットクラス\n\t * @returns {Log}\n\t * @ignore\n\t */\n\tstatic get Log() {\n\t\treturn Log;\n\t}\n\n\t/**\n\t * 多倍長整数クラス\n\t * @returns {BigInteger}\n\t */\n\tstatic get BigInteger() {\n\t\treturn BigInteger;\n\t}\n\n\t/**\n\t * 任意精度浮動小数点クラス\n\t * @returns {BigDecimal}\n\t */\n\tstatic get BigDecimal() {\n\t\treturn BigDecimal;\n\t}\n\n\t/**\n\t * BigDecimal用の丸め設定クラス\n\t * @returns {RoundingMode}\n\t */\n\tstatic get RoundingMode() {\n\t\treturn RoundingMode;\n\t}\n\n\t/**\n\t * BigDecimal用の環境設定クラス\n\t * @returns {MathContext}\n\t */\n\tstatic get MathContext() {\n\t\treturn MathContext;\n\t}\n\n\t/**\n\t * 複素数クラス\n\t * @returns {Complex}\n\t */\n\tstatic get Complex() {\n\t\treturn Complex;\n\t}\n\n\t/**\n\t * 複素行列クラス\n\t * @returns {Matrix}\n\t */\n\tstatic get Matrix() {\n\t\treturn Matrix;\n\t}\n\n\t/**\n\t * 乱数クラス\n\t * @returns {Random}\n\t */\n\tstatic get Random() {\n\t\treturn Random;\n\t}\n\t\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/konpeito.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "konpeito",
    "memberof": "src/konpeito.mjs",
    "static": true,
    "longname": "src/konpeito.mjs~konpeito",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/konpeito.mjs",
    "importStyle": "konpeito",
    "description": "計算に利用できるデータを提供するクラス\n大まかに、 BigInteger, BigDecimal, Matrix の3つに分かれる。\nMatrix は、 Complex を包括している。\n多倍長整数演算を特化した計算クラスは、 BigInteger 。\n任意精度浮動小数点演算を特化した計算クラスは、 BigDecimal 。\n信号処理や統計処理等を備えた汎用的な計算クラスは、 Matrix 。",
    "lineNumber": 44,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "get",
    "name": "Log",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.Log",
    "access": "public",
    "description": "フォーマットクラス",
    "lineNumber": 51,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Log}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Log"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "get",
    "name": "BigInteger",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.BigInteger",
    "access": "public",
    "description": "多倍長整数クラス",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "get",
    "name": "BigDecimal",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.BigDecimal",
    "access": "public",
    "description": "任意精度浮動小数点クラス",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "get",
    "name": "RoundingMode",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.RoundingMode",
    "access": "public",
    "description": "BigDecimal用の丸め設定クラス",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingMode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingMode"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "get",
    "name": "MathContext",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.MathContext",
    "access": "public",
    "description": "BigDecimal用の環境設定クラス",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "get",
    "name": "Complex",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.Complex",
    "access": "public",
    "description": "複素数クラス",
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "get",
    "name": "Matrix",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.Matrix",
    "access": "public",
    "description": "複素行列クラス",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "get",
    "name": "Random",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.Random",
    "access": "public",
    "description": "乱数クラス",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Random}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Random"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "file",
    "name": "src/math/BigDecimal.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport BigInteger from \"./BigInteger.mjs\";\n\n// @ts-ignore\nimport RoundingMode, {RoundingModeEntity} from \"./context/RoundingMode.mjs\";\n\n// @ts-ignore\nimport MathContext from \"./context/MathContext.mjs\";\n\n/**\n * 初期化するときにcontextを設定しなかった場合のデフォルト値\n */\nlet DEFAULT_CONTEXT = MathContext.DECIMAL128;\n\n/**\n * BigDecimal 内で使用する関数群\n */\nclass DecimalTool {\n\n\t/**\n\t * 文字列から BigDecimal で使用するデータに変換\n\t * @param {string} ntext \n\t * @returns {{scale : number, integer : BigInteger}}\n\t */\n\tstatic ToBigDecimalFromString(ntext) {\n\t\tlet scale = 0;\n\t\tlet buff;\n\t\t// 正規化\n\t\tlet text = ntext.replace(/\\s/g, \"\").toLowerCase();\n\t\t// +-の符号があるか\n\t\tlet number_text = \"\";\n\t\tbuff = text.match(/^[+-]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tif(buff.indexOf(\"-\") !== -1) {\n\t\t\t\tnumber_text += \"-\";\n\t\t\t}\n\t\t}\n\t\t// 整数部があるか\n\t\tbuff = text.match(/^[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tnumber_text += buff;\n\t\t}\n\t\t// 小数部があるか\n\t\tbuff = text.match(/^\\.[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tbuff = buff.substr(1);\n\t\t\tscale = scale + buff.length;\n\t\t\tnumber_text += buff;\n\t\t}\n\t\t// 指数表記があるか\n\t\tbuff = text.match(/^e[+-]?[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0].substr(1);\n\t\t\tscale   = scale - parseInt(buff, 10);\n\t\t}\n\t\treturn {\n\t\t\tscale : scale,\n\t\t\tinteger : new BigInteger([number_text, 10])\n\t\t};\n\t}\n\n\t/**\n\t * 数値から BigDecimal で使用するデータに変換\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} value \n\t * @returns {{scale : number, integer : BigInteger}}\n\t */\n\tstatic ToBigDecimalFromNumber(value) {\n\t\t// 整数か\n\t\tif(value === Math.floor(value)) {\n\t\t\treturn {\n\t\t\t\tscale : 0,\n\t\t\t\tinteger : new BigInteger(value)\n\t\t\t};\n\t\t}\n\t\t// 実数か\n\t\telse {\n\t\t\tlet scale = 0;\n\t\t\tlet x = value;\n\t\t\tfor(let i = 0; i < 10; i++) {\n\t\t\t\tx = x * 10;\n\t\t\t\tscale = scale + 1;\n\t\t\t\tif(x === Math.floor(x)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tscale : scale,\n\t\t\t\tinteger : new BigInteger(x)\n\t\t\t};\n\t\t\t// 今後改善するならば\n\t\t\t// 64ビットの実数型は15桁程度まで正しい\n\t\t\t// 余裕をもって10桁程度までを抜き出すのが良いかと思われる。\n\t\t\t// スケールは右の式から求めて Math.log(x) / Math.log(10)\n\t\t}\n\t}\n\n}\n\n/**\n * 任意精度浮動小数点演算クラス (immutable)\n */\nexport default class BigDecimal {\n\t\n\t/**\n\t * 任意精度浮動小数点を作成\n\t * 配列で設定する場合は、 BigInteger, [スケール値=0], [環境=default], [精度設定=default]\n\t * オブジェクトで設定する場合は、 integer, [scale=0], [default_context=default], [context=default]\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number - 任意精度実数データ\n\t */\n\tconstructor(number) {\n\n\t\t/**\n\t\t * スケール\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis._scale\t= 0;\n\t\t\n\t\t/**\n\t\t * 初期化時に使用したcontext\n\t\t * @private\n\t\t * @type {MathContext}\n\t\t */\n\t\tthis.default_context = DEFAULT_CONTEXT;\n\n\t\tlet context = null;\n\n\t\tif(arguments.length > 1) {\n\t\t\tthrow \"BigDecimal Unsupported argument[\" + arguments.length + \"]\";\n\t\t}\n\t\tif(number instanceof BigDecimal) {\n\n\t\t\t/**\n\t\t\t * 整数部分\n\t\t\t * @private\n\t\t\t * @type {BigInteger}\n\t\t\t */\n\t\t\tthis.integer\t\t\t= number.integer.clone();\n\n\t\t\tthis._scale\t\t\t\t= number._scale;\n\t\t\t\n\t\t\t/**\n\t\t\t * 文字列化した整数部分（キャッシュ用）\n\t\t\t * @private\n\t\t\t * @type {string}\n\t\t\t */\n\t\t\tthis.int_string\t\t\t= number.int_string;\n\n\t\t\tthis.default_context\t= number.default_context;\n\n\t\t}\n\t\telse if(number instanceof BigInteger) {\n\t\t\tthis.integer\t= number.clone();\n\t\t}\n\t\telse if(typeof number === \"number\") {\n\t\t\tconst data = DecimalTool.ToBigDecimalFromNumber(number);\n\t\t\tthis.integer\t= data.integer;\n\t\t\tthis._scale\t\t= data.scale;\n\t\t}\n\t\telse if(number instanceof Array) {\n\t\t\tif(number.length >= 1) {\n\t\t\t\tif(!(typeof number[0] === \"string\" || number[0] instanceof String)) {\n\t\t\t\t\tthis.integer = new BigInteger(number[0]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// 1番目が文字列の場合は、文字列用の設定初期化を行う\n\t\t\t\t\tconst data = DecimalTool.ToBigDecimalFromString(number[0]);\n\t\t\t\t\tthis.integer\t= data.integer;\n\t\t\t\t\tthis._scale\t\t= data.scale;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(number.length >= 2) {\n\t\t\t\t// スケール値を省略しているかどうかを、数値かどうかで判定している。\n\t\t\t\tif(typeof number[1] === \"number\" || number[1] instanceof Number) {\n\t\t\t\t\tthis._scale\t= number[1];\n\t\t\t\t\tif(number.length >= 3) {\n\t\t\t\t\t\tthis.default_context = number[2];\n\t\t\t\t\t}\n\t\t\t\t\tif(number.length >= 4) {\n\t\t\t\t\t\tcontext = number[3];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(number.length >= 2) {\n\t\t\t\t\t\tthis.default_context = number[1];\n\t\t\t\t\t}\n\t\t\t\t\tif(number.length >= 3) {\n\t\t\t\t\t\tcontext = number[2];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(typeof number === \"string\") {\n\t\t\tconst data = DecimalTool.ToBigDecimalFromString(number);\n\t\t\tthis.integer\t= data.integer;\n\t\t\tthis._scale\t\t= data.scale;\n\t\t}\n\t\telse if((number instanceof Object) && (number.scale !== undefined && number.default_context !== undefined)) {\n\t\t\tthis.integer\t= new BigInteger(number.integer);\n\t\t\tif(number.scale) {\n\t\t\t\tthis._scale = number.scale;\n\t\t\t}\n\t\t\tif(number.default_context) {\n\t\t\t\tthis.default_context = number.default_context;\n\t\t\t}\n\t\t\tif(number.context) {\n\t\t\t\tcontext = number.context;\n\t\t\t}\n\t\t}\n\t\telse if(number instanceof Object) {\n\t\t\tconst data = DecimalTool.ToBigDecimalFromString(number.toString());\n\t\t\tthis.integer\t= data.integer;\n\t\t\tthis._scale\t\t= data.scale;\n\t\t}\n\t\telse {\n\t\t\tthrow \"BigDecimal Unsupported argument \" + arguments;\n\t\t}\n\t\t// データを正規化\n\t\tif(context) {\n\t\t\tconst newbigdecimal = this.round(context);\n\t\t\tthis.integer\t= newbigdecimal.integer;\n\t\t\tthis._scale\t\t= newbigdecimal._scale;\n\t\t\tdelete this.int_string;\n\t\t}\n\t\t\n\t\t// データが正しいかチェックする\n\t\tif((!(this.integer instanceof BigInteger)) || (!(this.default_context instanceof MathContext))) {\n\t\t\tthrow \"BigDecimal Unsupported argument \" + arguments;\n\t\t}\n\t}\n\n\t/**\n\t * BigDecimal を作成\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number - 任意精度実数データ\n\t * @returns {BigDecimal}\n\t */\n\tstatic create(number) {\n\t\tif(number instanceof BigDecimal) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new BigDecimal(number);\n\t\t}\n\t}\n\n\t/**\n\t * 指定した数値から BigDecimal 型に変換\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} x \n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} [scale] \n\t * @returns {BigDecimal}\n\t */\n\tstatic valueOf(x, scale) {\n\t\tif(arguments.length === 1) {\n\t\t\treturn new BigDecimal(x);\n\t\t}\n\t\telse {\n\t\t\treturn new BigDecimal([x, scale]);\n\t\t}\n\t}\n\n\t/**\n\t * BigDecimal を作成\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @returns {BigDecimal}\n\t * @private\n\t */\n\tstatic _toBigDecimal(number) {\n\t\tif(number instanceof BigDecimal) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new BigDecimal(number);\n\t\t}\n\t}\n\n\t/**\n\t * BigInteger を作成\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @returns {BigInteger}\n\t * @private\n\t */\n\tstatic _toBigInteger(number) {\n\t\tif(number instanceof BigInteger) {\n\t\t\treturn number;\n\t\t}\n\t\telse if(number instanceof BigDecimal) {\n\t\t\treturn number.toBigInteger();\n\t\t}\n\t\telse {\n\t\t\treturn new BigInteger(number);\n\t\t}\n\t}\n\n\t/**\n\t * 実数を作成\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toFloat(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn number;\n\t\t}\n\t\telse if(number instanceof BigDecimal) {\n\t\t\treturn number.doubleValue;\n\t\t}\n\t\telse {\n\t\t\treturn (new BigDecimal(number)).doubleValue;\n\t\t}\n\t}\n\n\t/**\n\t * 整数を作成\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toInteger(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn number | 0;\n\t\t}\n\t\telse if(number instanceof BigInteger) {\n\t\t\treturn number.intValue;\n\t\t}\n\t\telse {\n\t\t\treturn (new BigInteger(number)).intValue;\n\t\t}\n\t}\n\n\t/**\n\t * 符号を除いた文字列を作成\n\t * キャッシュがなければ作成し、キャッシュがあればそれを返す\n\t * @returns {string} \n\t */\n\t_getUnsignedIntegerString() {\n\t\t// キャッシュする\n\t\tif(typeof this.int_string === \"undefined\") {\n\t\t\tthis.int_string = this.integer.toString(10).replace(/^-/, \"\");\n\t\t}\n\t\treturn this.int_string;\n\t}\n\n\t/**\n\t * ディープコピー\n\t * @returns {BigDecimal} \n\t */\n\tclone() {\n\t\treturn new BigDecimal(this);\n\t}\n\t\n\t/**\n\t * 倍率\n\t * @returns {number} \n\t */\n\tscale() {\n\t\treturn this._scale;\n\t}\n\n\t/**\n\t * 符号値\n\t * 1, -1, 0の場合は0を返す\n\t * @returns {number}\n\t */\n\tsignum() {\n\t\treturn this.integer.signum();\n\t}\n\n\t/**\n\t * 符号値\n\t * 1, -1, 0の場合は0を返す\n\t * @returns {number}\n\t */\n\tsign() {\n\t\treturn this.signum();\n\t}\n\n\t/**\n\t * 精度\n\t * @returns {number} \n\t */\n\tprecision() {\n\t\treturn this._getUnsignedIntegerString().length;\n\t}\n\n\t/**\n\t * 指数表記部分を取り除いた整数\n\t * @returns {BigInteger} \n\t */\n\tunscaledValue() {\n\t\treturn new BigInteger(this.integer);\n\t}\n\n\t/**\n\t * 科学的表記法による文字列化\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} e_len - 指数部の桁数\n\t * @returns {string} \n\t */\n\ttoScientificNotation(e_len) {\n\t\tconst e\t\t= BigDecimal._toInteger(e_len);\n\t\tconst text\t= this._getUnsignedIntegerString();\n\t\tlet s\t\t= this.scale();\n\t\tconst x\t\t= [];\n\t\tlet i, k;\n\t\t// -\n\t\tif(this.signum() === -1) {\n\t\t\tx[x.length] = \"-\";\n\t\t}\n\t\t// 表示上の桁数\n\t\ts = - e - s;\n\t\t// 小数点が付かない\n\t\tif(s >= 0) {\n\t\t\tx[x.length] = text;\n\t\t\tfor(i = 0; i < s; i++) {\n\t\t\t\tx[x.length] = \"0\";\n\t\t\t}\n\t\t}\n\t\t// 小数点が付く\n\t\telse {\n\t\t\tk = this.precision() + s;\n\t\t\tif(0 < k) {\n\t\t\t\tx[x.length] = text.substring(0, k);\n\t\t\t\tx[x.length] = \".\";\n\t\t\t\tx[x.length] = text.substring(k, text.length);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tk = - k;\n\t\t\t\tx[x.length] = \"0.\";\n\t\t\t\tfor(i = 0; i < k; i++) {\n\t\t\t\t\tx[x.length] = \"0\";\n\t\t\t\t}\n\t\t\t\tx[x.length] = text;\n\t\t\t}\n\t\t}\n\t\tx[x.length] = \"E\";\n\t\tif(e >= 0) {\n\t\t\tx[x.length] = \"+\";\n\t\t}\n\t\tx[x.length] = e;\n\t\treturn x.join(\"\");\n\t}\n\n\t/**\n\t * 文字列化\n\t * 指数が不要の場合は指数表記なし\n\t * @returns {string} \n\t */\n\ttoString() {\n\t\t// 「調整された指数」\n\t\tconst x = - this.scale() + (this.precision() - 1);\n\t\t// スケールが 0 以上で、「調整された指数」が -6 以上\n\t\tif((this.scale() >= 0) && (x >= -6)) {\n\t\t\treturn this.toPlainString();\n\t\t}\n\t\telse {\n\t\t\treturn this.toScientificNotation(x);\n\t\t}\n\t}\n\n\t/**\n\t * 技術表記法による文字列化\n\t * 指数が不要の場合は指数表記なし\n\t * @returns {string} \n\t */\n\ttoEngineeringString() {\n\t\t// 「調整された指数」\n\t\tconst x = - this.scale() + (this.precision() - 1);\n\t\t// スケールが 0 以上で、「調整された指数」が -6 以上\n\t\tif((this.scale() >= 0) && (x >= -6)) {\n\t\t\treturn this.toPlainString();\n\t\t}\n\t\telse {\n\t\t\t// 0 でない値の整数部が 1 〜 999 の範囲に収まるように調整\n\t\t\treturn this.toScientificNotation(Math.floor(x / 3) * 3);\n\t\t}\n\t}\n\n\t/**\n\t * 指数表記なしの文字列化\n\t * @returns {string} \n\t */\n\ttoPlainString() {\n\t\t// スケールの変換なし\n\t\tif(this.scale() === 0) {\n\t\t\tif(this.signum() < 0) {\n\t\t\t\treturn \"-\" + this._getUnsignedIntegerString();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this._getUnsignedIntegerString();\n\t\t\t}\n\t\t}\n\t\t// 指数0で文字列を作成後、Eの後ろの部分をとっぱらう\n\t\tconst text = this.toScientificNotation(0);\n\t\treturn text.match(/^[^E]*/)[0];\n\t}\n\n\t/**\n\t * 設定された精度で表すことができる最も小さな値\n\t * @returns {BigDecimal} \n\t */\n\tulp() {\n\t\treturn new BigDecimal([BigInteger.ONE, this.scale(), this.default_context]);\n\t}\n\n\t/**\n\t * スケールの再設定\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} new_scale - 新しいスケール\n\t * @param {RoundingModeEntity} [rounding_mode=RoundingMode.UNNECESSARY] - 精度を変換する際の丸め方\n\t * @param {MathContext} [mc] - 切り替え先の設定（これのみ変更する場合は、roundを使用すること）\n\t * @returns {BigDecimal} \n\t */\n\tsetScale(new_scale, rounding_mode, mc) {\n\t\tconst newScale = BigDecimal._toInteger(new_scale);\n\t\tif(this.scale() === newScale) {\n\t\t\t// scaleが同一なので処理の必要なし\n\t\t\treturn(this.clone());\n\t\t}\n\t\tconst roundingMode = (rounding_mode !== undefined) ? RoundingMode.valueOf(rounding_mode) : RoundingMode.UNNECESSARY;\n\t\tconst context = (mc !== undefined) ? mc : this.default_context;\n\t\t// 文字列を扱ううえで、符号があるとやりにくいので外しておく\n\t\tlet text\t\t= this._getUnsignedIntegerString();\n\t\tconst sign\t\t= this.signum();\n\t\tconst sign_text\t= sign >= 0 ? \"\" : \"-\";\n\t\t// scale の誤差\n\t\t// 0 以上なら 0 を加えればいい。0未満なら0を削るか、四捨五入など丸めを行う\n\t\tconst delta\t\t= newScale - this.scale();\t// この桁分増やすといい\n\t\tif(0 <= delta) {\n\t\t\t// 0を加える\n\t\t\tlet i;\n\t\t\tfor(i = 0; i < delta; i++) {\n\t\t\t\ttext = text + \"0\";\n\t\t\t}\n\t\t\treturn new BigDecimal([new BigInteger(sign_text + text), newScale, context]);\n\t\t}\n\t\tconst keta = text.length + delta;\t\t// 最終的な桁数\n\t\tconst keta_marume = keta + 1;\n\t\tif(keta <= 0) {\n\t\t\t// 指定した scale では設定できない場合\n\t\t\t// 例えば \"0.1\".setScale(-2), \"10\".setScale(-3) としても表すことは不可能であるため、\n\t\t\t// sign（-1, 0, +1）のどれかの数値を使用して丸める\n\t\t\tconst outdata = (sign + roundingMode.getAddNumber(sign)) / 10;\n\t\t\t// 上記の式は、CEILINGなら必ず1、正でCEILINGなら1、負でFLOORなら1、それ以外は0となり、\n\t\t\t// さらに元々の数値が 0 なら 0、切り捨て不能なら例外が返る計算式である。\n\t\t\t// これは Java の動作をまねています。\n\t\t\treturn new BigDecimal([new BigInteger(outdata), newScale, context]);\n\t\t}\n\t\t{\n\t\t\t// 0を削るだけで解決する場合\n\t\t\t// 単純な切捨て(0を削るのみ)\n\t\t\tconst zeros\t\t\t= text.match(/0+$/);\n\t\t\tconst zero_length\t\t= (zeros !== null) ? zeros[0].length : 0;\n\t\t\tif(( (zero_length + delta) >= 0 ) || (roundingMode === RoundingMode.DOWN)) {\n\t\t\t\treturn new BigDecimal([new BigInteger(sign_text + text.substring(0, keta)), newScale, context]);\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\t// 丸め計算で解決する場合\n\t\t\t// 12345 -> '123'45\n\t\t\ttext = text.substring(0, keta_marume);\n\t\t\t// 丸め計算に必要な切り取る桁数(後ろの1～2桁を取得)\n\t\t\tconst cutsize = text.length > 1 ? 2 : 1;\n\t\t\t// '123'45 -> 1'23'4\n\t\t\tconst number = parseInt(text.substring(text.length - cutsize, text.length)) * sign;\n\t\t\t// 「元の数」と「丸めに必要な数」を足す\n\t\t\tconst x1 = new BigInteger(sign_text + text);\n\t\t\tconst x2 = new BigInteger(roundingMode.getAddNumber(number));\n\t\t\ttext = x1.add(x2).toString();\n\t\t\t// 丸め後の桁数に戻して\n\t\t\treturn new BigDecimal([new BigInteger(text.substring(0, text.length - 1)), newScale, context]);\n\t\t}\n\t}\n\n\t/**\n\t * 環境設定を切り替える\n\t * @param {MathContext} mc - 切り替え先の設定\n\t * @returns {BigDecimal} \n\t */\n\tround(mc) {\n\t\tif(!(mc instanceof MathContext)) {\n\t\t\tthrow \"not MathContext\";\n\t\t}\n\t\tconst newPrecision\t= mc.getPrecision();\n\t\tconst delta\t\t\t= newPrecision - this.precision();\n\t\tif((delta === 0)||(newPrecision === 0)) {\n\t\t\treturn this.clone();\n\t\t}\n\t\tconst newBigDecimal = this.setScale( this.scale() + delta, mc.getRoundingMode(), mc);\n\t\t/* 精度を上げる必要があるため、0を加えた場合 */\n\t\tif(delta > 0) {\n\t\t\treturn newBigDecimal;\n\t\t}\n\t\t/* 精度を下げる必要があるため、丸めた場合は、桁の数が正しいか調べる */\n\t\tif(newBigDecimal.precision() === mc.getPrecision()) {\n\t\t\treturn newBigDecimal;\n\t\t}\n\t\t/* 切り上げなどで桁数が１つ増えた場合 */\n\t\tconst sign_text\t= newBigDecimal.integer.signum() >= 0 ? \"\" : \"-\";\n\t\tconst abs_text\t= newBigDecimal._getUnsignedIntegerString();\n\t\tconst inte_text\t= sign_text + abs_text.substring(0, abs_text.length - 1);\n\t\treturn new BigDecimal([new BigInteger(inte_text), newBigDecimal.scale() - 1, mc]);\n\t}\n\n\t/**\n\t * 絶対値\n\t * @param {MathContext} [mc] - 計算に使用する設定\n\t * @returns {BigDecimal} abs(A)\n\t */\n\tabs(mc) {\n\t\tconst output = this.clone();\n\t\toutput.integer = output.integer.abs();\n\t\treturn (mc === undefined) ? output : output.round(mc);\n\t}\n\n\t/**\n\t * 正数\n\t * @param {MathContext} [mc] - 計算に使用する設定\n\t * @returns {BigDecimal} +A\n\t */\n\tplus(mc) {\n\t\tconst output = this.clone();\n\t\treturn (mc === undefined) ? output : output.round(mc);\n\t}\n\n\t/**\n\t * 負数\n\t * @param {MathContext} [mc] - 計算に使用する設定\n\t * @returns {BigDecimal} -A\n\t */\n\tnegate(mc) {\n\t\tconst output = this.clone();\n\t\toutput.integer = output.integer.negate();\n\t\treturn (mc === undefined) ? output : output.round(mc);\n\t}\n\n\t/**\n\t * 値同士を比較\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @returns {number} A > B ? 1 : (A === B ? 0 : -1)\n\t */\n\tcompareTo(number) {\n\t\tconst src = this;\n\t\tconst tgt = BigDecimal._toBigDecimal(number);\n\t\t// 簡易計算\n\t\t{\n\t\t\tconst src_sign\t= src.signum();\n\t\t\tconst tgt_sign\t= tgt.signum();\n\t\t\tif((src_sign === 0) && (src_sign === tgt_sign)) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse if(src_sign === 0) {\n\t\t\t\treturn - tgt_sign;\n\t\t\t}\n\t\t\telse if(tgt_sign === 0) {\n\t\t\t\treturn src_sign;\n\t\t\t}\n\t\t}\n\t\t// 実際に計算する\n\t\tif(src._scale === tgt._scale) {\n\t\t\treturn src.integer.compareTo(tgt.integer);\n\t\t}\n\t\telse if(src._scale > tgt._scale) {\n\t\t\tconst newdst = tgt.setScale(src._scale);\n\t\t\treturn src.integer.compareTo(newdst.integer);\n\t\t}\n\t\telse {\n\t\t\tconst newsrc = src.setScale(tgt._scale);\n\t\t\treturn newsrc.integer.compareTo(tgt.integer);\n\t\t}\n\t}\n\n\t/**\n\t * 等式\n\t * 精度やスケール含めて等しいかをテストする\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @returns {boolean} A === B\n\t */\n\tequals(number) {\n\t\tif(number instanceof BigDecimal) {\n\t\t\treturn ((this._scale === number._scale) && (this.integer.equals(number.integer)));\n\t\t}\n\t\telse if((typeof number === \"string\") || (number instanceof String)) {\n\t\t\tconst val = BigDecimal._toBigDecimal(number);\n\t\t\treturn ((this._scale === val._scale) && (this.integer.equals(val.integer)));\n\t\t}\n\t\telse {\n\t\t\treturn this.compareTo(number) === 0;\n\t\t}\n\t}\n\n\t/**\n\t * 最大値\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @returns {BigDecimal} max([A, B])\n\t */\n\tmax(number) {\n\t\tconst val = BigDecimal._toBigDecimal(number);\n\t\tif(this.compareTo(val) >= 0) {\n\t\t\treturn this.clone();\n\t\t}\n\t\telse {\n\t\t\treturn val.clone();\n\t\t}\n\t}\n\n\t/**\n\t * 最小値\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @returns {BigDecimal} min([A, B])\n\t */\n\tmin(number) {\n\t\tconst val = BigDecimal._toBigDecimal(number);\n\t\tif(this.compareTo(val) <= 0) {\n\t\t\treturn this.clone();\n\t\t}\n\t\telse {\n\t\t\treturn val.clone();\n\t\t}\n\t}\n\n\t/**\n\t * 精度は変更させずスケールのみを変更させ10の倍数を乗算\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} n \n\t * @returns {BigDecimal} A * 10^floor(n)\n\t */\n\tscaleByPowerOfTen(n) {\n\t\tconst x = BigDecimal._toBigInteger(n);\n\t\tconst output = this.clone();\n\t\toutput._scale = this.scale() - x;\n\t\treturn output;\n\t}\n\n\t/**\n\t * 小数点の位置を左へ移動\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} n \n\t * @returns {BigDecimal} \n\t */\n\tmovePointLeft(n) {\n\t\tconst x = BigDecimal._toBigInteger(n);\n\t\tlet output = this.scaleByPowerOfTen( -x );\n\t\toutput = output.setScale(Math.max(this.scale() + x, 0));\n\t\treturn output;\n\t}\n\n\t/**\n\t * 小数点の位置を右へ移動\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} n \n\t * @returns {BigDecimal} \n\t */\n\tmovePointRight(n) {\n\t\tconst x = BigDecimal._toBigInteger(n);\n\t\tlet output = this.scaleByPowerOfTen( x );\n\t\toutput = output.setScale(Math.max(this.scale() - x, 0));\n\t\treturn output;\n\t}\n\n\t/**\n\t * 数字の右側にある0を取り除き、スケールを正規化\n\t * @returns {BigDecimal} \n\t */\n\tstripTrailingZeros() {\n\t\t// 0をできる限り取り除く\n\t\tconst sign\t\t= this.signum();\n\t\tconst sign_text\t= sign >= 0 ? \"\" : \"-\";\n\t\tconst text\t\t= this.integer.toString(10).replace(/^-/, \"\");\n\t\tconst zeros\t\t= text.match(/0+$/);\n\t\tlet zero_length\t= (zeros !== null) ? zeros[0].length : 0;\n\t\tif(zero_length === text.length) {\n\t\t\t// 全て 0 なら 1 ケタ残す\n\t\t\tzero_length = text.length - 1;\n\t\t}\n\t\tconst newScale\t= this.scale() - zero_length;\n\t\treturn new BigDecimal([new BigInteger(sign_text + text.substring(0, text.length - zero_length)), newScale, this.default_context]);\n\t}\n\n\t/**\n\t * 加算\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、加算先の設定デフォルト値を使用する\n\t * @returns {BigDecimal} A + B\n\t */\n\tadd(number, context) {\n\t\tconst augend = BigDecimal._toBigDecimal(number);\n\t\tconst mc = context ? context : augend.default_context;\n\t\tconst src\t\t\t= this;\n\t\tconst tgt\t\t\t= augend;\n\t\tconst newscale\t= Math.max(src._scale, tgt._scale);\n\t\tif(src._scale === tgt._scale) {\n\t\t\t// 1 e1 + 1 e1 = 1\n\t\t\treturn new BigDecimal([src.integer.add(tgt.integer), newscale, mc, mc]);\n\t\t}\n\t\telse if(src._scale > tgt._scale) {\n\t\t\t// 1 e-2 + 1 e-1\n\t\t\tconst newdst = tgt.setScale(src._scale);\n\t\t\t// 0.01 + 0.10 = 0.11 = 11 e-2\n\t\t\treturn new BigDecimal([src.integer.add(newdst.integer), newscale, mc, mc]);\n\t\t}\n\t\telse {\n\t\t\t// 1 e-1 + 1 e-2\n\t\t\tconst newsrc = src.setScale(tgt._scale);\n\t\t\t// 0.1 + 0.01 = 0.11 = 11 e-2\n\t\t\treturn new BigDecimal([newsrc.integer.add(tgt.integer), newscale, mc, mc]);\n\t\t}\n\t}\n\n\t/**\n\t * 減算\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、減算先の設定デフォルト値を使用する\n\t * @returns {BigDecimal} A - B\n\t */\n\tsubtract(number, context) {\n\t\tconst subtrahend = BigDecimal._toBigDecimal(number);\n\t\tconst mc = context ? context : subtrahend.default_context;\n\t\tconst src\t\t\t= this;\n\t\tconst tgt\t\t\t= subtrahend;\n\t\tconst newscale\t= Math.max(src._scale, tgt._scale);\n\t\tif(src._scale === tgt._scale) {\n\t\t\treturn new BigDecimal([src.integer.subtract(tgt.integer), newscale, mc, mc]);\n\t\t}\n\t\telse if(src._scale > tgt._scale) {\n\t\t\tconst newdst = tgt.setScale(src._scale);\n\t\t\treturn new BigDecimal([src.integer.subtract(newdst.integer), newscale, mc, mc]);\n\t\t}\n\t\telse {\n\t\t\tconst newsrc = src.setScale(tgt._scale);\n\t\t\treturn new BigDecimal([newsrc.integer.subtract(tgt.integer), newscale, mc, mc]);\n\t\t}\n\t}\n\n\t/**\n\t * 減算\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、減算先の設定デフォルト値を使用する\n\t * @returns {BigDecimal} A - B\n\t */\n\tsub(number, context) {\n\t\treturn this.subtract(number, context);\n\t}\n\n\t/**\n\t * 乗算\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、乗算先の設定デフォルト値を使用する\n\t * @returns {BigDecimal} A * B\n\t */\n\tmultiply(number, context) {\n\t\tconst multiplicand = BigDecimal._toBigDecimal(number);\n\t\tconst mc = context ? context : multiplicand.default_context;\n\t\tconst src\t\t\t= this;\n\t\tconst tgt\t\t\t= multiplicand;\n\t\tconst newinteger\t= src.integer.multiply(tgt.integer);\n\t\t// 0.1 * 0.01 = 0.001\n\t\tconst newscale\t= src._scale + tgt._scale;\n\t\treturn new BigDecimal([newinteger, newscale, mc]);\n\t}\n\n\t/**\n\t * 乗算\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、乗算先の設定デフォルト値を使用する\n\t * @returns {BigDecimal} A * B\n\t */\n\tmul(number, context) {\n\t\treturn this.multiply(number, context);\n\t}\n\n\t/**\n\t * 小数点まで求めない割り算\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、割る先の設定デフォルト値を使用する\n\t * @returns {BigDecimal} (int)(A / B)\n\t */\n\tdivideToIntegralValue(number, context) {\n\t\tconst divisor = BigDecimal._toBigDecimal(number);\n\t\tconst mc = context ? context : divisor.default_context;\n\t\tconst getDigit  = function( num ) {\n\t\t\tlet i;\n\t\t\tlet text = \"1\";\n\t\t\tfor(i = 0; i < num; i++) {\n\t\t\t\ttext = text + \"0\";\n\t\t\t}\n\t\t\treturn new BigInteger(text);\n\t\t};\n\t\tif(divisor.compareTo(BigDecimal.ZERO) === 0) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\n\t\t// 1000e0\t\t/\t1e2\t\t\t\t=\t1000e-2\n\t\t// 1000e0\t\t/\t10e1\t\t\t=\t100e-1\n\t\t// 1000e0\t\t/\t100e0\t\t\t=\t10e0\n\t\t// 1000e0\t\t/\t1000e-1\t\t\t=\t1e1\n\t\t// 1000e0\t\t/\t10000e-2\t\t=\t1e1\n\t\t// 1000e0\t\t/\t100000e-3\t\t=\t1e1\n\n\t\t// 10e2\t\t\t/\t100e0\t\t\t=\t1e1\n\t\t// 100e1\t\t/\t100e0\t\t\t=\t1e1\n\t\t// 1000e0\t\t/\t100e0\t\t\t=\t10e0\n\t\t// 10000e-1\t\t/\t100e0\t\t\t=\t100e-1\t\n\t\t// 100000e-2\t/\t100e0\t\t\t=\t1000e-2\n\n\t\tconst src\t\t= this;\n\t\tconst tgt\t\t= divisor;\n\t\tlet src_integer\t= src.integer;\n\t\tlet tgt_integer\t= tgt.integer;\n\t\tconst newScale\t= src._scale - tgt._scale;\n\n\t\t// 100e-2 / 3e-1 = 1 / 0.3 -> 100 / 30\n\t\tif(src._scale > tgt._scale) {\n\t\t\t// src._scale に合わせる\n\t\t\ttgt_integer = tgt_integer.multiply(getDigit(  newScale ));\n\t\t}\n\t\t// 1e-1 / 3e-2 = 0.1 / 0.03 -> 10 / 3\n\t\telse if(src._scale < tgt._scale) {\n\t\t\t// tgt._scale に合わせる\n\t\t\tsrc_integer = src_integer.multiply(getDigit( -newScale ));\n\t\t}\n\n\t\t// とりあえず計算結果だけ作ってしまう\n\t\tconst new_integer\t= src_integer.divide(tgt_integer);\n\t\tconst sign\t\t\t= new_integer.signum();\n\t\tif(sign !== 0) {\n\t\t\tconst text\t= new_integer.toString(10).replace(/^-/, \"\");\n\t\t\t// 指定した桁では表すことができない\n\t\t\tif((mc.getPrecision() !== 0) && (text.length > mc.getPrecision())) {\n\t\t\t\tthrow \"ArithmeticException\";\n\t\t\t}\n\t\t\t// 結果の優先スケール に合わせる (this.scale() - divisor.scale())\n\t\t\tif(text.length <= (-newScale)) {\n\t\t\t\t// 合わせることができないので、0をできる限り削る = stripTrailingZerosメソッド\n\t\t\t\tconst zeros\t\t\t= text.match(/0+$/);\n\t\t\t\tconst zero_length\t= (zeros !== null) ? zeros[0].length : 0;\n\t\t\t\tconst sign_text\t\t= sign >= 0 ? \"\" : \"-\";\n\t\t\t\treturn new BigDecimal([new BigInteger(sign_text + text.substring(0, text.length - zero_length)), -zero_length, mc]);\n\t\t\t}\n\t\t}\n\n\t\tlet output = new BigDecimal(new_integer);\n\t\toutput = output.setScale(newScale, RoundingMode.UP);\n\t\toutput = output.round(mc);\n\t\toutput.default_context = mc;\n\t\treturn output;\n\t}\n\n\t/**\n\t * 割り算と余り\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、割る先の設定デフォルト値を使用する\n\t * @returns {Array<BigDecimal>} [C = (int)(A / B), A - C * B]\n\t */\n\tdivideAndRemainder(number, context) {\n\t\tconst divisor = BigDecimal._toBigDecimal(number);\n\t\tconst mc = context ? context : divisor.default_context;\n\n\t\t// 1000e0\t\t/\t1e2\t\t\t\t=\t1000e-2\t... 0e0\n\t\t// 1000e0\t\t/\t10e1\t\t\t=\t100e-1\t... 0e0\n\t\t// 1000e0\t\t/\t100e0\t\t\t=\t10e0\t... 0e0\n\t\t// 1000e0\t\t/\t1000e-1\t\t\t=\t1e1\t\t... 0e0\n\t\t// 1000e0\t\t/\t10000e-2\t\t=\t1e1\t\t... 0e-1\n\t\t// 1000e0\t\t/\t100000e-3\t\t=\t1e1\t\t... 0e-2\n\n\t\t// 10e2\t\t\t/\t100e0\t\t\t=\t1e1\t\t... 0e1\n\t\t// 100e1\t\t/\t100e0\t\t\t=\t1e1\t\t... 0e1\n\t\t// 1000e0\t\t/\t100e0\t\t\t=\t10e0\t... 0e0\n\t\t// 10000e-1\t\t/\t100e0\t\t\t=\t100e-1\t... 0e-1\n\t\t// 100000e-2\t/\t100e0\t\t\t=\t1000e-2\t... 0e-2\n\n\t\tconst result_divide\t= this.divideToIntegralValue(divisor, mc);\n\t\tconst result_remaind\t= this.subtract(result_divide.multiply(divisor, mc), mc);\n\n\t\tconst output = [result_divide, result_remaind];\n\t\treturn output;\n\t}\n\n\t/**\n\t * 割り算の余り\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、割る先の設定デフォルト値を使用する\n\t * @returns {BigDecimal} A % B\n\t */\n\trem(number, context) {\n\t\treturn this.divideAndRemainder(number, context)[1];\n\t}\n\n\t/**\n\t * 割り算の正の余り\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、割る先の設定デフォルト値を使用する\n\t * @returns {BigDecimal} A mod B\n\t */\n\tmod(number, context) {\n\t\tconst x = this.rem(number, context);\n\t\tif(x.compareTo(BigDecimal.ZERO) < 0) {\n\t\t\treturn x.add(number, context);\n\t\t}\n\t}\n\n\t/**\n\t * 割り算\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @param {{scale: ?number, context: ?MathContext, roundingMode: ?RoundingModeEntity}} [type] - 計算に使用する scale, context, roundingMode を設定する\n\t * @returns {BigDecimal}\n\t */\n\tdivide(number, type) {\n\t\tconst divisor = BigDecimal._toBigDecimal(number);\n\t\tconst src\t\t\t= this;\n\t\tconst tgt\t\t\t= divisor;\n\t\tlet roundingMode\t= null;\n\t\tlet mc\t\t\t\t= null;\n\t\tlet newScale\t\t= 0;\n\t\tlet isPriorityScale\t= false;\n\t\tif(type && type.scale) {\n\t\t\tisPriorityScale\t= false;\n\t\t\tnewScale = type.scale;\n\t\t}\n\t\telse {\n\t\t\tisPriorityScale\t= true;\n\t\t\tif(type && (type.roundingMode || type.context)) {\n\t\t\t\tnewScale = src.scale();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnewScale = src.scale() - tgt.scale();\n\t\t\t}\n\t\t}\n\t\tif(type && type.context) {\n\t\t\troundingMode = type.context.getRoundingMode();\n\t\t\tnewScale = type.context.getPrecision();\n\t\t\tmc = type.context;\n\t\t}\n\t\telse {\n\t\t\tmc = this.default_context;\n\t\t}\n\t\tif(type && type.roundingMode) {\n\t\t\troundingMode = type.roundingMode;\n\t\t}\n\t\telse {\n\t\t\troundingMode = mc.getRoundingMode();\n\t\t}\n\t\t\n\t\tif(tgt.compareTo(BigDecimal.ZERO) === 0) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t\tlet newsrc;\n\t\tconst result_map = [];\n\t\tlet result, result_divide, result_remaind, all_result;\n\t\tall_result = BigDecimal.ZERO;\n\t\tconst precision = mc.getPrecision();\n\t\tconst check_max = precision !== 0 ? (precision + 8) : 0x3FFFF;\n\t\tnewsrc = src;\n\t\tfor(let i = 0; i < check_max; i++) {\n\t\t\tresult = newsrc.divideAndRemainder(tgt, MathContext.UNLIMITED);\n\t\t\tresult_divide\t= result[0];\n\t\t\tresult_remaind\t= result[1];\n\t\t\tall_result = all_result.add(result_divide.scaleByPowerOfTen(-i), MathContext.UNLIMITED);\n\t\t\tif(result_remaind.compareTo(BigDecimal.ZERO) !== 0) {\n\t\t\t\tif(precision === 0) {\t// 精度無限大の場合は、循環小数のチェックが必要\n\t\t\t\t\tif(result_map[result_remaind._getUnsignedIntegerString()]) {\n\t\t\t\t\t\tthrow \"ArithmeticException \" + all_result + \"[\" + result_remaind._getUnsignedIntegerString() + \"]\";\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tresult_map[result_remaind._getUnsignedIntegerString()] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewsrc = result_remaind.scaleByPowerOfTen(1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isPriorityScale) {\n\t\t\t// 優先スケールの場合は、スケールの変更に失敗する可能性あり\n\t\t\ttry {\n\t\t\t\tall_result = all_result.setScale(newScale, roundingMode);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\t// falls through\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tall_result = all_result.setScale(newScale, roundingMode);\n\t\t}\n\t\tall_result = all_result.round(mc);\n\t\treturn all_result;\n\t}\n\n\t/**\n\t * 割り算\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number\n\t * @param {{scale: ?number, context: ?MathContext, roundingMode: ?RoundingModeEntity}} [type] - 計算に使用する scale, context, roundingMode を設定する\n\t * @returns {BigDecimal} A / B\n\t */\n\tdiv(number, type) {\n\t\treturn this.divide(number, type);\n\t}\n\n\t/**\n\t * BigInteger に変換\n\t * @returns {BigInteger}\n\t */\n\ttoBigInteger() {\n\t\tconst x = this.toPlainString().replace(/\\.\\d*$/, \"\");\n\t\treturn new BigInteger(x);\n\t}\n\n\t/**\n\t * BigInteger に変換\n\t * 変換に失敗した場合は例外\n\t * @returns {BigInteger}\n\t */\n\ttoBigIntegerExact() {\n\t\tconst x = this.setScale(0, RoundingMode.UNNECESSARY);\n\t\treturn new BigInteger(x.toPlainString());\n\t}\n\n\t/**\n\t * 32ビット整数に変換\n\t * @returns {number}\n\t */\n\tget intValue() {\n\t\tlet x = this.toBigInteger();\n\t\tx = x.intValue;\n\t\treturn x & 0xFFFFFFFF;\n\t}\n\n\t/**\n\t * 32ビット整数に変換\n\t * 変換に失敗した場合は例外\n\t * @returns {number}\n\t */\n\tget intValueExact() {\n\t\tlet x = this.toBigIntegerExact();\n\t\tx = x.intValue;\n\t\tif((x < -2147483648) || (2147483647 < x)) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 32ビット実数に変換\n\t * @returns {number}\n\t */\n\tget floatValue() {\n\t\tconst p = this.precision();\n\t\tif(MathContext.DECIMAL32.getPrecision() < p) {\n\t\t\treturn(this.signum() >= 0 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY);\n\t\t}\n\t\treturn parseFloat(this.toEngineeringString());\n\t}\n\n\t/**\n\t * 64ビット実数に変換\n\t * @returns {number}\n\t */\n\tget doubleValue() {\n\t\tconst p = this.precision();\n\t\tif(MathContext.DECIMAL64.getPrecision() < p) {\n\t\t\treturn(this.signum() >= 0 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY);\n\t\t}\n\t\treturn parseFloat(this.toEngineeringString());\n\t}\n\n\t/**\n\t * 累乗\n\t * 巨大な乗算をする場合は例外を発生させる\n\t * @param {BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object} number \n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、累乗先の設定デフォルト値を使用する\n\t * @returns {BigDecimal} pow(A, B)\n\t */\n\tpow(number, context) {\n\t\tlet n = BigDecimal._toInteger(number);\n\t\tconst mc = context ? context : this.default_context;\n\t\tif(Math.abs(n) > 999999999) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t\tif((mc.getPrecision() === 0) && (n < 0)) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t\tif((mc.getPrecision() > 0) && (n > mc.getPrecision())) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t\tlet x, y;\n\t\tx = this.clone();\n\t\ty = BigDecimal.ONE;\n\t\twhile(n !== 0) {\n\t\t\tif((n & 1) !== 0) {\n\t\t\t\ty = y.multiply(x, MathContext.UNLIMITED);\n\t\t\t}\n\t\t\tx = x.multiply(x, MathContext.UNLIMITED);\n\t\t\tn >>>= 1;\n\t\t}\n\t\treturn y.round(mc);\n\t}\n\t\n\t/**\n\t * オブジェクトを新規作成時に環境設定を変更しなかった場合に設定されるデフォルト設定\n\t * @param {MathContext} [context=MathContext.DECIMAL128]\n\t */\n\tstatic setDefaultContext(context) {\n\t\tDEFAULT_CONTEXT = context ? context : MathContext.DECIMAL128;\n\t}\n\n\t/**\n\t * オブジェクトを新規作成時に環境設定を変更しなかった場合に設定されるデフォルト設定を取得\n\t * @returns {MathContext}\n\t */\n\tstatic getDefaultContext() {\n\t\treturn DEFAULT_CONTEXT;\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * 0\n\t * @returns {BigDecimal} 0\n\t */\n\tstatic get ZERO() {\n\t\tconst x = new BigDecimal(DEFINE.ZERO);\n\t\tx.default_context = DEFAULT_CONTEXT;\n\t\treturn x;\n\t}\n\n\t/**\n\t * 1\n\t * @returns {BigDecimal} 1\n\t */\n\tstatic get ONE() {\n\t\tconst x = new BigDecimal(DEFINE.ONE);\n\t\tx.default_context = DEFAULT_CONTEXT;\n\t\treturn x;\n\t}\n\t\n\t/**\n\t * 2\n\t * @returns {BigDecimal} 2\n\t */\n\tstatic get TWO() {\n\t\tconst x = new BigDecimal(DEFINE.TWO);\n\t\tx.default_context = DEFAULT_CONTEXT;\n\t\treturn x;\n\t}\n\t\n\t/**\n\t * 10\n\t * @returns {BigDecimal} 10\n\t */\n\tstatic get TEN() {\n\t\tconst x = new BigDecimal(DEFINE.TEN);\n\t\tx.default_context = DEFAULT_CONTEXT;\n\t\treturn x;\n\t}\n\n}\n\n/**\n * 内部で使用する定数値\n */\nconst DEFINE = {\n\tZERO : new BigDecimal(0),\n\tONE : new BigDecimal(1),\n\tTWO : new BigDecimal(2),\n\tTEN : new BigDecimal(10)\n};\n\nBigDecimal.RoundingMode = RoundingMode;\nBigDecimal.MathContext = MathContext;\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/BigDecimal.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 11,
    "kind": "variable",
    "name": "DEFAULT_CONTEXT",
    "memberof": "src/math/BigDecimal.mjs",
    "static": true,
    "longname": "src/math/BigDecimal.mjs~DEFAULT_CONTEXT",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/BigDecimal.mjs",
    "importStyle": null,
    "description": "初期化するときにcontextを設定しなかった場合のデフォルト値",
    "lineNumber": 24,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 12,
    "kind": "class",
    "name": "DecimalTool",
    "memberof": "src/math/BigDecimal.mjs",
    "static": true,
    "longname": "src/math/BigDecimal.mjs~DecimalTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/BigDecimal.mjs",
    "importStyle": null,
    "description": "BigDecimal 内で使用する関数群",
    "lineNumber": 29,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 13,
    "kind": "method",
    "name": "ToBigDecimalFromString",
    "memberof": "src/math/BigDecimal.mjs~DecimalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~DecimalTool.ToBigDecimalFromString",
    "access": "public",
    "description": "文字列から BigDecimal で使用するデータに変換",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{scale : number, integer : BigInteger}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ntext",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{scale : number, integer : BigInteger}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 14,
    "kind": "method",
    "name": "ToBigDecimalFromNumber",
    "memberof": "src/math/BigDecimal.mjs~DecimalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~DecimalTool.ToBigDecimalFromNumber",
    "access": "public",
    "description": "数値から BigDecimal で使用するデータに変換",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{scale : number, integer : BigInteger}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{scale : number, integer : BigInteger}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 15,
    "kind": "class",
    "name": "BigDecimal",
    "memberof": "src/math/BigDecimal.mjs",
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/BigDecimal.mjs",
    "importStyle": "BigDecimal",
    "description": "任意精度浮動小数点演算クラス (immutable)",
    "lineNumber": 119,
    "interface": false
  },
  {
    "__docId__": 16,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#constructor",
    "access": "public",
    "description": "任意精度浮動小数点を作成\n配列で設定する場合は、 BigInteger, [スケール値=0], [環境=default], [精度設定=default]\nオブジェクトで設定する場合は、 integer, [scale=0], [default_context=default], [context=default]",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "任意精度実数データ"
      }
    ]
  },
  {
    "__docId__": 17,
    "kind": "member",
    "name": "_scale",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#_scale",
    "access": "private",
    "description": "スケール",
    "lineNumber": 134,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 18,
    "kind": "member",
    "name": "default_context",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#default_context",
    "access": "private",
    "description": "初期化時に使用したcontext",
    "lineNumber": 141,
    "type": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 19,
    "kind": "member",
    "name": "integer",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#integer",
    "access": "private",
    "description": "整数部分",
    "lineNumber": 155,
    "type": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 21,
    "kind": "member",
    "name": "int_string",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#int_string",
    "access": "private",
    "description": "文字列化した整数部分（キャッシュ用）",
    "lineNumber": 164,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 41,
    "kind": "method",
    "name": "create",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal.create",
    "access": "public",
    "description": "BigDecimal を作成",
    "lineNumber": 254,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "任意精度実数データ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 42,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal.valueOf",
    "access": "public",
    "description": "指定した数値から BigDecimal 型に変換",
    "lineNumber": 269,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "scale",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 43,
    "kind": "method",
    "name": "_toBigDecimal",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal._toBigDecimal",
    "access": "private",
    "description": "BigDecimal を作成",
    "lineNumber": 284,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 44,
    "kind": "method",
    "name": "_toBigInteger",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal._toBigInteger",
    "access": "private",
    "description": "BigInteger を作成",
    "lineNumber": 299,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 45,
    "kind": "method",
    "name": "_toFloat",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal._toFloat",
    "access": "private",
    "description": "実数を作成",
    "lineNumber": 317,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 46,
    "kind": "method",
    "name": "_toInteger",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal._toInteger",
    "access": "private",
    "description": "整数を作成",
    "lineNumber": 335,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 47,
    "kind": "method",
    "name": "_getUnsignedIntegerString",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#_getUnsignedIntegerString",
    "access": "private",
    "description": "符号を除いた文字列を作成\nキャッシュがなければ作成し、キャッシュがあればそれを返す",
    "lineNumber": 352,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 49,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#clone",
    "access": "public",
    "description": "ディープコピー",
    "lineNumber": 364,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 50,
    "kind": "method",
    "name": "scale",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#scale",
    "access": "public",
    "description": "倍率",
    "lineNumber": 372,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "signum",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#signum",
    "access": "public",
    "description": "符号値\n1, -1, 0の場合は0を返す",
    "lineNumber": 381,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "sign",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#sign",
    "access": "public",
    "description": "符号値\n1, -1, 0の場合は0を返す",
    "lineNumber": 390,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "precision",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#precision",
    "access": "public",
    "description": "精度",
    "lineNumber": 398,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "unscaledValue",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#unscaledValue",
    "access": "public",
    "description": "指数表記部分を取り除いた整数",
    "lineNumber": 406,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "toScientificNotation",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#toScientificNotation",
    "access": "public",
    "description": "科学的表記法による文字列化",
    "lineNumber": 415,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "e_len",
        "description": "指数部の桁数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#toString",
    "access": "public",
    "description": "文字列化\n指数が不要の場合は指数表記なし",
    "lineNumber": 464,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "toEngineeringString",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#toEngineeringString",
    "access": "public",
    "description": "技術表記法による文字列化\n指数が不要の場合は指数表記なし",
    "lineNumber": 481,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "toPlainString",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#toPlainString",
    "access": "public",
    "description": "指数表記なしの文字列化",
    "lineNumber": 498,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "ulp",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#ulp",
    "access": "public",
    "description": "設定された精度で表すことができる最も小さな値",
    "lineNumber": 517,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "setScale",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#setScale",
    "access": "public",
    "description": "スケールの再設定",
    "lineNumber": 528,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "new_scale",
        "description": "新しいスケール"
      },
      {
        "nullable": null,
        "types": [
          "RoundingModeEntity"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "RoundingMode.UNNECESSARY",
        "defaultRaw": "RoundingMode.UNNECESSARY",
        "name": "rounding_mode",
        "description": "精度を変換する際の丸め方"
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "切り替え先の設定（これのみ変更する場合は、roundを使用すること）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "round",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#round",
    "access": "public",
    "description": "環境設定を切り替える",
    "lineNumber": 594,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": false,
        "name": "mc",
        "description": "切り替え先の設定"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "abs",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#abs",
    "access": "public",
    "description": "絶対値",
    "lineNumber": 624,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} abs(A)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "計算に使用する設定"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "abs(A)"
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "plus",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#plus",
    "access": "public",
    "description": "正数",
    "lineNumber": 635,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} +A"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "計算に使用する設定"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "+A"
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "negate",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#negate",
    "access": "public",
    "description": "負数",
    "lineNumber": 645,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} -A"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "計算に使用する設定"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A"
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#compareTo",
    "access": "public",
    "description": "値同士を比較",
    "lineNumber": 656,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A > B ? 1 : (A === B ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A > B ? 1 : (A === B ? 0 : -1)"
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#equals",
    "access": "public",
    "description": "等式\n精度やスケール含めて等しいかをテストする",
    "lineNumber": 693,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#max",
    "access": "public",
    "description": "最大値",
    "lineNumber": 711,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#min",
    "access": "public",
    "description": "最小値",
    "lineNumber": 726,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "scaleByPowerOfTen",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#scaleByPowerOfTen",
    "access": "public",
    "description": "精度は変更させずスケールのみを変更させ10の倍数を乗算",
    "lineNumber": 741,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A * 10^floor(n)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A * 10^floor(n)"
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "movePointLeft",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#movePointLeft",
    "access": "public",
    "description": "小数点の位置を左へ移動",
    "lineNumber": 753,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "movePointRight",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#movePointRight",
    "access": "public",
    "description": "小数点の位置を右へ移動",
    "lineNumber": 765,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "stripTrailingZeros",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#stripTrailingZeros",
    "access": "public",
    "description": "数字の右側にある0を取り除き、スケールを正規化",
    "lineNumber": 776,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#add",
    "access": "public",
    "description": "加算",
    "lineNumber": 797,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A + B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、加算先の設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A + B"
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "subtract",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#subtract",
    "access": "public",
    "description": "減算",
    "lineNumber": 827,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、減算先の設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "sub",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#sub",
    "access": "public",
    "description": "減算",
    "lineNumber": 852,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、減算先の設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "multiply",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#multiply",
    "access": "public",
    "description": "乗算",
    "lineNumber": 862,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、乗算先の設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "mul",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#mul",
    "access": "public",
    "description": "乗算",
    "lineNumber": 879,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、乗算先の設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "divideToIntegralValue",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#divideToIntegralValue",
    "access": "public",
    "description": "小数点まで求めない割り算",
    "lineNumber": 889,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} (int)(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、割る先の設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "(int)(A / B)"
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "divideAndRemainder",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#divideAndRemainder",
    "access": "public",
    "description": "割り算と余り",
    "lineNumber": 966,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<BigDecimal>} [C = (int)(A / B), A - C * B]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、割る先の設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<BigDecimal>"
      ],
      "spread": false,
      "description": "[C = (int)(A / B), A - C * B]"
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "rem",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#rem",
    "access": "public",
    "description": "割り算の余り",
    "lineNumber": 996,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A % B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、割る先の設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A % B"
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "mod",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#mod",
    "access": "public",
    "description": "割り算の正の余り",
    "lineNumber": 1006,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A mod B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、割る先の設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A mod B"
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "divide",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#divide",
    "access": "public",
    "description": "割り算",
    "lineNumber": 1019,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{scale: ?number, context: ?MathContext, roundingMode: ?RoundingModeEntity}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": "計算に使用する scale, context, roundingMode を設定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "div",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#div",
    "access": "public",
    "description": "割り算",
    "lineNumber": 1107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} A / B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{scale: ?number, context: ?MathContext, roundingMode: ?RoundingModeEntity}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": "計算に使用する scale, context, roundingMode を設定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "A / B"
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "toBigInteger",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#toBigInteger",
    "access": "public",
    "description": "BigInteger に変換",
    "lineNumber": 1115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "toBigIntegerExact",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#toBigIntegerExact",
    "access": "public",
    "description": "BigInteger に変換\n変換に失敗した場合は例外",
    "lineNumber": 1125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 86,
    "kind": "get",
    "name": "intValue",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#intValue",
    "access": "public",
    "description": "32ビット整数に変換",
    "lineNumber": 1134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "get",
    "name": "intValueExact",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#intValueExact",
    "access": "public",
    "description": "32ビット整数に変換\n変換に失敗した場合は例外",
    "lineNumber": 1145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "get",
    "name": "floatValue",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#floatValue",
    "access": "public",
    "description": "32ビット実数に変換",
    "lineNumber": 1158,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "get",
    "name": "doubleValue",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#doubleValue",
    "access": "public",
    "description": "64ビット実数に変換",
    "lineNumber": 1170,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "pow",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigDecimal.mjs~BigDecimal#pow",
    "access": "public",
    "description": "累乗\n巨大な乗算をする場合は例外を発生させる",
    "lineNumber": 1185,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} pow(A, B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal|number|string|Array<BigInteger|number|MathContext>|{integer:BigInteger,scale:?number,default_context:?MathContext,context:?MathContext}|BigInteger|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、累乗先の設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "pow(A, B)"
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "setDefaultContext",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal.setDefaultContext",
    "access": "public",
    "description": "オブジェクトを新規作成時に環境設定を変更しなかった場合に設定されるデフォルト設定",
    "lineNumber": 1214,
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "MathContext.DECIMAL128",
        "defaultRaw": "MathContext.DECIMAL128",
        "name": "context",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "getDefaultContext",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal.getDefaultContext",
    "access": "public",
    "description": "オブジェクトを新規作成時に環境設定を変更しなかった場合に設定されるデフォルト設定を取得",
    "lineNumber": 1222,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 93,
    "kind": "get",
    "name": "ZERO",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal.ZERO",
    "access": "public",
    "description": "0",
    "lineNumber": 1234,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "0"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "get",
    "name": "ONE",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal.ONE",
    "access": "public",
    "description": "1",
    "lineNumber": 1244,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "get",
    "name": "TWO",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal.TWO",
    "access": "public",
    "description": "2",
    "lineNumber": 1254,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "2"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "get",
    "name": "TEN",
    "memberof": "src/math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigDecimal.mjs~BigDecimal.TEN",
    "access": "public",
    "description": "10",
    "lineNumber": 1264,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} 10"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": "10"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "DEFINE",
    "memberof": "src/math/BigDecimal.mjs",
    "static": true,
    "longname": "src/math/BigDecimal.mjs~DEFINE",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/BigDecimal.mjs",
    "importStyle": null,
    "description": "内部で使用する定数値",
    "lineNumber": 1275,
    "type": {
      "types": [
        "{\"ZERO\": *, \"ONE\": *, \"TWO\": *, \"TEN\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "src/math/BigInteger.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport Random from \"./tools/Random.mjs\";\n\n/**\n * 乱数用クラスを指定しなかった場合に使用するデフォルト乱数クラス\n */\nlet DEFAULT_RANDOM = new Random();\n\n/**\n * BigInteger 内で使用する関数群\n */\nclass IntegerTool {\n\n\t/**\n\t * 数値が入った文字列から16進数ごとの配列へ変換する\n\t * @param {string} text - 数値が入ったテキストデータ（負の値などを含めない）\n\t * @param {number} radix - テキストデータの進数\n\t * @returns {Array<number>}  _16進数ごとに代入された配列 \n\t */\n\tstatic string_to_binary_number(text, radix) {\n\t\t// 下の変換をすることで、2進数での変換時に内部のforの繰り返す回数が減る\n\t\t// v0.03 出来る限りまとめてn進数変換する\n\t\tconst max_num = 0x3FFFFFFF;\n\t\tconst keta = Math.floor( Math.log(max_num) / Math.log(radix) );\n\t\tlet x = [];\n\t\tconst y = [];\n\t\tconst len = Math.ceil(text.length / keta);\n\t\tlet offset = text.length;\n\t\tfor(let i = 0; i < len; i++ ) {\n\t\t\toffset -= keta;\n\t\t\tif(offset >= 0) {\n\t\t\t\tx[i] = parseInt(text.substring(offset, offset + keta), radix);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tx[i] = parseInt(text.substring(0, offset + keta), radix);\n\t\t\t}\n\t\t}\n\t\tconst calcradix = Math.round(Math.pow(radix, keta));\n\t\t// v0.03ここまで\n\t\t// 2で割っていくアルゴリズムで2進数に変換する\n\t\twhile(x.length !==  0) {\n\t\t\t// 2で割っていく\n\t\t\t// 隣の桁でたcarryはradix進数をかけて桁上げしてる\n\t\t\tlet carry = 0;\n\t\t\tfor(let i = x.length - 1; i >= 0; i--) {\n\t\t\t\tconst a = x[i] + carry * calcradix;\n\t\t\t\tx[i]  = a >>> 1;\n\t\t\t\tcarry = a & 1;\n\t\t\t}\n\t\t\t// 1余るかどうかをテストする\n\t\t\ty[y.length] = carry;\n\t\t\t// xが0になっている部分は削除していく\n\t\t\tif(x[x.length - 1] === 0) {\n\t\t\t\tx.pop();\n\t\t\t}\n\t\t}\n\t\t// メモリ節約のため1つの変数（16ビット）に収めるだけ収めていく\n\t\tx = [];\n\t\tfor(let i = 0; i < y.length; i++) {\n\t\t\tx[i >>> 4] |= y[i] << (i & 0xF);\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 数値から16進数ごとの配列へ変換する\n\t * @param {number} x - 変換したい数値 \n\t * @returns {Array<number>} _16進数ごとに代入された配列 \n\t */\n\tstatic number_to_binary_number(x) {\n\t\tif(x > 0xFFFFFFFF) {\n\t\t\treturn IntegerTool.string_to_binary_number(x.toFixed(), 10);\n\t\t}\n\t\tlet num = x;\n\t\tconst y = [];\n\t\twhile(num !==  0) {\n\t\t\ty[y.length] = num & 1;\n\t\t\tnum >>>= 1;\n\t\t}\n\t\tconst z = [];\n\t\tfor(let i = 0; i < y.length; i++) {\n\t\t\tz[i >>> 4] |= y[i] << (i & 0xF);\n\t\t}\n\t\treturn z;\n\t}\n\n\t/**\n\t * 16進数の配列データから数列が入った文字列を作成\n\t * @param {Array<number>} binary - 16進数ごとに代入された配列 \n\t * @param {number} radix - 変換後の進数\n\t * @returns {Array<number>} 指定した進数で桁ごとに代入された数値配列 \n\t */\n\tstatic binary_number_to_string(binary, radix) {\n\t\tconst add = function(x1, x2, y) {\n\t\t\tconst size = x1.length;\n\t\t\tlet carry = 0;\n\t\t\tfor(let i = 0; i < size; i++) {\n\t\t\t\ty[i] = x1[i] + ((x2.length >= (i + 1)) ? x2[i] : 0) + carry;\n\t\t\t\tif(y[i] >= radix) {\n\t\t\t\t\tcarry = 1;\n\t\t\t\t\ty[i] -= radix;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(carry === 1) {\n\t\t\t\ty[size] = 1;\n\t\t\t}\n\t\t};\n\t\tconst y = [0];\n\t\tconst t = [1];\n\t\tfor(let i = 0;i < binary.length;i++) {\n\t\t\tfor(let j = 0; j < 16; j++) {\n\t\t\t\tif((binary[i] >>> j) & 1) {\n\t\t\t\t\tadd(t, y, y);\n\t\t\t\t}\n\t\t\t\tadd(t, t, t);\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * 数値が入った文字列から多倍長数値を表すためのデータを作成する\n\t * @param {string} text - 数値が入ったテキストデータ\n\t * @param {number} [radix=10] - テキストデータの進数\n\t * @returns {Object} 多倍長数値を表すためのデータ \n\t */\n\tstatic ToBigIntegerFromString(text, radix) {\n\t\tlet x = text.replace(/\\s/g, \"\").toLowerCase();\n\t\tconst sign_text = x.match(/^[-+]+/);\n\n\t\tlet element     = [];\n\t\tlet _sign        = 1;\n\n\t\tif(sign_text !== null) {\n\t\t\tconst hit_text = sign_text[0];\n\t\t\tx = x.substring(hit_text.length, x.length);\n\t\t\tif(hit_text.indexOf(\"-\") !== -1) {\n\t\t\t\t_sign = -1;\n\t\t\t}\n\t\t}\n\t\tif(radix) {\n\t\t\telement = IntegerTool.string_to_binary_number(x, radix);\n\t\t}\n\t\telse if(/^0x/.test(x)) {\n\t\t\telement = IntegerTool.string_to_binary_number(x.substring(2, x.length), 16);\n\t\t}\n\t\telse if(/^0b/.test(x)) {\n\t\t\telement = IntegerTool.string_to_binary_number(x.substring(2, x.length), 2);\n\t\t}\n\t\telse if(/^0/.test(x)) {\n\t\t\telement = IntegerTool.string_to_binary_number(x.substring(1, x.length), 8);\n\t\t}\n\t\telse {\n\t\t\telement = IntegerTool.string_to_binary_number(x, 10);\n\t\t}\n\t\t// \"0\"の場合がある為\n\t\tif((element.length === 1)&&(element[0] === 0)) {\n\t\t\telement = [];\n\t\t\t_sign = 0;\n\t\t}\n\n\t\treturn {\n\t\t\telement : element,\n\t\t\t_sign : _sign\n\t\t};\n\t}\n}\n\n// 内部では1変数内の中の16ビットごとに管理\n// 2変数で16ビット*16ビットで32ビットを表す\n// this.element\t...\t16ビットごとに管理\n// this._sign\t...\t負なら-1、正なら1、ゼロなら0\n//\n// 本クラスはイミュータブルです。\n// 内部の「_」から始まるメソッドは内部計算用で非公開です。またミュータブルです。\n\n/**\n * 多倍長整数演算クラス (immutable)\n */\nexport default class BigInteger {\n\n\t/**\n\t * 多倍長整数を作成\n\t * 文字列で指定する場合は指数表記には非対応。\n\t * 指定した進数で指定する場合は[\"ff\", 16] という配列で指定する。\n\t * @param {BigInteger|number|string|Array<string|number>|Object} [number] - 整数値\n\t */\n\tconstructor(number) {\n\t\t\n\t\tif(arguments.length === 0) {\n\n\t\t\t/**\n\t\t\t * 1要素、16ビット整数の配列\n\t\t\t * @private\n\t\t\t * @type {Array<number>}\n\t\t\t */\n\t\t\tthis.element     = [];\n\n\t\t\t/**\n\t\t\t * 正負（プラスなら+1、マイナスなら-1、0なら0）\n\t\t\t * ※計算によってはここの値の再設定をしていない箇所があるので、ここを見る時は注意\n\t\t\t * @private\n\t\t\t * @type {number}\n\t\t\t */\n\t\t\tthis._sign        = 0;\n\t\t}\n\t\telse if(arguments.length === 1) {\n\t\t\tthis._sign = 1;\n\t\t\tif(number instanceof BigInteger) {\n\t\t\t\tthis.element = number.element.slice(0);\n\t\t\t\tthis._sign = number._sign;\n\t\t\t}\n\t\t\telse if(typeof number === \"number\") {\n\t\t\t\tlet x = number;\n\t\t\t\tif(x < 0) {\n\t\t\t\t\tthis._sign = -1;\n\t\t\t\t\tx = -x;\n\t\t\t\t}\n\t\t\t\tthis.element = IntegerTool.number_to_binary_number(x);\n\t\t\t}\n\t\t\telse if(typeof number === \"string\") {\n\t\t\t\tconst x = IntegerTool.ToBigIntegerFromString(number);\n\t\t\t\tthis.element = x.element;\n\t\t\t\tthis._sign = x._sign;\n\t\t\t}\n\t\t\telse if(number instanceof Array) {\n\t\t\t\tif((number.length >= 1) && (typeof number[0] === \"string\")) {\n\t\t\t\t\tconst x = IntegerTool.ToBigIntegerFromString(number[0], number[1]);\n\t\t\t\t\tthis.element = x.element;\n\t\t\t\t\tthis._sign = x._sign;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow \"BigInteger Unsupported argument \" + arguments;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(number instanceof Object) {\n\t\t\t\tconst x = IntegerTool.ToBigIntegerFromString(number.toString());\n\t\t\t\tthis.element = x.element;\n\t\t\t\tthis._sign = x._sign;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow \"BigInteger Unsupported argument \" + number;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow \"BigInteger Unsupported argument \" + number;\n\t\t}\n\t}\n\n\t/**\n\t * BigIntegerを作成する\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger}\n\t */\n\tstatic create(number) {\n\t\tif(number instanceof BigInteger) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new BigInteger(number);\n\t\t}\n\t}\n\n\t/**\n\t * BigInteger を作成\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger}\n\t */\n\tstatic valueOf(number) {\n\t\treturn BigInteger.create(number);\n\t}\n\n\t/**\n\t * BigInteger を作成\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger}\n\t * @private\n\t */\n\tstatic _toBigInteger(number) {\n\t\tif(number instanceof BigInteger) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new BigInteger(number);\n\t\t}\n\t}\n\n\t/**\n\t * 実数を作成\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toFloat(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn number;\n\t\t}\n\t\telse if(number instanceof BigInteger) {\n\t\t\treturn number.doubleValue;\n\t\t}\n\t\telse {\n\t\t\treturn (new BigInteger(number)).doubleValue;\n\t\t}\n\t}\n\n\t/**\n\t * 整数を作成\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toInteger(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn number | 0;\n\t\t}\n\t\telse if(number instanceof BigInteger) {\n\t\t\treturn number.intValue;\n\t\t}\n\t\telse {\n\t\t\treturn (new BigInteger(number)).intValue;\n\t\t}\n\t}\n\n\t/**\n\t * 指定したビット数以内の乱数\n\t * @param {BigInteger|number|string|Array<string|number>|Object} bitsize - 作成する乱数のビット数\n\t * @param {Random} [random] - 作成に使用するRandom\n\t * @returns {BigInteger}\n\t */\n\tstatic createRandomBigInteger(bitsize, random) {\n\t\tconst rand = (random && (random instanceof Random)) ? random : DEFAULT_RANDOM;\n\t\tconst x = new BigInteger();\n\t\tx._sign = 1;\n\t\tconst bits = BigInteger._toInteger(bitsize);\n\t\tconst size = ((bits - 1) >> 4) + 1;\n\t\tif(bits === 0) {\n\t\t\treturn BigInteger.ZERO;\n\t\t}\n\t\tlet r;\n\t\tfor(let i = 0, j = 0; i < size; i++) {\n\t\t\tif(j === 0) {\n\t\t\t\tr = rand.nextInt(); // 32ビットずつ作成する\n\t\t\t\tx.element[i] = r & 0xFFFF;\n\t\t\t\tj = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tx.element[i] = (r >>> 16) & 0xFFFF;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t\t// 1～15ビット余る場合は、16ビットずつ作成しているので削る\n\t\tif((bits % 16) !== 0) {\n\t\t\tx.element[x.element.length - 1] &= (1 << (bits % 16)) - 1;\n\t\t}\n\t\t// 最後のビットに 0 をたくさん作成していると、\n\t\t// 0のみのデータになる可能性があるためメモリを修正\n\t\tx._memory_reduction();\n\t\treturn x;\n\t}\n\n\t/**\n\t * 指定したビット数以内の素数\n\t * @param {BigInteger|number|string|Array<string|number>|Object} bits - 作成する素数の乱数のビット数\n\t * @param {Random} [random] - 作成に使用するRandom\n\t * @param {BigInteger|number|string|Array<string|number>|Object} [certainty=100] - ミラーラビン素数判定法に使用する繰り返し回数\n\t * @param {BigInteger|number|string|Array<string|number>|Object} [create_count=500] - 乱数生成回数\n\t * @returns {BigInteger}\n\t */\n\tstatic probablePrime(bits, random, certainty, create_count ) {\n\t\tconst certainty_ = certainty ? BigInteger._toInteger(certainty) : 100;\n\t\tconst create_count_ = create_count ? BigInteger._toInteger(create_count) : 500;\n\t\tfor(let i = 0; i < create_count_; i++) {\n\t\t\tconst x = BigInteger.createRandomBigInteger(bits, random);\n\t\t\tif(x.isProbablePrime(certainty_)) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\t\tthrow \"probablePrime \" + create_count;\n\t}\n\n\t/**\n\t * 等式\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {boolean} A === B\n\t */\n\tequals(number) {\n\t\tconst x = BigInteger._toBigInteger(number);\n\t\tif(this.signum() !== x.signum()) {\n\t\t\treturn false;\n\t\t}\n\t\tif(this.element.length !== x.element.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor(let i = 0; i < x.element.length; i++) {\n\t\t\tif(this.element[i] !==  x.element[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * 文字列化\n\t * @param {BigInteger|number|string|Array<string|number>|Object} [radix=10] - 文字列変換後の進数\n\t * @returns {string}\n\t */\n\ttoString(radix) {\n\t\tconst radix_ = radix ? BigInteger._toInteger(radix) : 10;\n\n\t\t// int型で扱える数値で toString が可能なので、\n\t\t// せっかくだからより大きな進数で計算していけば、あとでtoStringする回数が減るテクニック\n\t\t// 2進数であれば、2^n乗で計算しても問題がない 4進数や8進数で計算して、2進数に戻せば巡回少数なし\n\t\t// v0.03 出来る限りまとめてn進数変換する\n\t\tconst max_num = 0x3FFFFFFF;\n\t\t//                        max_num > radix^x\n\t\t// floor(log max_num / log radix) = x\n\t\tconst keta = Math.floor( Math.log(max_num) / Math.log(radix_) );\n\t\tconst calcradix = Math.round(Math.pow(radix_, keta));\n\t\t// zeros = \"00000000....\"\n\t\tconst zeros_array = [];\n\t\tfor(let i = 0; i < keta; i++) {\n\t\t\tzeros_array[i] = \"0\";\n\t\t}\n\t\tconst zeros_string = zeros_array.join(\"\");\n\t\t// v0.03ここまで\n\t\tconst x = IntegerTool.binary_number_to_string(this.element, calcradix);\n\t\tconst y = [];\n\t\tlet z = \"\";\n\t\tif(this.signum() < 0) {\n\t\t\ty[y.length] = \"-\";\n\t\t}\n\t\tfor(let i = x.length - 1; i >= 0; i--) {\n\t\t\tz = x[i].toString(radix_);\n\t\t\tif(i < (x.length - 1)) {\n\t\t\t\ty[y.length] = zeros_string.substring(0, keta - z.length);\n\t\t\t}\n\t\t\ty[y.length] = z;\n\t\t}\n\t\treturn y.join(\"\");\n\t}\n\n\t/**\n\t * 16進数ごとの配列で構成される内部値の指定した位置の値\n\t * @param {BigInteger|number|string|Array<string|number>|Object} point - 内部配列の位置\n\t * @returns {number}\n\t */\n\tgetShort(point) {\n\t\tconst n = BigInteger._toInteger(point);\n\t\tif((n < 0) || (this.element.length <= n)) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.element[n];\n\t}\n\n\t/**\n\t * 32ビット整数値\n\t * 数値が大きいなど、収まりきらない場合に正確な数値にならない場合がある\n\t * @returns {number}\n\t */\n\tget intValue() {\n\t\tlet x = this.getShort(0) + (this.getShort(1) << 16);\n\t\tx &= 0xFFFFFFFF;\n\t\tif((x > 0)&&(this._sign < 0)) {\n\t\t\tx = -x;\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 64ビット整数値\n\t * 数値が大きいなど、収まりきらない場合に正確な数値にならない場合がある\n\t * @returns {number}\n\t */\n\tget longValue() {\n\t\tlet x = 0;\n\t\tfor(let i = 3; i >= 0; i--) {\n\t\t\tx *= 65536;\n\t\t\tx += this.getShort(i);\n\t\t}\n\t\tif(this._sign < 0) {\n\t\t\tx = -x;\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 64ビット実数値\n\t * 数値が大きいなど、収まりきらない場合に正確な数値にならない場合がある\n\t * @returns {number}\n\t */\n\tget doubleValue() {\n\t\treturn parseFloat(this.toString());\n\t}\n\n\t/**\n\t * ディープコピー\n\t * @returns {BigInteger}\n\t */\n\tclone() {\n\t\treturn new BigInteger(this);\n\t}\n\n\t/**\n\t * 実部の負数を判定\n\t * @returns {boolean} real(x) < 0\n\t */\n\tisNegative() {\n\t\treturn this._sign < 0;\n\t}\n\n\t/**\n\t * 0 を判定\n\t * @returns {boolean} A === 0\n\t */\n\tisZero() {\n\t\tthis._memory_reduction();\n\t\treturn this._sign === 0;\n\t}\n\t\n\t/**\n\t * 正数を判定\n\t * @returns {boolean} real(x) > 0\n\t */\n\tisPositive() {\n\t\treturn this._sign > 0;\n\t}\n\n\t/**\n\t * 2進数で表した場合に最も右側に現れる1の桁数\n\t * @returns {number} 存在しない場合は -1\n\t */\n\tgetLowestSetBit() {\n\t\tfor(let i = 0; i < this.element.length; i++) {\n\t\t\tif(this.element[i] !==  0) {\n\t\t\t\tconst x = this.element[i];\n\t\t\t\tfor(let j = 0; j < 16; j++) {\n\t\t\t\t\tif(((x >>> j) & 1) !==  0) {\n\t\t\t\t\t\treturn i * 16 + j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t * 2進数で表した場合の長さ\n\t * @returns {number}\n\t */\n\tbitLength() {\n\t\tfor(let i = this.element.length - 1; i >= 0; i--) {\n\t\t\tif(this.element[i] !==  0) {\n\t\t\t\tconst x = this.element[i];\n\t\t\t\tfor(let j = 15; j >= 0; j--) {\n\t\t\t\t\tif(((x >>> j) & 1) !==  0) {\n\t\t\t\t\t\treturn i * 16 + j + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\t/**\n\t * 2の補数表現で表した場合に立つビットの数\n\t * @returns {number}\n\t */\n\tbitCount() {\n\t\tlet target;\n\t\tif(this._sign >= 0) {\n\t\t\ttarget = this;\n\t\t}\n\t\telse {\n\t\t\ttarget = this.add(new BigInteger(1));\n\t\t}\n\t\tconst len = target.bitLength();\n\t\tlet bit = 0;\n\t\tlet count = 0;\n\t\tfor(let i = 0;bit < len;i++) {\n\t\t\tconst x = target.element[i];\n\t\t\tfor(let j = 0;((j < 16) && (bit < len));j++, bit++) {\n\t\t\t\tif(((x >>> j) & 1) !==  0) {\n\t\t\t\t\tcount = count + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * 加算に適用できる数値（負の場合は、2の補数表現）\n\t * @param {number} [bit_length] - ビット長（省略時は自動計算）\n\t * @returns {BigInteger}\n\t * @private\n\t */\n\tgetTwosComplement(bit_length) {\n\t\tconst y = this.clone();\n\t\tif(y._sign >= 0) {\n\t\t\treturn y;\n\t\t}\n\t\telse {\n\t\t\t// 正にする\n\t\t\ty._sign = 1;\n\t\t\t// ビットの数が存在しない場合は数える\n\t\t\tconst len = (bit_length !== undefined) ? bit_length : y.bitLength();\n\t\t\tconst e = y.element;\n\t\t\t// ビット反転後\n\t\t\tfor(let i = 0; i < e.length; i++) {\n\t\t\t\te[i] ^= 0xFFFF;\n\t\t\t}\n\t\t\t// 1～15ビット余る場合は、16ビットずつ作成しているので削る\n\t\t\t// nビットのマスク（なお負の値を表す最上位ビットは削除する）\n\t\t\tif((len % 16) !== 0) {\n\t\t\t\te[e.length - 1] &= (1 << (len % 16)) - 1;\n\t\t\t}\n\t\t\t// 1を加算\n\t\t\ty._add(new BigInteger(1));\n\t\t\treturn y;\n\t\t}\n\t}\n\n\t/**\n\t * 論理積（ミュータブル）\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A &= B\n\t * @private\n\t */\n\t_and(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst e1 = this;\n\t\tconst e2 = val;\n\t\tconst s1  = e1.signum(), s2 = e2.signum();\n\t\tconst len = Math.max(e1.bitLength(), e2.bitLength());\n\t\t// 引数が負の場合は、2の補数\n\t\tconst e1_array = e1.getTwosComplement(len).element;\n\t\tconst e2_array = e2.getTwosComplement(len).element;\n\t\tconst size = Math.max(e1_array.length, e2_array.length);\n\t\tthis.element = [];\n\t\tfor(let i = 0;i < size;i++) {\n\t\t\tconst x1 = (i >= e1_array.length) ? 0 : e1_array[i];\n\t\t\tconst x2 = (i >= e2_array.length) ? 0 : e2_array[i];\n\t\t\tthis.element[i] = x1 & x2;\n\t\t}\n\t\tif(this.bitLength() === 0) {\n\t\t\tthis.element = [];\n\t\t\tthis._sign = 0;\n\t\t}\n\t\tif((s1 === 1)||(s2 === 1)) {\n\t\t\tthis._sign = 1;\n\t\t}\n\t\t// 出力が負の場合は、2の補数\n\t\telse if(this._sign === -1) {\n\t\t\tthis.element = this.getTwosComplement(len).element;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * 論理積\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A & B\n\t */\n\tand(number) {\n\t\treturn this.clone()._and(number);\n\t}\n\n\t/**\n\t * 論理和（ミュータブル）\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A |= B\n\t * @private\n\t */\n\t_or(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst e1 = this;\n\t\tconst e2 = val;\n\t\tconst s1  = e1.signum(), s2 = e2.signum();\n\t\tconst len = Math.max(e1.bitLength(), e2.bitLength());\n\t\t// 引数が負の場合は、2の補数\n\t\tconst e1_array = e1.getTwosComplement(len).element;\n\t\tconst e2_array = e2.getTwosComplement(len).element;\n\t\tconst size = Math.max(e1_array.length, e2_array.length);\n\t\tthis.element = [];\n\t\tfor(let i = 0;i < size;i++) {\n\t\t\tconst x1 = (i >= e1_array.length) ? 0 : e1_array[i];\n\t\t\tconst x2 = (i >= e2_array.length) ? 0 : e2_array[i];\n\t\t\tthis.element[i] = x1 | x2;\n\t\t}\n\t\tthis._sign = ((s1 === -1)||(s2 === -1)) ? -1 : Math.max(s1, s2);\n\t\t// 出力が負の場合は、2の補数\n\t\tif(this._sign === -1) {\n\t\t\tthis.element = this.getTwosComplement(len).element;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * 論理和\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A | B\n\t */\n\tor(number) {\n\t\treturn this.clone()._or(number);\n\t}\n\n\t/**\n\t * 排他的論理和（ミュータブル）\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A ^= B\n\t * @private\n\t */\n\t_xor(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst e1 = this;\n\t\tconst e2 = val;\n\t\tconst s1  = e1.signum(), s2 = e2.signum();\n\t\tconst len = Math.max(e1.bitLength(), e2.bitLength());\n\t\t// 引数が負の場合は、2の補数\n\t\tconst e1_array = e1.getTwosComplement(len).element;\n\t\tconst e2_array = e2.getTwosComplement(len).element;\n\t\tconst size = Math.max(e1_array.length, e2_array.length);\n\t\tthis.element = [];\n\t\tfor(let i = 0;i < size;i++) {\n\t\t\tconst x1 = (i >= e1_array.length) ? 0 : e1[i];\n\t\t\tconst x2 = (i >= e2_array.length) ? 0 : e2[i];\n\t\t\tthis.element[i] = x1 ^ x2;\n\t\t}\n\t\tthis._sign = ((s1 !== 0)&&(s1 !== s2)) ? -1 : 1;\n\t\t// 出力が負の場合は、2の補数\n\t\tif(this._sign === -1) {\n\t\t\tthis.element = this.getTwosComplement(len).element;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * 排他的論理和\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A ^ B\n\t */\n\txor(number) {\n\t\treturn(this.clone()._xor(number));\n\t}\n\n\t/**\n\t * ビット反転\n\t * @returns {BigInteger}\n\t * @private A = !A\n\t */\n\t_not() {\n\t\treturn(this._add(new BigInteger(1))._negate());\n\t}\n\n\t/**\n\t * ビット反転（ミュータブル）\n\t * @returns {BigInteger} !A\n\t */\n\tnot() {\n\t\treturn(this.clone()._not());\n\t}\n\n\t/**\n\t * 否定論理積（ミュータブル）\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger}\n\t * @private A &= (!B)\n\t */\n\t_andNot(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\treturn(this._and(val.not()));\n\t}\n\n\t/**\n\t * 否定論理積\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A & (!B)\n\t */\n\tandNot(number) {\n\t\treturn(this.clone()._andNot(number));\n\t}\n\n\t/**\n\t * 否定論理積（ミュータブル）\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger}\n\t * @private A &= (!B)\n\t */\n\t_nand(number) {\n\t\treturn(this._andNot(number));\n\t}\n\n\t/**\n\t * 否定論理積\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} A & (!B)\n\t */\n\tnand(number) {\n\t\treturn(this.andNot(number));\n\t}\n\n\t/**\n\t * 否定論理和（ミュータブル）\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger}\n\t * @private A = !(A | B)\n\t */\n\t_orNot(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\treturn(this._or(val)._not());\n\t}\n\n\t/**\n\t * 否定論理和\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} !(A | B)\n\t */\n\torNot(number) {\n\t\treturn(this.clone()._orNot(number));\n\t}\n\n\t/**\n\t * 否定論理和（ミュータブル）\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger}\n\t * @private A = !(A | B)\n\t */\n\t_nor(number) {\n\t\treturn(this._orNot(number));\n\t}\n\n\t/**\n\t * 否定論理和\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} !(A | B)\n\t */\n\tnor(number) {\n\t\treturn(this.orNot(number));\n\t}\n\n\t/**\n\t * 指定したビット長まで配列を拡張（ミュータブル）\n\t * @param {number} bit_length - ビット数\n\t * @private\n\t */\n\t_memory_allocation(bit_length) {\n\t\tconst n = BigInteger._toInteger(bit_length);\n\t\tconst elementsize = this.element.length << 4;\n\t\tif(elementsize < n) {\n\t\t\tconst addsize = (((n - elementsize - 1) & 0xFFFFFFF0) >>> 4) + 1;\n\t\t\tfor(let i = 0;i < addsize;i++) {\n\t\t\t\tthis.element[this.element.length] = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 内部データの正規化（ミュータブル）\n\t * @private\n\t */\n\t_memory_reduction() {\n\t\tfor(let i = this.element.length - 1;i >= 0;i--) {\n\t\t\tif(this.element[i] !==  0) {\n\t\t\t\tif(i < this.element.length - 1) {\n\t\t\t\t\tthis.element.splice(i + 1, this.element.length - i - 1);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis._sign = 0;\n\t\tthis.element = [];\n\t}\n\n\t/**\n\t * ユークリッド互除法\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {BigInteger} gcd(x, y)\n\t */\n\tgcd(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\t/**\n\t\t * @type {any}\n\t\t */\n\t\tlet x = this, y = val, z;\n\t\twhile(y.signum() !== 0) {\n\t\t\tz = x.remainder(y);\n\t\t\tx = y;\n\t\t\ty = z;\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 拡張ユークリッド互除法\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {Array<BigInteger>} a*x + b*y = c = gcd(x, y) となる [a, b, c]\n\t */\n\textgcd(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\t// 非再帰\n\t\tconst ONE  = new BigInteger(1);\n\t\tconst ZERO = new BigInteger(0);\n\t\t/**\n\t\t * @type {any}\n\t\t */\n\t\tlet r0 = this, r1 = val, r2, q1;\n\t\tlet a0 = ONE,  a1 = ZERO, a2;\n\t\tlet b0 = ZERO, b1 = ONE,  b2;\n\t\twhile(r1.signum() !== 0) {\n\t\t\tconst y = r0.divideAndRemainder(r1);\n\t\t\tq1 = y[0];\n\t\t\tr2 = y[1];\n\t\t\ta2 = a0.subtract(q1.multiply(a1));\n\t\t\tb2 = b0.subtract(q1.multiply(b1));\n\t\t\ta0 = a1;\n\t\t\ta1 = a2;\n\t\t\tb0 = b1;\n\t\t\tb1 = b2;\n\t\t\tr0 = r1;\n\t\t\tr1 = r2;\n\t\t}\n\t\treturn [a0, b0, r0];\n\t}\n\n\t/**\n\t * 絶対値（ミュータブル）\n\t * @returns {BigInteger}\n\t * @private A = abs(A)\n\t */\n\t_abs() {\n\t\t// -1 -> 1, 0 -> 0, 1 -> 1\n\t\tthis._sign *= this._sign;\n\t\treturn this;\n\t}\n\n\t/**\n\t * 絶対値\n\t * @returns {BigInteger} abs(A)\n\t */\n\tabs() {\n\t\treturn this.clone()._abs();\n\t}\n\n\t/**\n\t * 負数（ミュータブル）\n\t * @returns {BigInteger} A = -A\n\t * @private\n\t */\n\t_negate() {\n\t\tthis._sign *= -1;\n\t\treturn this;\n\t}\n\n\t/**\n\t * 負数\n\t * @returns {BigInteger} -A\n\t */\n\tnegate() {\n\t\treturn this.clone()._negate();\n\t}\n\n\t/**\n\t * 符号値\n\t * @returns {number} 1, -1, 0の場合は0を返す\n\t */\n\tsignum() {\n\t\tif(this.element.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this._sign;\n\t}\n\n\t/**\n\t * 符号値\n\t * @returns {number} 1, -1, 0の場合は0を返す\n\t */\n\tsign() {\n\t\treturn this.signum();\n\t}\n\n\t/**\n\t * 符号を除いた値同士を比較\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {number} abs(A) < abs(B) ? 1 : (abs(A) === abs(B) ? 0 : -1)\n\t */\n\tcompareToAbs(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tif(this.element.length < val.element.length) {\n\t\t\treturn -1;\n\t\t}\n\t\telse if(this.element.length > val.element.length) {\n\t\t\treturn 1;\n\t\t}\n\t\tfor(let i = this.element.length - 1;i >= 0;i--) {\n\t\t\tif(this.element[i] !== val.element[i]) {\n\t\t\t\tconst x = this.element[i] - val.element[i];\n\t\t\t\treturn ( (x === 0) ? 0 : ((x > 0) ? 1 : -1) );\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\t/**\n\t * 値同士を比較\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number \n\t * @returns {number} A > B ? 1 : (A === B ? 0 : -1)\n\t */\n\tcompareTo(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tif(this.signum() !== val.signum()) {\n\t\t\tif(this._sign > val._sign) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\telse if(this.signum() === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.compareToAbs(val) * this._sign;\n\t}\n\n\t/**\n\t * 最大値\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} max([A, B])\n\t */\n\tmax(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tif(this.compareTo(val) >= 0) {\n\t\t\treturn this.clone();\n\t\t}\n\t\telse {\n\t\t\treturn val.clone();\n\t\t}\n\t}\n\n\t/**\n\t * 最小値\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} min([A, B])\n\t */\n\tmin(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tif(this.compareTo(val) >= 0) {\n\t\t\treturn val.clone();\n\t\t}\n\t\telse {\n\t\t\treturn this.clone();\n\t\t}\n\t}\n\n\t/**\n\t * ビットシフト（ミュータブル）\n\t * @param {BigInteger|number|string|Array<string|number>|Object} shift_length - 上位へのビットシフト数\n\t * @returns {BigInteger} A <<= n\n\t * @private\n\t */\n\t_shift(shift_length) {\n\t\tlet n = BigInteger._toInteger(shift_length);\n\t\tif(n === 0) {\n\t\t\treturn this;\n\t\t}\n\t\tconst x = this.element;\n\t\t// 1ビットなら専用コードで高速計算\n\t\tif(n === 1) {\n\t\t\tlet i = x.length - 1;\n\t\t\tif((x[i] & 0x8000) !==  0) {\n\t\t\t\tx[x.length] = 1;\n\t\t\t}\n\t\t\tfor(;i >= 0;i--) {\n\t\t\t\tx[i] <<= 1;\n\t\t\t\tx[i]  &= 0xFFFF;\n\t\t\t\tif((i > 0) && ((x[i - 1] & 0x8000) !==  0)) {\n\t\t\t\t\tx[i] += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(n === -1) {\n\t\t\tfor(let i = 0;i < x.length;i++) {\n\t\t\t\tx[i] >>>= 1;\n\t\t\t\tif((i < x.length - 1) && ((x[i + 1] & 1) !==  0)) {\n\t\t\t\t\tx[i] |= 0x8000;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(x[x.length - 1] === 0) {\n\t\t\t\tx.pop();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// 16ビット単位なら配列を追加削除する高速計算\n\t\t\tif(n >= 16) {\n\t\t\t\tconst m = n >>> 4;\n\t\t\t\tfor(let i = x.length - 1; i >= 0; i--) {\n\t\t\t\t\tx[i + m] = x[i];\n\t\t\t\t}\n\t\t\t\tfor(let i = m - 1; i >= 0; i--) {\n\t\t\t\t\tx[i] = 0;\n\t\t\t\t}\n\t\t\t\tn &= 0xF;\n\t\t\t}\n\t\t\telse if(n <= -16){\n\t\t\t\tconst m = (-n) >>> 4;\n\t\t\t\tx.splice(0, m);\n\t\t\t\tn += m << 4;\n\t\t\t}\n\t\t\tif(n !== 0) {\n\t\t\t\t// 15ビット以内ならビット演算でまとめて操作\n\t\t\t\tif(0 < n) {\n\t\t\t\t\tlet carry = 0;\n\t\t\t\t\tfor(let i = 0; i < x.length; i++) {\n\t\t\t\t\t\tx[i] = (x[i] << n) + carry;\n\t\t\t\t\t\tif(x[i] > 0xFFFF) {\n\t\t\t\t\t\t\tcarry = x[i] >>> 16;\n\t\t\t\t\t\t\tx[i] &= 0xFFFF;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tcarry = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(carry !== 0) {\n\t\t\t\t\t\tx[x.length] = carry;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tn = -n;\n\t\t\t\t\tfor(let i = 0; i < x.length; i++) {\n\t\t\t\t\t\tif(i !== x.length - 1) {\n\t\t\t\t\t\t\tx[i] += x[i + 1] << 16;\n\t\t\t\t\t\t\tx[i] >>>= n;\n\t\t\t\t\t\t\tx[i] &= 0xFFFF;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tx[i] >>>= n;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(x[x.length - 1] === 0) {\n\t\t\t\t\t\tx.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * ビットシフト\n\t * @param {BigInteger|number|string|Array<string|number>|Object} n\n\t * @returns {BigInteger} A << n\n\t */\n\tshift(n) {\n\t\treturn this.clone()._shift(n);\n\t}\n\n\t/**\n\t * 左へビットシフト\n\t * @param {BigInteger|number|string|Array<string|number>|Object} n\n\t * @returns {BigInteger} A << n\n\t */\n\tshiftLeft(n) {\n\t\treturn this.shift(n);\n\t}\n\n\t/**\n\t * 右へビットシフト\n\t * @param {BigInteger|number|string|Array<string|number>|Object} n\n\t * @returns {BigInteger} A >> n\n\t */\n\tshiftRight(n) {\n\t\treturn this.shift(-n);\n\t}\n\n\t/**\n\t * 加算（ミュータブル）\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A += B\n\t * @private\n\t */\n\t_add(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst o1 = this;\n\t\tconst o2 = val;\n\t\tlet x1 = o1.element;\n\t\tlet x2 = o2.element;\n\t\tif(o1._sign === o2._sign) {\n\t\t\t//足し算\n\t\t\tthis._memory_allocation(x2.length << 4);\n\t\t\tlet carry = 0;\n\t\t\tfor(let i = 0; i < x1.length; i++) {\n\t\t\t\tx1[i] += ((x2.length >= (i + 1)) ? x2[i] : 0) + carry;\n\t\t\t\tif(x1[i] > 0xFFFF) {\n\t\t\t\t\tcarry = 1;\n\t\t\t\t\tx1[i] &= 0xFFFF;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(carry !== 0) {\n\t\t\t\tx1[x1.length] = carry;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// 引き算\n\t\t\tconst compare = o1.compareToAbs(o2);\n\t\t\tif(compare === 0) {\n\t\t\t\tthis.element = [];\n\t\t\t\tthis._sign = 1;\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\telse if(compare === -1) {\n\t\t\t\tthis._sign = o2._sign;\n\t\t\t\tconst swap = x1;\n\t\t\t\tx1 = x2.slice(0);\n\t\t\t\tx2 = swap;\n\t\t\t}\n\t\t\tlet carry = 0;\n\t\t\tfor(let i = 0; i < x1.length; i++) {\n\t\t\t\tx1[i] -= ((x2.length >= (i + 1)) ? x2[i] : 0) + carry;\n\t\t\t\tif(x1[i] < 0) {\n\t\t\t\t\tx1[i] += 0x10000;\n\t\t\t\t\tcarry  = 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry  = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.element = x1;\n\t\t\tthis._memory_reduction();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * 加算\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A + B\n\t */\n\tadd(number) {\n\t\treturn this.clone()._add(number);\n\t}\n\n\t/**\n\t * 減算（ミュータブル）\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A -= B\n\t * @private\n\t */\n\t_subtract(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst _sign = val._sign;\n\t\tconst out  = this._add(val._negate());\n\t\tval._sign = _sign;\n\t\treturn out;\n\t}\n\n\t/**\n\t * 減算\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A - B\n\t */\n\tsubtract(number) {\n\t\treturn this.clone()._subtract(number);\n\t}\n\n\t/**\n\t * 減算\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A - B\n\t */\n\tsub(number) {\n\t\treturn this.subtract(number);\n\t}\n\n\t/**\n\t * 乗算（ミュータブル）\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A *= B\n\t * @private\n\t */\n\t_multiply(number) {\n\t\tconst x = this.multiply(number);\n\t\tthis.element = x.element;\n\t\tthis._sign    = x._sign;\n\t\treturn this;\n\t}\n\n\t/**\n\t * 乗算\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A * B\n\t */\n\tmultiply(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst out  = new BigInteger();\n\t\tconst buff = new BigInteger();\n\t\tconst o1 = this;\n\t\tconst o2 = val;\n\t\tconst x1 = o1.element;\n\t\tconst x2 = o2.element;\n\t\tconst y  = out.element;\n\t\tfor(let i = 0; i < x1.length; i++) {\n\t\t\tbuff.element = [];\n\t\t\t// x3 = x1[i] * x2\n\t\t\tconst x3 = buff.element;\n\t\t\tlet carry = 0;\n\t\t\tfor(let j = 0; j < x2.length; j++) {\n\t\t\t\tx3[j] = x1[i] * x2[j] + carry;\n\t\t\t\tif(x3[j] > 0xFFFF) {\n\t\t\t\t\tcarry = x3[j] >>> 16;\n\t\t\t\t\tx3[j] &= 0xFFFF;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(carry !== 0) {\n\t\t\t\tx3[x3.length] = carry;\n\t\t\t}\n\t\t\t// x3 = x3 << (i * 16)\n\t\t\t//buff._shift(i << 4);\n\t\t\tfor(let j = x3.length - 1; j >= 0; j--) {\n\t\t\t\tx3[j + i] = x3[j];\n\t\t\t}\n\t\t\tfor(let j = i - 1; j >= 0; j--) {\n\t\t\t\tx3[j] = 0;\n\t\t\t}\n\t\t\t// y = y + x3 (out._add(buff))\n\t\t\t//out._add(buff);\n\t\t\tcarry = 0;\n\t\t\tout._memory_allocation(x3.length << 4);\n\t\t\tfor(let j = i; j < y.length; j++) {\n\t\t\t\ty[j] += ((x3.length >= (j + 1)) ? x3[j] : 0) + carry;\n\t\t\t\tif(y[j] > 0xFFFF) {\n\t\t\t\t\tcarry = 1;\n\t\t\t\t\ty[j] &= 0xFFFF;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(carry !== 0) {\n\t\t\t\ty[y.length] = carry;\n\t\t\t}\n\t\t}\n\t\tout._sign = this._sign * val._sign;\n\t\treturn out;\n\t}\n\n\t/**\n\t * 乗算\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A * B\n\t */\n\tmul(number) {\n\t\treturn this.multiply(number);\n\t}\n\n\t/**\n\t * 割り算と余り（ミュータブル）\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {Array<BigInteger>} [C = floor(A / B), A - C * B]\n\t * @private\n\t */\n\t_divideAndRemainder(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tconst out = [];\n\t\tif(val.signum() === 0) {\n\t\t\tthrow \"BigInteger divideAndRemainder [\" + val.toString() +\"]\";\n\t\t}\n\t\tconst compare = this.compareToAbs(val);\n\t\tif(compare < 0) {\n\t\t\tout[0] = new BigInteger(0);\n\t\t\tout[1] = this.clone();\n\t\t\treturn out;\n\t\t}\n\t\telse if(compare === 0) {\n\t\t\tout[0] = new BigInteger(1);\n\t\t\tout[0]._sign = this._sign * val._sign;\n\t\t\tout[1] = new BigInteger(0);\n\t\t\treturn out;\n\t\t}\n\t\tconst ONE = new BigInteger(1);\n\t\tconst size = this.bitLength() - val.bitLength();\n\t\tconst x1 = this.clone()._abs();\n\t\tconst x2 = val.shift(size)._abs();\n\t\tconst y  = new BigInteger();\n\t\tfor(let i = 0; i <= size; i++) {\n\t\t\tif(x1.compareToAbs(x2) >= 0) {\n\t\t\t\tx1._subtract(x2);\n\t\t\t\ty._add(ONE);\n\t\t\t}\n\t\t\tif(i === size) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx2._shift(-1);\n\t\t\ty._shift(1);\n\t\t}\n\t\tout[0] = y;\n\t\tout[0]._sign = this._sign * val._sign;\n\t\tout[1] = x1;\n\t\tout[1]._sign = this._sign;\n\t\treturn out;\n\t}\n\n\t/**\n\t * 割り算と余り\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {Array<BigInteger>} [C = floor(A / B), A - C * B]\n\t */\n\tdivideAndRemainder(number) {\n\t\treturn this.clone()._divideAndRemainder(number);\n\t}\n\n\t/**\n\t * 割り算（ミュータブル）\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} floor(A / B)\n\t * @private\n\t */\n\t_divide(number) {\n\t\treturn this._divideAndRemainder(number)[0];\n\t}\n\n\t/**\n\t * 割り算\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} floor(A / B)\n\t */\n\tdivide(number) {\n\t\treturn this.clone()._divide(number);\n\t}\n\n\t/**\n\t * 割り算\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} floor(A / B)\n\t */\n\tdiv(number) {\n\t\treturn this.divide(number);\n\t}\n\n\t/**\n\t * 割り算の余り（ミュータブル）\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A %= B\n\t * @private\n\t */\n\t_remainder(number) {\n\t\treturn this._divideAndRemainder(number)[1];\n\t}\n\n\t/**\n\t * 割り算の余り\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A % B\n\t */\n\tremainder(number) {\n\t\treturn this.clone()._remainder(number);\n\t}\n\n\t/**\n\t * 割り算の余り\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A % B\n\t */\n\trem(number) {\n\t\treturn this.remainder(number);\n\t}\n\n\t/**\n\t * 割り算の正の余り（ミュータブル）\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A = A mod B\n\t * @private\n\t */\n\t_mod(number) {\n\t\tconst val = BigInteger._toBigInteger(number);\n\t\tif(val.signum() < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tconst y = this._divideAndRemainder(val);\n\t\tif(y[1] instanceof BigInteger) {\n\t\t\tif(y[1].signum() >= 0) {\n\t\t\t\treturn y[1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn y[1]._add(val);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * 割り算の正の余り\n\t * @param {BigInteger|number|string|Array<string|number>|Object} number\n\t * @returns {BigInteger} A mod B\n\t */\n\tmod(number) {\n\t\treturn this.clone()._mod(number);\n\t}\n\n\t/**\n\t * 特定のビットを立てる（ミュータブル）\n\t * @param {BigInteger|number|string|Array<string|number>|Object} bit\n\t * @returns {BigInteger}\n\t * @private\n\t */\n\t_setBit(bit) {\n\t\tconst n = BigInteger._toInteger(bit);\n\t\tthis._memory_allocation(n + 1);\n\t\tthis.element[n >>> 4] |= 1 << (n & 0xF);\n\t\treturn this;\n\t}\n\n\t/**\n\t * 特定のビットを立てる\n\t * @param {BigInteger|number|string|Array<string|number>|Object} bit\n\t * @returns {BigInteger}\n\t */\n\tsetBit(bit) {\n\t\tconst n = BigInteger._toInteger(bit);\n\t\treturn this.clone()._setBit(n);\n\t}\n\n\t/**\n\t * 特定のビットを反転させる（ミュータブル）\n\t * @param {BigInteger|number|string|Array<string|number>|Object} bit\n\t * @returns {BigInteger}\n\t * @private\n\t */\n\t_flipBit(bit) {\n\t\tconst n = BigInteger._toInteger(bit);\n\t\tthis._memory_allocation(n + 1);\n\t\tthis.element[n >>> 4] ^= 1 << (n & 0xF);\n\t\treturn this;\n\t}\n\n\t/**\n\t * 特定のビットを反転させる\n\t * @param {BigInteger|number|string|Array<string|number>|Object} bit\n\t * @returns {BigInteger}\n\t */\n\tflipBit(bit) {\n\t\tconst n = BigInteger._toInteger(bit);\n\t\treturn this.clone()._flipBit(n);\n\t}\n\n\t/**\n\t * 特定のビットを下げる\n\t * @param {BigInteger|number|string|Array<string|number>|Object} bit \n\t * @returns {BigInteger}\n\t */\n\tclearBit(bit) {\n\t\tconst n = BigInteger._toInteger(bit);\n\t\tconst y = this.clone();\n\t\ty.element[n >>> 4] &= ~(1 << (n & 0xF));\n\t\ty._memory_reduction();\n\t\treturn y;\n\t}\n\n\t/**\n\t * 指定のビットの判定\n\t * @param {BigInteger|number|string|Array<string|number>|Object} bit\n\t * @returns {boolean}\n\t */\n\ttestBit(bit) {\n\t\tconst n = BigInteger._toInteger(bit);\n\t\treturn ((this.element[n >>> 4] >>> (n & 0xF)) & 1) !== 0;\n\t}\n\n\t/**\n\t * 累乗\n\t * @param {BigInteger|number|string|Array<string|number>|Object} exponent\n\t * @returns {BigInteger} pow(A, B)\n\t */\n\tpow(exponent) {\n\t\tconst e = new BigInteger(exponent);\n\t\tlet x = new BigInteger(this);\n\t\tlet y = new BigInteger(1);\n\t\twhile(e.element.length !== 0) {\n\t\t\tif((e.element[0] & 1) !== 0) {\n\t\t\t\ty = y.multiply(x);\n\t\t\t}\n\t\t\tx = x.multiply(x);\n\t\t\te._shift(-1);\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * 冪剰余\n\t * @param {BigInteger|number|string|Array<string|number>|Object} exponent\n\t * @param {BigInteger|number|string|Array<string|number>|Object} m \n\t * @returns {BigInteger} A^B mod m\n\t */\n\tmodPow(exponent, m) {\n\t\tconst m_ = BigInteger._toBigInteger(m);\n\t\tlet x = new BigInteger(this);\n\t\tlet y = new BigInteger(1);\n\t\tconst e = new BigInteger(exponent);\n\t\twhile(e.element.length !== 0) {\n\t\t\tif((e.element[0] & 1) !== 0) {\n\t\t\t\ty = y.multiply(x).mod(m_);\n\t\t\t}\n\t\t\tx = x.multiply(x).mod(m_);\n\t\t\te._shift(-1);\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * モジュラ逆数\n\t * @param {BigInteger|number|string|Array<string|number>|Object} m\n\t * @returns {BigInteger} A^(-1) mod m\n\t */\n\tmodInverse(m) {\n\t\tconst m_ = BigInteger._toBigInteger(m);\n\t\tconst y = this.extgcd(m);\n\t\tconst ONE  = new BigInteger(1);\n\t\tif(y[2].compareTo(ONE) !== 0) {\n\t\t\treturn null;\n\t\t}\n\t\t// 正にするため remainder ではなく mod を使用する\n\t\treturn y[0]._add(m_)._mod(m_);\n\t}\n\n\t/**\n\t * ミラーラビン素数判定法による複素判定\n\t * （非常に重たいので注意）\n\t * @param {BigInteger|number|string|Array<string|number>|Object} [certainty=100] - 素数判定法の繰り返し回数\n\t * @returns {boolean}\n\t */\n\tisProbablePrime(certainty) {\n\t\tconst e = this.element;\n\t\t//0, 1, 2 -> true\n\t\tif( (e.length === 0) || ((e.length === 1)&&(e[0] <= 2)) ) {\n\t\t\treturn true;\n\t\t}\n\t\t//even number -> false\n\t\telse if((e[0] & 1) === 0) {\n\t\t\treturn false;\n\t\t}\n\t\t// ミラーラビン素数判定法\n\t\t// かなり処理が重たいです。まあお遊び程度に使用という感じで。\n\t\tconst loop\t= certainty !== undefined ? BigInteger._toInteger(certainty) : 100;\n\t\tconst ZERO\t= new BigInteger(0);\n\t\tconst ONE\t= new BigInteger(1);\n\t\tconst n\t\t= this;\n\t\tconst LEN\t= n.bitLength();\n\t\tconst n_1\t= n.subtract(ONE);\n\t\tconst s \t= n_1.getLowestSetBit();\n\t\tconst d \t= n_1.shift(-s);\n\n\t\tif(loop <= 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor(let i = 0; i < loop; i++ ) {\n\t\t\t//[ 1, n - 1] の範囲から a を選択\n\t\t\tlet a;\n\t\t\tdo {\n\t\t\t\ta = BigInteger.createRandomBigInteger(LEN);\n\t\t\t} while(( a.compareTo(ZERO) === 0 )||( a.compareTo(n) !== -1 ));\n\n\t\t\tlet t = d;\n\t\t\t// a^t != 1 mod n\n\t\t\tlet y = a.modPow(t, n);\n\t\t\t\n\t\t\twhile(true) {\n\t\t\t\tif((t.equals(n_1)) || (y.equals(ONE)) || (y.equals(n_1))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ty = y.mul(y)._mod(n);\n\t\t\t\tt = t.shiftLeft(1);\n\t\t\t}\n\n\t\t\tif((!y.equals(n_1)) && ((t.element[0] & 1) === 0)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * 次の素数\n\t * @param {BigInteger|number|string|Array<string|number>|Object} [certainty=100] - 素数判定法の繰り返し回数\n\t * @param {BigInteger|number|string|Array<string|number>|Object} [search_max=100000] - 次の素数を見つけるまでの回数\n\t * @returns {BigInteger}\n\t */\n\tnextProbablePrime(certainty, search_max) {\n\t\tconst loop\t= certainty !== undefined ? (BigInteger._toInteger(certainty) >> 1) : 100 / 2;\n\t\tconst search_max_ = search_max !== undefined ? BigInteger._toInteger(search_max) : 100000;\n\t\tconst x = this.clone();\n\t\tfor(let i = 0; i < search_max_; i++) {\n\t\t\tx._add(BigInteger.ONE);\n\t\t\tif(x.isProbablePrime(loop)) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\t\tthrow \"nextProbablePrime [\" + search_max_ +\"]\";\n\t}\n\n\t/**\n\t * 階乗関数\n\t * @returns {BigInteger} n!\n\t */\n\tfactorial() {\n\t\tconst loop_max = BigInteger._toInteger(this);\n\t\tlet x = BigInteger.ONE;\n\t\tfor(let i = 2; i <= loop_max; i++) {\n\t\t\tx = x.multiply(i);\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 乱数を指定しなかった場合のデフォルト乱数を設定する\n\t * @param {Random} random\n\t */\n\tstatic setDefaultRandom(random) {\n\t\tDEFAULT_RANDOM = random;\n\t}\n\n\t/**\n\t * 乱数を指定しなかった場合のデフォルト乱数を取得する\n\t * @returns {Random}\n\t */\n\tstatic getDefaultRandom() {\n\t\treturn DEFAULT_RANDOM;\n\t}\n\n\n\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * 0\n\t * @returns {BigInteger} 0\n\t */\n\tstatic get ZERO() {\n\t\treturn DEFINE.ZERO;\n\t}\n\n\t/**\n\t * 1\n\t * @returns {BigInteger} 1\n\t */\n\tstatic get ONE() {\n\t\treturn DEFINE.ONE;\n\t}\n\t\n\t/**\n\t * 2\n\t * @returns {BigInteger} 2\n\t */\n\tstatic get TWO() {\n\t\treturn DEFINE.TWO;\n\t}\n\t\n\t/**\n\t * 10\n\t * @returns {BigInteger} 10\n\t */\n\tstatic get TEN() {\n\t\treturn DEFINE.TEN;\n\t}\n\n}\n\n/**\n * 内部で使用する定数値\n */\nconst DEFINE = {\n\tONE : new BigInteger(1),\n\tTWO : new BigInteger(2),\n\tTEN : new BigInteger(10),\n\tZERO : new BigInteger(0)\n};\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/BigInteger.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "DEFAULT_RANDOM",
    "memberof": "src/math/BigInteger.mjs",
    "static": true,
    "longname": "src/math/BigInteger.mjs~DEFAULT_RANDOM",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/BigInteger.mjs",
    "importStyle": null,
    "description": "乱数用クラスを指定しなかった場合に使用するデフォルト乱数クラス",
    "lineNumber": 18,
    "type": {
      "types": [
        "src/math/tools/Random.mjs~Random"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "class",
    "name": "IntegerTool",
    "memberof": "src/math/BigInteger.mjs",
    "static": true,
    "longname": "src/math/BigInteger.mjs~IntegerTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/BigInteger.mjs",
    "importStyle": null,
    "description": "BigInteger 内で使用する関数群",
    "lineNumber": 23,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "string_to_binary_number",
    "memberof": "src/math/BigInteger.mjs~IntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~IntegerTool.string_to_binary_number",
    "access": "public",
    "description": "数値が入った文字列から16進数ごとの配列へ変換する",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}  _16進数ごとに代入された配列 "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "数値が入ったテキストデータ（負の値などを含めない）"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radix",
        "description": "テキストデータの進数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "_16進数ごとに代入された配列"
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "number_to_binary_number",
    "memberof": "src/math/BigInteger.mjs~IntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~IntegerTool.number_to_binary_number",
    "access": "public",
    "description": "数値から16進数ごとの配列へ変換する",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} _16進数ごとに代入された配列 "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "変換したい数値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "_16進数ごとに代入された配列"
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "binary_number_to_string",
    "memberof": "src/math/BigInteger.mjs~IntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~IntegerTool.binary_number_to_string",
    "access": "public",
    "description": "16進数の配列データから数列が入った文字列を作成",
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} 指定した進数で桁ごとに代入された数値配列 "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "binary",
        "description": "16進数ごとに代入された配列"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radix",
        "description": "変換後の進数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "指定した進数で桁ごとに代入された数値配列"
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "ToBigIntegerFromString",
    "memberof": "src/math/BigInteger.mjs~IntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~IntegerTool.ToBigIntegerFromString",
    "access": "public",
    "description": "数値が入った文字列から多倍長数値を表すためのデータを作成する",
    "lineNumber": 141,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} 多倍長数値を表すためのデータ "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "数値が入ったテキストデータ"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "radix",
        "description": "テキストデータの進数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "多倍長数値を表すためのデータ"
    }
  },
  {
    "__docId__": 105,
    "kind": "class",
    "name": "BigInteger",
    "memberof": "src/math/BigInteger.mjs",
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/BigInteger.mjs",
    "importStyle": "BigInteger",
    "description": "多倍長整数演算クラス (immutable)",
    "lineNumber": 194,
    "interface": false
  },
  {
    "__docId__": 106,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#constructor",
    "access": "public",
    "description": "多倍長整数を作成\n文字列で指定する場合は指数表記には非対応。\n指定した進数で指定する場合は[\"ff\", 16] という配列で指定する。",
    "lineNumber": 202,
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "number",
        "description": "整数値"
      }
    ]
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "element",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#element",
    "access": "private",
    "description": "1要素、16ビット整数の配列",
    "lineNumber": 211,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "_sign",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_sign",
    "access": "private",
    "description": "正負（プラスなら+1、マイナスなら-1、0なら0）\n※計算によってはここの値の再設定をしていない箇所があるので、ここを見る時は注意",
    "lineNumber": 219,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "create",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.create",
    "access": "public",
    "description": "BigIntegerを作成する",
    "lineNumber": 269,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.valueOf",
    "access": "public",
    "description": "BigInteger を作成",
    "lineNumber": 283,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "_toBigInteger",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger._toBigInteger",
    "access": "private",
    "description": "BigInteger を作成",
    "lineNumber": 293,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "_toFloat",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger._toFloat",
    "access": "private",
    "description": "実数を作成",
    "lineNumber": 308,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "_toInteger",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger._toInteger",
    "access": "private",
    "description": "整数を作成",
    "lineNumber": 326,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "createRandomBigInteger",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.createRandomBigInteger",
    "access": "public",
    "description": "指定したビット数以内の乱数",
    "lineNumber": 344,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bitsize",
        "description": "作成する乱数のビット数"
      },
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": true,
        "name": "random",
        "description": "作成に使用するRandom"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "probablePrime",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.probablePrime",
    "access": "public",
    "description": "指定したビット数以内の素数",
    "lineNumber": 383,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bits",
        "description": "作成する素数の乱数のビット数"
      },
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": true,
        "name": "random",
        "description": "作成に使用するRandom"
      },
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "certainty",
        "description": "ミラーラビン素数判定法に使用する繰り返し回数"
      },
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "500",
        "defaultRaw": 500,
        "name": "create_count",
        "description": "乱数生成回数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#equals",
    "access": "public",
    "description": "等式",
    "lineNumber": 400,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#toString",
    "access": "public",
    "description": "文字列化",
    "lineNumber": 421,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "radix",
        "description": "文字列変換後の進数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "getShort",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#getShort",
    "access": "public",
    "description": "16進数ごとの配列で構成される内部値の指定した位置の値",
    "lineNumber": 461,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": "内部配列の位置"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 130,
    "kind": "get",
    "name": "intValue",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#intValue",
    "access": "public",
    "description": "32ビット整数値\n数値が大きいなど、収まりきらない場合に正確な数値にならない場合がある",
    "lineNumber": 474,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "get",
    "name": "longValue",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#longValue",
    "access": "public",
    "description": "64ビット整数値\n数値が大きいなど、収まりきらない場合に正確な数値にならない場合がある",
    "lineNumber": 488,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "get",
    "name": "doubleValue",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#doubleValue",
    "access": "public",
    "description": "64ビット実数値\n数値が大きいなど、収まりきらない場合に正確な数値にならない場合がある",
    "lineNumber": 505,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#clone",
    "access": "public",
    "description": "ディープコピー",
    "lineNumber": 513,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "isNegative",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#isNegative",
    "access": "public",
    "description": "実部の負数を判定",
    "lineNumber": 521,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(x) < 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(x) < 0"
    },
    "params": []
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "isZero",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#isZero",
    "access": "public",
    "description": "0 を判定",
    "lineNumber": 529,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === 0"
    },
    "params": []
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "isPositive",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#isPositive",
    "access": "public",
    "description": "正数を判定",
    "lineNumber": 538,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(x) > 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(x) > 0"
    },
    "params": []
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "getLowestSetBit",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#getLowestSetBit",
    "access": "public",
    "description": "2進数で表した場合に最も右側に現れる1の桁数",
    "lineNumber": 546,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 存在しない場合は -1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "存在しない場合は -1"
    },
    "params": []
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "bitLength",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#bitLength",
    "access": "public",
    "description": "2進数で表した場合の長さ",
    "lineNumber": 564,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "bitCount",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#bitCount",
    "access": "public",
    "description": "2の補数表現で表した場合に立つビットの数",
    "lineNumber": 582,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "getTwosComplement",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#getTwosComplement",
    "access": "private",
    "description": "加算に適用できる数値（負の場合は、2の補数表現）",
    "lineNumber": 610,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "bit_length",
        "description": "ビット長（省略時は自動計算）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "_and",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_and",
    "access": "private",
    "description": "論理積（ミュータブル）",
    "lineNumber": 642,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A &= B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A &= B"
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "and",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#and",
    "access": "public",
    "description": "論理積",
    "lineNumber": 677,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A & B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A & B"
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "_or",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_or",
    "access": "private",
    "description": "論理和（ミュータブル）",
    "lineNumber": 687,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A |= B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A |= B"
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "or",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#or",
    "access": "public",
    "description": "論理和",
    "lineNumber": 716,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A | B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A | B"
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "_xor",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_xor",
    "access": "private",
    "description": "排他的論理和（ミュータブル）",
    "lineNumber": 726,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A ^= B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A ^= B"
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "xor",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#xor",
    "access": "public",
    "description": "排他的論理和",
    "lineNumber": 755,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A ^ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A ^ B"
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "_not",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_not",
    "access": "private",
    "description": "ビット反転",
    "lineNumber": 764,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "not",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#not",
    "access": "public",
    "description": "ビット反転（ミュータブル）",
    "lineNumber": 772,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} !A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "!A"
    },
    "params": []
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "_andNot",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_andNot",
    "access": "private",
    "description": "否定論理積（ミュータブル）",
    "lineNumber": 782,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "andNot",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#andNot",
    "access": "public",
    "description": "否定論理積",
    "lineNumber": 792,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A & (!B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A & (!B)"
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "_nand",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_nand",
    "access": "private",
    "description": "否定論理積（ミュータブル）",
    "lineNumber": 802,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "nand",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#nand",
    "access": "public",
    "description": "否定論理積",
    "lineNumber": 811,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A & (!B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A & (!B)"
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "_orNot",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_orNot",
    "access": "private",
    "description": "否定論理和（ミュータブル）",
    "lineNumber": 821,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "orNot",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#orNot",
    "access": "public",
    "description": "否定論理和",
    "lineNumber": 831,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} !(A | B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "!(A | B)"
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "_nor",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_nor",
    "access": "private",
    "description": "否定論理和（ミュータブル）",
    "lineNumber": 841,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "nor",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#nor",
    "access": "public",
    "description": "否定論理和",
    "lineNumber": 850,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} !(A | B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "!(A | B)"
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "_memory_allocation",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_memory_allocation",
    "access": "private",
    "description": "指定したビット長まで配列を拡張（ミュータブル）",
    "lineNumber": 859,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bit_length",
        "description": "ビット数"
      }
    ],
    "return": null
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "_memory_reduction",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_memory_reduction",
    "access": "private",
    "description": "内部データの正規化（ミュータブル）",
    "lineNumber": 874,
    "params": [],
    "return": null
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "gcd",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#gcd",
    "access": "public",
    "description": "ユークリッド互除法",
    "lineNumber": 892,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} gcd(x, y)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "gcd(x, y)"
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "extgcd",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#extgcd",
    "access": "public",
    "description": "拡張ユークリッド互除法",
    "lineNumber": 911,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<BigInteger>} a*x + b*y = c = gcd(x, y) となる [a, b, c]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<BigInteger>"
      ],
      "spread": false,
      "description": "a*x + b*y = c = gcd(x, y) となる [a, b, c]"
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "_abs",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_abs",
    "access": "private",
    "description": "絶対値（ミュータブル）",
    "lineNumber": 943,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "abs",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#abs",
    "access": "public",
    "description": "絶対値",
    "lineNumber": 953,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} abs(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "abs(A)"
    },
    "params": []
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "_negate",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_negate",
    "access": "private",
    "description": "負数（ミュータブル）",
    "lineNumber": 962,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A = -A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A = -A"
    },
    "params": []
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "negate",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#negate",
    "access": "public",
    "description": "負数",
    "lineNumber": 971,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} -A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A"
    },
    "params": []
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "signum",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#signum",
    "access": "public",
    "description": "符号値",
    "lineNumber": 979,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 1, -1, 0の場合は0を返す"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "1, -1, 0の場合は0を返す"
    },
    "params": []
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "sign",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#sign",
    "access": "public",
    "description": "符号値",
    "lineNumber": 990,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 1, -1, 0の場合は0を返す"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "1, -1, 0の場合は0を返す"
    },
    "params": []
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "compareToAbs",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#compareToAbs",
    "access": "public",
    "description": "符号を除いた値同士を比較",
    "lineNumber": 999,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} abs(A) < abs(B) ? 1 : (abs(A) === abs(B) ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "abs(A) < abs(B) ? 1 : (abs(A) === abs(B) ? 0 : -1)"
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#compareTo",
    "access": "public",
    "description": "値同士を比較",
    "lineNumber": 1021,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A > B ? 1 : (A === B ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A > B ? 1 : (A === B ? 0 : -1)"
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#max",
    "access": "public",
    "description": "最大値",
    "lineNumber": 1042,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#min",
    "access": "public",
    "description": "最小値",
    "lineNumber": 1057,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "_shift",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_shift",
    "access": "private",
    "description": "ビットシフト（ミュータブル）",
    "lineNumber": 1073,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A <<= n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "shift_length",
        "description": "上位へのビットシフト数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A <<= n"
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "shift",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#shift",
    "access": "public",
    "description": "ビットシフト",
    "lineNumber": 1165,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A << n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A << n"
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "shiftLeft",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#shiftLeft",
    "access": "public",
    "description": "左へビットシフト",
    "lineNumber": 1174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A << n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A << n"
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "shiftRight",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#shiftRight",
    "access": "public",
    "description": "右へビットシフト",
    "lineNumber": 1183,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A >> n"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A >> n"
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "_add",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_add",
    "access": "private",
    "description": "加算（ミュータブル）",
    "lineNumber": 1193,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A += B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A += B"
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#add",
    "access": "public",
    "description": "加算",
    "lineNumber": 1253,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A + B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A + B"
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "_subtract",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_subtract",
    "access": "private",
    "description": "減算（ミュータブル）",
    "lineNumber": 1263,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A -= B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A -= B"
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "subtract",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#subtract",
    "access": "public",
    "description": "減算",
    "lineNumber": 1276,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "sub",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#sub",
    "access": "public",
    "description": "減算",
    "lineNumber": 1285,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "_multiply",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_multiply",
    "access": "private",
    "description": "乗算（ミュータブル）",
    "lineNumber": 1295,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A *= B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A *= B"
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "multiply",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#multiply",
    "access": "public",
    "description": "乗算",
    "lineNumber": 1307,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "mul",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#mul",
    "access": "public",
    "description": "乗算",
    "lineNumber": 1369,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "_divideAndRemainder",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_divideAndRemainder",
    "access": "private",
    "description": "割り算と余り（ミュータブル）",
    "lineNumber": 1379,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<BigInteger>} [C = floor(A / B), A - C * B]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<BigInteger>"
      ],
      "spread": false,
      "description": "[C = floor(A / B), A - C * B]"
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "divideAndRemainder",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#divideAndRemainder",
    "access": "public",
    "description": "割り算と余り",
    "lineNumber": 1425,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<BigInteger>} [C = floor(A / B), A - C * B]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<BigInteger>"
      ],
      "spread": false,
      "description": "[C = floor(A / B), A - C * B]"
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "_divide",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_divide",
    "access": "private",
    "description": "割り算（ミュータブル）",
    "lineNumber": 1435,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} floor(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "floor(A / B)"
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "divide",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#divide",
    "access": "public",
    "description": "割り算",
    "lineNumber": 1444,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} floor(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "floor(A / B)"
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "div",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#div",
    "access": "public",
    "description": "割り算",
    "lineNumber": 1453,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} floor(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "floor(A / B)"
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "_remainder",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_remainder",
    "access": "private",
    "description": "割り算の余り（ミュータブル）",
    "lineNumber": 1463,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A %= B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A %= B"
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "remainder",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#remainder",
    "access": "public",
    "description": "割り算の余り",
    "lineNumber": 1472,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A % B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A % B"
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "rem",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#rem",
    "access": "public",
    "description": "割り算の余り",
    "lineNumber": 1481,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A % B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A % B"
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "_mod",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_mod",
    "access": "private",
    "description": "割り算の正の余り（ミュータブル）",
    "lineNumber": 1491,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A = A mod B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A = A mod B"
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "mod",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#mod",
    "access": "public",
    "description": "割り算の正の余り",
    "lineNumber": 1513,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A mod B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A mod B"
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "_setBit",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_setBit",
    "access": "private",
    "description": "特定のビットを立てる（ミュータブル）",
    "lineNumber": 1523,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "setBit",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#setBit",
    "access": "public",
    "description": "特定のビットを立てる",
    "lineNumber": 1535,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "_flipBit",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#_flipBit",
    "access": "private",
    "description": "特定のビットを反転させる（ミュータブル）",
    "lineNumber": 1546,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "flipBit",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#flipBit",
    "access": "public",
    "description": "特定のビットを反転させる",
    "lineNumber": 1558,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "clearBit",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#clearBit",
    "access": "public",
    "description": "特定のビットを下げる",
    "lineNumber": 1568,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "testBit",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#testBit",
    "access": "public",
    "description": "指定のビットの判定",
    "lineNumber": 1581,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "pow",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#pow",
    "access": "public",
    "description": "累乗",
    "lineNumber": 1591,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} pow(A, B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exponent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "pow(A, B)"
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "modPow",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#modPow",
    "access": "public",
    "description": "冪剰余",
    "lineNumber": 1611,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A^B mod m"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exponent",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A^B mod m"
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "modInverse",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#modInverse",
    "access": "public",
    "description": "モジュラ逆数",
    "lineNumber": 1631,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} A^(-1) mod m"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "A^(-1) mod m"
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "isProbablePrime",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#isProbablePrime",
    "access": "public",
    "description": "ミラーラビン素数判定法による複素判定\n（非常に重たいので注意）",
    "lineNumber": 1648,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "certainty",
        "description": "素数判定法の繰り返し回数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "nextProbablePrime",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#nextProbablePrime",
    "access": "public",
    "description": "次の素数",
    "lineNumber": 1705,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "certainty",
        "description": "素数判定法の繰り返し回数"
      },
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100000",
        "defaultRaw": 100000,
        "name": "search_max",
        "description": "次の素数を見つけるまでの回数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/BigInteger.mjs~BigInteger#factorial",
    "access": "public",
    "description": "階乗関数",
    "lineNumber": 1722,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} n!"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "n!"
    },
    "params": []
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "setDefaultRandom",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.setDefaultRandom",
    "access": "public",
    "description": "乱数を指定しなかった場合のデフォルト乱数を設定する",
    "lineNumber": 1735,
    "params": [
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": false,
        "name": "random",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "getDefaultRandom",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.getDefaultRandom",
    "access": "public",
    "description": "乱数を指定しなかった場合のデフォルト乱数を取得する",
    "lineNumber": 1743,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Random}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Random"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 228,
    "kind": "get",
    "name": "ZERO",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.ZERO",
    "access": "public",
    "description": "0",
    "lineNumber": 1758,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "0"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "get",
    "name": "ONE",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.ONE",
    "access": "public",
    "description": "1",
    "lineNumber": 1766,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} 1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "get",
    "name": "TWO",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.TWO",
    "access": "public",
    "description": "2",
    "lineNumber": 1774,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} 2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "2"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "get",
    "name": "TEN",
    "memberof": "src/math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/BigInteger.mjs~BigInteger.TEN",
    "access": "public",
    "description": "10",
    "lineNumber": 1782,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} 10"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "10"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "variable",
    "name": "DEFINE",
    "memberof": "src/math/BigInteger.mjs",
    "static": true,
    "longname": "src/math/BigInteger.mjs~DEFINE",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/BigInteger.mjs",
    "importStyle": null,
    "description": "内部で使用する定数値",
    "lineNumber": 1791,
    "type": {
      "types": [
        "{\"ONE\": *, \"TWO\": *, \"TEN\": *, \"ZERO\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 233,
    "kind": "file",
    "name": "src/math/Complex.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport Random from \"./tools/Random.mjs\";\n\n// @ts-ignore\nimport Matrix from \"./Matrix.mjs\";\n\n/**\n * Complex 内で使用する乱数生成クラス\n */\nconst random_class = new Random();\n\n/**\n * Complex 内で使用する関数群\n */\nclass ComplexTool {\n\n\t/**\n\t * 文字列から複素数を解析する\n\t * @param {string} text - 解析したい文字列\n\t * @returns {{real : number, imag : number}}\n\t */\n\tstatic ToComplexFromString(text) {\n\t\tlet str = text.replace(/\\s/g, \"\").toLowerCase();\n\t\tstr = str.replace(/infinity|inf/g, \"1e100000\");\n\t\t// 複素数の宣言がない場合\n\t\tif(!(/[ij]/.test(str))) {\n\t\t\treturn {\n\t\t\t\treal : parseFloat(str),\n\t\t\t\timag : 0.0\n\t\t\t};\n\t\t}\n\t\t// この時点で複素数である。\n\t\t// 以下真面目に調査\n\t\tlet re = 0;\n\t\tlet im = 0;\n\t\tlet buff;\n\t\t// 最後が$なら右側が実数、最後が[+-]なら左側が実数\n\t\tbuff = str.match(/[+-]?(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))($|[+-])/);\n\t\tif(buff) {\n\t\t\tre = parseFloat(buff[0]);\n\t\t}\n\t\t// 複素数は数値が省略される場合がある\n\t\tbuff = str.match(/[+-]?(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))?[ij]/);\n\t\tif(buff) {\n\t\t\tbuff = buff[0].substring(0, buff[0].length - 1);\n\t\t\t// i, +i, -j のように実数部がなく、数値もない場合\n\t\t\tif((/^[-+]$/.test(buff)) || buff.length === 0) {\n\t\t\t\tim = buff === \"-\" ? -1 : 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tim = parseFloat(buff);\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\treal : re,\n\t\t\timag : im\n\t\t};\n\t}\n\n}\n\n/**\n * 複素数クラス (immutable)\n */\nexport default class Complex {\n\n\t/**\n\t * 複素数を作成\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number - 複素数( \"1 + j\", [1 , 1] など)\n\t */\n\tconstructor(number) {\n\t\t// 行列で使うためイミュータブルは必ず守ること。\n\t\tif(arguments.length === 1) {\n\t\t\tconst obj = number;\n\t\t\tif(obj instanceof Complex) {\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * 実部\n\t\t\t\t * @private\n\t\t\t\t * @type {number}\n\t\t\t\t */\n\t\t\t\tthis._re = obj._re;\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * 虚部\n\t\t\t\t * @private\n\t\t\t\t * @type {number}\n\t\t\t\t */\n\t\t\t\tthis._im = obj._im;\n\t\t\t}\n\t\t\telse if(typeof obj === \"number\") {\n\t\t\t\tthis._re = obj;\n\t\t\t\tthis._im = 0.0;\n\t\t\t}\n\t\t\telse if(obj instanceof Array) {\n\t\t\t\tif(obj.length === 2) {\n\t\t\t\t\tthis._re = obj[0];\n\t\t\t\t\tthis._im = obj[1];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow \"Complex Unsupported argument \" + arguments;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(typeof obj === \"string\") {\n\t\t\t\tconst x = ComplexTool.ToComplexFromString(obj);\n\t\t\t\tthis._re = x.real;\n\t\t\t\tthis._im = x.imag;\n\t\t\t}\n\t\t\telse if((obj instanceof Object) && (typeof obj._re === \"number\") && (typeof obj._im === \"number\")) {\n\t\t\t\tthis._re = obj._re;\n\t\t\t\tthis._im = obj._im;\n\t\t\t}\n\t\t\telse if(obj instanceof Object) {\n\t\t\t\tconst x = ComplexTool.ToComplexFromString(obj.toString());\n\t\t\t\tthis._re = x.real;\n\t\t\t\tthis._im = x.imag;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow \"Complex Unsupported argument \" + arguments;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow \"Complex Many arguments : \" + arguments.length;\n\t\t}\n\t}\n\n\t/**\n\t * Complex を作成\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @returns {Complex}\n\t */\n\tstatic create(number) {\n\t\tif(number instanceof Complex) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new Complex(number);\n\t\t}\n\t}\n\t\n\t/**\n\t * 指定した数値から Complex 型に変換\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @returns {Complex}\n\t */\n\tstatic valueOf(number) {\n\t\treturn Complex.valueOf(number);\n\t}\n\t\n\t/**\n\t * 複素数を作成\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number \n\t * @returns {Complex}\n\t * @private\n\t */\n\tstatic _toComplex(number) {\n\t\tif(number instanceof Complex) {\n\t\t\treturn number;\n\t\t}\n\t\telse if(number instanceof Matrix) {\n\t\t\treturn Matrix._toComplex(number);\n\t\t}\n\t\telse {\n\t\t\treturn new Complex(number);\n\t\t}\n\t}\n\n\t/**\n\t * 実数を作成\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toDouble(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn number;\n\t\t}\n\t\tconst complex_number = Complex._toComplex(number);\n\t\tif(complex_number.isReal()) {\n\t\t\treturn complex_number.real;\n\t\t}\n\t\telse {\n\t\t\tthrow \"not support complex numbers.[\" + number + \"]\";\n\t\t}\n\t}\n\n\t/**\n\t * 整数を作成\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toInteger(number) {\n\t\treturn Complex._toDouble(number) | 0;\n\t}\n\n\t/**\n\t * 32ビット整数に変換\n\t * @returns {number}\n\t */\n\tget intValue() {\n\t\treturn this.real | 0;\n\t}\n\n\t/**\n\t * 64ビット実数に変換\n\t * @returns {number}\n\t */\n\tget doubleValue() {\n\t\treturn this.real;\n\t}\n\n\t/**\n\t * ディープコピー\n\t * @returns {Complex} \n\t */\n\tclone() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * 文字列データ\n\t * @returns {string} \n\t */\n\ttoString() {\n\t\tconst formatG = function(x) {\n\t\t\tlet numstr = x.toPrecision(6);\n\t\t\tif(numstr.indexOf(\".\") !== -1) {\n\t\t\t\tnumstr = numstr.replace(/\\.?0+$/, \"\");  // 1.00 , 1.10\n\t\t\t\tnumstr = numstr.replace(/\\.?0+e/, \"e\"); // 1.0e , 1.10e\n\t\t\t}\n\t\t\telse if(/inf/i.test(numstr)) {\n\t\t\t\tif(x === Number.POSITIVE_INFINITY) {\n\t\t\t\t\treturn \"Inf\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn \"-Inf\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(/nan/i.test(numstr)) {\n\t\t\t\treturn \"NaN\";\n\t\t\t}\n\t\t\treturn numstr;\n\t\t};\n\t\tif(!this.isReal()) {\n\t\t\tif(this._re === 0) {\n\t\t\t\treturn formatG(this._im) + \"i\";\n\t\t\t}\n\t\t\telse if((this._im >= 0) || (Number.isNaN(this._im))) {\n\t\t\t\treturn formatG(this._re) + \" + \" + formatG(this._im) + \"i\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn formatG(this._re) + \" - \" + formatG(-this._im) + \"i\";\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn formatG(this._re);\n\t\t}\n\t}\n\t\n\t/**\n\t * ランダムな値を作成\n\t * @returns {Complex}\n\t */\n\tstatic rand() {\n\t\treturn new Complex(random_class.nextDouble());\n\t}\n\n\t/**\n\t * 正規分布に従うランダムな値を作成\n\t * @returns {Complex}\n\t */\n\tstatic randn() {\n\t\treturn new Complex(random_class.nextGaussian());\n\t}\n\n\t/**\n\t * 等式\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [epsilon=Number.EPSILON] - 誤差を実数で指定\n\t * @returns {boolean} A === B\n\t */\n\tequals(number, epsilon) {\n\t\tconst x = Complex._toComplex(number);\n\t\tconst tolerance = epsilon ? Complex._toDouble(epsilon) : Number.EPSILON;\n\t\t// 無限大、非数の値も含めて一度確認\n\t\tif((this._re === x._re) && (this._im === x._im)) {\n\t\t\treturn true;\n\t\t}\n\t\t// 誤差を含んだ値の比較\n\t\treturn (Math.abs(this._re - x._re) <  tolerance) && (Math.abs(this._im - x._im) < tolerance);\n\t}\n\n\t/**\n\t * 実部\n\t * @returns {number} real(A)\n\t */\n\tget real() {\n\t\treturn this._re;\n\t}\n\t\n\t/**\n\t * 虚部\n\t * @returns {number} imag(A)\n\t */\n\tget imag() {\n\t\treturn this._im;\n\t}\n\n\t/**\n\t * ノルム\n\t * @returns {number} |A|\n\t */\n\tget norm() {\n\t\tif(this._im === 0) {\n\t\t\treturn Math.abs(this._re);\n\t\t}\n\t\telse if(this._re === 0) {\n\t\t\treturn Math.abs(this._im);\n\t\t}\n\t\telse {\n\t\t\treturn Math.sqrt(this._re * this._re + this._im * this._im);\n\t\t}\n\t}\n\n\t/**\n\t * 偏角\n\t * @returns {number} arg(A)\n\t */\n\tget arg() {\n\t\tif(this._im === 0) {\n\t\t\treturn this._re >= 0 ? 0 : Math.PI;\n\t\t}\n\t\telse if(this._re === 0) {\n\t\t\treturn Math.PI * (this._im >= 0.0 ? 0.5 : -0.5);\n\t\t}\n\t\telse {\n\t\t\treturn Math.atan2(this._im, this._re);\n\t\t}\n\t}\n\n\t/**\n\t * 実部、虚部を表す際の小数点以下の桁数\n\t * @returns {number} 小数点の桁数\n\t */\n\tgetDecimalPosition() {\n\t\tconst ep = Number.EPSILON;\n\t\tconst getDecimal = function(x) {\n\t\t\tif(!Number.isFinite(x)) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tlet a = x;\n\t\t\tlet point = 0;\n\t\t\tfor(let i = 0; i < 20; i++) {\n\t\t\t\tif(Math.abs(a - (a | 0)) <= ep) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ta *= 10;\n\t\t\t\tpoint++;\n\t\t\t}\n\t\t\treturn point;\n\t\t};\n\t\treturn Math.max( getDecimal(this.real), getDecimal(this.imag) );\n\t}\n\n\t/**\n\t * 加算\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number \n\t * @returns {Complex} A + B\n\t */\n\tadd(number) {\n\t\tconst x = new Complex(number);\n\t\tx._re = this._re + x._re;\n\t\tx._im = this._im + x._im;\n\t\treturn x;\n\t}\n\n\t/**\n\t * 減算\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @returns {Complex} A - B\n\t */\n\tsub(number) {\n\t\tconst x = new Complex(number);\n\t\tx._re = this._re - x._re;\n\t\tx._im = this._im - x._im;\n\t\treturn x;\n\t}\n\n\t/**\n\t * 乗算\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @returns {Complex} A * B\n\t */\n\tmul(number) {\n\t\tconst x = new Complex(number);\n\t\tif((this._im === 0) && (x._im === 0)) {\n\t\t\tx._re = this._re * x._re;\n\t\t\treturn x;\n\t\t}\n\t\telse if((this._re === 0) && (x._re === 0)) {\n\t\t\tx._re = - this._im * x._im;\n\t\t\tx._im = 0;\n\t\t\treturn x;\n\t\t}\n\t\telse {\n\t\t\tconst re = this._re * x._re - this._im * x._im;\n\t\t\tconst im = this._im * x._re + this._re * x._im;\n\t\t\tx._re = re;\n\t\t\tx._im = im;\n\t\t\treturn x;\n\t\t}\n\t}\n\t\n\t/**\n\t * ドット積\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @returns {Complex} A * conj(B)\n\t */\n\tdot(number) {\n\t\tconst x = new Complex(number);\n\t\tif((this._im === 0) && (x._im === 0)) {\n\t\t\tx._re = this._re * x._re;\n\t\t\treturn x;\n\t\t}\n\t\telse if((this._re === 0) && (x._re === 0)) {\n\t\t\tx._re = this._im * x._im;\n\t\t\tx._im = 0;\n\t\t\treturn x;\n\t\t}\n\t\telse {\n\t\t\tconst re = this._re * x._re + this._im * x._im;\n\t\t\tconst im = - this._im * x._re + this._re * x._im;\n\t\t\tx._re = re;\n\t\t\tx._im = im;\n\t\t\treturn x;\n\t\t}\n\t}\n\t\n\t/**\n\t * 割り算\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @returns {Complex} A / B\n\t */\n\tdiv(number) {\n\t\tconst x = new Complex(number);\n\t\tif((this._im === 0) && (x._im === 0)) {\n\t\t\tx._re = this._re / x._re;\n\t\t\treturn x;\n\t\t}\n\t\telse if((this._re === 0) && (x._re === 0)) {\n\t\t\tx._re = this._im / x._im;\n\t\t\tx._im = 0;\n\t\t\treturn x;\n\t\t}\n\t\telse {\n\t\t\tconst re = this._re * x._re + this._im * x._im;\n\t\t\tconst im = this._im * x._re - this._re * x._im;\n\t\t\tconst denominator = 1.0 / (x._re * x._re + x._im * x._im);\n\t\t\tx._re = re * denominator;\n\t\t\tx._im = im * denominator;\n\t\t\treturn x;\n\t\t}\n\t}\n\n\t/**\n\t * 割り算の正の余り\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number - 複素数を含まない数値 \n\t * @returns {Complex} A mod B\n\t */\n\tmod(number) {\n\t\tconst x = new Complex(number);\n\t\tif((this._im !== 0) || (x._im !== 0)) {\n\t\t\tthrow \"calculation method is undefined.\";\n\t\t}\n\t\tlet _re = this._re - x._re * (0 | (this._re / x._re));\n\t\tif(_re < 0) {\n\t\t\t_re += x._re;\n\t\t}\n\t\tx._re = _re;\n\t\treturn x;\n\t}\n\n\t/**\n\t * 逆数\n\t * @returns {Complex} 1 / A\n\t */\n\tinv() {\n\t\tif(this._im === 0) {\n\t\t\treturn new Complex(1.0 / this._re);\n\t\t}\n\t\telse if(this._re === 0) {\n\t\t\treturn new Complex([0, - 1.0 / this._im]);\n\t\t}\n\t\treturn Complex.ONE.div(this);\n\t}\n\n\t/**\n\t * 符号値\n\t * @returns {Complex} [-1,1] 複素数の場合はノルムを1にした値。\n\t */\n\tsign() {\n\t\tif(this._im === 0) {\n\t\t\tif(this._re === 0) {\n\t\t\t\treturn new Complex(0);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new Complex(this._re > 0 ? 1 : -1);\n\t\t\t}\n\t\t}\n\t\treturn this.div(this.norm);\n\t}\n\t\n\t/**\n\t * 最大値\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [epsilon=Number.EPSILON] - 誤差を実数で指定\n\t * @returns {Complex} max([A, B])\n\t */\n\tmax(number, epsilon) {\n\t\tconst x = Complex._toComplex(number);\n\t\tif(this.compareTo(x, epsilon) >= 0) {\n\t\t\treturn this;\n\t\t}\n\t\telse {\n\t\t\treturn x;\n\t\t}\n\t}\n\n\t/**\n\t * 最小値\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [epsilon=Number.EPSILON] - 誤差を実数で指定\n\t * @returns {Complex} min([A, B])\n\t */\n\tmin(number, epsilon) {\n\t\tconst x = Complex._toComplex(number);\n\t\tif(this.compareTo(x, epsilon) <= 0) {\n\t\t\treturn this;\n\t\t}\n\t\telse {\n\t\t\treturn x;\n\t\t}\n\t}\n\n\t/**\n\t * 値同士を比較\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [epsilon=Number.EPSILON] - 誤差を実数で指定\n\t * @returns {number} A > B ? 1 : (A === B ? 0 : -1)\n\t */\n\tcompareTo(number, epsilon) {\n\t\tconst x1 = this;\n\t\tconst x2 = Complex._toComplex(number);\n\t\tconst tolerance = epsilon ? Complex._toDouble(epsilon) : Number.EPSILON;\n\t\tconst a = x1.real + x1.imag;\n\t\tconst b = x2.real + x2.imag;\n\t\tif((Math.abs(a - b) < tolerance)) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn a > b ? 1 : -1;\n\t}\n\n\t// ----------------------\n\t// テスト系\n\t// ----------------------\n\t\n\t/**\n\t * 整数を判定\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [epsilon=Number.EPSILON] - 誤差を実数で指定\n\t * @returns {boolean}\n\t */\n\tisInteger(epsilon) {\n\t\tconst tolerance = epsilon ? Complex._toDouble(epsilon) : Number.EPSILON;\n\t\treturn this.isReal() && (Math.abs(this._re - (this._re | 0)) < tolerance);\n\t}\n\n\t/**\n\t * 複素整数（整数も含む）を判定\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [epsilon=Number.EPSILON] - 誤差を実数で指定\n\t * @returns {boolean} real(A) === 整数 && imag(A) === 整数\n\t */\n\tisComplexInteger(epsilon) {\n\t\tconst tolerance = epsilon ? Complex._toDouble(epsilon) : Number.EPSILON;\n\t\t// 複素整数\n\t\treturn (Math.abs(this._re - (this._re | 0)) < tolerance) &&\n\t\t\t\t(Math.abs(this._im - (this._im | 0)) < tolerance);\n\t}\n\n\t/**\n\t * 0 を判定\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [epsilon=Number.EPSILON] - 誤差を実数で指定\n\t * @returns {boolean} A === 0\n\t */\n\tisZero(epsilon) {\n\t\tconst tolerance = epsilon ? Complex._toDouble(epsilon) : Number.EPSILON;\n\t\treturn (Math.abs(this._re) < tolerance) && (Math.abs(this._im) < tolerance);\n\t}\n\n\t/**\n\t * 1 を判定\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [epsilon=Number.EPSILON] - 誤差を実数で指定\n\t * @returns {boolean} A === 1\n\t */\n\tisOne(epsilon) {\n\t\tconst tolerance = epsilon ? Complex._toDouble(epsilon) : Number.EPSILON;\n\t\treturn (Math.abs(this._re - 1.0) < tolerance) && (Math.abs(this._im) < tolerance);\n\t}\n\n\t/**\n\t * 複素数（虚部が0以外）を判定\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [epsilon=Number.EPSILON] - 誤差を実数で指定\n\t * @returns {boolean} imag(A) !== 0\n\t */\n\tisComplex(epsilon) {\n\t\tconst tolerance = epsilon ? Complex._toDouble(epsilon) : Number.EPSILON;\n\t\treturn (Math.abs(this._im) >= tolerance);\n\t}\n\t\n\t/**\n\t * 実数を判定\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [epsilon=Number.EPSILON] - 誤差を実数で指定\n\t * @returns {boolean} imag(A) === 0\n\t */\n\tisReal(epsilon) {\n\t\tconst tolerance = epsilon ? Complex._toDouble(epsilon) : Number.EPSILON;\n\t\treturn (Math.abs(this._im) < tolerance);\n\t}\n\n\t/**\n\t * 非数を判定\n\t * @returns {boolean} isNaN(A)\n\t */\n\tisNaN() {\n\t\treturn isNaN(this._re) || isNaN(this._im);\n\t}\n\n\t/**\n\t * 実部の正数を判定\n\t * @returns {boolean} real(x) > 0\n\t */\n\tisPositive() {\n\t\t// Number.EPSILONは使用しない。どちらにぶれるか不明な点及び\n\t\t// わずかな負の数だった場合に、sqrtでエラーが発生するため\n\t\treturn 0.0 < this._re;\n\t}\n\n\t/**\n\t * 実部の負数を判定\n\t * @returns {boolean} real(x) < 0\n\t */\n\tisNegative() {\n\t\treturn 0.0 > this._re;\n\t}\n\n\t/**\n\t * 実部の非負値を判定\n\t * @returns {boolean} real(x) >= 0\n\t */\n\tisNotNegative() {\n\t\treturn 0.0 <= this._re;\n\t}\n\n\t/**\n\t * 無限を判定\n\t * @returns {boolean} isInfinite(A)\n\t */\n\tisInfinite() {\n\t\treturn\t(this._re === Number.POSITIVE_INFINITY) ||\n\t\t\t\t(this._im === Number.POSITIVE_INFINITY) ||\n\t\t\t\t(this._re === Number.NEGATIVE_INFINITY) ||\n\t\t\t\t(this._im === Number.NEGATIVE_INFINITY);\n\t}\n\t\n\t/**\n\t * 有限数を判定\n\t * @returns {boolean} !isNaN(A) && !isInfinite(A)\n\t */\n\tisFinite() {\n\t\treturn !this.isNaN() && !this.isInfinite();\n\t}\n\n\t// ----------------------\n\t// 複素数\n\t// ----------------------\n\t\n\t/**\n\t * 絶対値\n\t * @returns {Complex} abs(A)\n\t */\n\tabs() {\n\t\treturn new Complex(this.norm);\n\t}\n\n\t/**\n\t * 共役複素数\n\t * @returns {Complex} real(A) - imag(A)j\n\t */\n\tconj() {\n\t\tif(this._im === 0) {\n\t\t\treturn this;\n\t\t}\n\t\t// 共役複素数\n\t\treturn new Complex([this._re, -this._im]);\n\t}\n\n\t/**\n\t * 負数\n\t * @returns {Complex} -A\n\t */\n\tnegate() {\n\t\treturn new Complex([-this._re, -this._im]);\n\t}\n\n\t// ----------------------\n\t// 指数\n\t// ----------------------\n\t\n\t/**\n\t * 累乗\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} number\n\t * @returns {Complex} pow(A, B)\n\t */\n\tpow(number) {\n\t\tconst A = this;\n\t\tconst B = new Complex(number);\n\t\t// -2 ^ 0.5 ... 複素数\n\t\t// -2 ^ 1   ... 実数\n\t\t//  2 ^ 0.5 ... 実数\n\t\tif(B.isReal()) {\n\t\t\tif(A.isReal() && (A.isNotNegative() || B.isInteger())) {\n\t\t\t\tB._re = Math.pow(A._re, B._re);\n\t\t\t\treturn B;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst r = Math.pow(A.norm, B._re);\n\t\t\t\tconst s = A.arg * B._re;\n\t\t\t\tB._re = r * Math.cos(s);\n\t\t\t\tB._im = r * Math.sin(s);\n\t\t\t\treturn B;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn B.mul(A.log()).exp();\n\t\t}\n\t}\n\n\t/**\n\t * 2乗\n\t * @returns {Complex} pow(A, 2)\n\t */\n\tsquare() {\n\t\tif(this._im === 0.0) {\n\t\t\treturn new Complex(this._re * this._re);\n\t\t}\n\t\treturn this.mul(this);\n\t}\n\n\t/**\n\t * 平方根\n\t * @returns {Complex} sqrt(A)\n\t */\n\tsqrt() {\n\t\tif(this.isReal()) {\n\t\t\tif(this.isNotNegative()) {\n\t\t\t\treturn new Complex(Math.sqrt(this._re));\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new Complex([0, Math.sqrt(-this._re)]);\n\t\t\t}\n\t\t}\n\t\tconst r = Math.sqrt(this.norm);\n\t\tconst s = this.arg * 0.5;\n\t\treturn new Complex([r * Math.cos(s), r * Math.sin(s)]);\n\t}\n\n\t/**\n\t * 対数\n\t * @returns {Complex} log(A)\n\t */\n\tlog() {\n\t\tif(this.isReal() && this.isNotNegative()) {\n\t\t\treturn new Complex(Math.log(this._re));\n\t\t}\n\t\t// 負の値が入っているか、もともと複素数が入っている場合は、複素対数関数\n\t\treturn new Complex([Math.log(this.norm), this.arg]);\n\t}\n\n\t/**\n\t * 指数\n\t * @returns {Complex} exp(A)\n\t */\n\texp() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.exp(this._re));\n\t\t}\n\t\t// 複素指数関数\n\t\tconst r = Math.exp(this._re);\n\t\treturn new Complex([r * Math.cos(this._im), r * Math.sin(this._im)]);\n\t}\n\n\t// ----------------------\n\t// 三角関数\n\t// ----------------------\n\t\n\t/**\n\t * sin\n\t * @returns {Complex} sin(A)\n\t */\n\tsin() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.sin(this._re));\n\t\t}\n\t\t// オイラーの公式より\n\t\t// sin x = (e^ix - e^-ex) / 2i\n\t\tconst a = this.mul(Complex.I).exp();\n\t\tconst b = this.mul(Complex.I.negate()).exp();\n\t\treturn a.sub(b).div([0, 2]);\n\t}\n\n\t/**\n\t * cos\n\t * @returns {Complex} cos(A)\n\t */\n\tcos() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.cos(this._re));\n\t\t}\n\t\t// オイラーの公式より\n\t\t// cos x = (e^ix + e^-ex) / 2\n\t\tconst a = this.mul(Complex.I).exp();\n\t\tconst b = this.mul(Complex.I.negate()).exp();\n\t\treturn a.add(b).div(2);\n\t}\n\n\t/**\n\t * tan\n\t * @returns {Complex} tan(A)\n\t */\n\ttan() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.tan(this._re));\n\t\t}\n\t\t// 三角関数の相互関係 tan x = sin x / cos x\n\t\treturn this.sin().div(this.cos());\n\t}\n\n\t/**\n\t * atan\n\t * @returns {Complex} atan(A)\n\t */\n\tatan() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.atan(this._re));\n\t\t}\n\t\t// 逆正接 tan-1 x = i/2 log( i+x / i-x )\n\t\treturn Complex.I.div(Complex.TWO).mul(Complex.I.add(this).div(Complex.I.sub(this)).log());\n\t}\n\n\t/**\n\t * atan2\n\t * @param {Complex|number|string|Array<number>|{_re:number,_im:number}|Object} [number] - 実数で指定。省略時は、本オブジェクトの偏角を返す。\n\t * @returns {Complex} atan2(Y, X)\n\t */\n\tatan2(number) {\n\t\tif(arguments.length === 0) {\n\t\t\treturn new Complex(this.arg);\n\t\t}\n\t\t// y.atan2(x) とする。\n\t\tconst y = this;\n\t\tconst x = Complex._toComplex(number);\n\t\tif(y.isReal() && x.isReal()) {\n\t\t\treturn new Complex(Math.atan2(y._re, x._re));\n\t\t}\n\t\t// 複素数のatan2は未定義である（実装不可能）\n\t\tthrow \"calculation method is undefined.\";\n\t}\n\t\n\t// ----------------------\n\t// 信号処理系\n\t// ----------------------\n\t\n\t/**\n\t * 正規化 sinc\n\t * @returns {Complex} sinc(A)\n\t */\n\tsinc() {\n\t\tif(this.isReal()) {\n\t\t\tif(this._re === 0) {\n\t\t\t\treturn(Complex.ONE);\n\t\t\t}\n\t\t\tconst x = Math.PI * this._re;\n\t\t\treturn new Complex(Math.sin(x) / x);\n\t\t}\n\t\tconst x = this.mul(Complex.PI);\n\t\treturn new Complex( x.sin().div(x) );\n\t}\n\n\t// ----------------------\n\t// 丸め\n\t// ----------------------\n\t\n\t/**\n\t * floor\n\t * @returns {Complex} floor(A)\n\t */\n\tfloor() {\n\t\treturn new Complex([Math.floor(this._re), Math.floor(this._im)]);\n\t}\n\n\t/**\n\t * ceil\n\t * @returns {Complex} ceil(A)\n\t */\n\tceil() {\n\t\treturn new Complex([Math.ceil(this._re), Math.ceil(this._im)]);\n\t}\n\t\n\t/**\n\t * 四捨五入\n\t * @returns {Complex} round(A)\n\t */\n\tround() {\n\t\treturn new Complex([Math.round(this._re), Math.round(this._im)]);\n\t}\n\n\t/**\n\t * 整数化\n\t * @returns {Complex} fix(A)\n\t */\n\tfix() {\n\t\treturn new Complex([this._re | 0, this._im | 0]);\n\t}\n\n\t/**\n\t * 小数部の抽出\n\t * @returns {Complex} fract(A) \n\t */\n\tfract() {\n\t\treturn new Complex([this._re - (this._re | 0), this._im - (this._im | 0)]);\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * 1\n\t * @returns {Complex} 1\n\t */\n\tstatic get ONE() {\n\t\treturn DEFINE.ONE;\n\t}\n\t\n\t/**\n\t * 2\n\t * @returns {Complex} 2\n\t */\n\tstatic get TWO() {\n\t\treturn DEFINE.TWO;\n\t}\n\t\n\t/**\n\t * 10\n\t * @returns {Complex} 10\n\t */\n\tstatic get TEN() {\n\t\treturn DEFINE.TEN;\n\t}\n\t\n\t/**\n\t * 0\n\t * @returns {Complex} 0\n\t */\n\tstatic get ZERO() {\n\t\treturn DEFINE.ZERO;\n\t}\n\n\t/**\n\t * -1\n\t * @returns {Complex} -1\n\t */\n\tstatic get MINUS_ONE() {\n\t\treturn DEFINE.MINUS_ONE;\n\t}\n\n\t/**\n\t * i, j\n\t * @returns {Complex} i\n\t */\n\tstatic get I() {\n\t\treturn DEFINE.I;\n\t}\n\n\t/**\n\t * PI\n\t * @returns {Complex} 3.14...\n\t */\n\tstatic get PI() {\n\t\treturn DEFINE.PI;\n\t}\n\n\t/**\n\t * E\n\t * @returns {Complex} 2.71...\n\t */\n\tstatic get E() {\n\t\treturn DEFINE.E;\n\t}\n\n\t/**\n\t * LN2\n\t * @returns {Complex} ln(2)\n\t */\n\tstatic get LN2() {\n\t\treturn DEFINE.LN2;\n\t}\n\n\t/**\n\t * LN10\n\t * @returns {Complex} ln(10)\n\t */\n\tstatic get LN10() {\n\t\treturn DEFINE.LN10;\n\t}\n\n\t/**\n\t * LOG2E\n\t * @returns {Complex} log_2(e)\n\t */\n\tstatic get LOG2E() {\n\t\treturn DEFINE.LOG2E;\n\t}\n\t\n\t/**\n\t * LOG10E\n\t * @returns {Complex} log_10(e)\n\t */\n\tstatic get LOG10E() {\n\t\treturn DEFINE.LOG10E;\n\t}\n\t\n\t/**\n\t * SQRT2\n\t * @returns {Complex} sqrt(2)\n\t */\n\tstatic get SQRT2() {\n\t\treturn DEFINE.SQRT2;\n\t}\n\t\n\t/**\n\t * SQRT1_2\n\t * @returns {Complex} sqrt(0.5)\n\t */\n\tstatic get SQRT1_2() {\n\t\treturn DEFINE.SQRT1_2;\n\t}\n\t\n\t/**\n\t * 0.5\n\t * @returns {Complex} 0.5\n\t */\n\tstatic get HALF() {\n\t\treturn DEFINE.HALF;\n\t}\n\n\t/**\n\t * 正の無限大\n\t * @returns {Complex} Inf\n\t */\n\tstatic get POSITIVE_INFINITY() {\n\t\treturn DEFINE.POSITIVE_INFINITY;\n\t}\n\t\n\t/**\n\t * 負の無限大\n\t * @returns {Complex} -Inf\n\t */\n\tstatic get NEGATIVE_INFINITY() {\n\t\treturn DEFINE.NEGATIVE_INFINITY;\n\t}\n\n\t/**\n\t * 非数\n\t * @returns {Complex} NaN\n\t */\n\tstatic get NaN() {\n\t\treturn DEFINE.NaN;\n\t}\n\n}\n\n/**\n * 内部で使用する定数値\n */\nconst DEFINE = {\n\tZERO : new Complex(0),\n\tONE : new Complex(1),\n\tTWO : new Complex(2),\n\tTEN : new Complex(10),\n\tMINUS_ONE : new Complex(-1),\n\tI : new Complex([0, 1]),\n\tPI : new Complex(Math.PI),\n\tE : new Complex(Math.E),\n\tLN2 : new Complex(Math.LN2),\n\tLN10 : new Complex(Math.LN10),\n\tLOG2E : new Complex(Math.LOG2E),\n\tLOG10E : new Complex(Math.LOG10E),\n\tSQRT2 : new Complex(Math.SQRT2),\n\tSQRT1_2 : new Complex(Math.SQRT1_2),\n\tHALF : new Complex(0.5),\n\tPOSITIVE_INFINITY : new Complex(Number.POSITIVE_INFINITY),\n\tNEGATIVE_INFINITY : new Complex(Number.NEGATIVE_INFINITY),\n\tNaN : new Complex(Number.NaN)\n};\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/Complex.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 234,
    "kind": "variable",
    "name": "random_class",
    "memberof": "src/math/Complex.mjs",
    "static": true,
    "longname": "src/math/Complex.mjs~random_class",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/Complex.mjs",
    "importStyle": null,
    "description": "Complex 内で使用する乱数生成クラス",
    "lineNumber": 21,
    "type": {
      "types": [
        "src/math/tools/Random.mjs~Random"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 235,
    "kind": "class",
    "name": "ComplexTool",
    "memberof": "src/math/Complex.mjs",
    "static": true,
    "longname": "src/math/Complex.mjs~ComplexTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/Complex.mjs",
    "importStyle": null,
    "description": "Complex 内で使用する関数群",
    "lineNumber": 26,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "ToComplexFromString",
    "memberof": "src/math/Complex.mjs~ComplexTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~ComplexTool.ToComplexFromString",
    "access": "public",
    "description": "文字列から複素数を解析する",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{real : number, imag : number}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "解析したい文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{real : number, imag : number}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 237,
    "kind": "class",
    "name": "Complex",
    "memberof": "src/math/Complex.mjs",
    "static": true,
    "longname": "src/math/Complex.mjs~Complex",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/Complex.mjs",
    "importStyle": "Complex",
    "description": "複素数クラス (immutable)",
    "lineNumber": 76,
    "interface": false
  },
  {
    "__docId__": 238,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#constructor",
    "access": "public",
    "description": "複素数を作成",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "複素数( \"1 + j\", [1 , 1] など)"
      }
    ]
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "_re",
    "memberof": "src/math/Complex.mjs~Complex",
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#_re",
    "access": "private",
    "description": "実部",
    "lineNumber": 93,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 240,
    "kind": "member",
    "name": "_im",
    "memberof": "src/math/Complex.mjs~Complex",
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#_im",
    "access": "private",
    "description": "虚部",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "create",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.create",
    "access": "public",
    "description": "Complex を作成",
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.valueOf",
    "access": "public",
    "description": "指定した数値から Complex 型に変換",
    "lineNumber": 157,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "_toComplex",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex._toComplex",
    "access": "private",
    "description": "複素数を作成",
    "lineNumber": 167,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "_toDouble",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex._toDouble",
    "access": "private",
    "description": "実数を作成",
    "lineNumber": 185,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "_toInteger",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex._toInteger",
    "access": "private",
    "description": "整数を作成",
    "lineNumber": 204,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 256,
    "kind": "get",
    "name": "intValue",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#intValue",
    "access": "public",
    "description": "32ビット整数に変換",
    "lineNumber": 212,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "get",
    "name": "doubleValue",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#doubleValue",
    "access": "public",
    "description": "64ビット実数に変換",
    "lineNumber": 220,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#clone",
    "access": "public",
    "description": "ディープコピー",
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#toString",
    "access": "public",
    "description": "文字列データ",
    "lineNumber": 236,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "rand",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.rand",
    "access": "public",
    "description": "ランダムな値を作成",
    "lineNumber": 276,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "randn",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.randn",
    "access": "public",
    "description": "正規分布に従うランダムな値を作成",
    "lineNumber": 284,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#equals",
    "access": "public",
    "description": "等式",
    "lineNumber": 294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差を実数で指定"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 263,
    "kind": "get",
    "name": "real",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#real",
    "access": "public",
    "description": "実部",
    "lineNumber": 309,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} real(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "real(A)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "get",
    "name": "imag",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#imag",
    "access": "public",
    "description": "虚部",
    "lineNumber": 317,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} imag(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "imag(A)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "get",
    "name": "norm",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#norm",
    "access": "public",
    "description": "ノルム",
    "lineNumber": 325,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} |A|"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "|A|"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "get",
    "name": "arg",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#arg",
    "access": "public",
    "description": "偏角",
    "lineNumber": 341,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} arg(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "arg(A)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "getDecimalPosition",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#getDecimalPosition",
    "access": "public",
    "description": "実部、虚部を表す際の小数点以下の桁数",
    "lineNumber": 357,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 小数点の桁数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "小数点の桁数"
    },
    "params": []
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#add",
    "access": "public",
    "description": "加算",
    "lineNumber": 382,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A + B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A + B"
    }
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "sub",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#sub",
    "access": "public",
    "description": "減算",
    "lineNumber": 394,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "mul",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#mul",
    "access": "public",
    "description": "乗算",
    "lineNumber": 406,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "dot",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#dot",
    "access": "public",
    "description": "ドット積",
    "lineNumber": 431,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A * conj(B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A * conj(B)"
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "div",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#div",
    "access": "public",
    "description": "割り算",
    "lineNumber": 456,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A / B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A / B"
    }
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "mod",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#mod",
    "access": "public",
    "description": "割り算の正の余り",
    "lineNumber": 482,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} A mod B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "複素数を含まない数値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A mod B"
    }
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "inv",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#inv",
    "access": "public",
    "description": "逆数",
    "lineNumber": 499,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 1 / A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "1 / A"
    },
    "params": []
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "sign",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#sign",
    "access": "public",
    "description": "符号値",
    "lineNumber": 513,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} [-1,1] 複素数の場合はノルムを1にした値。"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "[-1,1] 複素数の場合はノルムを1にした値。"
    },
    "params": []
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#max",
    "access": "public",
    "description": "最大値",
    "lineNumber": 531,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差を実数で指定"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#min",
    "access": "public",
    "description": "最小値",
    "lineNumber": 547,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差を実数で指定"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#compareTo",
    "access": "public",
    "description": "値同士を比較",
    "lineNumber": 563,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A > B ? 1 : (A === B ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差を実数で指定"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A > B ? 1 : (A === B ? 0 : -1)"
    }
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "isInteger",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isInteger",
    "access": "public",
    "description": "整数を判定",
    "lineNumber": 584,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差を実数で指定"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "isComplexInteger",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isComplexInteger",
    "access": "public",
    "description": "複素整数（整数も含む）を判定",
    "lineNumber": 594,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(A) === 整数 && imag(A) === 整数"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差を実数で指定"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(A) === 整数 && imag(A) === 整数"
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "isZero",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isZero",
    "access": "public",
    "description": "0 を判定",
    "lineNumber": 606,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === 0"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差を実数で指定"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === 0"
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "isOne",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isOne",
    "access": "public",
    "description": "1 を判定",
    "lineNumber": 616,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === 1"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差を実数で指定"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === 1"
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "isComplex",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isComplex",
    "access": "public",
    "description": "複素数（虚部が0以外）を判定",
    "lineNumber": 626,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} imag(A) !== 0"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差を実数で指定"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "imag(A) !== 0"
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "isReal",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isReal",
    "access": "public",
    "description": "実数を判定",
    "lineNumber": 636,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} imag(A) === 0"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差を実数で指定"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "imag(A) === 0"
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "isNaN",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isNaN",
    "access": "public",
    "description": "非数を判定",
    "lineNumber": 645,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isNaN(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isNaN(A)"
    },
    "params": []
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "isPositive",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isPositive",
    "access": "public",
    "description": "実部の正数を判定",
    "lineNumber": 653,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(x) > 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(x) > 0"
    },
    "params": []
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "isNegative",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isNegative",
    "access": "public",
    "description": "実部の負数を判定",
    "lineNumber": 663,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(x) < 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(x) < 0"
    },
    "params": []
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "isNotNegative",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isNotNegative",
    "access": "public",
    "description": "実部の非負値を判定",
    "lineNumber": 671,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} real(x) >= 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "real(x) >= 0"
    },
    "params": []
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "isInfinite",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isInfinite",
    "access": "public",
    "description": "無限を判定",
    "lineNumber": 679,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} isInfinite(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "isInfinite(A)"
    },
    "params": []
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "isFinite",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#isFinite",
    "access": "public",
    "description": "有限数を判定",
    "lineNumber": 690,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} !isNaN(A) && !isInfinite(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "!isNaN(A) && !isInfinite(A)"
    },
    "params": []
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "abs",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#abs",
    "access": "public",
    "description": "絶対値",
    "lineNumber": 702,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} abs(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "abs(A)"
    },
    "params": []
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "conj",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#conj",
    "access": "public",
    "description": "共役複素数",
    "lineNumber": 710,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} real(A) - imag(A)j"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "real(A) - imag(A)j"
    },
    "params": []
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "negate",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#negate",
    "access": "public",
    "description": "負数",
    "lineNumber": 722,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} -A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "A"
    },
    "params": []
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "pow",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#pow",
    "access": "public",
    "description": "累乗",
    "lineNumber": 735,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} pow(A, B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "pow(A, B)"
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "square",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#square",
    "access": "public",
    "description": "2乗",
    "lineNumber": 763,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} pow(A, 2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "pow(A, 2)"
    },
    "params": []
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "sqrt",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#sqrt",
    "access": "public",
    "description": "平方根",
    "lineNumber": 774,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sqrt(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sqrt(A)"
    },
    "params": []
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "log",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#log",
    "access": "public",
    "description": "対数",
    "lineNumber": 792,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} log(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "log(A)"
    },
    "params": []
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "exp",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#exp",
    "access": "public",
    "description": "指数",
    "lineNumber": 804,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} exp(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "exp(A)"
    },
    "params": []
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "sin",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#sin",
    "access": "public",
    "description": "sin",
    "lineNumber": 821,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sin(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sin(A)"
    },
    "params": []
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "cos",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#cos",
    "access": "public",
    "description": "cos",
    "lineNumber": 836,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} cos(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "cos(A)"
    },
    "params": []
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "tan",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#tan",
    "access": "public",
    "description": "tan",
    "lineNumber": 851,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} tan(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "tan(A)"
    },
    "params": []
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "atan",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#atan",
    "access": "public",
    "description": "atan",
    "lineNumber": 863,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} atan(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "atan(A)"
    },
    "params": []
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "atan2",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#atan2",
    "access": "public",
    "description": "atan2",
    "lineNumber": 876,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} atan2(Y, X)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>",
          "{_re:number,_im:number}",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "number",
        "description": "実数で指定。省略時は、本オブジェクトの偏角を返す。"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "atan2(Y, X)"
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "sinc",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#sinc",
    "access": "public",
    "description": "正規化 sinc",
    "lineNumber": 898,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sinc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sinc(A)"
    },
    "params": []
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "floor",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#floor",
    "access": "public",
    "description": "floor",
    "lineNumber": 918,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} floor(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "floor(A)"
    },
    "params": []
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "ceil",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#ceil",
    "access": "public",
    "description": "ceil",
    "lineNumber": 926,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} ceil(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "ceil(A)"
    },
    "params": []
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "round",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#round",
    "access": "public",
    "description": "四捨五入",
    "lineNumber": 934,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} round(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "round(A)"
    },
    "params": []
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "fix",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#fix",
    "access": "public",
    "description": "整数化",
    "lineNumber": 942,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} fix(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "fix(A)"
    },
    "params": []
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "fract",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Complex.mjs~Complex#fract",
    "access": "public",
    "description": "小数部の抽出",
    "lineNumber": 950,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} fract(A) "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "fract(A)"
    },
    "params": []
  },
  {
    "__docId__": 310,
    "kind": "get",
    "name": "ONE",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.ONE",
    "access": "public",
    "description": "1",
    "lineNumber": 962,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "get",
    "name": "TWO",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.TWO",
    "access": "public",
    "description": "2",
    "lineNumber": 970,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "2"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "get",
    "name": "TEN",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.TEN",
    "access": "public",
    "description": "10",
    "lineNumber": 978,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 10"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "10"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "get",
    "name": "ZERO",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.ZERO",
    "access": "public",
    "description": "0",
    "lineNumber": 986,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "0"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "get",
    "name": "MINUS_ONE",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.MINUS_ONE",
    "access": "public",
    "description": "-1",
    "lineNumber": 994,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} -1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "1"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "get",
    "name": "I",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.I",
    "access": "public",
    "description": "i, j",
    "lineNumber": 1002,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} i"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "i"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "get",
    "name": "PI",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.PI",
    "access": "public",
    "description": "PI",
    "lineNumber": 1010,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 3.14..."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "3.14..."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "get",
    "name": "E",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.E",
    "access": "public",
    "description": "E",
    "lineNumber": 1018,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 2.71..."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "2.71..."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "get",
    "name": "LN2",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.LN2",
    "access": "public",
    "description": "LN2",
    "lineNumber": 1026,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} ln(2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "ln(2)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "get",
    "name": "LN10",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.LN10",
    "access": "public",
    "description": "LN10",
    "lineNumber": 1034,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} ln(10)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "ln(10)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 320,
    "kind": "get",
    "name": "LOG2E",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.LOG2E",
    "access": "public",
    "description": "LOG2E",
    "lineNumber": 1042,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} log_2(e)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "log_2(e)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "get",
    "name": "LOG10E",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.LOG10E",
    "access": "public",
    "description": "LOG10E",
    "lineNumber": 1050,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} log_10(e)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "log_10(e)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "get",
    "name": "SQRT2",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.SQRT2",
    "access": "public",
    "description": "SQRT2",
    "lineNumber": 1058,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sqrt(2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sqrt(2)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "get",
    "name": "SQRT1_2",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.SQRT1_2",
    "access": "public",
    "description": "SQRT1_2",
    "lineNumber": 1066,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} sqrt(0.5)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "sqrt(0.5)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 324,
    "kind": "get",
    "name": "HALF",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.HALF",
    "access": "public",
    "description": "0.5",
    "lineNumber": 1074,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} 0.5"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "0.5"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 325,
    "kind": "get",
    "name": "POSITIVE_INFINITY",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.POSITIVE_INFINITY",
    "access": "public",
    "description": "正の無限大",
    "lineNumber": 1082,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} Inf"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "Inf"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "get",
    "name": "NEGATIVE_INFINITY",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.NEGATIVE_INFINITY",
    "access": "public",
    "description": "負の無限大",
    "lineNumber": 1090,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} -Inf"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "Inf"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "get",
    "name": "NaN",
    "memberof": "src/math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Complex.mjs~Complex.NaN",
    "access": "public",
    "description": "非数",
    "lineNumber": 1098,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} NaN"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "NaN"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 328,
    "kind": "variable",
    "name": "DEFINE",
    "memberof": "src/math/Complex.mjs",
    "static": true,
    "longname": "src/math/Complex.mjs~DEFINE",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/Complex.mjs",
    "importStyle": null,
    "description": "内部で使用する定数値",
    "lineNumber": 1107,
    "type": {
      "types": [
        "{\"ZERO\": *, \"ONE\": *, \"TWO\": *, \"TEN\": *, \"MINUS_ONE\": *, \"I\": *, \"PI\": *, \"E\": *, \"LN2\": *, \"LN10\": *, \"LOG2E\": *, \"LOG10E\": *, \"SQRT2\": *, \"SQRT1_2\": *, \"HALF\": *, \"POSITIVE_INFINITY\": *, \"NEGATIVE_INFINITY\": *, \"NaN\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 329,
    "kind": "file",
    "name": "src/math/context/MathContext.mjs",
    "content": "/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport RoundingMode, {RoundingModeEntity} from \"./RoundingMode.mjs\";\n\n/**\n * BigDecimal用の環境設定\n */\nexport default  class MathContext {\n\n\t/**\n\t * 任意精度の環境設定データ\n\t * @param {string|number} precision_or_name - 精度を数値で指定するか、設定自体を文字列で指定する\n\t * @param {RoundingModeEntity} [roundingMode=RoundingMode.HALF_UP] - 丸めモード\n\t */\n\tconstructor(precision_or_name, roundingMode) {\n\n\t\t/**\n\t\t * 精度\n\t\t * @type {number}\n\t\t * @private\n\t\t */\n\t\tthis.precision = 0;\n\t\t\n\t\t/**\n\t\t * 丸めモード\n\t\t * @type {RoundingModeEntity}\n\t\t * @private\n\t\t */\n\t\tthis.roundingMode = roundingMode === undefined ? RoundingMode.HALF_UP : roundingMode;\n\n\t\tif(typeof precision_or_name === \"number\") {\n\t\t\tthis.precision = precision_or_name;\n\t\t}\n\t\tif(typeof precision_or_name === \"string\") {\n\t\t\tlet buff;\n\t\t\tbuff = precision_or_name.match(/precision=\\d+/);\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0].substring(\"precision=\".length, buff[0].length);\n\t\t\t\tthis.precision = parseInt(buff, 10);\n\t\t\t}\n\t\t\tbuff = precision_or_name.match(/roundingMode=\\w+/);\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0].substring(\"roundingMode=\".length, buff[0].length);\n\t\t\t\tthis.roundingMode = RoundingMode.valueOf(buff);\n\t\t\t}\t\n\t\t}\n\t\tif(this.precision < 0) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t}\n\n\t/**\n\t * 精度\n\t * @returns {number}\n\t */\n\tgetPrecision() {\n\t\treturn this.precision;\n\t}\n\n\t/**\n\t * 丸め方\n\t * @returns {RoundingModeEntity}\n\t */\n\tgetRoundingMode() {\n\t\treturn this.roundingMode;\n\t}\n\n\t/**\n\t * 環境が等しいか\n\t * @param {MathContext} x - 比較対象\n\t * @returns {boolean}\n\t */\n\tequals(x) {\n\t\tif(x instanceof MathContext) {\n\t\t\tif(x.toString() === this.toString()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * 文字列化\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn (\"precision=\" + this.precision + \" roundingMode=\" + this.roundingMode.toString());\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * 制限を設けない（ただし、割り算で循環小数の場合にエラーが出ます。）\n\t * @returns {MathContext}\n\t */\n\tstatic get UNLIMITED() {\n\t\treturn DEFINE.UNLIMITED;\n\t}\n\n\t/**\n\t * 32ビットの実数型 ( float ) と同等\n\t * @returns {MathContext}\n\t */\n\tstatic get DECIMAL32() {\n\t\treturn DEFINE.DECIMAL32;\n\t}\n\n\n\t/**\n\t * 64ビットの実数型 ( double ) と同等\n\t * @returns {MathContext}\n\t */\n\tstatic get DECIMAL64() {\n\t\treturn DEFINE.DECIMAL64;\n\t}\n\n\t/**\n\t * 128ビットの実数型 ( long double ) と同等\n\t * @returns {MathContext}\n\t */\n\tstatic get DECIMAL128() {\n\t\treturn DEFINE.DECIMAL128;\n\t}\n\n}\n\n/**\n * 内部で使用する定数値\n */\nconst DEFINE = {\n\tUNLIMITED\t: new MathContext(0,\tRoundingMode.HALF_UP),\n\tDECIMAL32\t: new MathContext(7,\tRoundingMode.HALF_EVEN),\n\tDECIMAL64\t: new MathContext(16,\tRoundingMode.HALF_EVEN),\n\tDECIMAL128\t: new MathContext(34,\tRoundingMode.HALF_EVEN)\n};\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/context/MathContext.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 330,
    "kind": "class",
    "name": "MathContext",
    "memberof": "src/math/context/MathContext.mjs",
    "static": true,
    "longname": "src/math/context/MathContext.mjs~MathContext",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/context/MathContext.mjs",
    "importStyle": "MathContext",
    "description": "BigDecimal用の環境設定",
    "lineNumber": 18,
    "interface": false
  },
  {
    "__docId__": 331,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/context/MathContext.mjs~MathContext#constructor",
    "access": "public",
    "description": "任意精度の環境設定データ",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "precision_or_name",
        "description": "精度を数値で指定するか、設定自体を文字列で指定する"
      },
      {
        "nullable": null,
        "types": [
          "RoundingModeEntity"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "RoundingMode.HALF_UP",
        "defaultRaw": "RoundingMode.HALF_UP",
        "name": "roundingMode",
        "description": "丸めモード"
      }
    ]
  },
  {
    "__docId__": 332,
    "kind": "member",
    "name": "precision",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "static": false,
    "longname": "src/math/context/MathContext.mjs~MathContext#precision",
    "access": "private",
    "description": "精度",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 333,
    "kind": "member",
    "name": "roundingMode",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "static": false,
    "longname": "src/math/context/MathContext.mjs~MathContext#roundingMode",
    "access": "private",
    "description": "丸めモード",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "getPrecision",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/context/MathContext.mjs~MathContext#getPrecision",
    "access": "public",
    "description": "精度",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "getRoundingMode",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/context/MathContext.mjs~MathContext#getRoundingMode",
    "access": "public",
    "description": "丸め方",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/context/MathContext.mjs~MathContext#equals",
    "access": "public",
    "description": "環境が等しいか",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "比較対象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/context/MathContext.mjs~MathContext#toString",
    "access": "public",
    "description": "文字列化",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 341,
    "kind": "get",
    "name": "UNLIMITED",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/MathContext.mjs~MathContext.UNLIMITED",
    "access": "public",
    "description": "制限を設けない（ただし、割り算で循環小数の場合にエラーが出ます。）",
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "get",
    "name": "DECIMAL32",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/MathContext.mjs~MathContext.DECIMAL32",
    "access": "public",
    "description": "32ビットの実数型 ( float ) と同等",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "get",
    "name": "DECIMAL64",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/MathContext.mjs~MathContext.DECIMAL64",
    "access": "public",
    "description": "64ビットの実数型 ( double ) と同等",
    "lineNumber": 125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "get",
    "name": "DECIMAL128",
    "memberof": "src/math/context/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/MathContext.mjs~MathContext.DECIMAL128",
    "access": "public",
    "description": "128ビットの実数型 ( long double ) と同等",
    "lineNumber": 133,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "variable",
    "name": "DEFINE",
    "memberof": "src/math/context/MathContext.mjs",
    "static": true,
    "longname": "src/math/context/MathContext.mjs~DEFINE",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/context/MathContext.mjs",
    "importStyle": null,
    "description": "内部で使用する定数値",
    "lineNumber": 142,
    "type": {
      "types": [
        "{\"UNLIMITED\": *, \"DECIMAL32\": *, \"DECIMAL64\": *, \"DECIMAL128\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 346,
    "kind": "file",
    "name": "src/math/context/RoundingMode.mjs",
    "content": "/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n/**\n * BigDecimal用の丸めモードの基底クラス\n * @interface\n */\nexport class RoundingModeEntity {\n\t\n\t/**\n\t * 丸めモードの名前を英語の大文字で取得する\n\t * @returns {string} 丸めモード名\n\t */\n\tstatic toString() {\n\t\treturn \"NONE\";\n\t}\n\n\t/**\n\t * 丸めに必要な加算値\n\t * @param {number} x - 1ケタ目の値\n\t * @returns {number} いくつ足すと丸められるか\n\t */\n\tstatic getAddNumber(x) {\n\t\treturn 0;\n\t}\n\n}\n\n/**\n * 絶対値の切り上げ（1桁目が0より大きければ桁上げする）\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_UP extends RoundingModeEntity {\n\n\t/**\n\t * 丸めモードの名前を英語の大文字で取得する\n\t * @returns {string} 丸めモード名\n\t */\n\tstatic toString() {\n\t\treturn \"UP\";\n\t}\n\n\t/**\n\t * 丸めに必要な加算値\n\t * @param {number} x - 1ケタ目の値\n\t * @returns {number} いくつ足すと丸められるか\n\t */\n\tstatic getAddNumber(x) {\n\t\tconst y = x % 10;\n\t\tif(y === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(y > 0) {\n\t\t\treturn 10 - y;\n\t\t}\n\t\telse {\n\t\t\treturn (-(10 + y));\n\t\t}\n\t}\n\n}\n\n/**\n * 絶対値の切り下げ（1桁目が0より大きければ桁下げする）\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_DOWN extends RoundingModeEntity {\n\n\t/**\n\t * 丸めモードの名前を英語の大文字で取得する\n\t * @returns {string} 丸めモード名\n\t */\n\tstatic toString() {\n\t\treturn \"DOWN\";\n\t}\n\n\t/**\n\t * 丸めに必要な加算値\n\t * @param {number} x - 1ケタ目の値\n\t * @returns {number} いくつ足すと丸められるか\n\t */\n\tstatic getAddNumber(x) {\n\t\treturn -(x % 10);\n\t}\n\n}\n\n/**\n * 正の無限大に近づく\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_CEILING extends RoundingModeEntity {\n\n\t/**\n\t * 丸めモードの名前を英語の大文字で取得する\n\t * @returns {string} 丸めモード名\n\t */\n\tstatic toString() {\n\t\treturn \"CEILING\";\n\t}\n\n\t/**\n\t * 丸めに必要な加算値\n\t * @param {number} x - 1ケタ目の値\n\t * @returns {number} いくつ足すと丸められるか\n\t */\n\tstatic getAddNumber(x) {\n\t\tconst y = x % 10;\n\t\tif(y === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(y > 0) {\n\t\t\treturn 10 - y;\n\t\t}\n\t\telse {\n\t\t\treturn -y;\n\t\t}\n\t}\n\n}\n\n/**\n * 負の無限大に近づく\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_FLOOR extends RoundingModeEntity {\n\n\t/**\n\t * 丸めモードの名前を英語の大文字で取得する\n\t * @returns {string} 丸めモード名\n\t */\n\tstatic toString() {\n\t\treturn \"FLOOR\";\n\t}\n\n\t/**\n\t * 丸めに必要な加算値\n\t * @param {number} x - 1ケタ目の値\n\t * @returns {number} いくつ足すと丸められるか\n\t */\n\tstatic getAddNumber(x) {\n\t\tconst y = x % 10;\n\t\tif(y === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(y > 0) {\n\t\t\treturn -y;\n\t\t}\n\t\telse {\n\t\t\treturn(-(10 + y));\n\t\t}\n\t}\n\n}\n\n/**\n * 四捨五入\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_HALF_UP extends RoundingModeEntity {\n\n\t/**\n\t * 丸めモードの名前を英語の大文字で取得する\n\t * @returns {string} 丸めモード名\n\t */\n\tstatic toString() {\n\t\treturn \"HALF_UP\";\n\t}\n\n\t/**\n\t * 丸めに必要な加算値\n\t * @param {number} x - 1ケタ目の値\n\t * @returns {number} いくつ足すと丸められるか\n\t */\n\tstatic getAddNumber(x) {\n\t\tconst y = x % 10;\n\t\tconst sign = y >= 0 ? 1 : -1;\n\t\tif(Math.abs(y) < 5) {\n\t\t\treturn (y * -1);\n\t\t}\n\t\telse {\n\t\t\treturn (sign * (10 - Math.abs(y)));\n\t\t}\n\t}\n\n}\n\n/**\n * 五捨六入\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_HALF_DOWN extends RoundingModeEntity {\n\n\t/**\n\t * 丸めモードの名前を英語の大文字で取得する\n\t * @returns {string} 丸めモード名\n\t */\n\tstatic toString() {\n\t\treturn \"HALF_DOWN\";\n\t}\n\n\t/**\n\t * 丸めに必要な加算値\n\t * @param {number} x - 1ケタ目の値\n\t * @returns {number} いくつ足すと丸められるか\n\t */\n\tstatic getAddNumber(x) {\n\t\tconst y = x % 10;\n\t\tconst sign = y >= 0 ? 1 : -1;\n\t\tif(Math.abs(y) < 6) {\n\t\t\treturn (y * -1);\n\t\t}\n\t\telse {\n\t\t\treturn (sign * (10 - Math.abs(y)));\n\t\t}\n\t}\n\n}\n\n/**\n * 等間隔なら偶数側へ丸める\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_HALF_EVEN extends RoundingModeEntity {\n\n\t/**\n\t * 丸めモードの名前を英語の大文字で取得する\n\t * @returns {string} 丸めモード名\n\t */\n\tstatic toString() {\n\t\treturn \"HALF_EVEN\";\n\t}\n\n\t/**\n\t * 丸めに必要な加算値\n\t * @param {number} x - 1ケタ目の値\n\t * @returns {number} いくつ足すと丸められるか\n\t */\n\tstatic getAddNumber(x) {\n\t\tlet y = x % 100;\n\t\tlet sign, even;\n\t\tif(y < 0) {\n\t\t\tsign = -1;\n\t\t\teven = Math.ceil(y / 10) & 1;\n\t\t}\n\t\telse {\n\t\t\tsign = 1;\n\t\t\teven = Math.floor(y / 10) & 1;\n\t\t}\n\t\tlet center;\n\t\tif(even === 1) {\n\t\t\tcenter = 5;\n\t\t}\n\t\telse {\n\t\t\tcenter = 6;\n\t\t}\n\t\ty = y % 10;\n\t\tif(Math.abs(y) < center) {\n\t\t\treturn (y * -1);\n\t\t}\n\t\telse {\n\t\t\treturn (sign * (10 - Math.abs(y)));\n\t\t}\n\t}\n\n}\n\n/**\n * 丸めない（丸める必要が出る場合はエラー）\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_UNNECESSARY extends RoundingModeEntity {\n\n\t/**\n\t * 丸めモードの名前を英語の大文字で取得する\n\t * @returns {string} 丸めモード名\n\t */\n\tstatic toString() {\n\t\treturn \"UNNECESSARY\";\n\t}\n\n\t/**\n\t * 丸めに必要な加算値\n\t * @param {number} x - 1ケタ目の値\n\t * @returns {number} いくつ足すと丸められるか\n\t */\n\tstatic getAddNumber(x) {\n\t\tconst y = x % 10;\n\t\tif(y === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t}\n\n}\n\n/**\n * BigDecimal用の丸めモードクラス\n */\nexport default class RoundingMode {\n\n\t/**\n\t * 指定した文字列で表される丸めクラスを取得する\n\t * @param {string|RoundingModeEntity|Object} name - モードの英数名\n\t * @returns {RoundingModeEntity}\n\t */\n\tstatic valueOf(name) {\n\t\tlet check_string;\n\t\tif(name instanceof RoundingModeEntity) {\n\t\t\treturn name;\n\t\t}\n\t\telse if(typeof name === \"string\") {\n\t\t\tcheck_string = name;\n\t\t}\n\t\telse if(name instanceof Object) {\n\t\t\tcheck_string = name.toString();\n\t\t}\n\t\telse {\n\t\t\tthrow \"Unsupported argument \" + name;\n\t\t}\n\t\tconst modetype = [\n\t\t\tRoundingMode_UP,\n\t\t\tRoundingMode_DOWN,\n\t\t\tRoundingMode_FLOOR,\n\t\t\tRoundingMode_CEILING,\n\t\t\tRoundingMode_HALF_UP,\n\t\t\tRoundingMode_HALF_DOWN,\n\t\t\tRoundingMode_HALF_EVEN,\n\t\t\tRoundingMode_UNNECESSARY\n\t\t];\n\t\tconst upper_name = check_string.toUpperCase();\n\t\tfor(let i = 0; i < modetype.length; i++) {\n\t\t\tif(modetype[i].toString() === upper_name) {\n\t\t\t\treturn modetype[i];\n\t\t\t}\n\t\t}\n\t\tthrow \"IllegalArgumentException : \" + check_string;\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * 絶対値の切り上げ（1桁目が0より大きければ桁上げする）\n\t * @returns {RoundingModeEntity}\n\t */\n\tstatic get UP() {\n\t\treturn RoundingMode_UP;\n\t}\n\n\t/**\n\t * 絶対値の切り下げ（1桁目が0より大きければ桁下げする）\n\t * @returns {RoundingModeEntity}\n\t */\n\tstatic get DOWN() {\n\t\treturn RoundingMode_DOWN;\n\t}\n\n\t/**\n\t * 正の無限大に近づく\n\t * @returns {RoundingModeEntity}\n\t */\n\tstatic get CEILING() {\n\t\treturn RoundingMode_CEILING;\n\t}\n\n\t/**\n\t * 負の無限大に近づく\n\t * @returns {RoundingModeEntity}\n\t */\n\tstatic get FLOOR() {\n\t\treturn RoundingMode_FLOOR;\n\t}\n\n\t/**\n\t * 四捨五入\n\t * @returns {RoundingModeEntity}\n\t */\n\tstatic get HALF_UP() {\n\t\treturn RoundingMode_HALF_UP;\n\t}\n\n\t/**\n\t * 五捨六入\n\t * @returns {RoundingModeEntity}\n\t */\n\tstatic get HALF_DOWN() {\n\t\treturn RoundingMode_HALF_DOWN;\n\t}\n\n\t/**\n\t * 等間隔なら偶数側へ丸める\n\t * @returns {RoundingModeEntity}\n\t */\n\tstatic get HALF_EVEN() {\n\t\treturn RoundingMode_HALF_EVEN;\n\t}\n\n\t/**\n\t * 丸めない（丸める必要が出る場合はエラー）\n\t * @returns {RoundingModeEntity}\n\t */\n\tstatic get UNNECESSARY() {\n\t\treturn RoundingMode_UNNECESSARY;\n\t}\n\n}\n\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/context/RoundingMode.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 347,
    "kind": "class",
    "name": "RoundingModeEntity",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingModeEntity",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": "{RoundingModeEntity}",
    "description": "BigDecimal用の丸めモードの基底クラス",
    "lineNumber": 16,
    "interface": true
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingModeEntity",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingModeEntity.toString",
    "access": "public",
    "description": "丸めモードの名前を英語の大文字で取得する",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 丸めモード名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "丸めモード名"
    },
    "params": []
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingModeEntity",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingModeEntity.getAddNumber",
    "access": "public",
    "description": "丸めに必要な加算値",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} いくつ足すと丸められるか"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "1ケタ目の値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "いくつ足すと丸められるか"
    }
  },
  {
    "__docId__": 350,
    "kind": "class",
    "name": "RoundingMode_UP",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_UP",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": null,
    "description": "絶対値の切り上げ（1桁目が0より大きければ桁上げする）",
    "lineNumber": 41,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_UP",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_UP.toString",
    "access": "public",
    "description": "丸めモードの名前を英語の大文字で取得する",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 丸めモード名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "丸めモード名"
    },
    "params": []
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_UP",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_UP.getAddNumber",
    "access": "public",
    "description": "丸めに必要な加算値",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} いくつ足すと丸められるか"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "1ケタ目の値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "いくつ足すと丸められるか"
    }
  },
  {
    "__docId__": 353,
    "kind": "class",
    "name": "RoundingMode_DOWN",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_DOWN",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": null,
    "description": "絶対値の切り下げ（1桁目が0より大きければ桁下げする）",
    "lineNumber": 75,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 354,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_DOWN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_DOWN.toString",
    "access": "public",
    "description": "丸めモードの名前を英語の大文字で取得する",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 丸めモード名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "丸めモード名"
    },
    "params": []
  },
  {
    "__docId__": 355,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_DOWN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_DOWN.getAddNumber",
    "access": "public",
    "description": "丸めに必要な加算値",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} いくつ足すと丸められるか"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "1ケタ目の値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "いくつ足すと丸められるか"
    }
  },
  {
    "__docId__": 356,
    "kind": "class",
    "name": "RoundingMode_CEILING",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_CEILING",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": null,
    "description": "正の無限大に近づく",
    "lineNumber": 100,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_CEILING",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_CEILING.toString",
    "access": "public",
    "description": "丸めモードの名前を英語の大文字で取得する",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 丸めモード名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "丸めモード名"
    },
    "params": []
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_CEILING",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_CEILING.getAddNumber",
    "access": "public",
    "description": "丸めに必要な加算値",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} いくつ足すと丸められるか"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "1ケタ目の値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "いくつ足すと丸められるか"
    }
  },
  {
    "__docId__": 359,
    "kind": "class",
    "name": "RoundingMode_FLOOR",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_FLOOR",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": null,
    "description": "負の無限大に近づく",
    "lineNumber": 134,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 360,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_FLOOR",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_FLOOR.toString",
    "access": "public",
    "description": "丸めモードの名前を英語の大文字で取得する",
    "lineNumber": 140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 丸めモード名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "丸めモード名"
    },
    "params": []
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_FLOOR",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_FLOOR.getAddNumber",
    "access": "public",
    "description": "丸めに必要な加算値",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} いくつ足すと丸められるか"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "1ケタ目の値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "いくつ足すと丸められるか"
    }
  },
  {
    "__docId__": 362,
    "kind": "class",
    "name": "RoundingMode_HALF_UP",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_UP",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": null,
    "description": "四捨五入",
    "lineNumber": 168,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_UP",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_UP.toString",
    "access": "public",
    "description": "丸めモードの名前を英語の大文字で取得する",
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 丸めモード名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "丸めモード名"
    },
    "params": []
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_UP",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_UP.getAddNumber",
    "access": "public",
    "description": "丸めに必要な加算値",
    "lineNumber": 183,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} いくつ足すと丸められるか"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "1ケタ目の値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "いくつ足すと丸められるか"
    }
  },
  {
    "__docId__": 365,
    "kind": "class",
    "name": "RoundingMode_HALF_DOWN",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_DOWN",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": null,
    "description": "五捨六入",
    "lineNumber": 200,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_DOWN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_DOWN.toString",
    "access": "public",
    "description": "丸めモードの名前を英語の大文字で取得する",
    "lineNumber": 206,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 丸めモード名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "丸めモード名"
    },
    "params": []
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_DOWN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_DOWN.getAddNumber",
    "access": "public",
    "description": "丸めに必要な加算値",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} いくつ足すと丸められるか"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "1ケタ目の値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "いくつ足すと丸められるか"
    }
  },
  {
    "__docId__": 368,
    "kind": "class",
    "name": "RoundingMode_HALF_EVEN",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_EVEN",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": null,
    "description": "等間隔なら偶数側へ丸める",
    "lineNumber": 232,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_EVEN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_EVEN.toString",
    "access": "public",
    "description": "丸めモードの名前を英語の大文字で取得する",
    "lineNumber": 238,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 丸めモード名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "丸めモード名"
    },
    "params": []
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_EVEN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_HALF_EVEN.getAddNumber",
    "access": "public",
    "description": "丸めに必要な加算値",
    "lineNumber": 247,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} いくつ足すと丸められるか"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "1ケタ目の値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "いくつ足すと丸められるか"
    }
  },
  {
    "__docId__": 371,
    "kind": "class",
    "name": "RoundingMode_UNNECESSARY",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_UNNECESSARY",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": null,
    "description": "丸めない（丸める必要が出る場合はエラー）",
    "lineNumber": 280,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_UNNECESSARY",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_UNNECESSARY.toString",
    "access": "public",
    "description": "丸めモードの名前を英語の大文字で取得する",
    "lineNumber": 286,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 丸めモード名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "丸めモード名"
    },
    "params": []
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode_UNNECESSARY",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode_UNNECESSARY.getAddNumber",
    "access": "public",
    "description": "丸めに必要な加算値",
    "lineNumber": 295,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} いくつ足すと丸められるか"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "1ケタ目の値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "いくつ足すと丸められるか"
    }
  },
  {
    "__docId__": 374,
    "kind": "class",
    "name": "RoundingMode",
    "memberof": "src/math/context/RoundingMode.mjs",
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/context/RoundingMode.mjs",
    "importStyle": "RoundingMode",
    "description": "BigDecimal用の丸めモードクラス",
    "lineNumber": 310,
    "interface": false
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode.valueOf",
    "access": "public",
    "description": "指定した文字列で表される丸めクラスを取得する",
    "lineNumber": 317,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "RoundingModeEntity",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "モードの英数名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 376,
    "kind": "get",
    "name": "UP",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode.UP",
    "access": "public",
    "description": "絶対値の切り上げ（1桁目が0より大きければ桁上げする）",
    "lineNumber": 358,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "get",
    "name": "DOWN",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode.DOWN",
    "access": "public",
    "description": "絶対値の切り下げ（1桁目が0より大きければ桁下げする）",
    "lineNumber": 366,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 378,
    "kind": "get",
    "name": "CEILING",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode.CEILING",
    "access": "public",
    "description": "正の無限大に近づく",
    "lineNumber": 374,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 379,
    "kind": "get",
    "name": "FLOOR",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode.FLOOR",
    "access": "public",
    "description": "負の無限大に近づく",
    "lineNumber": 382,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "get",
    "name": "HALF_UP",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode.HALF_UP",
    "access": "public",
    "description": "四捨五入",
    "lineNumber": 390,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "get",
    "name": "HALF_DOWN",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode.HALF_DOWN",
    "access": "public",
    "description": "五捨六入",
    "lineNumber": 398,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "get",
    "name": "HALF_EVEN",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode.HALF_EVEN",
    "access": "public",
    "description": "等間隔なら偶数側へ丸める",
    "lineNumber": 406,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "get",
    "name": "UNNECESSARY",
    "memberof": "src/math/context/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/context/RoundingMode.mjs~RoundingMode.UNNECESSARY",
    "access": "public",
    "description": "丸めない（丸める必要が出る場合はエラー）",
    "lineNumber": 414,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "file",
    "name": "src/math/Matrix.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport LinearAlgebra from \"./tools/LinearAlgebra.mjs\";\n\n// @ts-ignore\nimport Statistics from \"./tools/Statistics.mjs\";\n\n// @ts-ignore\nimport Signal from \"./tools/Signal.mjs\";\n\n// @ts-ignore\nimport Complex from \"./Complex.mjs\";\n\n/**\n * Matrix 内で使用する関数群\n */\nclass MatrixTool {\n\n\t/**\n\t * 行列の位置を指定するデータから、実際の値を作成\n\t * @param data {string|number|Matrix|Complex} - 調査する値\n\t * @param max {number} - \":\"が指定された時に初期化する配列の長さ\n\t * @param geta {number} - \":\"が指定された時に初期化する値のオフセット\n\t * @returns {Array<number>}\n\t */\n\tstatic toPositionArrayFromObject(data, max, geta) {\n\t\tlet y;\n\t\tif(typeof data === \"string\") {\n\t\t\tconst array_or_string = MatrixTool.toArrayFromString(data);\n\t\t\tif(array_or_string === \":\") {\n\t\t\t\t// : が指定された場合\n\t\t\t\ty = new Array(max);\n\t\t\t\tfor(let i = 0; i < max; i++) {\n\t\t\t\t\ty[i] =  i + geta;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(array_or_string instanceof Array) {\n\t\t\t\ty = array_or_string;\n\t\t\t\tfor(let i = 0; i < y.length; i++) {\n\t\t\t\t\ty[i] = y[i].real | 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow \"toArrayFromString[\" + data + \"][\" + array_or_string + \"]\";\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\tlet t_data = data;\n\t\tif(!(t_data instanceof Matrix) && !(t_data instanceof Complex) && !((typeof t_data === \"number\") || (t_data instanceof Number))) {\n\t\t\tt_data = Matrix._toMatrix(t_data);\n\t\t}\n\t\tif(t_data instanceof Matrix) {\n\t\t\tif(!t_data.isVector()) {\n\t\t\t\tthrow \"getMatrix argument \" + t_data;\n\t\t\t}\n\t\t\tconst len = t_data.length;\n\t\t\ty = new Array(t_data.length);\n\t\t\tif(t_data.isRow()) {\n\t\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\t\ty[i] = t_data.matrix_array[0][i].real | 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(t_data.isColumn()) {\n\t\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\t\ty[i] = t_data.matrix_array[i][0].real | 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\treturn [ Matrix._toInteger(t_data) ];\n\t}\n\n\t/**\n\t * 対象ではないregexpの情報以外も抽出match\n\t * @param {string} text - 検索対象\n\t * @param {RegExp} regexp - 検索したい正規表現\n\t * @returns {Array<Object<boolean, string>>}\n\t */\n\tstatic match2(text, regexp) {\n\t\t// 対象ではないregexpの情報以外も抽出match\n\t\t// つまり \"1a2b\" で \\d を抽出すると、次のように抽出される\n\t\t// [false \"1\"]\n\t\t// [true \"a\"]\n\t\t// [false \"2\"]\n\t\t// [true \"b\"]\n\t\t// 0 ... 一致したかどうか\n\t\t// 1 ... 一致した文字列、あるいは一致していない文字列\n\t\tconst output = [];\n\t\tlet search_target = text;\n\t\tfor(let x = 0; x < 1000; x++) {\n\t\t\tconst match = search_target.match(regexp);\n\t\t\tif(match === null) {\n\t\t\t\tif(search_target.length) {\n\t\t\t\t\toutput.push([ false, search_target ]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(match.index > 0) {\n\t\t\t\toutput.push([ false, search_target.substr(0, match.index) ]);\n\t\t\t}\n\t\t\toutput.push([ true, match[0] ]);\n\t\t\tsearch_target = search_target.substr(match.index + match[0].length);\n\t\t}\n\t\treturn output;\n\t}\n\t\n\t/**\n\t * ブラケットに囲まれていたら、前後のブラケットを除去\n\t * @param {string} text - ブラケットを除去したい文字\n\t * @returns {string|null} 除去した文字列（ブラケットがない場合は、null）\n\t */\n\tstatic trimBracket(text) {\n\t\t// 前後に[]があるか確認\n\t\tif( !(/^\\[/).test(text) || !(/\\]$/).test(text)) {\n\t\t\treturn null;\n\t\t}\n\t\t// 前後の[]を除去\n\t\treturn text.substring(1, text.length - 1);\n\t}\n\n\t/**\n\t * JSONで定義された文字列データからMatrix型のデータを作成する\n\t * @param {string} text - 調査したい文字列([xx,xx,xx],[xx,xx,xx])\n\t * @returns {Array<Array<Complex>>} Matrix型で使用される内部の配列\n\t */\n\tstatic toMatrixArrayFromStringForArrayJSON(text) {\n\t\tconst matrix_array = [];\n\t\t// さらにブランケット内を抽出\n\t\tlet rows = text.match(/\\[[^\\]]+\\]/g);\n\t\tif(rows === null) {\n\t\t\t// ブランケットがない場合は、1行行列である\n\t\t\trows = [text];\n\t\t}\n\t\t// 各ブランケット内を列ごとに調査\n\t\tfor(let row_count = 0; row_count < rows.length; row_count++) {\n\t\t\tconst row = rows[row_count];\n\t\t\tconst column_array = row.substring(1, row.length - 1).split(\",\");\n\t\t\tconst rows_array = [];\n\t\t\tfor(let col_count = 0; col_count < column_array.length; col_count++) {\n\t\t\t\tconst column = column_array[col_count];\n\t\t\t\trows_array[col_count] = new Complex(column);\n\t\t\t}\n\t\t\tmatrix_array[row_count] = rows_array;\n\t\t}\n\t\treturn matrix_array;\n\t}\n\n\t/**\n\t * 初期値と差分値と最終値から、その値が入った配列を作成する\n\t * @param {Complex} from - 最初の値\n\t * @param {Complex} delta - 差分\n\t * @param {Complex} to - 繰り返す先の値（この値は含めない）\n\t * @returns {Array<Complex>}\n\t */\n\tstatic InterpolationCalculation(from, delta, to) {\n\t\tconst FromIsGreaterThanTo = from.compareTo(to);\n\t\tif(FromIsGreaterThanTo === 0) {\n\t\t\treturn from;\n\t\t}\n\t\tif(delta.isZero()) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\t// delta が負のため、どれだけたしても to にならない。\n\t\tif(delta.isNegative() && (FromIsGreaterThanTo === -1)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\t// FromIsGreaterThanTo\n\t\t// +1 from の方が大きい。下に減算タイプ\n\t\t// -1 to の方が大きい。上に加算タイプ\n\t\tconst rows_array = [];\n\t\tlet num = from;\n\t\trows_array[0] = num;\n\t\tfor(let i = 1; i < 0x10000; i++) {\n\t\t\tnum = num.add(delta);\n\t\t\tif(to.compareTo(num) === FromIsGreaterThanTo) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\trows_array[i] = num;\n\t\t}\n\t\treturn rows_array;\n\t}\n\n\t/**\n\t * match2で文字列を切り分けたデータから数値の配列を作成する\n\t * @param {Array<Object<boolean, string>>} match2_string - 文字列を切り分けたデータ\n\t * @returns {Array<Complex>}\n\t */\n\tstatic toArrayFromMatch2String(match2_string) {\n\t\tconst xs = match2_string;\n\t\tconst rows_array = [];\n\t\tfor(let i = 0; i < xs.length; i++) {\n\t\t\tconst xx = xs[i];\n\t\t\tif(!xx[0]) {\n\t\t\t\t// 一致していないデータであれば次へ\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// 「:記法」 1:3 なら 1,2,3。 1:2:9 なら 1:3:5:7:9\n\t\t\tif((i < xs.length - 2) && !xs[i + 1][0] && /:/.test(xs[i + 1][1])) {\n\t\t\t\tlet from, delta, to;\n\t\t\t\tif((i < xs.length - 4) && !xs[i + 3][0] && /:/.test(xs[i + 3][1])) {\n\t\t\t\t\tfrom = new Complex(xx[1]);\n\t\t\t\t\tdelta = new Complex(xs[i + 2][1]);\n\t\t\t\t\tto = new Complex(xs[i + 4][1]);\n\t\t\t\t\ti += 4;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfrom = new Complex(xx[1]);\n\t\t\t\t\tdelta = Complex.ONE;\n\t\t\t\t\tto = new Complex(xs[i + 2][1]);\n\t\t\t\t\ti += 2;\n\t\t\t\t}\n\t\t\t\tconst ip_array = MatrixTool.InterpolationCalculation(from, delta, to);\n\t\t\t\tfor(let j = 0; j < ip_array.length; j++) {\n\t\t\t\t\trows_array.push(ip_array[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\trows_array.push(new Complex(xx[1]));\n\t\t\t}\n\t\t}\n\n\t\treturn rows_array;\n\t}\n\n\t/**\n\t * 文字列からMatrix型の行列データの行部分に変換\n\t * 数字のような部分を抽出することで、行列を推定する\n\t * @param {string} row_text - 行列の1行を表す文字列\n\t * @returns {Array<Complex>|string}\n\t */\n\tstatic toArrayFromString(row_text) {\n\t\t// 「:」のみ記載されていないかの確認\n\t\tif(row_text.trim() === \":\") {\n\t\t\treturn \":\";\n\t\t}\n\t\tconst str = row_text.toLowerCase().replace(/infinity|inf/g, \"1e100000\");\n\t\t// 左が実数（強制）で右が複素数（任意）タイプ\n\t\tconst reg1 = /[+-]? *(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))( *[+-] *[- ]?(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))?[ij])?/;\n\t\t// 左が複素数（強制）で右が実数（任意）タイプ\n\t\tconst reg2 = /[+-]? *(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan))?[ij]( *[+] *[- ]?(([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)|(nan)))?/;\n\t\t// reg2優先で検索\n\t\tconst reg3 = new RegExp(\"(\" + reg2.source + \")|(\" + reg1.source + \")\", \"i\");\n\t\t// 問題として 1 - -jが通る\n\t\treturn MatrixTool.toArrayFromMatch2String(MatrixTool.match2(str, reg3));\n\t}\n\n\t/**\n\t * スペース区切りなどで文字列で定義された文字列データからMatrix型のデータを作成する\n\t * @param {string} text - 調査したい文字列\n\t * @returns {Array<Array<Complex>>} Matrix型で使用される内部の配列\n\t */\n\tstatic toMatrixArrayFromStringForArraySPACE(text) {\n\t\t// 行ごとを抽出して\n\t\tconst rows = text.split(\";\");\n\t\tconst matrix_array = new Array(rows.length);\n\t\tfor(let row_count = 0; row_count < rows.length; row_count++) {\n\t\t\t// 各行の文字を解析\n\t\t\tmatrix_array[row_count] = MatrixTool.toArrayFromString(rows[row_count]);\n\t\t}\n\t\treturn matrix_array;\n\t}\n\n\t/**\n\t * 行列用の文字列データから構成されるMatrix型のデータを作成する\n\t * @param {string} text - 調査したい文字列\n\t * @returns {Array<Array<Complex>>} Matrix型で使用される内部の配列\n\t */\n\tstatic toMatrixArrayFromStringInBracket(text) {\n\t\t// ブラケットの中にブラケットがある＝JSON形式\n\t\tif(/[[\\]]/.test(text)) {\n\t\t\treturn MatrixTool.toMatrixArrayFromStringForArrayJSON(text);\n\t\t}\n\t\t// それ以外(MATLAB, Octave, Scilab)\n\t\telse {\n\t\t\treturn MatrixTool.toMatrixArrayFromStringForArraySPACE(text);\n\t\t}\n\t}\n\n\t/**\n\t * 文字列データからMatrix型のデータを作成する\n\t * @param {string} text - 調査したい文字列\n\t * @returns {Array<Array<Complex>>} Matrix型で使用される内部の配列\n\t */\n\tstatic toMatrixArrayFromString(text) {\n\t\t// 前後のスペースを除去\n\t\tconst trimtext = text.replace(/^\\s*|\\s*$/g, \"\");\n\t\t// ブランケットを外す\n\t\tconst withoutBracket = MatrixTool.trimBracket(trimtext);\n\t\tif(withoutBracket) {\n\t\t\t// 配列用の初期化\n\t\t\treturn MatrixTool.toMatrixArrayFromStringInBracket(withoutBracket);\n\t\t}\n\t\telse {\n\t\t\t// スカラー用の初期化\n\t\t\treturn [[new Complex(text)]];\n\t\t}\n\t}\n\n\t/**\n\t * Matrix型内部データが行列データとして正しいかを調べる\n\t * @param {Array<Array<Complex>>} m_array\n\t * @returns {boolean} \n\t */\n\tstatic isCorrectMatrixArray(m_array) {\n\t\tif(m_array.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tconst num = m_array[0].length;\n\t\tif(num === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tfor(let i = 1; i < m_array.length; i++) {\n\t\t\tif(m_array[i].length !== num) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\n/**\n * 複素行列クラス (immutable)\n */\nexport default class Matrix {\n\t\n\t/**\n\t * 複素行列を作成\n\t * 引数は次のタイプをとれます\n\t * ・4 \t\t\t\t整数や実数\n\t * ・\"1 + j\"\t\t文字列で複素数をわたす\n\t * ・[1,2]\t\t\t1次元配列\n\t * ・[[1,2],[3,4]]\t行列\n\t * ・[\"1+j\", \"2+j\"]\t複素数を含んだ行列\n\t * ・\"[1 1:0.5:3]\"\t\tMATLAB/Octave/Scilab互換\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number - 行列データ( \"1 + j\", [1 , 1] など)\n\t */\n\tconstructor(number) {\n\t\tlet matrix_array = null;\n\t\tlet is_check_string = false;\n\t\tif(arguments.length === 1) {\n\t\t\tconst y = number;\n\t\t\t// 行列型なら中身をディープコピーする\n\t\t\tif(y instanceof Matrix) {\n\t\t\t\tmatrix_array = new Array(y.row_length);\n\t\t\t\tfor(let i = 0; i < y.row_length; i++) {\n\t\t\t\t\tmatrix_array[i] = new Array(y.column_length);\n\t\t\t\t\tfor(let j = 0; j < y.column_length; j++) {\n\t\t\t\t\t\tmatrix_array[i][j] = y.matrix_array[i][j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 複素数型なら1要素の行列\n\t\t\telse if(y instanceof Complex) {\n\t\t\t\tmatrix_array = [[y]];\n\t\t\t}\n\t\t\t// 行列の場合は中身を解析していく\n\t\t\telse if(y instanceof Array) {\n\t\t\t\tmatrix_array = [];\n\t\t\t\tfor(let row_count = 0; row_count < y.length; row_count++) {\n\t\t\t\t\t// 毎行ごと調査\n\t\t\t\t\tconst row = y[row_count];\n\t\t\t\t\t// 各行の要素が配列の場合は、配列内配列のため再度for文で調べていく\n\t\t\t\t\tif(row instanceof Array) {\n\t\t\t\t\t\tconst rows_array = new Array(row.length);\n\t\t\t\t\t\t// 1行を調査する\n\t\t\t\t\t\tfor(let col_count = 0; col_count < row.length; col_count++) {\n\t\t\t\t\t\t\tconst column = row[col_count];\n\t\t\t\t\t\t\t// 1要素が複素数ならそのまま代入\n\t\t\t\t\t\t\tif(column instanceof Complex) {\n\t\t\t\t\t\t\t\trows_array[col_count] = column;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// 1要素が行列なら、中身を抽出して代入\n\t\t\t\t\t\t\telse if(column instanceof Matrix) {\n\t\t\t\t\t\t\t\tif(!column.isScalar()) {\n\t\t\t\t\t\t\t\t\tthrow \"Matrix in matrix\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trows_array[col_count] = column.scalar;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// それ以外の場合は、複素数クラスのコンストラクタに判断させる\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\trows_array[col_count] = new Complex(column);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatrix_array[row_count] = rows_array;\n\t\t\t\t\t}\n\t\t\t\t\t// 1つの値のみ宣言の場合は、中の配列を行ベクトルとして定義する\n\t\t\t\t\telse {\n\t\t\t\t\t\t// 行ベクトルの初期化\n\t\t\t\t\t\tif(row_count === 0) {\n\t\t\t\t\t\t\tmatrix_array[0] = new Array(y.length);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 1要素が複素数ならそのまま代入\n\t\t\t\t\t\tif(row instanceof Complex) {\n\t\t\t\t\t\t\tmatrix_array[0][row_count] = row;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 1要素が行列なら、中身を抽出して代入\n\t\t\t\t\t\telse if(row instanceof Matrix) {\n\t\t\t\t\t\t\tif(!row.isScalar()) {\n\t\t\t\t\t\t\t\tthrow \"Matrix in matrix\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmatrix_array[0][row_count] = row.scalar;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// それ以外の場合は、複素数クラスのコンストラクタに判断させる\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tmatrix_array[0][row_count] = new Complex(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 文字列の場合は、文字列解析を行う\n\t\t\telse if(typeof y === \"string\") {\n\t\t\t\tis_check_string = true;\n\t\t\t\tmatrix_array = MatrixTool.toMatrixArrayFromString(y);\n\t\t\t}\n\t\t\t// 文字列変換できる場合は返還後に、文字列解析を行う\n\t\t\telse if(y instanceof Object) {\n\t\t\t\tis_check_string = true;\n\t\t\t\tmatrix_array = MatrixTool.toMatrixArrayFromString(y.toString());\n\t\t\t}\n\t\t\t// 単純なビルトインの数値など\n\t\t\telse {\n\t\t\t\tmatrix_array = [[new Complex(y)]];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow \"Matrix : Many arguments [\" + arguments.length + \"]\";\n\t\t}\n\t\tif(is_check_string) {\n\t\t\t// 文字列データの解析の場合、\":\" データが紛れていないかを確認する。\n\t\t\t// 紛れていたらその行は削除する。\n\t\t\tfor(let row = 0; row < matrix_array.length; row++) {\n\t\t\t\tif(matrix_array[row] === \":\") {\n\t\t\t\t\tmatrix_array.splice(row--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!MatrixTool.isCorrectMatrixArray(matrix_array)) {\n\t\t\tconsole.log(matrix_array);\n\t\t\tthrow \"new Matrix IllegalArgumentException\";\n\t\t}\n\t\t\n\t\t/**\n\t\t * 行列を構成する配列\n\t\t * @private\n\t\t * @type {Array<Array<Complex>>}\n\t\t */\n\t\tthis.matrix_array = matrix_array;\n\n\t\t/**\n\t\t * 行数\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.row_length = this.matrix_array.length;\n\t\t\n\t\t/**\n\t\t * 列数\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.column_length = this.matrix_array[0].length;\n\n\t\t/**\n\t\t * 文字列化に使用するキャッシュ\n\t\t * @private\n\t\t * @type {string}\n\t\t */\n\t\tthis.string_cash = null;\n\t}\n\n\t/**\n\t * Matrix を作成\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number\n\t * @returns {Matrix}\n\t */\n\tstatic create(number) {\n\t\tif((arguments.length === 1) && (number instanceof Matrix)) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new Matrix(number);\n\t\t}\n\t}\n\t\n\t/**\n\t * 指定した数値から Matrix 型に変換\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number\n\t * @returns {Matrix}\n\t */\n\tstatic valueOf(number) {\n\t\treturn Matrix.valueOf(number);\n\t}\n\n\t/**\n\t * 行列を作成\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix}\n\t * @private\n\t */\n\tstatic _toMatrix(number) {\n\t\tif(number instanceof Matrix) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new Matrix(number);\n\t\t}\n\t}\n\n\t/**\n\t * 複素数を作成\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Complex}\n\t * @private\n\t */\n\tstatic _toComplex(number) {\n\t\tif(number instanceof Complex) {\n\t\t\treturn number;\n\t\t}\n\t\tconst M = Matrix._toMatrix(number);\n\t\tif(M.isScalar()) {\n\t\t\treturn M.scalar;\n\t\t}\n\t\telse {\n\t\t\tthrow \"not scalar. [\" + number + \"]\";\n\t\t}\n\t}\n\n\t/**\n\t * 実数を作成\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toDouble(number) {\n\t\tif(typeof number === \"number\") {\n\t\t\treturn number;\n\t\t}\n\t\tconst x = Matrix._toComplex(number);\n\t\tif(x.isReal()) {\n\t\t\treturn x.real;\n\t\t}\n\t\telse {\n\t\t\tthrow \"not support complex numbers.\";\n\t\t}\n\t}\n\n\t/**\n\t * 整数を作成\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {number}\n\t * @private\n\t */\n\tstatic _toInteger(number) {\n\t\treturn Matrix._toDouble(number) | 0;\n\t}\n\n\t/**\n\t * キャッシュを削除\n\t */\n\t_clearCash() {\n\t\tif(this.string_cash) {\n\t\t\tdelete this.string_cash;\n\t\t}\n\t}\n\n\t/**\n\t * ディープコピー\n\t * @returns {Matrix}\n\t */\n\tclone() {\n\t\treturn new Matrix(this.matrix_array);\n\t}\n\n\t/**\n\t * 文字列化\n\t * @returns {string} \n\t */\n\ttoString() {\n\t\tif(this.string_cash) {\n\t\t\treturn this.string_cash;\n\t\t}\n\t\tconst exp_turn_point = 9;\n\t\tconst exp_turn_num = Math.pow(10, exp_turn_point);\n\t\tconst exp_point = 4;\n\t\tlet isDrawImag = false;\n\t\tlet isDrawExp = false;\n\t\tlet draw_decimal_position = 0;\n\n\t\t// 行列を確認して表示するための表示方法の確認する\n\t\tthis._each(\n\t\t\tfunction(num) {\n\t\t\t\tif(!num.isReal()) {\n\t\t\t\t\tisDrawImag = true;\n\t\t\t\t}\n\t\t\t\tif(Number.isFinite(num.real)) {\n\t\t\t\t\tif(Math.abs(num.real) >= exp_turn_num) {\n\t\t\t\t\t\tisDrawExp = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(Number.isFinite(num.imag)) {\n\t\t\t\t\tif(Math.abs(num.imag) >= exp_turn_num) {\n\t\t\t\t\t\tisDrawExp = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdraw_decimal_position = Math.max(draw_decimal_position, num.getDecimalPosition());\n\t\t\t}\n\t\t);\n\n\t\tif(draw_decimal_position > 0) {\n\t\t\tdraw_decimal_position = exp_point;\n\t\t}\n\n\t\t// 文字列データを作成とともに、最大の長さを記録する\n\t\tlet str_max = 0;\n\t\tconst draw_buff = [];\n\t\t// 数値データを文字列にする関数（eの桁がある場合は中身は3桁にする）\n\t\tconst toStrFromFloat = function(number) {\n\t\t\tconst str = !isDrawExp ? number.toFixed(draw_decimal_position) : number.toExponential(exp_point);\n\t\t\tif(/inf/i.test(str)) {\n\t\t\t\tif(number === Number.POSITIVE_INFINITY) {\n\t\t\t\t\treturn \"Inf\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn \"-Inf\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(/nan/i.test(str)) {\n\t\t\t\treturn \"NaN\";\n\t\t\t}\n\t\t\telse if(!isDrawExp) {\n\t\t\t\treturn str;\n\t\t\t}\n\t\t\tconst split = str.split(\"e\");\n\t\t\tlet exp_text = split[1];\n\t\t\tif(exp_text.length === 2) {\n\t\t\t\texp_text = exp_text.substr(0, 1) + \"00\" + exp_text.substr(1);\n\t\t\t}\n\t\t\telse if(exp_text.length === 3) {\n\t\t\t\texp_text = exp_text.substr(0, 1) + \"0\" + exp_text.substr(1);\n\t\t\t}\n\t\t\treturn split[0] + \"e\" + exp_text;\n\t\t};\n\t\tthis._each(\n\t\t\tfunction(num) {\n\t\t\t\tconst data = {};\n\t\t\t\tlet real = num.real;\n\t\t\t\tdata.re_sign = real < 0 ? \"-\" : \" \";\n\t\t\t\treal = Math.abs(real);\n\t\t\t\tdata.re_str = toStrFromFloat(real);\n\t\t\t\tstr_max = Math.max(str_max, data.re_str.length + 1);\n\t\t\t\tif(isDrawImag) {\n\t\t\t\t\tlet imag = num.imag;\n\t\t\t\t\tdata.im_sign = imag < 0 ? \"-\" : \"+\";\n\t\t\t\t\timag = Math.abs(imag);\n\t\t\t\t\tdata.im_str = toStrFromFloat(imag);\n\t\t\t\t\tstr_max = Math.max(str_max, data.im_str.length + 1);\n\t\t\t\t}\n\t\t\t\tdraw_buff.push(data);\n\t\t\t}\n\t\t);\n\n\t\t// 右寄せ用関数\n\t\tconst right = function(text, length) {\n\t\t\tconst space = \"                                        \";\n\t\t\treturn space.substr(0, length - text.length) + text;\n\t\t};\n\t\t// 出力用文字列を作成する\n\t\tconst output = [];\n\t\tconst that = this;\n\t\tthis._each(\n\t\t\tfunction(num, row, col) {\n\t\t\t\tconst data = draw_buff.shift();\n\t\t\t\tlet text = right(data.re_sign + data.re_str, str_max);\n\t\t\t\tif(isDrawImag) {\n\t\t\t\t\ttext += \" \" + data.im_sign + right(data.im_str, str_max) + \"i\";\n\t\t\t\t}\n\t\t\t\toutput.push(text);\n\t\t\t\toutput.push((col < that.column_length - 1) ? \" \" : \"\\n\");\n\t\t\t}\n\t\t);\n\n\t\tthis.string_cash = output.join(\"\");\n\n\t\treturn this.string_cash;\n\t}\n\n\t/**\n\t * 文字列化（1行で表す）\n\t * @returns {string} \n\t */\n\ttoOneLineString() {\n\t\tif(this.isScalar()) {\n\t\t\treturn this.scalar.toString();\n\t\t}\n\t\tlet output = \"[ \";\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\toutput += this.matrix_array[row][col].toString();\n\t\t\t\tif(col < this.column_length - 1) {\n\t\t\t\t\toutput += \", \";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(row < this.row_length - 1) {\n\t\t\t\t\t\toutput += \"; \";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\toutput += \" ]\";\n\t\treturn output;\n\t}\n\n\t/**\n\t * 等式\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {boolean} A === B\n\t */\n\tequals(number, epsilon) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif((M1.row_length !== M2.row_length) || (M1.column_length !== M2.column_length)) {\n\t\t\treturn false;\n\t\t}\n\t\tif((M1.row_length === 1) && (M1.column_length ===1)) {\n\t\t\treturn M1.scalar.equals(M2.scalar, epsilon);\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tif(!x1[row][col].equals(x2[row][col], epsilon)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * 行列を構成する複素数の実部の配列\n\t * @returns {Array<Array<number>>}\n\t */\n\tgetNumberMatrixArray() {\n\t\tconst y = new Array(this.row_length);\n\t\tfor(let i = 0; i < this.row_length; i++) {\n\t\t\ty[i] = new Array(this.column_length);\n\t\t\tfor(let j = 0; j < this.column_length; j++) {\n\t\t\t\ty[i][j] = this.matrix_array[i][j].real;\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\t\n\t/**\n\t * 行列を構成する複素数のComplex型の配列\n\t * @returns {Array<Array<Complex>>}\n\t */\n\tgetComplexMatrixArray() {\n\t\tconst y = new Array(this.row_length);\n\t\tfor(let i = 0; i < this.row_length; i++) {\n\t\t\ty[i] = new Array(this.column_length);\n\t\t\tfor(let j = 0; j < this.column_length; j++) {\n\t\t\t\ty[i][j] = this.matrix_array[i][j];\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\t\n\t/**\n\t * 本オブジェクト内の全要素に同一処理を実行\n\t * ミュータブル\n\t * @param {function(Complex, number, number): ?Object } eachfunc - Function(num, row, col)\n\t * @returns {Matrix} 処理実行後の行列\n\t * @private\n\t */\n\t_each(eachfunc) {\n\t\tlet isclearcash = false;\n\t\t// 行優先ですべての値に対して指定した関数を実行する。内容を書き換える可能性もある\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tconst ret = eachfunc(this.matrix_array[row][col], row, col);\n\t\t\t\tif(ret === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(ret instanceof Complex) {\n\t\t\t\t\tthis.matrix_array[row][col] = ret;\n\t\t\t\t}\n\t\t\t\telse if(ret instanceof Matrix) {\n\t\t\t\t\tthis.matrix_array[row][col] = ret.scalar;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.matrix_array[row][col] = new Complex(ret);\n\t\t\t\t}\n\t\t\t\tisclearcash = true;\n\t\t\t}\n\t\t}\n\t\tif(isclearcash) {\n\t\t\tthis._clearCash();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * 本オブジェクト内の全要素に同一処理を実行\n\t * @param {function(Complex, number, number): ?Object } eachfunc - Function(num, row, col)\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\tcloneMatrixDoEachCalculation(eachfunc) {\n\t\treturn this.clone()._each(eachfunc);\n\t}\n\n\t/**\n\t * 行列内の各値に対して指定した初期化を行ったMatrixを作成\n\t * @param {function(number, number): ?Object } eachfunc - Function(row, col)\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} dimension - 次元数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [column_length=dimension] - 列数\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\tstatic createMatrixDoEachCalculation(eachfunc, dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 3)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\tconst y_row_length = Matrix._toInteger(dimension);\n\t\tconst y_column_length = column_length ? Matrix._toInteger(column_length) : y_row_length;\n\t\tconst y = new Array(y_row_length);\n\t\tfor(let row = 0; row < y_row_length; row++) {\n\t\t\ty[row] = new Array(y_column_length);\n\t\t\tfor(let col = 0; col < y_column_length; col++) {\n\t\t\t\tconst ret = eachfunc(row, col);\n\t\t\t\tif(ret === undefined) {\n\t\t\t\t\ty[row][col] = Complex.ZERO;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ty[row][col] = Matrix._toComplex(ret);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * 行列の列をベクトルとみなし同一処理を実行、行ベクトルであれば行ベクトルに対し同一処理を実行\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\teachVectorAuto(array_function) {\n\t\tif(this.isRow()) {\n\t\t\t// 1行であれば、その1行に対して処理を行う\n\t\t\tconst row_array = new Array(this.row_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\trow_array[col] = this.matrix_array[0][col];\n\t\t\t}\n\t\t\treturn new Matrix(array_function(row_array));\n\t\t}\n\t\telse {\n\t\t\tconst y = new Matrix(0);\n\t\t\ty._resize(1, this.column_length);\n\t\t\t// 1列、行列であれば、列ごとに処理を行う\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tconst col_array = new Array(this.row_length);\n\t\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\t\tcol_array[row] = this.matrix_array[row][col];\n\t\t\t\t}\n\t\t\t\tconst col_output = array_function(col_array);\n\t\t\t\ty._resize(Math.max(y.row_length, col_output.length), y.column_length);\n\t\t\t\tfor(let row = 0; row < col_output.length; row++) {\n\t\t\t\t\ty.matrix_array[row][col] = col_output[row];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t}\n\n\t/**\n\t * 行列の行と列をベクトルとみなし同一処理を実行\n\t * 先に行に対して同一処理を実行後の行列に対し、列ごとにさらに同一処理を実行する\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\teachVectorBoth(array_function) {\n\t\tconst y1 = new Matrix(0);\n\t\t// 行ごとに処理を行う\n\t\ty1._resize(this.row_length, 1);\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tconst row_array = new Array(this.column_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\trow_array[col] = this.matrix_array[row][col];\n\t\t\t}\n\t\t\tconst row_output = array_function(row_array);\n\t\t\ty1._resize(y1.row_length, Math.max(y1.column_length, row_output.length));\n\t\t\tfor(let col = 0; col < row_output.length; col++) {\n\t\t\t\ty1.matrix_array[row][col] = row_output[col];\n\t\t\t}\n\t\t}\n\t\tconst y2 = new Matrix(0);\n\t\t// 列ごとに処理を行う\n\t\ty2._resize(1, y1.column_length);\n\t\tfor(let col = 0; col < y1.column_length; col++) {\n\t\t\tconst col_array = new Array(y1.row_length);\n\t\t\tfor(let row = 0; row < y1.row_length; row++) {\n\t\t\t\tcol_array[row] = y1.matrix_array[row][col];\n\t\t\t}\n\t\t\tconst col_output = array_function(col_array);\n\t\t\ty2._resize(Math.max(y2.row_length, col_output.length), y2.column_length);\n\t\t\tfor(let row = 0; row < col_output.length; row++) {\n\t\t\t\ty2.matrix_array[row][col] = col_output[row];\n\t\t\t}\n\t\t}\n\t\treturn y2;\n\t}\n\n\t/**\n\t * 行列の行をベクトルとみなし同一処理を実行\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\teachVectorRow(array_function) {\n\t\tconst y = new Matrix(0);\n\t\t// 行ごとに処理を行う\n\t\ty._resize(this.row_length, 1);\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tconst row_array = new Array(this.column_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\trow_array[col] = this.matrix_array[row][col];\n\t\t\t}\n\t\t\tconst row_output = array_function(row_array);\n\t\t\ty._resize(y.row_length, Math.max(y.column_length, row_output.length));\n\t\t\tfor(let col = 0; col < row_output.length; col++) {\n\t\t\t\ty.matrix_array[row][col] = row_output[col];\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * 行列の列をベクトルとみなし同一処理を実行\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\teachVectorColumn(array_function) {\n\t\tconst y = new Matrix(0);\n\t\t// 列ごとに処理を行う\n\t\ty._resize(1, this.column_length);\n\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\tconst col_array = new Array(this.row_length);\n\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\tcol_array[row] = this.matrix_array[row][col];\n\t\t\t}\n\t\t\tconst col_output = array_function(col_array);\n\t\t\ty._resize(Math.max(y.row_length, col_output.length), y.column_length);\n\t\t\tfor(let row = 0; row < col_output.length; row++) {\n\t\t\t\ty.matrix_array[row][col] = col_output[row];\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * 引数に設定された行／列をベクトルとみなし同一処理を実行\n\t * @param {function(Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @param {string|number} [dimtype=\"auto\"] - 0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\"\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\teachVector(array_function, dimtype) {\n\t\tlet target = dimtype !== undefined ? dimtype : \"auto\";\n\t\tif(typeof target === \"string\") {\n\t\t\ttarget = target.toLocaleLowerCase();\n\t\t}\n\t\telse if(typeof target !== \"number\") {\n\t\t\ttarget = Matrix._toInteger(target);\n\t\t}\n\t\tif((target === \"auto\") || (target === 0)) {\n\t\t\treturn this.eachVectorAuto(array_function);\n\t\t}\n\t\telse if((target === \"row\") || (target === 1)) {\n\t\t\treturn this.eachVectorRow(array_function);\n\t\t}\n\t\telse if((target === \"column\") || (target === 2)) {\n\t\t\treturn this.eachVectorColumn(array_function);\n\t\t}\n\t\telse if((target === \"both\") || (target === 3)) {\n\t\t\treturn this.eachVectorBoth(array_function);\n\t\t}\n\t\telse {\n\t\t\tthrow \"eachVector argument \" + dimtype;\n\t\t}\n\t}\n\n\t/**\n\t * 行列内の指定した箇所の行列\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} row - 抽出する行番号が入ったベクトル,\":\"で全ての行抽出\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} col - 抽出する列番号が入ったベクトル,\":\"で全ての列抽出\n\t * @param {boolean} [isUpOffset=false] - 位置のオフセットを1にするか\n\t * @returns {Matrix} \n\t */\n\tgetMatrix(row, col, isUpOffset=false) {\n\t\tconst geta = isUpOffset ? 1 : 0 ;\n\t\tconst row_array = MatrixTool.toPositionArrayFromObject(row, this.row_length, geta);\n\t\tconst col_array = MatrixTool.toPositionArrayFromObject(col, this.column_length, geta);\n\t\tconst x = this.matrix_array;\n\t\tconst y = new Array(row_array.length);\n\t\tfor(let row = 0; row < row_array.length; row++) {\n\t\t\tconst y_row = new Array(col_array.length);\n\t\t\tfor(let col = 0; col < col_array.length; col++) {\n\t\t\t\ty_row[col] = x[row_array[row] - geta][col_array[col] - geta];\n\t\t\t}\n\t\t\ty[row] = y_row;\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * 行列内の指定した箇所の値を変更する\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} row - 変更する行番号が入ったベクトル,\":\"で全ての行抽出\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} col - 変更する列番号が入ったベクトル,\":\"で全ての列抽出\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} replace - 変更内容の行列\n\t * @param {boolean} [isUpOffset=false] - 位置のオフセットを1にするか\n\t * @returns {Matrix} \n\t */\n\tsetMatrix(row, col, replace, isUpOffset=false) {\n\t\tconst geta = isUpOffset ? 1 : 0 ;\n\t\tconst row_array = MatrixTool.toPositionArrayFromObject(row, this.row_length, geta);\n\t\tconst col_array = MatrixTool.toPositionArrayFromObject(col, this.column_length, geta);\n\t\tconst Y = new Matrix(this);\n\t\tconst y = Y.matrix_array;\n\t\tconst X = Matrix._toMatrix(replace);\n\t\tconst x = X.matrix_array;\n\t\tfor(let row = 0; row < row_array.length; row++) {\n\t\t\tfor(let col = 0; col < col_array.length; col++) {\n\t\t\t\ty[row_array[row] - geta][col_array[col] - geta] = x[row % X.row_length][col % X.column_length];\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * 行列内の指定した箇所の値\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} row_or_pos - 行列なら行番号, ベクトルの場合は値の位置番号\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [col] - 列番号（行列の場合は指定する）\n\t * @returns {Complex} \n\t */\n\tgetComplex(row_or_pos, col) {\n\t\tlet row_or_pos_scalar = null;\n\t\tlet col_scalar = null;\n\t\tif(arguments.length === 1) {\n\t\t\trow_or_pos_scalar = Matrix._toInteger(row_or_pos);\n\t\t}\n\t\telse if(arguments.length === 2) {\n\t\t\trow_or_pos_scalar = Matrix._toInteger(row_or_pos);\n\t\t\tcol_scalar = Matrix._toInteger(col);\n\t\t}\n\t\tif(this.isRow()) {\n\t\t\treturn this.matrix_array[0][row_or_pos_scalar];\n\t\t}\n\t\telse if(this.isColumn()) {\n\t\t\treturn this.matrix_array[row_or_pos_scalar][0];\n\t\t}\n\t\telse {\n\t\t\treturn this.matrix_array[row_or_pos_scalar][col_scalar];\n\t\t}\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の基本操作、基本情報の取得\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t\n\t/**\n\t * 行列の最初の要素の整数値\n\t * @returns {number}\n\t */\n\tget intValue() {\n\t\treturn (this.matrix_array[0][0].real) | 0;\n\t}\n\n\t/**\n\t * 行列の最初の要素の実数値\n\t * @returns {number}\n\t */\n\tget doubleValue() {\n\t\treturn this.matrix_array[0][0].real;\n\t}\n\n\t/**\n\t * 行列の最初の要素\n\t * @returns {Complex}\n\t */\n\tget scalar() {\n\t\treturn this.matrix_array[0][0];\n\t}\n\n\t/**\n\t * 行数及び列数の最大値\n\t * @returns {number}\n\t */\n\tget length() {\n\t\treturn this.row_length > this.column_length ? this.row_length : this.column_length;\n\t}\n\n\t/**\n\t * 1ノルム\n\t * @returns {number}\n\t */\n\tget norm1() {\n\t\treturn LinearAlgebra.norm(this, 1);\n\t}\n\t\n\t/**\n\t * 2ノルム\n\t * @returns {number}\n\t */\n\tget norm2() {\n\t\treturn LinearAlgebra.norm(this, 2);\n\t}\n\n\t/**\n\t * pノルム\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [p=2]\n\t * @returns {number}\n\t */\n\tnorm(p) {\n\t\treturn LinearAlgebra.norm(this, p);\n\t}\n\n\t/**\n\t * 条件数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [p=2]\n\t * @returns {number}\n\t */\n\tcond(p) {\n\t\treturn LinearAlgebra.cond(this, p);\n\t}\n\n\t/**\n\t * 1ノルムの条件数の逆数\n\t * @returns {number}\n\t */\n\trcond() {\n\t\treturn LinearAlgebra.rcond(this);\n\t}\n\n\t/**\n\t * ランク\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {number} rank(A)\n\t */\n\trank(epsilon) {\n\t\treturn LinearAlgebra.rank(this, epsilon);\n\t}\n\n\t/**\n\t * トレース\n\t * @returns {Complex} trace(A)\n\t */\n\ttrace() {\n\t\treturn LinearAlgebra.trace(this);\n\t}\n\n\t/**\n\t * 行列式\n\t * @returns {Matrix} |A|\n\t */\n\tdet() {\n\t\treturn LinearAlgebra.det(this);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の作成関係\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t\n\t/**\n\t * 指定した数値で初期化\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number - 初期値\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} dimension - 次元数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [column_length] - 列数\n\t * @returns {Matrix}\n\t */\n\tstatic memset(number, dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 3)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\tconst M = Matrix._toMatrix(number);\n\t\tif(!M.isScalar()) {\n\t\t\tconst x = M.matrix_array;\n\t\t\tconst x_row_length = M.row_length;\n\t\t\tconst x_column_length = M.column_length;\n\t\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\t\treturn x[row % x_row_length][col % x_column_length];\n\t\t\t}, dimension, column_length);\n\t\t}\n\t\telse {\n\t\t\tconst x = M.scalar;\n\t\t\treturn Matrix.createMatrixDoEachCalculation(function() {\n\t\t\t\treturn x;\n\t\t\t}, dimension, column_length);\n\t\t}\n\t}\n\n\t/**\n\t * 単位行列を生成\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} dimension - 次元数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [column_length] - 列数\n\t * @returns {Matrix}\n\t */\n\tstatic eye(dimension, column_length) {\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn row === col ? Complex.ONE : Complex.ZERO;\n\t\t}, dimension, column_length);\n\t}\n\t\n\t/**\n\t * 零行列を生成\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} dimension - 次元数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [column_length] - 列数\n\t * @returns {Matrix}\n\t */\n\tstatic zeros(dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 2)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\treturn Matrix.memset(Complex.ZERO, dimension, column_length);\n\t}\n\n\t/**\n\t * 1で構成した行列を生成\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} dimension - 次元数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [column_length] - 列数\n\t * @returns {Matrix}\n\t */\n\tstatic ones(dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 2)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\treturn Matrix.memset(Complex.ONE, dimension, column_length);\n\t}\n\n\t/**\n\t * 乱数で構成した行列を生成\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} dimension - 次元数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [column_length] - 列数\n\t * @returns {Matrix}\n\t */\n\tstatic rand(dimension, column_length) {\n\t\treturn Matrix.createMatrixDoEachCalculation(function() {\n\t\t\treturn Complex.rand();\n\t\t}, dimension, column_length);\n\t}\n\n\t/**\n\t * 正規分布に従う乱数で構成した行列を生成\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} dimension - 次元数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [column_length] - 列数\n\t * @returns {Matrix}\n\t */\n\tstatic randn(dimension, column_length) {\n\t\treturn Matrix.createMatrixDoEachCalculation(function() {\n\t\t\treturn Complex.randn();\n\t\t}, dimension, column_length);\n\t}\n\n\t/**\n\t * 行列なら対角成分を列ベクトルを生成、ベクトルなら対角成分を持つ行列を生成\n\t * @returns {Matrix} 行列なら対角成分を列ベクトルを生成、ベクトルなら対角成分を持つ行列を生成\n\t */\n\tdiag() {\n\t\tif(this.isVector()) {\n\t\t\t// 行列を作成\n\t\t\tconst M = this;\n\t\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\t\tif(row === col) {\n\t\t\t\t\treturn M.getComplex(row);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn Complex.ZERO;\n\t\t\t\t}\n\t\t\t}, this.length);\n\t\t}\n\t\telse {\n\t\t\t// 列ベクトルを作成\n\t\t\tconst len = Math.min(this.row_length, this.column_length);\n\t\t\tconst y = new Array(len);\n\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\ty[i] = new Array(1);\n\t\t\t\ty[i][0] = this.matrix_array[i][i];\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t}\n\n\t// TODO 行列の結合がほしい\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 比較や判定\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * スカラー値の判定\n\t * @returns {boolean}\n\t */\n\tisScalar() {\n\t\treturn this.row_length === 1 && this.column_length == 1;\n\t}\n\t\n\t/**\n\t * 行ベクトル／横ベクトルの判定\n\t * @returns {boolean}\n\t */\n\tisRow() {\n\t\treturn this.row_length === 1;\n\t}\n\t\n\t/**\n\t * 列ベクトル／縦ベクトルの判定\n\t * @returns {boolean}\n\t */\n\tisColumn() {\n\t\treturn this.column_length === 1;\n\t}\n\n\t/**\n\t * ベクトルの判定\n\t * @returns {boolean}\n\t */\n\tisVector() {\n\t\treturn this.row_length === 1 || this.column_length === 1;\n\t}\n\n\t/**\n\t * 行列の判定\n\t * @returns {boolean}\n\t */\n\tisMatrix() {\n\t\treturn this.row_length !== 1 && this.column_length !== 1;\n\t}\n\n\t/**\n\t * 正方行列の判定\n\t * @returns {boolean}\n\t */\n\tisSquare() {\n\t\treturn this.row_length === this.column_length;\n\t}\n\n\t/**\n\t * 実行列の判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisReal(epsilon) {\n\t\tlet is_real = true;\n\t\tthis._each(function(num){\n\t\t\tif(is_real && (num.isComplex(epsilon))) {\n\t\t\t\tis_real = false;\n\t\t\t}\n\t\t});\n\t\treturn is_real;\n\t}\n\n\t/**\n\t * 複素行列の判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisComplex(epsilon) {\n\t\treturn !this.isReal(epsilon);\n\t}\n\n\t/**\n\t * 零行列を判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisZeros(epsilon) {\n\t\tlet is_zeros = true;\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\tthis._each(function(num){\n\t\t\tif(is_zeros && (!num.isZero(tolerance))) {\n\t\t\t\tis_zeros = false;\n\t\t\t}\n\t\t});\n\t\treturn is_zeros;\n\t}\n\n\t/**\n\t * 単位行列を判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisIdentity(epsilon) {\n\t\tlet is_identity = true;\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_identity) {\n\t\t\t\tif(row === col) {\n\t\t\t\t\tif(!num.isOne(tolerance)) {\n\t\t\t\t\t\tis_identity = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(!num.isZero(tolerance)) {\n\t\t\t\t\t\tis_identity = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn is_identity;\n\t}\n\n\t/**\n\t * 対角行列を判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisDiagonal(epsilon) {\n\t\tlet is_diagonal = true;\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_diagonal && (row !== col) && (!num.isZero(tolerance))) {\n\t\t\t\tis_diagonal = false;\n\t\t\t}\n\t\t});\n\t\treturn is_diagonal;\n\t}\n\t\n\t/**\n\t * 三重対角行列を判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisTridiagonal(epsilon) {\n\t\tlet is_tridiagonal = true;\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_tridiagonal && (Math.abs(row - col) > 1) && (!num.isZero(tolerance))) {\n\t\t\t\tis_tridiagonal = false;\n\t\t\t}\n\t\t});\n\t\treturn is_tridiagonal;\n\t}\n\n\t/**\n\t * 正則行列を判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisRegular(epsilon) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\t// ランクが行列の次元と等しいかどうかで判定\n\t\t// det(M) != 0 でもよいが、時間がかかる可能性があるので\n\t\t// 誤差は自動で計算など本当はもうすこし良い方法を考える必要がある\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\treturn (this.rank(tolerance) === this.row_length);\n\t}\n\n\t/**\n\t * 直行行列を判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisOrthogonal(epsilon) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\treturn (this.mul(this.transpose()).isIdentity(tolerance));\n\t}\n\n\t/**\n\t * ユニタリ行列を判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisUnitary(epsilon) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\treturn (this.mul(this.ctranspose()).isIdentity(tolerance));\n\t}\n\n\t/**\n\t * 対称行列を判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisSymmetric(epsilon) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = row + 1; col < this.column_length; col++) {\n\t\t\t\tif(!this.matrix_array[row][col].equals(this.matrix_array[col][row], tolerance)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * エルミート行列を判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisHermitian(epsilon) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = row; col < this.column_length; col++) {\n\t\t\t\tif(row === col) {\n\t\t\t\t\tif(!this.matrix_array[row][col].isReal(tolerance)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(!this.matrix_array[row][col].equals(this.matrix_array[col][row].conj(), tolerance)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * 上三角行列を判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisTriangleUpper(epsilon) {\n\t\tlet is_upper = true;\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_upper && (row > col) && (!num.isZero(tolerance))) {\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t});\n\t\treturn is_upper;\n\t}\n\n\t/**\n\t * 下三角行列を判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisTriangleLower(epsilon) {\n\t\tlet is_lower = true;\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_lower && (row < col) && (!num.isZero(tolerance))) {\n\t\t\t\tis_lower = false;\n\t\t\t}\n\t\t});\n\t\treturn is_lower;\n\t}\n\n\t/**\n\t * 置換行列を判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisPermutation(epsilon) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\tconst is_row = new Array(this.row_length);\n\t\tconst is_col = new Array(this.column_length);\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tconst target = this.matrix_array[row][col];\n\t\t\t\tif(target.isOne(tolerance)) {\n\t\t\t\t\tif(!is_row[row] && !is_col[col]) {\n\t\t\t\t\t\tis_row[row] = 1;\n\t\t\t\t\t\tis_col[col] = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(!target.isZero(tolerance)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(let i = 0;i < this.row_length; i++) {\n\t\t\tif(is_row[i] === undefined || is_col[i] === undefined) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * 行列の行数と列数\n\t * @returns {Matrix} [row_length column_length]\n\t */\n\tsize() {\n\t\t// 行列のサイズを取得\n\t\treturn new Matrix([[this.row_length, this.column_length]]);\n\t}\n\n\t/**\n\t * 値同士を比較\n\t * スカラー同士の場合の戻り値は、number型。\n\t * 行列同士の場合は、各項の比較結果が入った、Matrix型。\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {number|Matrix} A > B ? 1 : (A === B ? 0 : -1)\n\t */\n\tcompareTo(number, epsilon) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\t// ※スカラー同士の場合は、実数を返す\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn M1.scalar.compareTo(M2.scalar, epsilon);\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].compareTo(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 四則演算\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t\n\t/**\n\t * 加算\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix} A + B\n\t */\n\tadd(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif((M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].add(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * 減算\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix} A - B\n\t */\n\tsub(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif((M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].sub(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * 乗算\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix} A * B\n\t */\n\tmul(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn new Matrix(M1.scalar.mul(M2.scalar));\n\t\t}\n\t\tif(M1.isScalar()) {\n\t\t\tconst y = new Array(M2.row_length);\n\t\t\tfor(let row = 0; row < M2.row_length; row++) {\n\t\t\t\ty[row] = new Array(M2.column_length);\n\t\t\t\tfor(let col = 0; col < M2.column_length; col++) {\n\t\t\t\t\ty[row][col] = M1.scalar.mul(x2[row][col]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\telse if(M2.isScalar()) {\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\ty[row] = new Array(M1.column_length);\n\t\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\t\ty[row][col] = x1[row][col].mul(M2.scalar);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\tif(M1.column_length !== M2.row_length) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\t{\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\ty[row] = new Array(M2.column_length);\n\t\t\t\tfor(let col = 0; col < M2.column_length; col++) {\n\t\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\t\tfor(let i = 0; i < M1.column_length; i++) {\n\t\t\t\t\t\tsum = sum.add(x1[row][i].mul(x2[i][col]));\n\t\t\t\t\t}\n\t\t\t\t\ty[row][col] = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t}\n\n\t/**\n\t * 割り算\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix} A / B\n\t */\n\tdiv(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tconst x1 = M1.matrix_array;\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn new Matrix(M1.scalar.div(M2.scalar));\n\t\t}\n\t\tif(M2.isScalar()) {\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\ty[row] = new Array(M1.column_length);\n\t\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\t\ty[row][col] = x1[row][col].div(M2.scalar);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\tif(M2.row_length === M2.column_length) {\n\t\t\tconst epsilon = 1.0e-10;\n\t\t\tconst det = M2.det().scalar.norm;\n\t\t\tif(det > epsilon) {\n\t\t\t\t// ランク落ちしていないので通常の逆行列を使用する\n\t\t\t\treturn this.mul(M2.inv());\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// ランク落ちしているので疑似逆行列を使用する\n\t\t\t\treturn this.mul(M2.pinv());\n\t\t\t}\n\t\t}\n\t\tif(M1.column_length !== M2.column_length) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tthrow \"warning\";\n\t}\n\n\t/**\n\t * 整数での累乗\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number - 整数\n\t * @returns {Matrix} pow(A, B)\n\t */\n\tpow(number) {\n\t\tif(!this.isSquare()) {\n\t\t\tthrow \"not square \" + this;\n\t\t}\n\t\tlet n = Matrix._toInteger(number);\n\t\tif(n < 0) {\n\t\t\tthrow \"error negative number \" + n;\n\t\t}\n\t\tlet x, y;\n\t\tx = this.clone();\n\t\ty = Matrix.eye(this.length);\n\t\twhile(n !== 0) {\n\t\t\tif((n & 1) !== 0) {\n\t\t\t\ty = y.mul(x);\n\t\t\t}\n\t\t\tx = x.mul(x);\n\t\t\tn >>>= 1;\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * 行列の各項ごとの掛け算\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix} A .* B\n\t */\n\tnmul(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif(!M1.isScalar() && !M2.isScalar() && (M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].mul(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * 行列の各項ごとの割り算\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix} A ./ B\n\t */\n\tndiv(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif(!M1.isScalar() && !M2.isScalar() && (M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].div(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * 行列の各項ごとの逆数\n\t * @returns {Matrix} 1 ./ A\n\t */\n\tninv() {\n\t\tconst M1 = this;\n\t\tconst x1 = M1.matrix_array;\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row][col].inv();\n\t\t}, M1.row_length, M1.column_length);\n\t}\n\n\t/**\n\t * 行列の各項ごとの累乗\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @returns {Matrix} A .^ B\n\t */\n\tnpow(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix._toMatrix(number);\n\t\tif(!M1.isScalar() && !M2.isScalar() && (M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].pow(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// Complexのメソッドにある機能\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * 各項の実部\n\t * @returns {Matrix} real(A)\n\t */\n\treal() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.real);\n\t\t});\n\t}\n\t\n\t/**\n\t * 各項の虚部\n\t * @returns {Matrix} imag(A)\n\t */\n\timag() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.imag);\n\t\t});\n\t}\n\n\t/**\n\t * 各項の偏角\n\t * @returns {Matrix} arg(A)\n\t */\n\targ() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.arg);\n\t\t});\n\t}\n\n\t/**\n\t * 各項の符号値\n\t * @returns {Matrix} [-1,1] 複素数の場合はノルムを1にした値。\n\t */\n\tsign() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.sign());\n\t\t});\n\t}\n\n\t/**\n\t * 各項の整数を判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {Matrix} 1 or 0 で構成された行列\n\t */\n\ttestInteger(epsilon) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isInteger(epsilon) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * 各項の複素整数を判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {Matrix} 1 or 0 で構成された行列\n\t */\n\ttestComplexInteger(epsilon) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isComplexInteger(epsilon) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * 各項の 0 を判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {Matrix} 1 or 0 で構成された行列\n\t */\n\ttestZero(epsilon) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isZero(epsilon) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * 各項の 1 を判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {Matrix} 1 or 0 で構成された行列\n\t */\n\ttestOne(epsilon) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isOne(epsilon) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\t\n\t/**\n\t * 各項の複素数を判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {Matrix} 1 or 0 で構成された行列\n\t */\n\ttestComplex(epsilon) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isComplex(epsilon) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * 各項の実数を判定\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {Matrix} 1 or 0 で構成された行列\n\t */\n\ttestReal(epsilon) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isReal(epsilon) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * 各項の非数を判定\n\t * @returns {Matrix} 1 or 0 で構成された行列\n\t */\n\ttestNaN() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isNaN() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\n\t/**\n\t * real(x) > 0\n\t * @returns {Matrix} 1 or 0 で構成された行列\n\t */\n\ttestPositive() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isPositive() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * real(x) < 0\n\t * @returns {Matrix} 1 or 0 で構成された行列\n\t */\n\ttestNegative() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isNegative() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * real(x) >= 0\n\t * @returns {Matrix} 1 or 0 で構成された行列\n\t */\n\ttestNotNegative() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isNotNegative() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * 各項の無限を判定\n\t * @returns {Matrix} 1 or 0 で構成された行列\n\t */\n\ttestInfinite() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isInfinite() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\t\n\t/**\n\t * 各項の有限数を判定\n\t * @returns {Matrix} 1 or 0 で構成された行列\n\t */\n\ttestFinite() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isFinite() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * 絶対値\n\t * @returns {Matrix} abs(A)\n\t */\n\tabs() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.abs();\n\t\t});\n\t}\n\n\t/**\n\t * 複素共役行列\n\t * @returns {Matrix} real(A) - imag(A)j\n\t */\n\tconj() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.conj();\n\t\t});\n\t}\n\n\t/**\n\t * 負数\n\t * @returns {Matrix} -A\n\t */\n\tnegate() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.negate();\n\t\t});\n\t}\n\n\t/**\n\t * 平方根\n\t * @returns {Matrix} sqrt(A)\n\t */\n\tsqrt() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sqrt();\n\t\t});\n\t}\n\n\t/**\n\t * 対数\n\t * @returns {Matrix} log(A)\n\t */\n\tlog() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.log();\n\t\t});\n\t}\n\n\t/**\n\t * 指数\n\t * @returns {Matrix} exp(A)\n\t */\n\texp() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.exp();\n\t\t});\n\t}\n\n\t/**\n\t * sin\n\t * @returns {Matrix} sin(A)\n\t */\n\tsin() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sin();\n\t\t});\n\t}\n\n\t/**\n\t * cos\n\t * @returns {Matrix} cos(A)\n\t */\n\tcos() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.cos();\n\t\t});\n\t}\n\n\t/**\n\t * tan\n\t * @returns {Matrix} tan(A)\n\t */\n\ttan() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tan();\n\t\t});\n\t}\n\t\n\t/**\n\t * atan\n\t * @returns {Matrix} atan(A)\n\t */\n\tatan() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.atan();\n\t\t});\n\t}\n\n\t/**\n\t * atan2\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number - スカラー\n\t * @returns {Matrix} atan2(Y, X)\n\t */\n\tatan2(number) {\n\t\tconst X = Matrix._toComplex(number);\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.atan2(X);\n\t\t});\n\t}\n\n\t/**\n\t * floor\n\t * @returns {Matrix} floor(A)\n\t */\n\tfloor() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.floor();\n\t\t});\n\t}\n\n\t/**\n\t * ceil\n\t * @returns {Matrix} ceil(A)\n\t */\n\tceil() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.ceil();\n\t\t});\n\t}\n\n\t/**\n\t * 四捨五入\n\t * @returns {Matrix} round(A)\n\t */\n\tround() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.round();\n\t\t});\n\t}\n\n\t/**\n\t * 整数化\n\t * @returns {Matrix} fix(A)\n\t */\n\tfix() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.fix();\n\t\t});\n\t}\n\n\t/**\n\t * 小数部の抽出\n\t * @returns {Matrix} fract(A)\n\t */\n\tfract() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.fract();\n\t\t});\n\t}\n\n\t/**\n\t * sinc\n\t * @returns {Matrix} sinc(A)\n\t */\n\tsinc() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sinc();\n\t\t});\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の計算でよく使用する処理。\n\t// メソッド内部の処理を記述する際に使用している。\n\t// 他から使用する場合は注意が必要である。\n\t// 前提条件があるメソッド、ミュータブルとなっている。\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * 行列を時計回りに回転\n\t * ミュータブル\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} rot_90_count - 回転する回数\n\t * @returns {Matrix} 処理実行後の行列\n\t * @private\n\t */\n\t_rot90(rot_90_count) {\n\t\tconst count = Matrix._toInteger(rot_90_count);\n\t\tlet rot_type = 1;\n\t\tif(arguments.length === 1) {\n\t\t\trot_type = ((count % 4) + 4) % 4;\n\t\t}\n\t\tif(rot_type === 0) {\n\t\t\treturn this;\n\t\t}\n\t\t// バックアップ\n\t\tconst x = new Array(this.row_length);\n\t\tfor(let i = 0; i < this.row_length; i++) {\n\t\t\tx[i] = new Array(this.column_length);\n\t\t\tfor(let j = 0; j < this.column_length; j++) {\n\t\t\t\tx[i][j] = this.matrix_array[i][j];\n\t\t\t}\n\t\t}\n\t\tconst y = this.matrix_array;\n\t\tif(rot_type === 1) {\n\t\t\t// 90度回転\n\t\t\ty.splice(this.column_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tif(col < this.row_length) {\n\t\t\t\t\ty[col].splice(this.row_length);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ty[col] = new Array(this.row_length);\n\t\t\t\t}\n\t\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\t\ty[col][row] = x[this.row_length - row - 1][col];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(rot_type === 2) {\n\t\t\t// 180度回転\n\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\t\ty[row][col] = x[this.row_length - row - 1][this.column_length - col - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(rot_type === 3) {\n\t\t\t// 270度回転\n\t\t\ty.splice(this.column_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tif(col < this.row_length) {\n\t\t\t\t\ty[col].splice(this.row_length);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ty[col] = new Array(this.row_length);\n\t\t\t\t}\n\t\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\t\ty[col][row] = x[row][this.column_length - col - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.row_length = y.length;\n\t\tthis.column_length = y[0].length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * 行列を時計回りに回転\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} rot_90_count - 回転する回数\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\trot90(rot_90_count) {\n\t\treturn this.clone()._rot90(rot_90_count);\n\t}\n\n\t/**\n\t * 行列を拡張、拡張した項は、0で初期化。\n\t * ミュータブル\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} new_row_length - 新しい行の長さ\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} new_column_length - 新しい列の長さ\n\t * @returns {Matrix} 処理実行後の行列\n\t * @private\n\t */\n\t_resize(new_row_length, new_column_length) {\n\t\tconst row_length\t= Matrix._toInteger(new_row_length);\n\t\tconst column_length\t= Matrix._toInteger(new_column_length);\n\t\tif((row_length === this.row_length) && (column_length === this.column_length)) {\n\t\t\treturn this;\n\t\t}\n\t\tif((row_length <= 0) || (column_length <= 0)) {\n\t\t\tthrow \"_resize\";\n\t\t}\n\t\tconst row_max = Math.max(this.row_length, row_length);\n\t\tconst col_max = Math.max(this.column_length, column_length);\n\t\tconst y = this.matrix_array;\n\t\t// 大きくなった行と列に対してゼロで埋める\n\t\tfor(let row = 0; row < row_max; row++) {\n\t\t\tif(row >= this.row_length) {\n\t\t\t\ty[row] = new Array(col_max);\n\t\t\t}\n\t\t\tfor(let col = 0; col < col_max; col++) {\n\t\t\t\tif((row >= this.row_length) || (col >= this.column_length)) {\n\t\t\t\t\ty[row][col] = Complex.ZERO;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// 小さくなった行と列を削除する\n\t\tif(this.row_length > row_length) {\n\t\t\ty.splice(row_length);\n\t\t}\n\t\tif(this.column_length > column_length) {\n\t\t\tfor(let row = 0; row < y.length; row++) {\n\t\t\t\ty[row].splice(column_length);\n\t\t\t}\n\t\t}\n\t\tthis.row_length = row_length;\n\t\tthis.column_length = column_length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * 行列を拡張、拡張した項は、0で初期化\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} row_length - 新しい行の長さ\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} column_length - 新しい列の長さ\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\tresize(row_length, column_length) {\n\t\treturn this.clone()._resize(row_length, column_length);\n\t}\n\n\t/**\n\t * 行列内の行を消去\n\t * ミュータブル\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} delete_row_index - 行番号\n\t * @returns {Matrix} 処理実行後の行列\n\t * @private\n\t */\n\t_deleteRow(delete_row_index) {\n\t\tconst row_index\t= Matrix._toInteger(delete_row_index);\n\t\tif((this.row_length === 1) || (this.row_length <= row_index)) {\n\t\t\tthrow \"_deleteRow\";\n\t\t}\n\t\tthis.matrix_array.splice(row_index, 1);\n\t\tthis.row_length--;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * 行列内の列を消去\n\t * ミュータブル\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} delete_column_index - 列番号\n\t * @returns {Matrix} 処理実行後の行列\n\t * @private\n\t */\n\t_deleteColumn(delete_column_index) {\n\t\tconst column_index\t= Matrix._toInteger(delete_column_index);\n\t\tif((this.column_length === 1) || (this.column_length <= column_index)) {\n\t\t\tthrow \"_deleteColumn\";\n\t\t}\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tthis.matrix_array[row].splice(column_index, 1);\n\t\t}\n\t\tthis.column_length--;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * 行列内の行を消去\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} delete_row_index - 行番号\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\tdeleteRow(delete_row_index) {\n\t\treturn this.clone()._deleteRow(delete_row_index);\n\t}\n\n\t/**\n\t * 行列内の列を消去\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} delete_column_index - 列番号\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\tdeleteColumn(delete_column_index) {\n\t\treturn this.clone()._deleteColumn(delete_column_index);\n\t}\n\n\t/**\n\t * 行列内の行を交換\n\t * ミュータブル\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} exchange_row_index1 - 行番号1\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} exchange_row_index2 - 行番号2\n\t * @returns {Matrix} 処理実行後の行列\n\t * @private\n\t */\n\t_exchangeRow(exchange_row_index1, exchange_row_index2) {\n\t\tconst row_index1\t= Matrix._toInteger(exchange_row_index1);\n\t\tconst row_index2\t= Matrix._toInteger(exchange_row_index2);\n\t\tif((this.row_length === 1) || (this.row_length <= row_index1) || (this.row_length <= row_index2)) {\n\t\t\tthrow \"_exchangeRow\";\n\t\t}\n\t\tif(row_index1 === row_index2) {\n\t\t\treturn this;\n\t\t}\n\t\tconst swap = this.matrix_array[row_index1];\n\t\tthis.matrix_array[row_index1] = this.matrix_array[row_index2];\n\t\tthis.matrix_array[row_index2] = swap;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * 行列内の列を交換\n\t * ミュータブル\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} exchange_column_index1 - 行番号1\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} exchange_column_index2 - 行番号2\n\t * @returns {Matrix} 処理実行後の行列\n\t * @private\n\t */\n\t_exchangeColumn(exchange_column_index1, exchange_column_index2) {\n\t\tconst column_index1\t= Matrix._toInteger(exchange_column_index1);\n\t\tconst column_index2\t= Matrix._toInteger(exchange_column_index2);\n\t\tif((this.column_length === 1) || (this.column_length <= column_index1) || (this.column_length <= column_index2)) {\n\t\t\tthrow \"_exchangeColumn\";\n\t\t}\n\t\tif(column_index1 === column_index2) {\n\t\t\treturn this;\n\t\t}\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tconst swap = this.matrix_array[row][column_index1];\n\t\t\tthis.matrix_array[row][column_index1] = this.matrix_array[row][column_index2];\n\t\t\tthis.matrix_array[row][column_index2] = swap;\n\t\t}\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * 行列内の行を交換\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} exchange_row_index1 - 行番号1\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} exchange_row_index2 - 行番号2\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\texchangeRow(exchange_row_index1, exchange_row_index2) {\n\t\treturn this.clone()._exchangeRow(exchange_row_index1, exchange_row_index2);\n\t}\n\n\t/**\n\t * 行列内の列を交換\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} exchange_column_index1 - 行番号1\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} exchange_column_index2 - 行番号2\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\texchangeColumn(exchange_column_index1, exchange_column_index2) {\n\t\treturn this.clone()._exchangeColumn(exchange_column_index1, exchange_column_index2);\n\t}\n\n\t/**\n\t * 行列の右に行列を結合\n\t * ミュータブル\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} left_matrix - 結合したい行列\n\t * @returns {Matrix} 処理実行後の行列\n\t * @private\n\t */\n\t_concatLeft(left_matrix) {\n\t\tconst M = Matrix._toMatrix(left_matrix);\n\t\tif(this.row_length != M.row_length) {\n\t\t\tthrow \"_concatLeft\";\n\t\t}\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\tthis.matrix_array[row].push(M.matrix_array[row][col]);\n\t\t\t}\n\t\t}\n\t\tthis.column_length += M.column_length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * 行列の下に行列を結合\n\t * ミュータブル\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} bottom_matrix - 結合したい行列\n\t * @returns {Matrix} 処理実行後の行列\n\t * @private\n\t */\n\t_concatBottom(bottom_matrix) {\n\t\tconst M = Matrix._toMatrix(bottom_matrix);\n\t\tif(this.column_length != M.column_length) {\n\t\t\tthrow \"_concatBottom\";\n\t\t}\n\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\tthis.matrix_array.push(M.matrix_array[row]);\n\t\t}\n\t\tthis.row_length += M.row_length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * 行列の右に行列を結合\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} left_matrix - 結合したい行列\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\tconcatLeft(left_matrix) {\n\t\treturn this.clone()._concatLeft(left_matrix);\n\t}\n\n\t/**\n\t * 行列の下に行列を結合\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} bottom_matrix - 結合したい行列\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\tconcatBottom(bottom_matrix) {\n\t\treturn this.clone()._concatBottom(bottom_matrix);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の一般計算\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * 転置行列\n\t * @returns {Matrix} A^T\n\t */\n\ttranspose() {\n\t\tconst y = new Array(this.column_length);\n\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\ty[col] = new Array(this.row_length);\n\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\ty[col][row] = this.matrix_array[row][col];\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * エルミート転置行列\n\t * @returns {Matrix} A^T\n\t */\n\tctranspose() {\n\t\treturn this.transpose().conj();\n\t}\n\n\t/**\n\t * エルミート転置行列\n\t * @returns {Matrix} A^T\n\t */\n\tT() {\n\t\treturn this.ctranspose();\n\t}\n\n\t/**\n\t * ドット積\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number \n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [dimension=1] 計算するときに使用する次元（1 or 2）\n\t * @returns {Matrix} A・B\n\t */\n\tinner(number, dimension=1) {\n\t\treturn LinearAlgebra.inner(this, number, dimension);\n\t}\n\t\n\t/**\n\t * LUP分解\n\t * @returns {{P: Matrix, L: Matrix, U: Matrix}} P'*L*U=A\n\t */\n\tlup() {\n\t\treturn LinearAlgebra.lup(this);\n\t}\n\n\t/**\n\t * LU分解\n\t * @returns {{L: Matrix, U: Matrix}} L*U=A\n\t */\n\tlu() {\n\t\treturn LinearAlgebra.lu(this);\n\t}\n\n\t/**\n\t * 一次方程式を解く\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number - B\n\t * @returns {Matrix} Ax=B となる x\n\t */\n\tlinsolve(number) {\n\t\treturn LinearAlgebra.linsolve(this, number);\n\t}\n\n\t/**\n\t * QR分解\n\t * @returns {{Q: Matrix, R: Matrix}} Q*R=A, Qは正規直行行列、Rは上三角行列\n\t */\n\tqr() {\n\t\treturn LinearAlgebra.qr(this);\n\t}\n\n\t/**\n\t * 対称行列の三重対角化\n\t * @returns {{P: Matrix, H: Matrix}} P*H*P'=A, Hは三重対角行列、Pは正規直行行列、三重対角行列の固有値は元の行列と一致\n\t */\n\ttridiagonalize() {\n\t\treturn LinearAlgebra.tridiagonalize(this);\n\t}\n\n\t/**\n\t * 対称行列の固有値分解\n\t * @returns {{V: Matrix, D: Matrix}} V*D*V'=A, Vは右固有ベクトルを列にもつ行列で正規直行行列、Dは固有値を対角成分に持つ行列\n\t */\n\teig() {\n\t\treturn LinearAlgebra.eig(this);\n\t}\n\n\t/**\n\t * 特異値分解\n\t * @returns {{U: Matrix, S: Matrix, V: Matrix}} U*S*V'=A\n\t */\n\tsvd() {\n\t\treturn LinearAlgebra.svd(this);\n\t}\n\n\t/**\n\t * 逆行列\n\t * @returns {Matrix} A^-1\n\t */\n\tinv() {\n\t\treturn LinearAlgebra.inv(this);\n\t}\n\n\t/**\n\t * 疑似逆行列\n\t * @returns {Matrix} A^+\n\t */\n\tpinv() {\n\t\treturn LinearAlgebra.pinv(this);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// statistics 統計計算用\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * 対数ガンマ関数\n\t * @returns {Matrix}\n\t */\n\tgammaln() {\n\t\treturn Statistics.gammaln(this);\n\t}\n\n\t/**\n\t * ガンマ関数\n\t * @returns {Matrix}\n\t */\n\tgamma() {\n\t\treturn Statistics.gamma(this);\n\t}\n\n\t/**\n\t * 不完全ガンマ関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {string} [tail=\"lower\"] - lower/upper\n\t * @returns {Matrix}\n\t */\n\tgammainc(a, tail) {\n\t\treturn Statistics.gammainc(this, a, tail);\n\t}\n\n\t/**\n\t * ガンマ分布の確率密度関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - 形状母数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} s - 尺度母数\n\t * @returns {Matrix}\n\t */\n\tgampdf(k, s) {\n\t\treturn Statistics.gampdf(this, k, s);\n\t}\n\n\t/**\n\t * ガンマ分布の確率密度関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - 形状母数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} s - 尺度母数\n\t * @returns {Matrix}\n\t */\n\tgamcdf(k, s) {\n\t\treturn Statistics.gampdf(this, k, s);\n\t}\n\n\t/**\n\t * ガンマ分布の累積分布関数の逆関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - 形状母数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} s - 尺度母数\n\t * @returns {Matrix}\n\t */\n\tgaminv(k, s) {\n\t\treturn Statistics.gaminv(this, k, s);\n\t}\n\n\t/**\n\t * ベータ関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} y\n\t * @returns {Matrix}\n\t */\n\tbeta(y) {\n\t\treturn Statistics.beta(this, y);\n\t}\n\t\n\t/**\n\t * 不完全ベータ関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} b\n\t * @param {string} [tail=\"lower\"] - lower/upper\n\t * @returns {Matrix}\n\t */\n\tbetainc(a, b, tail) {\n\t\treturn Statistics.betainc(this, a, b, tail);\n\t}\n\n\t/**\n\t * ベータ分布の確率密度関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} b\n\t * @returns {Matrix}\n\t */\n\tbetacdf(a, b) {\n\t\treturn Statistics.betacdf(this, a, b);\n\t}\n\n\t/**\n\t * ベータ分布の累積分布関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} b\n\t * @returns {Matrix}\n\t */\n\tbetapdf(a, b) {\n\t\treturn Statistics.betapdf(this, a, b);\n\t}\n\n\t/**\n\t * ベータ分布の累積分布関数の逆関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} b\n\t * @returns {Matrix}\n\t */\n\tbetainv(a, b) {\n\t\treturn Statistics.betainv(this, a, b);\n\t}\n\n\t/**\n\t * x! 階乗関数\n\t * @returns {Matrix}\n\t */\n\tfactorial() {\n\t\treturn Statistics.factorial(this);\n\t}\n\t\n\t/**\n\t * nCk 二項係数またはすべての組合わせ\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k\n\t * @returns {Matrix}\n\t */\n\tnchoosek(k) {\n\t\treturn Statistics.nchoosek(this, k);\n\t}\n\t\n\t/**\n\t * 誤差関数\n\t * @returns {Matrix}\n\t */\n\terf() {\n\t\treturn Statistics.erf(this);\n\t}\n\n\t/**\n\t * 相補誤差関数\n\t * @returns {Matrix}\n\t */\n\terfc() {\n\t\treturn Statistics.erfc(this);\n\t}\n\t\n\t/**\n\t * 正規分布の確率密度関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [u=0.0] - 平均値\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [s=1.0] - 分散\n\t * @returns {Matrix}\n\t */\n\tnormpdf(u=0.0, s=1.0) {\n\t\treturn Statistics.normpdf(this, u, s);\n\t}\n\n\t/**\n\t * 正規分布の累積分布関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [u=0.0] - 平均値\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [s=1.0] - 分散\n\t * @returns {Matrix}\n\t */\n\tnormcdf(u=0.0, s=1.0) {\n\t\treturn Statistics.normcdf(this, u, s);\n\t}\n\n\t/**\n\t * 正規分布の累積分布関数の逆関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [u=0.0] - 平均値\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [s=1.0] - 分散\n\t * @returns {Matrix}\n\t */\n\tnorminv(u=0.0, s=1.0) {\n\t\treturn Statistics.norminv(this, u, s);\n\t}\n\n\t/**\n\t * t分布の確率密度関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - 自由度\n\t * @returns {Matrix}\n\t */\n\ttpdf(v) {\n\t\treturn Statistics.tpdf(this, v);\n\t}\n\n\t/**\n\t * t分布の累積分布関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - 自由度\n\t * @returns {Matrix}\n\t */\n\ttcdf(v) {\n\t\treturn Statistics.tcdf(this, v);\n\t}\n\n\t/**\n\t * t分布の累積分布関数の逆関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - 自由度\n\t * @returns {Matrix}\n\t */\n\ttinv(v) {\n\t\treturn Statistics.tinv(this, v);\n\t}\n\n\t/**\n\t * 尾部が指定可能なt分布の累積分布関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - 自由度\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} tails - 尾部(1...片側、2...両側)\n\t * @returns {Matrix}\n\t */\n\ttdist(v, tails) {\n\t\treturn Statistics.tdist(this, v, tails);\n\t}\n\n\t/**\n\t * 両側検定時のt分布の累積分布関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - 自由度\n\t * @returns {Matrix}\n\t */\n\ttinv2(v) {\n\t\treturn Statistics.tinv2(this, v);\n\t}\n\n\t/**\n\t * カイ二乗分布の確率密度関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - 自由度\n\t * @returns {Matrix}\n\t */\n\tchi2pdf(k) {\n\t\treturn Statistics.chi2pdf(this, k);\n\t}\n\n\t/**\n\t * カイ二乗分布の累積分布関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - 自由度\n\t * @returns {Matrix}\n\t */\n\tchi2cdf(k) {\n\t\treturn Statistics.chi2cdf(this, k);\n\t}\n\t\n\t/**\n\t * カイ二乗分布の累積分布関数の逆関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - 自由度\n\t * @returns {Matrix}\n\t */\n\tchi2inv(k) {\n\t\treturn Statistics.chi2inv(this, k);\n\t}\n\n\t/**\n\t * F分布の確率密度関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d1 - 分子の自由度\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d2 - 分母の自由度\n\t * @returns {Matrix}\n\t */\n\tfpdf(d1, d2) {\n\t\treturn Statistics.fpdf(this, d1, d2);\n\t}\n\n\t/**\n\t * F分布の累積分布関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d1 - 分子の自由度\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d2 - 分母の自由度\n\t * @returns {Matrix}\n\t */\n\tfcdf(d1, d2) {\n\t\treturn Statistics.fcdf(this, d1, d2);\n\t}\n\n\t/**\n\t * F分布の累積分布関数の逆関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d1 - 分子の自由度\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d2 - 分母の自由度\n\t * @returns {Matrix}\n\t */\n\tfinv(d1, d2) {\n\t\treturn Statistics.finv(this, d1, d2);\n\t}\n\t\n\t/**\n\t * 最大値\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix} max([A, B])\n\t */\n\tmax(type) {\n\t\treturn Statistics.max(this, type);\n\t}\n\t\n\t/**\n\t * 最小値\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix} min([A, B])\n\t */\n\tmin(type) {\n\t\treturn Statistics.min(this, type);\n\t}\n\t\n\t/**\n\t * 合計\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix}\n\t */\n\tsum(type) {\n\t\treturn Statistics.sum(this, type);\n\t}\n\n\t/**\n\t * 相加平均\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix}\n\t */\n\tmean(type) {\n\t\treturn Statistics.mean(this, type);\n\t}\n\n\t/**\n\t * 配列の積\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix}\n\t */\n\tprod(type) {\n\t\treturn Statistics.prod(this, type);\n\t}\n\n\t/**\n\t * 相乗平均／幾何平均\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix}\n\t */\n\tgeomean(type) {\n\t\treturn Statistics.geomean(this, type);\n\t}\n\n\t/**\n\t * 中央値\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix}\n\t */\n\tmedian(type) {\n\t\treturn Statistics.median(this, type);\n\t}\n\n\t/**\n\t * 最頻値\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix}\n\t */\n\tmode(type) {\n\t\treturn Statistics.mode(this, type);\n\t}\n\n\t/**\n\t * 中心積率\n\t * @param {{dimension : (?string|?number), correction : ?number, nth_order : number}} [type]\n\t * @returns {Matrix}\n\t */\n\tmoment(type) {\n\t\treturn Statistics.moment(this, type);\n\t}\n\n\t/**\n\t * 分散\n\t * @param {{dimension : (?string|?number), correction : ?number}} [type]\n\t * @returns {Matrix}\n\t */\n\tvar(type) {\n\t\treturn Statistics.var(this, type);\n\t}\n\n\t/**\n\t * 標準偏差\n\t * @param {{dimension : (?string|?number), correction : ?number}} [type]\n\t * @returns {Matrix}\n\t */\n\tstd(type) {\n\t\treturn Statistics.std(this, type);\n\t}\n\n\t/**\n\t * 標準偏差\n\t * @param {{dimension : (?string|?number), correction : ?number}} [type]\n\t * @returns {Matrix}\n\t */\n\tmad(type) {\n\t\treturn Statistics.mad(this, type);\n\t}\n\n\t/**\n\t * 歪度\n\t * @param {{dimension : (?string|?number), correction : ?number}} [type]\n\t * @returns {Matrix}\n\t */\n\tskewness(type) {\n\t\treturn Statistics.skewness(this, type);\n\t}\n\n\t/**\n\t * 共分散行列\n\t * @param {{correction : ?number}} [type]\n\t * @returns {Matrix}\n\t */\n\tcov(type) {\n\t\treturn Statistics.cov(this, type);\n\t}\n\n\t/**\n\t * 標本の標準化\n\t * 平均値0、標準偏差1に変更する\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix}\n\t */\n\tnormalize(type) {\n\t\treturn Statistics.normalize(this, type);\n\t}\n\n\t/**\n\t * 相関行列\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix}\n\t */\n\tcorrcoef(type) {\n\t\treturn Statistics.corrcoef(this, type);\n\t}\n\n\t/**\n\t * ソート\n\t * @param {{dimension : (?string|?number), order : ?string}} [type]\n\t * @returns {Matrix}\n\t */\n\tsort(type) {\n\t\treturn Statistics.sort(this, type);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// signal 信号処理用\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * 離散フーリエ変換\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix} fft(x)\n\t */\n\tfft(type) {\n\t\treturn Signal.fft(this, type);\n\t}\n\n\t/**\n\t * 逆離散フーリエ変換\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix} ifft(x)\n\t */\n\tifft(type) {\n\t\treturn Signal.ifft(this, type);\n\t}\n\n\t/**\n\t * パワースペクトル密度\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix} abs(fft(x)).^2\n\t */\n\tpowerfft(type) {\n\t\treturn Signal.powerfft(this, type);\n\t}\n\n\t/**\n\t * 離散コサイン変換\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix} dct(x)\n\t */\n\tdct(type) {\n\t\treturn Signal.dct(this, type);\n\t}\n\n\t/**\n\t * 逆離散コサイン変換\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix} idct(x)\n\t */\n\tidct(type) {\n\t\treturn Signal.idct(this, type);\n\t}\n\n\t/**\n\t * 2次元の離散フーリエ変換\n\t * @returns {Matrix}\n\t */\n\tfft2(type) {\n\t\treturn Signal.fft2(this, type);\n\t}\n\n\t/**\n\t * 2次元の逆離散フーリエ変換\n\t * @returns {Matrix}\n\t */\n\tifft2(type) {\n\t\treturn Signal.ifft2(this, type);\n\t}\n\n\t/**\n\t * 2次元の離散コサイン変換\n\t * @returns {Matrix}\n\t */\n\tdct2() {\n\t\treturn Signal.dct2(this);\n\t}\n\n\t/**\n\t * 2次元の逆離散コサイン変換\n\t * @returns {Matrix}\n\t */\n\tidct2() {\n\t\treturn Signal.idct2(this);\n\t}\n\n\t/**\n\t * 畳み込み積分、多項式乗算\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number\n\t * @returns {Matrix}\n\t */\n\tconv(number) {\n\t\treturn Signal.conv(this, number);\n\t}\n\n\t/**\n\t * 自己相関関数、相互相関関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [number] - 省略した場合は自己相関関数\n\t * @returns {Matrix}\n\t */\n\txcorr(number) {\n\t\treturn Signal.xcorr(this, number);\n\t}\n\n\t/**\n\t * 窓関数\n\t * @param {string} name - 窓関数の名前\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} size - 長さ\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\", 1/\"periodic\"\n\t * @returns {Matrix} 列ベクトル\n\t */\n\tstatic window(name, size, periodic) {\n\t\treturn Signal.window(name, size, periodic);\n\t}\n\n\t/**\n\t * ハニング窓\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} size - 長さ\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\", 1/\"periodic\"\n\t * @returns {Matrix} 列ベクトル\n\t */\n\tstatic hann(size, periodic) {\n\t\treturn Signal.hann(size, periodic);\n\t}\n\t\n\t/**\n\t * ハミング窓\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} size - 長さ\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\", 1/\"periodic\"\n\t * @returns {Matrix} 列ベクトル\n\t */\n\tstatic hamming(size, periodic) {\n\t\treturn Signal.hamming(size, periodic);\n\t}\n\t\n}\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/Matrix.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 385,
    "kind": "class",
    "name": "MatrixTool",
    "memberof": "src/math/Matrix.mjs",
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/Matrix.mjs",
    "importStyle": null,
    "description": "Matrix 内で使用する関数群",
    "lineNumber": 27,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "toPositionArrayFromObject",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.toPositionArrayFromObject",
    "access": "public",
    "description": "行列の位置を指定するデータから、実際の値を作成",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{string|number|Matrix|Complex} - 調査する値"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "{number} - \":\"が指定された時に初期化する配列の長さ"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "geta",
        "description": "{number} - \":\"が指定された時に初期化する値のオフセット"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 387,
    "kind": "method",
    "name": "match2",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.match2",
    "access": "public",
    "description": "対象ではないregexpの情報以外も抽出match",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object<boolean, string>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "検索対象"
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "regexp",
        "description": "検索したい正規表現"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object<boolean, string>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "trimBracket",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.trimBracket",
    "access": "public",
    "description": "ブラケットに囲まれていたら、前後のブラケットを除去",
    "lineNumber": 122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string|null} 除去した文字列（ブラケットがない場合は、null）"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "ブラケットを除去したい文字"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "null"
      ],
      "spread": false,
      "description": "除去した文字列（ブラケットがない場合は、null）"
    }
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "toMatrixArrayFromStringForArrayJSON",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.toMatrixArrayFromStringForArrayJSON",
    "access": "public",
    "description": "JSONで定義された文字列データからMatrix型のデータを作成する",
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>} Matrix型で使用される内部の配列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "調査したい文字列([xx,xx,xx],[xx,xx,xx])"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": "Matrix型で使用される内部の配列"
    }
  },
  {
    "__docId__": 390,
    "kind": "method",
    "name": "InterpolationCalculation",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.InterpolationCalculation",
    "access": "public",
    "description": "初期値と差分値と最終値から、その値が入った配列を作成する",
    "lineNumber": 165,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Complex>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "最初の値"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "delta",
        "description": "差分"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "繰り返す先の値（この値は含めない）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Complex>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 391,
    "kind": "method",
    "name": "toArrayFromMatch2String",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.toArrayFromMatch2String",
    "access": "public",
    "description": "match2で文字列を切り分けたデータから数値の配列を作成する",
    "lineNumber": 198,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Complex>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Object<boolean, string>>"
        ],
        "spread": false,
        "optional": false,
        "name": "match2_string",
        "description": "文字列を切り分けたデータ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Complex>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 392,
    "kind": "method",
    "name": "toArrayFromString",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.toArrayFromString",
    "access": "public",
    "description": "文字列からMatrix型の行列データの行部分に変換\n数字のような部分を抽出することで、行列を推定する",
    "lineNumber": 241,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Complex>|string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "row_text",
        "description": "行列の1行を表す文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Complex>",
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "toMatrixArrayFromStringForArraySPACE",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.toMatrixArrayFromStringForArraySPACE",
    "access": "public",
    "description": "スペース区切りなどで文字列で定義された文字列データからMatrix型のデータを作成する",
    "lineNumber": 262,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>} Matrix型で使用される内部の配列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "調査したい文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": "Matrix型で使用される内部の配列"
    }
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "toMatrixArrayFromStringInBracket",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.toMatrixArrayFromStringInBracket",
    "access": "public",
    "description": "行列用の文字列データから構成されるMatrix型のデータを作成する",
    "lineNumber": 278,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>} Matrix型で使用される内部の配列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "調査したい文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": "Matrix型で使用される内部の配列"
    }
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "toMatrixArrayFromString",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.toMatrixArrayFromString",
    "access": "public",
    "description": "文字列データからMatrix型のデータを作成する",
    "lineNumber": 294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>} Matrix型で使用される内部の配列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "調査したい文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": "Matrix型で使用される内部の配列"
    }
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "isCorrectMatrixArray",
    "memberof": "src/math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~MatrixTool.isCorrectMatrixArray",
    "access": "public",
    "description": "Matrix型内部データが行列データとして正しいかを調べる",
    "lineNumber": 314,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<Complex>>"
        ],
        "spread": false,
        "optional": false,
        "name": "m_array",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 397,
    "kind": "class",
    "name": "Matrix",
    "memberof": "src/math/Matrix.mjs",
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/Matrix.mjs",
    "importStyle": "Matrix",
    "description": "複素行列クラス (immutable)",
    "lineNumber": 334,
    "interface": false
  },
  {
    "__docId__": 398,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#constructor",
    "access": "public",
    "description": "複素行列を作成\n引数は次のタイプをとれます\n・4 \t\t\t\t整数や実数\n・\"1 + j\"\t\t文字列で複素数をわたす\n・[1,2]\t\t\t1次元配列\n・[[1,2],[3,4]]\t行列\n・[\"1+j\", \"2+j\"]\t複素数を含んだ行列\n・\"[1 1:0.5:3]\"\t\tMATLAB/Octave/Scilab互換",
    "lineNumber": 347,
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "行列データ( \"1 + j\", [1 , 1] など)"
      }
    ]
  },
  {
    "__docId__": 399,
    "kind": "member",
    "name": "matrix_array",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#matrix_array",
    "access": "private",
    "description": "行列を構成する配列",
    "lineNumber": 457,
    "type": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 400,
    "kind": "member",
    "name": "row_length",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#row_length",
    "access": "private",
    "description": "行数",
    "lineNumber": 464,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 401,
    "kind": "member",
    "name": "column_length",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#column_length",
    "access": "private",
    "description": "列数",
    "lineNumber": 471,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 402,
    "kind": "member",
    "name": "string_cash",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#string_cash",
    "access": "private",
    "description": "文字列化に使用するキャッシュ",
    "lineNumber": 478,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "create",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.create",
    "access": "public",
    "description": "Matrix を作成",
    "lineNumber": 486,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.valueOf",
    "access": "public",
    "description": "指定した数値から Matrix 型に変換",
    "lineNumber": 500,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "_toMatrix",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix._toMatrix",
    "access": "private",
    "description": "行列を作成",
    "lineNumber": 510,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "_toComplex",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix._toComplex",
    "access": "private",
    "description": "複素数を作成",
    "lineNumber": 525,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "_toDouble",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix._toDouble",
    "access": "private",
    "description": "実数を作成",
    "lineNumber": 544,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "_toInteger",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix._toInteger",
    "access": "private",
    "description": "整数を作成",
    "lineNumber": 563,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "_clearCash",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_clearCash",
    "access": "private",
    "description": "キャッシュを削除",
    "lineNumber": 570,
    "params": [],
    "return": null
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#clone",
    "access": "public",
    "description": "ディープコピー",
    "lineNumber": 580,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#toString",
    "access": "public",
    "description": "文字列化",
    "lineNumber": 588,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "toOneLineString",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#toOneLineString",
    "access": "public",
    "description": "文字列化（1行で表す）",
    "lineNumber": 701,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#equals",
    "access": "public",
    "description": "等式",
    "lineNumber": 729,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "getNumberMatrixArray",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#getNumberMatrixArray",
    "access": "public",
    "description": "行列を構成する複素数の実部の配列",
    "lineNumber": 754,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<number>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<number>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "getComplexMatrixArray",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#getComplexMatrixArray",
    "access": "public",
    "description": "行列を構成する複素数のComplex型の配列",
    "lineNumber": 769,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<Complex>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<Complex>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "_each",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_each",
    "access": "private",
    "description": "本オブジェクト内の全要素に同一処理を実行\nミュータブル",
    "lineNumber": 787,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Complex, number, number): ?Object "
        ],
        "spread": false,
        "optional": false,
        "name": "eachfunc",
        "description": "Function(num, row, col)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "cloneMatrixDoEachCalculation",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#cloneMatrixDoEachCalculation",
    "access": "public",
    "description": "本オブジェクト内の全要素に同一処理を実行",
    "lineNumber": 819,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Complex, number, number): ?Object "
        ],
        "spread": false,
        "optional": false,
        "name": "eachfunc",
        "description": "Function(num, row, col)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "createMatrixDoEachCalculation",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.createMatrixDoEachCalculation",
    "access": "public",
    "description": "行列内の各値に対して指定した初期化を行ったMatrixを作成",
    "lineNumber": 830,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(number, number): ?Object "
        ],
        "spread": false,
        "optional": false,
        "name": "eachfunc",
        "description": "Function(row, col)"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "次元数"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "dimension",
        "defaultRaw": "dimension",
        "name": "column_length",
        "description": "列数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "eachVectorAuto",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#eachVectorAuto",
    "access": "public",
    "description": "行列の列をベクトルとみなし同一処理を実行、行ベクトルであれば行ベクトルに対し同一処理を実行",
    "lineNumber": 857,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "eachVectorBoth",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#eachVectorBoth",
    "access": "public",
    "description": "行列の行と列をベクトルとみなし同一処理を実行\n先に行に対して同一処理を実行後の行列に対し、列ごとにさらに同一処理を実行する",
    "lineNumber": 891,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "eachVectorRow",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#eachVectorRow",
    "access": "public",
    "description": "行列の行をベクトルとみなし同一処理を実行",
    "lineNumber": 928,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "eachVectorColumn",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#eachVectorColumn",
    "access": "public",
    "description": "行列の列をベクトルとみなし同一処理を実行",
    "lineNumber": 951,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "eachVector",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#eachVector",
    "access": "public",
    "description": "引数に設定された行／列をベクトルとみなし同一処理を実行",
    "lineNumber": 975,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"auto\"",
        "defaultRaw": "auto",
        "name": "dimtype",
        "description": "0/\"auto\", 1/\"row\", 2/\"column\", 3/\"both\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "getMatrix",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#getMatrix",
    "access": "public",
    "description": "行列内の指定した箇所の行列",
    "lineNumber": 1007,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "抽出する行番号が入ったベクトル,\":\"で全ての行抽出"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "col",
        "description": "抽出する列番号が入ったベクトル,\":\"で全ての列抽出"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "isUpOffset",
        "description": "位置のオフセットを1にするか"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "setMatrix",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#setMatrix",
    "access": "public",
    "description": "行列内の指定した箇所の値を変更する",
    "lineNumber": 1031,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "変更する行番号が入ったベクトル,\":\"で全ての行抽出"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "col",
        "description": "変更する列番号が入ったベクトル,\":\"で全ての列抽出"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "replace",
        "description": "変更内容の行列"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "isUpOffset",
        "description": "位置のオフセットを1にするか"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "getComplex",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#getComplex",
    "access": "public",
    "description": "行列内の指定した箇所の値",
    "lineNumber": 1053,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "row_or_pos",
        "description": "行列なら行番号, ベクトルの場合は値の位置番号"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "col",
        "description": "列番号（行列の場合は指定する）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 428,
    "kind": "get",
    "name": "intValue",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#intValue",
    "access": "public",
    "description": "行列の最初の要素の整数値",
    "lineNumber": 1082,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "get",
    "name": "doubleValue",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#doubleValue",
    "access": "public",
    "description": "行列の最初の要素の実数値",
    "lineNumber": 1090,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 430,
    "kind": "get",
    "name": "scalar",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#scalar",
    "access": "public",
    "description": "行列の最初の要素",
    "lineNumber": 1098,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 431,
    "kind": "get",
    "name": "length",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#length",
    "access": "public",
    "description": "行数及び列数の最大値",
    "lineNumber": 1106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "get",
    "name": "norm1",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#norm1",
    "access": "public",
    "description": "1ノルム",
    "lineNumber": 1114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 433,
    "kind": "get",
    "name": "norm2",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#norm2",
    "access": "public",
    "description": "2ノルム",
    "lineNumber": 1122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "norm",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#norm",
    "access": "public",
    "description": "pノルム",
    "lineNumber": 1131,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 435,
    "kind": "method",
    "name": "cond",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#cond",
    "access": "public",
    "description": "条件数",
    "lineNumber": 1140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "rcond",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#rcond",
    "access": "public",
    "description": "1ノルムの条件数の逆数",
    "lineNumber": 1148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "rank",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#rank",
    "access": "public",
    "description": "ランク",
    "lineNumber": 1157,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} rank(A)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "rank(A)"
    }
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "trace",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#trace",
    "access": "public",
    "description": "トレース",
    "lineNumber": 1165,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} trace(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": "trace(A)"
    },
    "params": []
  },
  {
    "__docId__": 439,
    "kind": "method",
    "name": "det",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#det",
    "access": "public",
    "description": "行列式",
    "lineNumber": 1173,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} |A|"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "|A|"
    },
    "params": []
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "memset",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.memset",
    "access": "public",
    "description": "指定した数値で初期化",
    "lineNumber": 1188,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "初期値"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "次元数"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "列数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "eye",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.eye",
    "access": "public",
    "description": "単位行列を生成",
    "lineNumber": 1215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "次元数"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "列数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "zeros",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.zeros",
    "access": "public",
    "description": "零行列を生成",
    "lineNumber": 1227,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "次元数"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "列数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "ones",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.ones",
    "access": "public",
    "description": "1で構成した行列を生成",
    "lineNumber": 1240,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "次元数"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "列数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "rand",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.rand",
    "access": "public",
    "description": "乱数で構成した行列を生成",
    "lineNumber": 1253,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "次元数"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "列数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "randn",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.randn",
    "access": "public",
    "description": "正規分布に従う乱数で構成した行列を生成",
    "lineNumber": 1265,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "次元数"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "列数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "diag",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#diag",
    "access": "public",
    "description": "行列なら対角成分を列ベクトルを生成、ベクトルなら対角成分を持つ行列を生成",
    "lineNumber": 1275,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 行列なら対角成分を列ベクトルを生成、ベクトルなら対角成分を持つ行列を生成"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "行列なら対角成分を列ベクトルを生成、ベクトルなら対角成分を持つ行列を生成"
    },
    "params": []
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "isScalar",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isScalar",
    "access": "public",
    "description": "スカラー値の判定",
    "lineNumber": 1310,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "isRow",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isRow",
    "access": "public",
    "description": "行ベクトル／横ベクトルの判定",
    "lineNumber": 1318,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "isColumn",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isColumn",
    "access": "public",
    "description": "列ベクトル／縦ベクトルの判定",
    "lineNumber": 1326,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "isVector",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isVector",
    "access": "public",
    "description": "ベクトルの判定",
    "lineNumber": 1334,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "isMatrix",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isMatrix",
    "access": "public",
    "description": "行列の判定",
    "lineNumber": 1342,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "isSquare",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isSquare",
    "access": "public",
    "description": "正方行列の判定",
    "lineNumber": 1350,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "isReal",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isReal",
    "access": "public",
    "description": "実行列の判定",
    "lineNumber": 1359,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "isComplex",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isComplex",
    "access": "public",
    "description": "複素行列の判定",
    "lineNumber": 1374,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "isZeros",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isZeros",
    "access": "public",
    "description": "零行列を判定",
    "lineNumber": 1383,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 456,
    "kind": "method",
    "name": "isIdentity",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isIdentity",
    "access": "public",
    "description": "単位行列を判定",
    "lineNumber": 1399,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "isDiagonal",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isDiagonal",
    "access": "public",
    "description": "対角行列を判定",
    "lineNumber": 1424,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "isTridiagonal",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isTridiagonal",
    "access": "public",
    "description": "三重対角行列を判定",
    "lineNumber": 1440,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "isRegular",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isRegular",
    "access": "public",
    "description": "正則行列を判定",
    "lineNumber": 1456,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 460,
    "kind": "method",
    "name": "isOrthogonal",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isOrthogonal",
    "access": "public",
    "description": "直行行列を判定",
    "lineNumber": 1472,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "isUnitary",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isUnitary",
    "access": "public",
    "description": "ユニタリ行列を判定",
    "lineNumber": 1485,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "isSymmetric",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isSymmetric",
    "access": "public",
    "description": "対称行列を判定",
    "lineNumber": 1498,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 463,
    "kind": "method",
    "name": "isHermitian",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isHermitian",
    "access": "public",
    "description": "エルミート行列を判定",
    "lineNumber": 1518,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 464,
    "kind": "method",
    "name": "isTriangleUpper",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isTriangleUpper",
    "access": "public",
    "description": "上三角行列を判定",
    "lineNumber": 1543,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "isTriangleLower",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isTriangleLower",
    "access": "public",
    "description": "下三角行列を判定",
    "lineNumber": 1559,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 466,
    "kind": "method",
    "name": "isPermutation",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#isPermutation",
    "access": "public",
    "description": "置換行列を判定",
    "lineNumber": 1575,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 467,
    "kind": "method",
    "name": "size",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#size",
    "access": "public",
    "description": "行列の行数と列数",
    "lineNumber": 1611,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} [row_length column_length]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "[row_length column_length]"
    },
    "params": []
  },
  {
    "__docId__": 468,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#compareTo",
    "access": "public",
    "description": "値同士を比較\nスカラー同士の場合の戻り値は、number型。\n行列同士の場合は、各項の比較結果が入った、Matrix型。",
    "lineNumber": 1624,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number|Matrix} A > B ? 1 : (A === B ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "Matrix"
      ],
      "spread": false,
      "description": "A > B ? 1 : (A === B ? 0 : -1)"
    }
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#add",
    "access": "public",
    "description": "加算",
    "lineNumber": 1649,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A + B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A + B"
    }
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "sub",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#sub",
    "access": "public",
    "description": "減算",
    "lineNumber": 1669,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A - B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A - B"
    }
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "mul",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#mul",
    "access": "public",
    "description": "乗算",
    "lineNumber": 1689,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A * B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A * B"
    }
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "div",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#div",
    "access": "public",
    "description": "割り算",
    "lineNumber": 1741,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A / B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A / B"
    }
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "pow",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#pow",
    "access": "public",
    "description": "整数での累乗",
    "lineNumber": 1781,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} pow(A, B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "整数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "pow(A, B)"
    }
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "nmul",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#nmul",
    "access": "public",
    "description": "行列の各項ごとの掛け算",
    "lineNumber": 1807,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A .* B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A .* B"
    }
  },
  {
    "__docId__": 475,
    "kind": "method",
    "name": "ndiv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#ndiv",
    "access": "public",
    "description": "行列の各項ごとの割り算",
    "lineNumber": 1827,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A ./ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A ./ B"
    }
  },
  {
    "__docId__": 476,
    "kind": "method",
    "name": "ninv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#ninv",
    "access": "public",
    "description": "行列の各項ごとの逆数",
    "lineNumber": 1846,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 ./ A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 ./ A"
    },
    "params": []
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "npow",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#npow",
    "access": "public",
    "description": "行列の各項ごとの累乗",
    "lineNumber": 1859,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A .^ B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A .^ B"
    }
  },
  {
    "__docId__": 478,
    "kind": "method",
    "name": "real",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#real",
    "access": "public",
    "description": "各項の実部",
    "lineNumber": 1882,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} real(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "real(A)"
    },
    "params": []
  },
  {
    "__docId__": 479,
    "kind": "method",
    "name": "imag",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#imag",
    "access": "public",
    "description": "各項の虚部",
    "lineNumber": 1892,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} imag(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "imag(A)"
    },
    "params": []
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "arg",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#arg",
    "access": "public",
    "description": "各項の偏角",
    "lineNumber": 1902,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} arg(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "arg(A)"
    },
    "params": []
  },
  {
    "__docId__": 481,
    "kind": "method",
    "name": "sign",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#sign",
    "access": "public",
    "description": "各項の符号値",
    "lineNumber": 1912,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} [-1,1] 複素数の場合はノルムを1にした値。"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "[-1,1] 複素数の場合はノルムを1にした値。"
    },
    "params": []
  },
  {
    "__docId__": 482,
    "kind": "method",
    "name": "testInteger",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testInteger",
    "access": "public",
    "description": "各項の整数を判定",
    "lineNumber": 1923,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 or 0 で構成された行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 or 0 で構成された行列"
    }
  },
  {
    "__docId__": 483,
    "kind": "method",
    "name": "testComplexInteger",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testComplexInteger",
    "access": "public",
    "description": "各項の複素整数を判定",
    "lineNumber": 1934,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 or 0 で構成された行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 or 0 で構成された行列"
    }
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "testZero",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testZero",
    "access": "public",
    "description": "各項の 0 を判定",
    "lineNumber": 1945,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 or 0 で構成された行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 or 0 で構成された行列"
    }
  },
  {
    "__docId__": 485,
    "kind": "method",
    "name": "testOne",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testOne",
    "access": "public",
    "description": "各項の 1 を判定",
    "lineNumber": 1956,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 or 0 で構成された行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 or 0 で構成された行列"
    }
  },
  {
    "__docId__": 486,
    "kind": "method",
    "name": "testComplex",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testComplex",
    "access": "public",
    "description": "各項の複素数を判定",
    "lineNumber": 1967,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 or 0 で構成された行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 or 0 で構成された行列"
    }
  },
  {
    "__docId__": 487,
    "kind": "method",
    "name": "testReal",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testReal",
    "access": "public",
    "description": "各項の実数を判定",
    "lineNumber": 1978,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 or 0 で構成された行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 or 0 で構成された行列"
    }
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "testNaN",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testNaN",
    "access": "public",
    "description": "各項の非数を判定",
    "lineNumber": 1988,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 or 0 で構成された行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 or 0 で構成された行列"
    },
    "params": []
  },
  {
    "__docId__": 489,
    "kind": "method",
    "name": "testPositive",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testPositive",
    "access": "public",
    "description": "real(x) > 0",
    "lineNumber": 1999,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 or 0 で構成された行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 or 0 で構成された行列"
    },
    "params": []
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "testNegative",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testNegative",
    "access": "public",
    "description": "real(x) < 0",
    "lineNumber": 2009,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 or 0 で構成された行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 or 0 で構成された行列"
    },
    "params": []
  },
  {
    "__docId__": 491,
    "kind": "method",
    "name": "testNotNegative",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testNotNegative",
    "access": "public",
    "description": "real(x) >= 0",
    "lineNumber": 2019,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 or 0 で構成された行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 or 0 で構成された行列"
    },
    "params": []
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "testInfinite",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testInfinite",
    "access": "public",
    "description": "各項の無限を判定",
    "lineNumber": 2029,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 or 0 で構成された行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 or 0 で構成された行列"
    },
    "params": []
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "testFinite",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#testFinite",
    "access": "public",
    "description": "各項の有限数を判定",
    "lineNumber": 2039,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 1 or 0 で構成された行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "1 or 0 で構成された行列"
    },
    "params": []
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "abs",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#abs",
    "access": "public",
    "description": "絶対値",
    "lineNumber": 2049,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} abs(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "abs(A)"
    },
    "params": []
  },
  {
    "__docId__": 495,
    "kind": "method",
    "name": "conj",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#conj",
    "access": "public",
    "description": "複素共役行列",
    "lineNumber": 2059,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} real(A) - imag(A)j"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "real(A) - imag(A)j"
    },
    "params": []
  },
  {
    "__docId__": 496,
    "kind": "method",
    "name": "negate",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#negate",
    "access": "public",
    "description": "負数",
    "lineNumber": 2069,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} -A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A"
    },
    "params": []
  },
  {
    "__docId__": 497,
    "kind": "method",
    "name": "sqrt",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#sqrt",
    "access": "public",
    "description": "平方根",
    "lineNumber": 2079,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sqrt(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sqrt(A)"
    },
    "params": []
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "log",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#log",
    "access": "public",
    "description": "対数",
    "lineNumber": 2089,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} log(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "log(A)"
    },
    "params": []
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "exp",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#exp",
    "access": "public",
    "description": "指数",
    "lineNumber": 2099,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} exp(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "exp(A)"
    },
    "params": []
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "sin",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#sin",
    "access": "public",
    "description": "sin",
    "lineNumber": 2109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sin(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sin(A)"
    },
    "params": []
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "cos",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#cos",
    "access": "public",
    "description": "cos",
    "lineNumber": 2119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} cos(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "cos(A)"
    },
    "params": []
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "tan",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#tan",
    "access": "public",
    "description": "tan",
    "lineNumber": 2129,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} tan(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "tan(A)"
    },
    "params": []
  },
  {
    "__docId__": 503,
    "kind": "method",
    "name": "atan",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#atan",
    "access": "public",
    "description": "atan",
    "lineNumber": 2139,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} atan(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "atan(A)"
    },
    "params": []
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "atan2",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#atan2",
    "access": "public",
    "description": "atan2",
    "lineNumber": 2150,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} atan2(Y, X)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "スカラー"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "atan2(Y, X)"
    }
  },
  {
    "__docId__": 505,
    "kind": "method",
    "name": "floor",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#floor",
    "access": "public",
    "description": "floor",
    "lineNumber": 2161,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} floor(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "floor(A)"
    },
    "params": []
  },
  {
    "__docId__": 506,
    "kind": "method",
    "name": "ceil",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#ceil",
    "access": "public",
    "description": "ceil",
    "lineNumber": 2171,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} ceil(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "ceil(A)"
    },
    "params": []
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "round",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#round",
    "access": "public",
    "description": "四捨五入",
    "lineNumber": 2181,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} round(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "round(A)"
    },
    "params": []
  },
  {
    "__docId__": 508,
    "kind": "method",
    "name": "fix",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#fix",
    "access": "public",
    "description": "整数化",
    "lineNumber": 2191,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} fix(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "fix(A)"
    },
    "params": []
  },
  {
    "__docId__": 509,
    "kind": "method",
    "name": "fract",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#fract",
    "access": "public",
    "description": "小数部の抽出",
    "lineNumber": 2201,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} fract(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "fract(A)"
    },
    "params": []
  },
  {
    "__docId__": 510,
    "kind": "method",
    "name": "sinc",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#sinc",
    "access": "public",
    "description": "sinc",
    "lineNumber": 2211,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} sinc(A)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "sinc(A)"
    },
    "params": []
  },
  {
    "__docId__": 511,
    "kind": "method",
    "name": "_rot90",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_rot90",
    "access": "private",
    "description": "行列を時計回りに回転\nミュータブル",
    "lineNumber": 2231,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "rot_90_count",
        "description": "回転する回数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 514,
    "kind": "method",
    "name": "rot90",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#rot90",
    "access": "public",
    "description": "行列を時計回りに回転",
    "lineNumber": 2298,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "rot_90_count",
        "description": "回転する回数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 515,
    "kind": "method",
    "name": "_resize",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_resize",
    "access": "private",
    "description": "行列を拡張、拡張した項は、0で初期化。\nミュータブル",
    "lineNumber": 2310,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "new_row_length",
        "description": "新しい行の長さ"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "new_column_length",
        "description": "新しい列の長さ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 518,
    "kind": "method",
    "name": "resize",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#resize",
    "access": "public",
    "description": "行列を拡張、拡張した項は、0で初期化",
    "lineNumber": 2354,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "row_length",
        "description": "新しい行の長さ"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "column_length",
        "description": "新しい列の長さ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "_deleteRow",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_deleteRow",
    "access": "private",
    "description": "行列内の行を消去\nミュータブル",
    "lineNumber": 2365,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "delete_row_index",
        "description": "行番号"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "_deleteColumn",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_deleteColumn",
    "access": "private",
    "description": "行列内の列を消去\nミュータブル",
    "lineNumber": 2383,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "delete_column_index",
        "description": "列番号"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "deleteRow",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#deleteRow",
    "access": "public",
    "description": "行列内の行を消去",
    "lineNumber": 2401,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "delete_row_index",
        "description": "行番号"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "deleteColumn",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#deleteColumn",
    "access": "public",
    "description": "行列内の列を消去",
    "lineNumber": 2410,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "delete_column_index",
        "description": "列番号"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 523,
    "kind": "method",
    "name": "_exchangeRow",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_exchangeRow",
    "access": "private",
    "description": "行列内の行を交換\nミュータブル",
    "lineNumber": 2422,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_row_index1",
        "description": "行番号1"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_row_index2",
        "description": "行番号2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "_exchangeColumn",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_exchangeColumn",
    "access": "private",
    "description": "行列内の列を交換\nミュータブル",
    "lineNumber": 2446,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_column_index1",
        "description": "行番号1"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_column_index2",
        "description": "行番号2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "exchangeRow",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#exchangeRow",
    "access": "public",
    "description": "行列内の行を交換",
    "lineNumber": 2470,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_row_index1",
        "description": "行番号1"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_row_index2",
        "description": "行番号2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "exchangeColumn",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#exchangeColumn",
    "access": "public",
    "description": "行列内の列を交換",
    "lineNumber": 2480,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_column_index1",
        "description": "行番号1"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "exchange_column_index2",
        "description": "行番号2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "_concatLeft",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_concatLeft",
    "access": "private",
    "description": "行列の右に行列を結合\nミュータブル",
    "lineNumber": 2491,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "left_matrix",
        "description": "結合したい行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 529,
    "kind": "method",
    "name": "_concatBottom",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#_concatBottom",
    "access": "private",
    "description": "行列の下に行列を結合\nミュータブル",
    "lineNumber": 2513,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bottom_matrix",
        "description": "結合したい行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "concatLeft",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#concatLeft",
    "access": "public",
    "description": "行列の右に行列を結合",
    "lineNumber": 2531,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "left_matrix",
        "description": "結合したい行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 532,
    "kind": "method",
    "name": "concatBottom",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#concatBottom",
    "access": "public",
    "description": "行列の下に行列を結合",
    "lineNumber": 2540,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bottom_matrix",
        "description": "結合したい行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 533,
    "kind": "method",
    "name": "transpose",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#transpose",
    "access": "public",
    "description": "転置行列",
    "lineNumber": 2552,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^T"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^T"
    },
    "params": []
  },
  {
    "__docId__": 534,
    "kind": "method",
    "name": "ctranspose",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#ctranspose",
    "access": "public",
    "description": "エルミート転置行列",
    "lineNumber": 2567,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^T"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^T"
    },
    "params": []
  },
  {
    "__docId__": 535,
    "kind": "method",
    "name": "T",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#T",
    "access": "public",
    "description": "エルミート転置行列",
    "lineNumber": 2575,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^T"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^T"
    },
    "params": []
  },
  {
    "__docId__": 536,
    "kind": "method",
    "name": "inner",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#inner",
    "access": "public",
    "description": "ドット積",
    "lineNumber": 2585,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A・B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "dimension",
        "description": "計算するときに使用する次元（1 or 2）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A・B"
    }
  },
  {
    "__docId__": 537,
    "kind": "method",
    "name": "lup",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#lup",
    "access": "public",
    "description": "LUP分解",
    "lineNumber": 2593,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, L: Matrix, U: Matrix}} P'*L*U=A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, L: Matrix, U: Matrix}"
      ],
      "spread": false,
      "description": "P'*L*U=A"
    },
    "params": []
  },
  {
    "__docId__": 538,
    "kind": "method",
    "name": "lu",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#lu",
    "access": "public",
    "description": "LU分解",
    "lineNumber": 2601,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{L: Matrix, U: Matrix}} L*U=A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{L: Matrix, U: Matrix}"
      ],
      "spread": false,
      "description": "L*U=A"
    },
    "params": []
  },
  {
    "__docId__": 539,
    "kind": "method",
    "name": "linsolve",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#linsolve",
    "access": "public",
    "description": "一次方程式を解く",
    "lineNumber": 2610,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Ax=B となる x"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "B"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Ax=B となる x"
    }
  },
  {
    "__docId__": 540,
    "kind": "method",
    "name": "qr",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#qr",
    "access": "public",
    "description": "QR分解",
    "lineNumber": 2618,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{Q: Matrix, R: Matrix}} Q*R=A, Qは正規直行行列、Rは上三角行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{Q: Matrix, R: Matrix}"
      ],
      "spread": false,
      "description": "Q*R=A, Qは正規直行行列、Rは上三角行列"
    },
    "params": []
  },
  {
    "__docId__": 541,
    "kind": "method",
    "name": "tridiagonalize",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#tridiagonalize",
    "access": "public",
    "description": "対称行列の三重対角化",
    "lineNumber": 2626,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, H: Matrix}} P*H*P'=A, Hは三重対角行列、Pは正規直行行列、三重対角行列の固有値は元の行列と一致"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, H: Matrix}"
      ],
      "spread": false,
      "description": "P*H*P'=A, Hは三重対角行列、Pは正規直行行列、三重対角行列の固有値は元の行列と一致"
    },
    "params": []
  },
  {
    "__docId__": 542,
    "kind": "method",
    "name": "eig",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#eig",
    "access": "public",
    "description": "対称行列の固有値分解",
    "lineNumber": 2634,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{V: Matrix, D: Matrix}} V*D*V'=A, Vは右固有ベクトルを列にもつ行列で正規直行行列、Dは固有値を対角成分に持つ行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{V: Matrix, D: Matrix}"
      ],
      "spread": false,
      "description": "V*D*V'=A, Vは右固有ベクトルを列にもつ行列で正規直行行列、Dは固有値を対角成分に持つ行列"
    },
    "params": []
  },
  {
    "__docId__": 543,
    "kind": "method",
    "name": "svd",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#svd",
    "access": "public",
    "description": "特異値分解",
    "lineNumber": 2642,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{U: Matrix, S: Matrix, V: Matrix}} U*S*V'=A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{U: Matrix, S: Matrix, V: Matrix}"
      ],
      "spread": false,
      "description": "U*S*V'=A"
    },
    "params": []
  },
  {
    "__docId__": 544,
    "kind": "method",
    "name": "inv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#inv",
    "access": "public",
    "description": "逆行列",
    "lineNumber": 2650,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^-1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^-1"
    },
    "params": []
  },
  {
    "__docId__": 545,
    "kind": "method",
    "name": "pinv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#pinv",
    "access": "public",
    "description": "疑似逆行列",
    "lineNumber": 2658,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^+"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^+"
    },
    "params": []
  },
  {
    "__docId__": 546,
    "kind": "method",
    "name": "gammaln",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#gammaln",
    "access": "public",
    "description": "対数ガンマ関数",
    "lineNumber": 2670,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 547,
    "kind": "method",
    "name": "gamma",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#gamma",
    "access": "public",
    "description": "ガンマ関数",
    "lineNumber": 2678,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "gammainc",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#gammainc",
    "access": "public",
    "description": "不完全ガンマ関数",
    "lineNumber": 2688,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower/upper"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 549,
    "kind": "method",
    "name": "gampdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#gampdf",
    "access": "public",
    "description": "ガンマ分布の確率密度関数",
    "lineNumber": 2698,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 550,
    "kind": "method",
    "name": "gamcdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#gamcdf",
    "access": "public",
    "description": "ガンマ分布の確率密度関数",
    "lineNumber": 2708,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "gaminv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#gaminv",
    "access": "public",
    "description": "ガンマ分布の累積分布関数の逆関数",
    "lineNumber": 2718,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 552,
    "kind": "method",
    "name": "beta",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#beta",
    "access": "public",
    "description": "ベータ関数",
    "lineNumber": 2727,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "betainc",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#betainc",
    "access": "public",
    "description": "不完全ベータ関数",
    "lineNumber": 2738,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower/upper"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "betacdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#betacdf",
    "access": "public",
    "description": "ベータ分布の確率密度関数",
    "lineNumber": 2748,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "betapdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#betapdf",
    "access": "public",
    "description": "ベータ分布の累積分布関数",
    "lineNumber": 2758,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 556,
    "kind": "method",
    "name": "betainv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#betainv",
    "access": "public",
    "description": "ベータ分布の累積分布関数の逆関数",
    "lineNumber": 2768,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 557,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#factorial",
    "access": "public",
    "description": "x! 階乗関数",
    "lineNumber": 2776,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 558,
    "kind": "method",
    "name": "nchoosek",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#nchoosek",
    "access": "public",
    "description": "nCk 二項係数またはすべての組合わせ",
    "lineNumber": 2785,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 559,
    "kind": "method",
    "name": "erf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#erf",
    "access": "public",
    "description": "誤差関数",
    "lineNumber": 2793,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 560,
    "kind": "method",
    "name": "erfc",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#erfc",
    "access": "public",
    "description": "相補誤差関数",
    "lineNumber": 2801,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 561,
    "kind": "method",
    "name": "normpdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#normpdf",
    "access": "public",
    "description": "正規分布の確率密度関数",
    "lineNumber": 2811,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 562,
    "kind": "method",
    "name": "normcdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#normcdf",
    "access": "public",
    "description": "正規分布の累積分布関数",
    "lineNumber": 2821,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 563,
    "kind": "method",
    "name": "norminv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#norminv",
    "access": "public",
    "description": "正規分布の累積分布関数の逆関数",
    "lineNumber": 2831,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 564,
    "kind": "method",
    "name": "tpdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#tpdf",
    "access": "public",
    "description": "t分布の確率密度関数",
    "lineNumber": 2840,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 565,
    "kind": "method",
    "name": "tcdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#tcdf",
    "access": "public",
    "description": "t分布の累積分布関数",
    "lineNumber": 2849,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 566,
    "kind": "method",
    "name": "tinv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#tinv",
    "access": "public",
    "description": "t分布の累積分布関数の逆関数",
    "lineNumber": 2858,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "tdist",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#tdist",
    "access": "public",
    "description": "尾部が指定可能なt分布の累積分布関数",
    "lineNumber": 2868,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tails",
        "description": "尾部(1...片側、2...両側)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 568,
    "kind": "method",
    "name": "tinv2",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#tinv2",
    "access": "public",
    "description": "両側検定時のt分布の累積分布関数",
    "lineNumber": 2877,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 569,
    "kind": "method",
    "name": "chi2pdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#chi2pdf",
    "access": "public",
    "description": "カイ二乗分布の確率密度関数",
    "lineNumber": 2886,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 570,
    "kind": "method",
    "name": "chi2cdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#chi2cdf",
    "access": "public",
    "description": "カイ二乗分布の累積分布関数",
    "lineNumber": 2895,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 571,
    "kind": "method",
    "name": "chi2inv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#chi2inv",
    "access": "public",
    "description": "カイ二乗分布の累積分布関数の逆関数",
    "lineNumber": 2904,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 572,
    "kind": "method",
    "name": "fpdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#fpdf",
    "access": "public",
    "description": "F分布の確率密度関数",
    "lineNumber": 2914,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "fcdf",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#fcdf",
    "access": "public",
    "description": "F分布の累積分布関数",
    "lineNumber": 2924,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 574,
    "kind": "method",
    "name": "finv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#finv",
    "access": "public",
    "description": "F分布の累積分布関数の逆関数",
    "lineNumber": 2934,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 575,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#max",
    "access": "public",
    "description": "最大値",
    "lineNumber": 2943,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 576,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#min",
    "access": "public",
    "description": "最小値",
    "lineNumber": 2952,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 577,
    "kind": "method",
    "name": "sum",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#sum",
    "access": "public",
    "description": "合計",
    "lineNumber": 2961,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 578,
    "kind": "method",
    "name": "mean",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#mean",
    "access": "public",
    "description": "相加平均",
    "lineNumber": 2970,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 579,
    "kind": "method",
    "name": "prod",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#prod",
    "access": "public",
    "description": "配列の積",
    "lineNumber": 2979,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 580,
    "kind": "method",
    "name": "geomean",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#geomean",
    "access": "public",
    "description": "相乗平均／幾何平均",
    "lineNumber": 2988,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 581,
    "kind": "method",
    "name": "median",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#median",
    "access": "public",
    "description": "中央値",
    "lineNumber": 2997,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 582,
    "kind": "method",
    "name": "mode",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#mode",
    "access": "public",
    "description": "最頻値",
    "lineNumber": 3006,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 583,
    "kind": "method",
    "name": "moment",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#moment",
    "access": "public",
    "description": "中心積率",
    "lineNumber": 3015,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number), correction : ?number, nth_order : number}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 584,
    "kind": "method",
    "name": "var",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#var",
    "access": "public",
    "description": "分散",
    "lineNumber": 3024,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number), correction : ?number}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 585,
    "kind": "method",
    "name": "std",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#std",
    "access": "public",
    "description": "標準偏差",
    "lineNumber": 3033,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number), correction : ?number}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 586,
    "kind": "method",
    "name": "mad",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#mad",
    "access": "public",
    "description": "標準偏差",
    "lineNumber": 3042,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number), correction : ?number}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 587,
    "kind": "method",
    "name": "skewness",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#skewness",
    "access": "public",
    "description": "歪度",
    "lineNumber": 3051,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number), correction : ?number}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 588,
    "kind": "method",
    "name": "cov",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#cov",
    "access": "public",
    "description": "共分散行列",
    "lineNumber": 3060,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{correction : ?number}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 589,
    "kind": "method",
    "name": "normalize",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#normalize",
    "access": "public",
    "description": "標本の標準化\n平均値0、標準偏差1に変更する",
    "lineNumber": 3070,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 590,
    "kind": "method",
    "name": "corrcoef",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#corrcoef",
    "access": "public",
    "description": "相関行列",
    "lineNumber": 3079,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 591,
    "kind": "method",
    "name": "sort",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#sort",
    "access": "public",
    "description": "ソート",
    "lineNumber": 3088,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number), order : ?string}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 592,
    "kind": "method",
    "name": "fft",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#fft",
    "access": "public",
    "description": "離散フーリエ変換",
    "lineNumber": 3101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} fft(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "fft(x)"
    }
  },
  {
    "__docId__": 593,
    "kind": "method",
    "name": "ifft",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#ifft",
    "access": "public",
    "description": "逆離散フーリエ変換",
    "lineNumber": 3110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} ifft(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "ifft(x)"
    }
  },
  {
    "__docId__": 594,
    "kind": "method",
    "name": "powerfft",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#powerfft",
    "access": "public",
    "description": "パワースペクトル密度",
    "lineNumber": 3119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} abs(fft(x)).^2"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "abs(fft(x)).^2"
    }
  },
  {
    "__docId__": 595,
    "kind": "method",
    "name": "dct",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#dct",
    "access": "public",
    "description": "離散コサイン変換",
    "lineNumber": 3128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} dct(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "dct(x)"
    }
  },
  {
    "__docId__": 596,
    "kind": "method",
    "name": "idct",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#idct",
    "access": "public",
    "description": "逆離散コサイン変換",
    "lineNumber": 3137,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} idct(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "idct(x)"
    }
  },
  {
    "__docId__": 597,
    "kind": "method",
    "name": "fft2",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#fft2",
    "access": "public",
    "description": "2次元の離散フーリエ変換",
    "lineNumber": 3145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 598,
    "kind": "method",
    "name": "ifft2",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#ifft2",
    "access": "public",
    "description": "2次元の逆離散フーリエ変換",
    "lineNumber": 3153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 599,
    "kind": "method",
    "name": "dct2",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#dct2",
    "access": "public",
    "description": "2次元の離散コサイン変換",
    "lineNumber": 3161,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 600,
    "kind": "method",
    "name": "idct2",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#idct2",
    "access": "public",
    "description": "2次元の逆離散コサイン変換",
    "lineNumber": 3169,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 601,
    "kind": "method",
    "name": "conv",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#conv",
    "access": "public",
    "description": "畳み込み積分、多項式乗算",
    "lineNumber": 3178,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 602,
    "kind": "method",
    "name": "xcorr",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/Matrix.mjs~Matrix#xcorr",
    "access": "public",
    "description": "自己相関関数、相互相関関数",
    "lineNumber": 3187,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "number",
        "description": "省略した場合は自己相関関数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 603,
    "kind": "method",
    "name": "window",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.window",
    "access": "public",
    "description": "窓関数",
    "lineNumber": 3198,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 列ベクトル"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "窓関数の名前"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "長さ"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\", 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "列ベクトル"
    }
  },
  {
    "__docId__": 604,
    "kind": "method",
    "name": "hann",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.hann",
    "access": "public",
    "description": "ハニング窓",
    "lineNumber": 3208,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 列ベクトル"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "長さ"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\", 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "列ベクトル"
    }
  },
  {
    "__docId__": 605,
    "kind": "method",
    "name": "hamming",
    "memberof": "src/math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Matrix.mjs~Matrix.hamming",
    "access": "public",
    "description": "ハミング窓",
    "lineNumber": 3218,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 列ベクトル"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "長さ"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\", 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "列ベクトル"
    }
  },
  {
    "__docId__": 606,
    "kind": "file",
    "name": "src/math/tools/LinearAlgebra.mjs",
    "content": "/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport Random from \"./Random.mjs\";\n\n// @ts-ignore\nimport Complex from \"../Complex.mjs\";\n\n// @ts-ignore\nimport Matrix from \"../Matrix.mjs\";\n\n/**\n * 線形代数用の関数集\n */\nclass LinearAlgebraTool {\n\n\t/**\n\t * 対称行列の三重対角化\n\t * 実数での計算のみ対応\n\t * @param {Matrix} mat\n\t * @returns {{P: Matrix, H: Matrix}}\n\t */\n\tstatic tridiagonalize(mat) {\n\n\t\tconst A = Matrix._toMatrix(mat);\n\t\tconst a = A.getNumberMatrixArray();\n\t\tconst tolerance = 1.0e-10;\n\n\t\t// 参考：奥村晴彦 (1991). C言語による最新アルゴリズム事典.\n\t\t// 3重対角化の成分を取得する\n\t\t\n\t\t/**\n\t\t * ベクトルx1とベクトルx2の内積をとる\n\t\t * @param {Array<number>} x1\n\t\t * @param {Array<number>} x2\n\t\t * @param {number} [index_offset=0] - オフセット(この値から行う)\n\t\t * @param {number} [index_max=x1.length] - 最大(この値は含めない)\n\t\t * @returns {number} \n\t\t */\n\t\tconst innerproduct = function(x1, x2, index_offset, index_max) {\n\t\t\tlet y = 0;\n\t\t\tconst ioffset = index_offset ? index_offset : 0;\n\t\t\tconst imax = index_max ? index_max : x1.length;\n\t\t\tfor(let i = ioffset; i < imax; i++) {\n\t\t\t\ty += x1[i] * x2[i];\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\n\t\t/**\n\t\t * ハウスホルダー変換\n\t\t * @param {Array<number>} x - ハウスホルダー変換したいベクトル\n\t\t * @param {number} [index_offset=0] - オフセット(この値から行う)\n\t\t * @param {number} [index_max=x.length] - 最大(この値は含めない)\n\t\t * @returns {Object<string, Matrix>} \n\t\t */\n\t\tconst house = function(x, index_offset, index_max) {\n\t\t\tconst ioffset = index_offset ? index_offset : 0;\n\t\t\tconst imax = index_max ? index_max : x.length;\n\t\t\t// xの内積の平方根（ノルム）を計算\n\t\t\tlet y1 = Math.sqrt(innerproduct(x, x, ioffset, imax));\n\t\t\tconst v = [];\n\t\t\tif(Math.abs(y1) >= tolerance) {\n\t\t\t\tif(x[ioffset] < 0) {\n\t\t\t\t\ty1 = - y1;\n\t\t\t\t}\n\t\t\t\tlet t;\n\t\t\t\tfor(let i = ioffset, j = 0; i < imax; i++, j++) {\n\t\t\t\t\tif(i === ioffset) {\n\t\t\t\t\t\tv[j] = x[i] + y1;\n\t\t\t\t\t\tt = 1.0 / Math.sqrt(v[j] * y1);\n\t\t\t\t\t\tv[j] = v[j] * t;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tv[j] = x[i] * t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\ty1: - y1,\t// 鏡像の1番目の要素(y2,y3,...は0)\n\t\t\t\tv : v\t\t// 直行する単位ベクトル vT*v = 2\n\t\t\t};\n\t\t};\n\n\t\tconst n = a.length;\n\t\tconst d = []; // 対角成分\n\t\tconst e = []; // 隣の成分\n\t\t{\n\t\t\tfor(let k = 0; k < n - 2; k++) {\n\t\t\t\tconst v = a[k];\n\t\t\t\td[k] = v[k];\n\t\t\t\t{\n\t\t\t\t\tconst H = house(v, k + 1, n);\n\t\t\t\t\te[k] = H.y1;\n\t\t\t\t\tfor(let i = 0; i < H.v.length; i++) {\n\t\t\t\t\t\tv[k + 1 + i] = H.v[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(Math.abs(e[k]) < tolerance) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor(let i = k + 1; i < n; i++) {\n\t\t\t\t\tlet s = 0;\n\t\t\t\t\tfor(let j = k + 1; j < i; j++) {\n\t\t\t\t\t\ts += a[j][i] * v[j];\n\t\t\t\t\t}\n\t\t\t\t\tfor(let j = i; j < n; j++) {\n\t\t\t\t\t\ts += a[i][j] * v[j];\n\t\t\t\t\t}\n\t\t\t\t\td[i] = s;\n\t\t\t\t}\n\t\t\t\tconst t = innerproduct(v, d, k + 1, n) / 2.0;\n\t\t\t\tfor(let i = n - 1; i > k; i--) {\n\t\t\t\t\tconst p = v[i];\n\t\t\t\t\tconst q = d[i] - (t * p);\n\t\t\t\t\td[i] = q;\n\t\t\t\t\tfor(let j = i; j < n; j++) {\n\t\t\t\t\t\tconst r = p * d[j] + q * v[j];\n\t\t\t\t\t\ta[i][j] = a[i][j] - r;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(n >= 2) {\n\t\t\t\td[n - 2] = a[n - 2][n - 2];\n\t\t\t\te[n - 2] = a[n - 2][n - 1];\n\t\t\t}\n\t\t\tif(n >= 1) {\n\t\t\t\td[n - 1] = a[n - 1][n - 1];\n\t\t\t}\n\t\t}\n\n\t\t//変換P行列を求める\n\t\tfor(let k = n - 1; k >= 0; k--) {\n\t\t\tconst v = a[k];\n\t\t\tif(k < n - 2) {\n\t\t\t\tfor(let i = k + 1; i < n; i++) {\n\t\t\t\t\tconst w = a[i];\n\t\t\t\t\tconst t = innerproduct(v, w, k + 1, n);\n\t\t\t\t\tfor(let j = k + 1; j < n; j++) {\n\t\t\t\t\t\tw[j] -= t * v[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(let i = 0; i < n; i++) {\n\t\t\t\tv[i] = 0.0;\n\t\t\t}\n\t\t\tv[k] = 1.0;\n\t\t}\n\n\t\t// d と e の配列を使って、三重対角行列を作成する\n\t\tconst H = Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\tif(row === col) {\n\t\t\t\treturn new Complex(d[row]);\n\t\t\t}\n\t\t\telse if(Math.abs(row - col) === 1) {\n\t\t\t\treturn new Complex(e[((row + col) * 0.5) | 0]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Complex.ZERO;\n\t\t\t}\n\t\t}, n, n);\n\n\t\treturn {\n\t\t\tP : (new Matrix(a)).T(),\n\t\t\tH : H\n\t\t};\n\t}\n\n\t/**\n\t * 対称行列の固有値分解\n\t * 実数での計算のみ対応\n\t * @param {Matrix} mat - 対称行列\n\t * @returns {{V: Matrix, D: Matrix}}\n\t */\n\tstatic eig(mat) {\n\t\tconst A = Matrix._toMatrix(mat);\n\t\t\n\t\t// QR法により固有値を求める\n\t\tlet is_error = false;\n\t\tconst tolerance = 1.0e-10;\n\t\tconst PH = LinearAlgebraTool.tridiagonalize(A);\n\t\tconst a = PH.P.getNumberMatrixArray();\n\t\tconst h = PH.H.getNumberMatrixArray();\n\t\tconst n = A.row_length;\n\n\t\t// 成分の抽出\n\t\tconst d = []; // 対角成分\n\t\tconst e = []; // 隣の成分\n\t\tfor(let i = 0; i < n; i++) {\n\t\t\td[i] = h[i][i];\n\t\t\te[i] = (i === 0) ? 0.0 : h[i][i - 1];\n\t\t}\n\n\t\t// 参考：奥村晴彦 (1991). C言語による最新アルゴリズム事典.\n\t\tconst MAX_ITER = 100;\n\t\tfor(let h = n - 1; h > 0; h--) {\n\t\t\tlet j = h;\n\t\t\tfor(j = h;j >= 1; j--) {\n\t\t\t\tif(Math.abs(e[j]) <= (tolerance * (Math.abs(d[j - 1]) + Math.abs(d[j])))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(j == h) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet iter = 0;\n\t\t\twhile(true) {\n\t\t\t\titer++;\n\t\t\t\tif(iter > MAX_ITER) {\n\t\t\t\t\tis_error = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlet w = (d[h - 1] - d[h]) / 2.0;\n\t\t\t\tlet t = e[h] * e[h];\n\t\t\t\tlet s = Math.sqrt(w * w + t);\n\t\t\t\tif(w < 0) {\n\t\t\t\t\ts = - s;\n\t\t\t\t}\n\t\t\t\tlet x = d[j] - d[h] + (t / (w + s));\n\t\t\t\tlet y = e[j + 1];\n\t\t\t\tfor(let k = j; k < h; k++) {\n\t\t\t\t\tlet c, s;\n\t\t\t\t\tif(Math.abs(x) >= Math.abs(y)) {\n\t\t\t\t\t\tt = - y / x;\n\t\t\t\t\t\tc = 1.0 / Math.sqrt(t * t + 1);\n\t\t\t\t\t\ts = t * c;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tt = - x / y;\n\t\t\t\t\t\ts = 1.0 / Math.sqrt(t * t + 1);\n\t\t\t\t\t\tc = t * s;\n\t\t\t\t\t}\n\t\t\t\t\tw = d[k] - d[k + 1];\n\t\t\t\t\tt = (w * s + 2.0 * c * e[k + 1]) * s;\n\t\t\t\t\td[k] -= t;\n\t\t\t\t\td[k + 1] += t;\n\t\t\t\t\tif(k > j) {\n\t\t\t\t\t\te[k] = c * e[k] - s * y;\n\t\t\t\t\t}\n\t\t\t\t\te[k + 1] += s * (c * w - 2.0 * s * e[k + 1]);\n\t\t\t\t\tfor(let i = 0; i < n; i++) {\n\t\t\t\t\t\tx = a[i][k];\n\t\t\t\t\t\ty = a[i][k + 1];\n\t\t\t\t\t\ta[i][k    ] = c * x - s * y;\n\t\t\t\t\t\ta[i][k + 1] = s * x + c * y;\n\t\t\t\t\t}\n\t\t\t\t\tif(k < h - 1) {\n\t\t\t\t\t\tx = e[k + 1];\n\t\t\t\t\t\ty = -s * e[k + 2];\n\t\t\t\t\t\te[k + 2] *= c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(Math.abs(e[h]) <= tolerance * (Math.abs(d[h - 1]) + Math.abs(d[h]))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(is_error) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// 固有値が大きいものから並べるソート\n\t\tconst vd_sort = function(V, d) {\n\t\t\tconst len = d.length;\n\t\t\tconst sortdata = [];\n\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\tsortdata[i] = {\n\t\t\t\t\tsigma : d[i],\n\t\t\t\t\tindex : i\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst compare = function(a, b){\n\t\t\t\tif(a.sigma === b.sigma) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\treturn (a.sigma < b.sigma ? 1 : -1);\n\t\t\t};\n\t\t\tsortdata.sort(compare);\n\t\t\tconst MOVE = Matrix.zeros(len);\n\t\t\tconst ND = Matrix.zeros(len);\n\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\tND.matrix_array[i][i] = new Complex(sortdata[i].sigma);\n\t\t\t\tMOVE.matrix_array[i][sortdata[i].index] = Complex.ONE;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tV : V.mul(MOVE),\n\t\t\t\tD : ND\n\t\t\t};\n\t\t};\n\t\tconst VD = vd_sort(new Matrix(a), d);\n\t\treturn VD;\n\t}\n\n\t/**\n\t * 行列をベクトルと見立て、正規直行化し、QとRの行列を作る\n\t * @param {Matrix} mat - 正方行列\n\t * @returns {{Q: Matrix, R: Matrix, non_orthogonalized : Array<number>}}\n\t */\n\tstatic doGramSchmidtOrthonormalization(mat) {\n\t\t// グラム・シュミットの正規直交化法を使用する\n\t\t// 参考：Gilbert Strang (2007). Computational Science and Engineering.\n\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tconst len = M.column_length;\n\t\tconst A = M.matrix_array;\n\t\tconst Q_Matrix = Matrix.zeros(len);\n\t\tconst R_Matrix = Matrix.zeros(len);\n\t\tconst Q = Q_Matrix.matrix_array;\n\t\tconst R = R_Matrix.matrix_array;\n\t\tconst non_orthogonalized = [];\n\t\tconst a = new Array(len);\n\t\t\n\t\tfor(let col = 0; col < len; col++) {\n\t\t\t// i列目を抽出\n\t\t\tfor(let row = 0; row < len; row++) {\n\t\t\t\ta[row] = A[row][col];\n\t\t\t}\n\t\t\t// 直行ベクトルを作成\n\t\t\tif(col > 0) {\n\t\t\t\t// Rのi列目を内積で計算する\n\t\t\t\tfor(let j = 0; j < col; j++) {\n\t\t\t\t\tfor(let k = 0; k < len; k++) {\n\t\t\t\t\t\tR[j][col] = R[j][col].add(A[k][col].dot(Q[k][j]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(let j = 0; j < col; j++) {\n\t\t\t\t\tfor(let k = 0; k < len; k++) {\n\t\t\t\t\t\ta[k] = a[k].sub(R[j][col].mul(Q[k][j]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t{\n\t\t\t\t// 正規化と距離を1にする\n\t\t\t\tfor(let j = 0; j < len; j++) {\n\t\t\t\t\tR[col][col] = R[col][col].add(a[j].square());\n\t\t\t\t}\n\t\t\t\tR[col][col] = R[col][col].sqrt();\n\t\t\t\tif(R[col][col].isZero(1e-10)) {\n\t\t\t\t\t// 直行化が不可能だった列の番号をメモして、その列はゼロで埋める\n\t\t\t\t\tnon_orthogonalized.push(col);\n\t\t\t\t\tfor(let j = 0;j < len;j++) {\n\t\t\t\t\t\tQ[j][col] = Complex.ZERO;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// ここで R[i][i] === 0 の場合、直行させたベクトルaは0であり、\n\t\t\t\t\t// ランク落ちしており、計算不可能である。\n\t\t\t\t\t// 0割りした値を、j列目のQに記録していくがInfとなる。\n\t\t\t\t\tfor(let j = 0;j < len;j++) {\n\t\t\t\t\t\tQ[j][col] = a[j].div(R[col][col]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tQ : Q_Matrix,\n\t\t\tR : R_Matrix,\n\t\t\tnon_orthogonalized : non_orthogonalized\n\t\t};\n\t}\n\t\n\t/**\n\t * 行列の全行ベクトルに対して、直行したベクトルを作成する\n\t * @param {Matrix} mat\n\t * @param {number} [epsilon=1.0e-10] - 誤差\n\t * @returns {Matrix|null} 直行したベクトルがなければNULLを返す\n\t */\n\tstatic createOrthogonalVector(mat, epsilon) {\n\t\tconst M = new Matrix(mat);\n\t\tconst column_length = M.column_length;\n\t\tconst m = M.matrix_array;\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\t// 正則行列をなす場合に問題となる行番号を取得\n\t\tconst not_regular_rows = LinearAlgebraTool.getLinearDependenceVector(M, tolerance);\n\t\t// 不要な行を削除する\n\t\t{\n\t\t\t// not_regular_rowsは昇順リストなので、後ろから消していく\n\t\t\tfor(let i = not_regular_rows.length - 1; i >= 0; i--) {\n\t\t\t\tm.splice(not_regular_rows[i], 1);\n\t\t\t\tM.row_length--;\n\t\t\t}\n\t\t}\n\t\t// 追加できるベクトルの数\n\t\tconst add_vectors = column_length - m.length;\n\t\tif(add_vectors <= 0) {\n\t\t\treturn null;\n\t\t}\n\t\t// ランダムベクトル（seed値は毎回同一とする）\n\t\tconst noise = new Random(0);\n\t\tlet orthogonal_matrix = null;\n\t\tfor(let i = 0; i < 100; i++) {\n\t\t\t// 直行ベクトルを作るために、いったん行と列を交換する\n\t\t\t// これは、グラム・シュミットの正規直交化法が列ごとに行う手法のため。\n\t\t\tconst M2 = M.T();\n\t\t\t// ランダム行列を作成する\n\t\t\tconst R = Matrix.createMatrixDoEachCalculation(function() {\n\t\t\t\treturn new Complex(noise.nextGaussian());\n\t\t\t}, M2.row_length, add_vectors);\n\t\t\t// 列に追加する\n\t\t\tM2._concatLeft(R);\n\t\t\t// 正規直行行列を作成する\n\t\t\torthogonal_matrix = LinearAlgebraTool.doGramSchmidtOrthonormalization(M2);\n\t\t\t// 正しく作成できていたら完了\n\t\t\tif(orthogonal_matrix.non_orthogonalized.length === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(orthogonal_matrix.non_orthogonalized.length !== 0) {\n\t\t\t// 普通は作成できないことはないが・・・\n\t\t\tconsole.log(\"miss\");\n\t\t\treturn null;\n\t\t}\n\t\t// 作成した列を切り出す\n\t\tconst y = new Array(add_vectors);\n\t\tconst q = orthogonal_matrix.Q.matrix_array;\n\t\tfor(let row = 0; row < add_vectors; row++) {\n\t\t\ty[row] = new Array(column_length);\n\t\t\tfor(let col = 0; col < column_length; col++) {\n\t\t\t\ty[row][col] = q[col][column_length - add_vectors + row];\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * 列の中で最もノルムが最大の値がある行番号\n\t * @param {Matrix} mat\n\t * @param {number} column_index - 列番号\n\t * @param {number} [row_index_offset=0] - 行のオフセット(この値から行う)\n\t * @param {number} [row_index_max] - 行の最大(この値は含めない)\n\t * @returns {{index: number, max: number}} 行番号\n\t * @private\n\t */\n\tstatic getMaxRowNumber(mat, column_index, row_index_offset, row_index_max) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tlet row_index = 0;\n\t\tlet row_max = 0;\n\t\tlet row = row_index_offset ? row_index_offset : 0;\n\t\tconst row_imax = row_index_max ? row_index_max : M.row_length;\n\t\t// n列目で最も大きな行を取得\n\t\tfor(; row < row_imax; row++) {\n\t\t\tconst norm = M.matrix_array[row][column_index].norm;\n\t\t\tif(norm > row_max) {\n\t\t\t\trow_max = norm;\n\t\t\t\trow_index = row;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tindex : row_index,\n\t\t\tmax : row_max\n\t\t};\n\t}\n\n\t/**\n\t * 行列の各行をベクトルと見立て、線型従属している行を抽出\n\t * @param {Matrix} mat\n\t * @param {number} [epsilon=1.0e-10] - 誤差\n\t * @returns {Array} 行番号の行列(昇順)\n\t * @private\n\t */\n\tstatic getLinearDependenceVector(mat, epsilon) {\n\t\tconst M = new Matrix(mat);\n\t\tconst m = M.matrix_array;\n\t\tconst tolerance = epsilon ? Matrix._toDouble(epsilon) : 1.0e-10;\n\t\t// 確認する行番号（ここから終わった行は削除していく）\n\t\tconst row_index_array = new Array(mat.row_length);\n\t\tfor(let i = 0; i < mat.row_length; i++) {\n\t\t\trow_index_array[i] = i;\n\t\t}\n\t\t// ガウスの消去法を使用して、行ベクトルを抽出していく\n\t\tfor(let col_target = 0; col_target < M.column_length; col_target++) {\n\t\t\tlet row_max_index = 0;\n\t\t\t{\n\t\t\t\tlet row_max = 0;\n\t\t\t\tlet row_max_key = 0;\n\t\t\t\t// n列目で絶対値が最も大きな行を取得\n\t\t\t\tfor(const row_key in row_index_array) {\n\t\t\t\t\tconst row = row_index_array[row_key];\n\t\t\t\t\tconst norm = m[row][col_target].norm;\n\t\t\t\t\tif(norm > row_max) {\n\t\t\t\t\t\trow_max = norm;\n\t\t\t\t\t\trow_max_key = parseInt(row_key, 10);\n\t\t\t\t\t\trow_max_index = row;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 大きいのが0である＝その列は全て0である\n\t\t\t\tif(row_max <= tolerance) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// 大きな値があった行は、リストから除去する\n\t\t\t\trow_index_array.splice(row_max_key, 1);\n\t\t\t\tif(col_target === M.column_length - 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 次の列から、大きな値があった行の成分を削除\n\t\t\tfor(const row_key in row_index_array) {\n\t\t\t\tconst row = row_index_array[row_key];\n\t\t\t\tconst inv = m[row][col_target].div(m[row_max_index][col_target]);\n\t\t\t\tfor(let col = col_target; col < M.column_length; col++) {\n\t\t\t\t\tm[row][col] = m[row][col].sub(m[row_max_index][col].mul(inv));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn row_index_array;\n\t}\n\n}\n\n/**\n * Matrix用の線形代数用の計算クラス\n */\nexport default class LinearAlgebra {\n\n\t/**\n\t * ドット積\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} A\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} B\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [dimension=1] 計算するときに使用する次元（1 or 2）\n\t * @returns {Matrix} A・B \n\t */\n\tstatic inner(A, B, dimension) {\n\t\tconst M1 = Matrix._toMatrix(A);\n\t\tconst M2 = Matrix._toMatrix(B);\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst dim = dimension ? Matrix._toInteger(dimension) : 1;\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn new Matrix(M1.scalar.dot(M2.scalar));\n\t\t}\n\t\tif(M1.isVector() && M2.isVector()) {\n\t\t\tlet sum = Complex.ZERO;\n\t\t\tfor(let i = 0; i < M1.length; i++) {\n\t\t\t\tsum = sum.add(M1.getComplex(i).dot(M2.getComplex(i)));\n\t\t\t}\n\t\t\treturn new Matrix(sum);\n\t\t}\n\t\tif((M1.row_length !== M2.row_length) || (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tif(dim === 1) {\n\t\t\tconst y = new Array(1);\n\t\t\ty[0] = new Array(M1.column_length);\n\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\t\tsum = sum.add(x1[row][col].dot(x2[row][col]));\n\t\t\t\t}\n\t\t\t\ty[0][col] = sum;\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\telse if(dim === 2) {\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\t\tsum = sum.add(x1[row][col].dot(x2[row][col]));\n\t\t\t\t}\n\t\t\t\ty[row] = [sum];\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\telse {\n\t\t\tthrow \"dim\";\n\t\t}\n\t}\n\n\t/**\n\t * pノルム\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [p=2]\n\t * @returns {number}\n\t */\n\tstatic norm(mat, p) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tconst p_number = (p === undefined) ? 2 : Matrix._toDouble(p);\n\t\tif(p_number === 1) {\n\t\t\t// 行列の1ノルム\n\t\t\tconst y = M.matrix_array;\n\t\t\t// 行ノルムを計算する\n\t\t\tif(M.isRow()) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\t\tsum += y[0][col].norm;\n\t\t\t\t}\n\t\t\t\treturn sum;\n\t\t\t}\n\t\t\t// 列ノルムを計算する\n\t\t\telse if(M.isColumn()) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\t\tsum += y[row][0].norm;\n\t\t\t\t}\n\t\t\t\treturn sum;\n\t\t\t}\n\t\t\t// 列の和の最大値\n\t\t\tlet max = 0;\n\t\t\t// 列を固定して行の和を計算\n\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\tlet sum = 0;\n\t\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\t\tsum += y[row][col].norm;\n\t\t\t\t}\n\t\t\t\tif(max < sum) {\n\t\t\t\t\tmax = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn max;\n\t\t}\n\t\telse if(p_number === 2) {\n\t\t\t// 行列の2ノルム\n\t\t\tconst y = M.matrix_array;\n\t\t\t// 行ノルムを計算する\n\t\t\tif(M.isRow()) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\t\tsum += y[0][col].square().real;\n\t\t\t\t}\n\t\t\t\treturn Math.sqrt(sum);\n\t\t\t}\n\t\t\t// 列ノルムを計算する\n\t\t\telse if(M.isColumn()) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\t\tsum += y[row][0].square().real;\n\t\t\t\t}\n\t\t\t\treturn Math.sqrt(sum);\n\t\t\t}\n\t\t\treturn M.svd().S.diag().max().scalar.real;\n\t\t}\n\t\telse if((p_number === Number.POSITIVE_INFINITY) || (p_number === Number.NEGATIVE_INFINITY)) {\n\t\t\tconst y = M.matrix_array;\n\t\t\tlet compare_number = p_number === Number.POSITIVE_INFINITY ? 0 : Number.POSITIVE_INFINITY;\n\t\t\tconst compare_func = p_number === Number.POSITIVE_INFINITY ? Math.max : Math.min;\n\t\t\t// 行ノルムを計算する\n\t\t\tif(M.isRow()) {\n\t\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\t\tcompare_number = compare_func(compare_number, y[0][col].norm);\n\t\t\t\t}\n\t\t\t\treturn compare_number;\n\t\t\t}\n\t\t\t// 列ノルムを計算する\n\t\t\tif(M.isColumn()) {\n\t\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\t\tcompare_number = compare_func(compare_number, y[row][0].norm);\n\t\t\t\t}\n\t\t\t\treturn compare_number;\n\t\t\t}\n\t\t\t// 行列の場合は、列の和の最大値\n\t\t\tcompare_number = 0;\n\t\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\t\tsum += y[row][col].norm;\n\t\t\t\t}\n\t\t\t\tcompare_number = Math.max(compare_number, sum);\n\t\t\t}\n\t\t\treturn compare_number;\n\t\t}\n\t\telse if(M.isVector()) {\n\t\t\t// 一般化ベクトルpノルム\n\t\t\tlet sum = 0.0;\n\t\t\tfor(let i = 0; i < M.length; i++) {\n\t\t\t\tsum += Math.pow(M.getComplex(i).norm, p_number);\n\t\t\t}\n\t\t\treturn Math.pow(sum, 1.0 / p_number);\n\t\t}\n\t\t// 未実装\n\t\tthrow \"norm\";\n\t}\n\t\n\t/**\n\t * 条件数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [p=2]\n\t * @returns {number}\n\t */\n\tstatic cond(mat, p) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tconst p_number = (p === undefined) ? 2 : Matrix._toInteger(p);\n\t\tif(p_number === 2) {\n\t\t\t// 零行列は Inf\n\t\t\tif(M.isZeros()) {\n\t\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t\t}\n\t\t\t// ベクトルは1\n\t\t\tif(M.isVector()) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\t// ユニタリは1\n\t\t\tif(M.isUnitary()) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tconst s = M.svd().S.diag();\n\t\t\treturn s.max().scalar.real / s.min().scalar.real;\n\t\t}\n\t\treturn M.norm(p) * M.pinv().norm(p);\n\t}\n\n\t/**\n\t * 1ノルムの条件数の逆数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat\n\t * @returns {number}\n\t */\n\tstatic rcond(mat) {\n\t\treturn 1.0 / LinearAlgebra.cond(Matrix._toMatrix(mat), 1);\n\t}\n\n\t/**\n\t * ランク\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [epsilon] - 誤差\n\t * @returns {number} rank(A)\n\t */\n\tstatic rank(mat, epsilon) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\t// 横が長い行列の場合\n\t\tif(M.row_length <= M.column_length) {\n\t\t\treturn Math.min(M.row_length, M.column_length) - (LinearAlgebraTool.getLinearDependenceVector(M, epsilon)).length;\n\t\t}\n\t\telse {\n\t\t\treturn M.row_length - (LinearAlgebraTool.getLinearDependenceVector(M, epsilon)).length;\n\t\t}\n\t}\n\n\t/**\n\t * トレース\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat\n\t * @returns {Complex}\n\t */\n\tstatic trace(mat) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tconst len = Math.min(M.row_length, M.column_length);\n\t\tlet sum = Complex.ZERO;\n\t\tfor(let i = 0; i < len; i++) {\n\t\t\tsum = sum.add(M.matrix_array[i][i]);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t * 行列式\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat\n\t * @returns {Matrix} |A|\n\t */\n\tstatic det(mat) {\n\t\tconst M = Matrix._toMatrix(mat);\n\t\tif(!M.isSquare()) {\n\t\t\tthrow \"not square\";\n\t\t}\n\t\tconst len = M.length;\n\t\tif(len < 5) {\n\t\t\tconst calcDet = function(x) {\n\t\t\t\tif(x.length === 2) {\n\t\t\t\t\t// 2次元の行列式になったら、たすき掛け計算する\n\t\t\t\t\treturn x[0][0].mul(x[1][1]).sub(x[0][1].mul(x[1][0]));\n\t\t\t\t}\n\t\t\t\tlet y = Complex.ZERO;\n\t\t\t\tfor(let i = 0; i < x.length; i++) {\n\t\t\t\t\t// N次元の行列式を、N-1次元の行列式に分解していく\n\t\t\t\t\tconst D = [];\n\t\t\t\t\tconst a = x[i][0];\n\t\t\t\t\tfor(let row = 0, D_low = 0; row < x.length; row++) {\n\t\t\t\t\t\tif(i === row) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tD[D_low] = [];\n\t\t\t\t\t\tfor(let col = 1, D_col = 0; col < x.length; col++, D_col++) {\n\t\t\t\t\t\t\tD[D_low][D_col] = x[row][col];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tD_low++;\n\t\t\t\t\t}\n\t\t\t\t\tif((i % 2) === 0) {\n\t\t\t\t\t\ty = y.add(a.mul(calcDet(D)));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ty = y.sub(a.mul(calcDet(D)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn y;\n\t\t\t};\n\t\t\treturn new Matrix(calcDet(M.matrix_array));\n\t\t}\n\t\telse {\n\t\t\t// サイズが大きい場合は、lu分解を利用する\n\t\t\tconst lup = LinearAlgebra.lup(M);\n\t\t\tconst exchange_count = (len - lup.P.diag().sum().scalar) / 2;\n\t\t\t// 上行列の対角線上の値を掛け算する\n\t\t\tlet y = lup.U.diag().prod();\n\t\t\tif((exchange_count % 2) === 1) {\n\t\t\t\ty = y.negate();\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t}\n\n\t/**\n\t * LUP分解\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - A\n\t * @returns {{P: Matrix, L: Matrix, U: Matrix}} P'*L*U=A\n\t */\n\tstatic lup(mat) {\n\t\tconst A = new Matrix(mat);\n\t\tconst L = Matrix.zeros(A.row_length);\n\t\tconst U = A;\n\t\tconst P = Matrix.eye(A.row_length);\n\t\tconst l = L.matrix_array;\n\t\tconst u = U.matrix_array;\n\t\t// ガウスの消去法で連立1次方程式の未知数を求める\n\t\t//前進消去\n\t\tfor(let k = 0; k < A.column_length; k++) {\n\t\t\t// ピポットの選択\n\t\t\tlet pivot;\n\t\t\t{\n\t\t\t\t// k列目で最も大きな行を取得(k列目から調べる)\n\t\t\t\tconst max_row_number = LinearAlgebraTool.getMaxRowNumber(U, k, k);\n\t\t\t\tpivot = max_row_number.index;\n\t\t\t\tif(max_row_number.max === 0.0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t//交換を行う\n\t\t\t\tif(k !== pivot) {\n\t\t\t\t\tL._exchangeRow(k, pivot);\n\t\t\t\t\tU._exchangeRow(k, pivot);\n\t\t\t\t\tP._exchangeRow(k, pivot);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 消去\n\t\t\tfor(let row = k + 1;row < A.row_length; row++) {\n\t\t\t\tconst temp = u[row][k].div(u[k][k]);\n\t\t\t\tl[row][k] = temp;\n\t\t\t\t//lの値だけ行交換が必要？\n\t\t\t\tfor(let col = k; col < A.column_length; col++) {\n\t\t\t\t\tu[row][col] = u[row][col].sub(u[k][col].mul(temp));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tL._resize(A.row_length, Math.min(A.row_length, A.column_length));\n\t\tU._resize(Math.min(A.row_length, A.column_length), A.column_length);\n\t\t// L の対角線に1を代入\n\t\tL._each(function(num, row, col) {\n\t\t\treturn row === col ? Complex.ONE : num;\n\t\t});\n\t\treturn {\n\t\t\tL : L,\n\t\t\tU : U,\n\t\t\tP : P\n\t\t};\n\t}\n\n\t/**\n\t * LU分解\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - A\n\t * @returns {{L: Matrix, U: Matrix}} L*U=A\n\t */\n\tstatic lu(mat) {\n\t\tconst lup = LinearAlgebra.lup(mat);\n\t\tconst L = lup.P.T().mul(lup.L);\n\t\treturn {\n\t\t\tL : L,\n\t\t\tU : lup.U\n\t\t};\n\t}\n\n\t/**\n\t * 連立一次方程式を解く\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - A\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} number - B\n\t * @returns {Matrix} Ax=B となる x\n\t * @todo 安定化のためQR分解を用いた手法に切り替える。あるいはlup分解を使用した関数に作り替える。\n\t */\n\tstatic linsolve(mat, number) {\n\t\tconst A = Matrix._toMatrix(mat);\n\t\tconst B = Matrix._toMatrix(number);\n\t\tif(!A.isSquare()) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\t// 連立一次方程式を解く\n\t\tconst arg = B;\n\t\tif((B.row_length !== A.row_length) || (B.column_length > 1)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\t// 行列を準備する\n\t\tconst M = new Matrix(A);\n\t\tM._concatLeft(arg);\n\t\tconst long_matrix_array = M.matrix_array;\n\t\tconst long_length = M.column_length;\n\t\tconst len = A.column_length;\n\t\t// ガウスの消去法で連立1次方程式の未知数を求める\n\t\t//前進消去\n\t\tfor(let k = 0; k < (len - 1); k++) {\n\t\t\t//ピポットの選択\n\t\t\t{\n\t\t\t\t// k列目で最も大きな行を取得(k列目から調べる)\n\t\t\t\tconst row_num = LinearAlgebraTool.getMaxRowNumber(M, k, k).index;\n\t\t\t\t//交換を行う\n\t\t\t\tM._exchangeRow(k, row_num);\n\t\t\t}\n\t\t\t//ピポットの正規化\n\t\t\t{\n\t\t\t\tconst normalize_value = long_matrix_array[k][k].inv();\n\t\t\t\tfor(let row = k, col = k; col < long_length; col++) {\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].mul(normalize_value);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//消去\n\t\t\tfor(let row = k + 1;row < len; row++) {\n\t\t\t\tconst temp = long_matrix_array[row][k];\n\t\t\t\tfor(let col = k; col < long_length; col++) {\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].sub(long_matrix_array[k][col].mul(temp));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//後退代入\n\t\tconst y = new Array(len);\n\t\ty[len - 1] = long_matrix_array[len - 1][len].div(long_matrix_array[len - 1][len - 1]);\n\t\tfor(let row = len - 2; row >= 0; row--) {\n\t\t\ty[row] = long_matrix_array[row][long_length - 1];\n\t\t\tfor(let j = row + 1; j < len; j++) {\n\t\t\t\ty[row] = y[row].sub(long_matrix_array[row][j] * y[j]);\n\t\t\t}\n\t\t\ty[row] = y[row].div(long_matrix_array[row][row]);\n\t\t}\n\t\tconst y2 = new Array(A.row_length);\n\t\tfor(let row = 0; row < A.row_length; row++) {\n\t\t\ty2[row] = [y[row]];\n\t\t}\n\n\t\treturn new Matrix(y2);\n\t}\n\n\t/**\n\t * QR分解\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - A\n\t * @returns {{Q: Matrix, R: Matrix}}  Q*R=A, Qは正規直行行列、Rは上三角行列\n\t */\n\tstatic qr(mat) {\n\t\t// 行列を準備する\n\t\tconst M = new Matrix(mat);\n\t\t// 作成後のQとRのサイズ\n\t\tconst Q_row_length = M.row_length;\n\t\tconst Q_column_length = M.row_length;\n\t\tconst R_row_length = M.row_length;\n\t\tconst R_column_length = M.column_length;\n\t\t// 計算時の行と列のサイズ\n\t\tconst dummy_size = Math.max(M.row_length, M.column_length);\n\t\t// 正方行列にする\n\t\tM._resize(dummy_size, dummy_size);\n\t\t// 正規直行化\n\t\tconst orthogonal_matrix = LinearAlgebraTool.doGramSchmidtOrthonormalization(M);\n\t\t// 計算したデータを取得\n\t\tlet Q_Matrix = orthogonal_matrix.Q;\n\t\tconst R_Matrix = orthogonal_matrix.R;\n\t\tconst non_orthogonalized = orthogonal_matrix.non_orthogonalized;\n\n\t\t// Qのサイズを成型する\n\t\tif(non_orthogonalized.length === M.row_length) {\n\t\t\t// 零行列の場合の特別処理\n\t\t\tQ_Matrix = Matrix.eye(M.row_length);\n\t\t}\n\t\telse if(non_orthogonalized.length !== 0) {\n\t\t\t// 一部、直行化できていない列があるため直行化できてない列以外を抽出\n\t\t\tconst map = {};\n\t\t\tfor(let i = 0; i < non_orthogonalized.length; i++) {\n\t\t\t\tmap[non_orthogonalized[i]] = 1;\n\t\t\t}\n\t\t\tconst orthogonalized = [];\n\t\t\tfor(let i = 0; i < dummy_size; i++) {\n\t\t\t\tif(map[i]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst array = [];\n\t\t\t\tfor(let j = 0; j < dummy_size; j++) {\n\t\t\t\t\tarray[j] = Q_Matrix.matrix_array[j][i];\n\t\t\t\t}\n\t\t\t\torthogonalized.push(array);\n\t\t\t}\n\t\t\t// 直行ベクトルを作成する\n\t\t\tconst orthogonal_vector = LinearAlgebraTool.createOrthogonalVector(orthogonalized);\n\t\t\t// 直行化できていない列を差し替える\n\t\t\tfor(let i = 0; i < non_orthogonalized.length; i++) {\n\t\t\t\tconst q_col = non_orthogonalized[i];\n\t\t\t\tfor(let j = 0; j < dummy_size; j++) {\n\t\t\t\t\tQ_Matrix.matrix_array[j][q_col] = orthogonal_vector.matrix_array[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tQ_Matrix._resize(Q_row_length, Q_column_length);\n\t\t// Rのサイズを成形する\n\t\tR_Matrix._resize(R_row_length, R_column_length);\n\t\treturn {\n\t\t\tQ : Q_Matrix,\n\t\t\tR : R_Matrix\n\t\t};\n\t}\n\n\t/**\n\t * 対称行列の三重対角化\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - A\n\t * @returns {{P: Matrix, H: Matrix}} P*H*P'=A, Hは三重対角行列、Pは正規直行行列、三重対角行列の固有値は元の行列と一致\n\t */\n\tstatic tridiagonalize(mat) {\n\t\tconst M = new Matrix(mat);\n\t\tif(!M.isSquare()) {\n\t\t\tthrow \"not square matrix\";\n\t\t}\n\t\tif(!M.isSymmetric()) {\n\t\t\tthrow \"not Symmetric\";\n\t\t}\n\t\tif(M.isComplex()) {\n\t\t\tthrow \"not Real Matrix\";\n\t\t}\n\t\treturn LinearAlgebraTool.tridiagonalize(M);\n\t}\n\n\t/**\n\t * 対称行列の固有値分解\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - A\n\t * @returns {{V: Matrix, D: Matrix}} V*D*V'=A, Vは右固有ベクトルを列にもつ行列で正規直行行列、Dは固有値を対角成分に持つ行列\n\t * @todo 対称行列しか対応できていないので、対称行列ではないものはQR分解を用いた手法に切り替える予定。\n\t */\n\tstatic eig(mat) {\n\t\tconst M = new Matrix(mat);\n\t\tif(!M.isSquare()) {\n\t\t\tthrow \"not square matrix\";\n\t\t}\n\t\tif(!M.isSymmetric()) {\n\t\t\tthrow \"not Symmetric\";\n\t\t}\n\t\tif(M.isComplex()) {\n\t\t\tthrow \"not Real Matrix\";\n\t\t}\n\t\treturn LinearAlgebraTool.eig(M);\n\t}\n\n\t/**\n\t * 特異値分解\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - A\n\t * @returns {{U: Matrix, S: Matrix, V: Matrix}} U*S*V'=A\n\t */\n\tstatic svd(mat) {\n\t\tconst M = new Matrix(mat);\n\t\tif(M.isComplex()) {\n\t\t\t// 複素数が入っている場合は、eig関数が使用できないので非対応\n\t\t\tthrow \"Unimplemented\";\n\t\t}\n\t\tconst rank = LinearAlgebra.rank(M);\n\t\t// SVD分解\n\t\t// 参考：Gilbert Strang (2007). Computational Science and Engineering.\n\t\tconst VD = LinearAlgebra.eig(M.T().mul(M));\n\t\tconst sigma = Matrix.zeros(M.row_length, M.column_length);\n\t\tsigma._each(function(num, row, col) {\n\t\t\tif((row === col) && (row < rank)) {\n\t\t\t\treturn VD.D.getComplex(row, row).sqrt();\n\t\t\t}\n\t\t});\n\t\tconst s_size = Math.min(M.row_length, M.column_length);\n\t\tconst sing = Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\tif(row === col) {\n\t\t\t\tconst x = sigma.matrix_array[row][row];\n\t\t\t\tif(x.isZero()) {\n\t\t\t\t\treturn Complex.ZERO;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn x.inv();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Complex.ZERO;\n\t\t\t}\n\t\t}, s_size);\n\t\tconst V_rank = VD.V.resize(VD.V.row_length, s_size);\n\t\tconst u = M.mul(V_rank).mul(sing);\n\t\tconst QR = LinearAlgebra.qr(u);\n\t\treturn {\n\t\t\tU : QR.Q,\n\t\t\tS : sigma,\n\t\t\tV : VD.V\n\t\t};\n\t}\n\n\t/**\n\t * 逆行列\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - A\n\t * @returns {Matrix} A^-1\n\t */\n\tstatic inv(mat) {\n\t\tconst X = new Matrix(mat);\n\t\tif(X.isScalar()) {\n\t\t\treturn new Matrix(Complex.ONE.div(X.scalar));\n\t\t}\n\t\tif(!X.isSquare()) {\n\t\t\tthrow \"not square\";\n\t\t}\n\t\tif(X.isDiagonal()) {\n\t\t\t// 対角行列の場合は、対角成分のみ逆数をとる\n\t\t\tconst y = X.T();\n\t\t\tconst size = Math.min(y.row_length, y.column_length);\n\t\t\tfor(let i = 0; i < size; i++) {\n\t\t\t\ty.matrix_array[i][i] = y.matrix_array[i][i].inv();\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\t// (ここで正規直交行列の場合なら、転置させるなど入れてもいい？判定はできないけども)\n\t\tconst len = X.column_length;\n\t\t// ガウス・ジョルダン法\n\t\t// 初期値の設定\n\t\tconst M = new Matrix(X);\n\t\tM._concatLeft(Matrix.eye(len));\n\t\tconst long_matrix_array = M.matrix_array;\n\t\tconst long_length = M.column_length;\n\n\t\t//前進消去\n\t\tfor(let k = 0; k < len; k++) {\n\t\t\t//ピポットの選択\n\t\t\t{\n\t\t\t\t// k列目で最も大きな行を取得(k列目から調べる)\n\t\t\t\tconst row_num = LinearAlgebraTool.getMaxRowNumber(M, k, k).index;\n\t\t\t\t//交換を行う\n\t\t\t\tM._exchangeRow(k, row_num);\n\t\t\t}\n\t\t\t//ピポットの正規化\n\t\t\t{\n\t\t\t\tconst normalize_value = long_matrix_array[k][k].inv();\n\t\t\t\tfor(let row = k, col = k; col < long_length; col++) {\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].mul(normalize_value);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//消去\n\t\t\tfor(let row = 0;row < len; row++) {\n\t\t\t\tif(row === k) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst temp = long_matrix_array[row][k];\n\t\t\t\tfor(let col = k; col < long_length; col++)\n\t\t\t\t{\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].sub(long_matrix_array[k][col].mul(temp));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst y = new Array(len);\n\t\t//右の列を抜き取る\n\t\tfor(let row = 0; row < len; row++) {\n\t\t\ty[row] = new Array(len);\n\t\t\tfor(let col = 0; col < len; col++) {\n\t\t\t\ty[row][col] = long_matrix_array[row][len + col];\n\t\t\t}\n\t\t}\n\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * 疑似逆行列\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} mat - A\n\t * @returns {Matrix} A^+\n\t */\n\tstatic pinv(mat) {\n\t\tconst M = new Matrix(mat);\n\t\tconst USV = LinearAlgebra.svd(M);\n\t\tconst U = USV.U;\n\t\tconst S = USV.S;\n\t\tconst V = USV.V;\n\t\tconst sing = Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\tif(row === col) {\n\t\t\t\tconst x = S.matrix_array[row][row];\n\t\t\t\tif(x.isZero()) {\n\t\t\t\t\treturn Complex.ZERO;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn x.inv();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Complex.ZERO;\n\t\t\t}\n\t\t}, M.column_length, M.row_length);\n\t\treturn V.mul(sing).mul(U.T());\n\t}\n\n\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/tools/LinearAlgebra.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 607,
    "kind": "class",
    "name": "LinearAlgebraTool",
    "memberof": "src/math/tools/LinearAlgebra.mjs",
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/LinearAlgebra.mjs",
    "importStyle": null,
    "description": "線形代数用の関数集",
    "lineNumber": 24,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 608,
    "kind": "method",
    "name": "tridiagonalize",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool.tridiagonalize",
    "access": "public",
    "description": "対称行列の三重対角化\n実数での計算のみ対応",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, H: Matrix}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, H: Matrix}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 609,
    "kind": "method",
    "name": "eig",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool.eig",
    "access": "public",
    "description": "対称行列の固有値分解\n実数での計算のみ対応",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{V: Matrix, D: Matrix}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "対称行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{V: Matrix, D: Matrix}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 610,
    "kind": "method",
    "name": "doGramSchmidtOrthonormalization",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool.doGramSchmidtOrthonormalization",
    "access": "public",
    "description": "行列をベクトルと見立て、正規直行化し、QとRの行列を作る",
    "lineNumber": 308,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{Q: Matrix, R: Matrix, non_orthogonalized : Array<number>}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "正方行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{Q: Matrix, R: Matrix, non_orthogonalized : Array<number>}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 611,
    "kind": "method",
    "name": "createOrthogonalVector",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool.createOrthogonalVector",
    "access": "public",
    "description": "行列の全行ベクトルに対して、直行したベクトルを作成する",
    "lineNumber": 377,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix|null} 直行したベクトルがなければNULLを返す"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0e-10",
        "defaultRaw": 1e-10,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix",
        "null"
      ],
      "spread": false,
      "description": "直行したベクトルがなければNULLを返す"
    }
  },
  {
    "__docId__": 612,
    "kind": "method",
    "name": "getMaxRowNumber",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool.getMaxRowNumber",
    "access": "private",
    "description": "列の中で最もノルムが最大の値がある行番号",
    "lineNumber": 443,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{index: number, max: number}} 行番号"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "column_index",
        "description": "列番号"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "row_index_offset",
        "description": "行のオフセット(この値から行う)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "row_index_max",
        "description": "行の最大(この値は含めない)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{index: number, max: number}"
      ],
      "spread": false,
      "description": "行番号"
    }
  },
  {
    "__docId__": 613,
    "kind": "method",
    "name": "getLinearDependenceVector",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebraTool.getLinearDependenceVector",
    "access": "private",
    "description": "行列の各行をベクトルと見立て、線型従属している行を抽出",
    "lineNumber": 470,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} 行番号の行列(昇順)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0e-10",
        "defaultRaw": 1e-10,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "行番号の行列(昇順)"
    }
  },
  {
    "__docId__": 614,
    "kind": "class",
    "name": "LinearAlgebra",
    "memberof": "src/math/tools/LinearAlgebra.mjs",
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/tools/LinearAlgebra.mjs",
    "importStyle": "LinearAlgebra",
    "description": "Matrix用の線形代数用の計算クラス",
    "lineNumber": 522,
    "interface": false
  },
  {
    "__docId__": 615,
    "kind": "method",
    "name": "inner",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.inner",
    "access": "public",
    "description": "ドット積",
    "lineNumber": 531,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A・B "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "B",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "dimension",
        "description": "計算するときに使用する次元（1 or 2）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A・B"
    }
  },
  {
    "__docId__": 616,
    "kind": "method",
    "name": "norm",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.norm",
    "access": "public",
    "description": "pノルム",
    "lineNumber": 584,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 617,
    "kind": "method",
    "name": "cond",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.cond",
    "access": "public",
    "description": "条件数",
    "lineNumber": 688,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 618,
    "kind": "method",
    "name": "rcond",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.rcond",
    "access": "public",
    "description": "1ノルムの条件数の逆数",
    "lineNumber": 715,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 619,
    "kind": "method",
    "name": "rank",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.rank",
    "access": "public",
    "description": "ランク",
    "lineNumber": 725,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} rank(A)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "rank(A)"
    }
  },
  {
    "__docId__": 620,
    "kind": "method",
    "name": "trace",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.trace",
    "access": "public",
    "description": "トレース",
    "lineNumber": 741,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 621,
    "kind": "method",
    "name": "det",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.det",
    "access": "public",
    "description": "行列式",
    "lineNumber": 756,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} |A|"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "|A|"
    }
  },
  {
    "__docId__": 622,
    "kind": "method",
    "name": "lup",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.lup",
    "access": "public",
    "description": "LUP分解",
    "lineNumber": 812,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, L: Matrix, U: Matrix}} P'*L*U=A"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, L: Matrix, U: Matrix}"
      ],
      "spread": false,
      "description": "P'*L*U=A"
    }
  },
  {
    "__docId__": 623,
    "kind": "method",
    "name": "lu",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.lu",
    "access": "public",
    "description": "LU分解",
    "lineNumber": 866,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{L: Matrix, U: Matrix}} L*U=A"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{L: Matrix, U: Matrix}"
      ],
      "spread": false,
      "description": "L*U=A"
    }
  },
  {
    "__docId__": 624,
    "kind": "method",
    "name": "linsolve",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.linsolve",
    "access": "public",
    "description": "連立一次方程式を解く",
    "lineNumber": 882,
    "todo": [
      "安定化のためQR分解を用いた手法に切り替える。あるいはlup分解を使用した関数に作り替える。"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} Ax=B となる x"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "B"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "Ax=B となる x"
    }
  },
  {
    "__docId__": 625,
    "kind": "method",
    "name": "qr",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.qr",
    "access": "public",
    "description": "QR分解",
    "lineNumber": 947,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{Q: Matrix, R: Matrix}}  Q*R=A, Qは正規直行行列、Rは上三角行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{Q: Matrix, R: Matrix}"
      ],
      "spread": false,
      "description": "Q*R=A, Qは正規直行行列、Rは上三角行列"
    }
  },
  {
    "__docId__": 626,
    "kind": "method",
    "name": "tridiagonalize",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.tridiagonalize",
    "access": "public",
    "description": "対称行列の三重対角化",
    "lineNumber": 1012,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{P: Matrix, H: Matrix}} P*H*P'=A, Hは三重対角行列、Pは正規直行行列、三重対角行列の固有値は元の行列と一致"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{P: Matrix, H: Matrix}"
      ],
      "spread": false,
      "description": "P*H*P'=A, Hは三重対角行列、Pは正規直行行列、三重対角行列の固有値は元の行列と一致"
    }
  },
  {
    "__docId__": 627,
    "kind": "method",
    "name": "eig",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.eig",
    "access": "public",
    "description": "対称行列の固有値分解",
    "lineNumber": 1032,
    "todo": [
      "対称行列しか対応できていないので、対称行列ではないものはQR分解を用いた手法に切り替える予定。"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{V: Matrix, D: Matrix}} V*D*V'=A, Vは右固有ベクトルを列にもつ行列で正規直行行列、Dは固有値を対角成分に持つ行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{V: Matrix, D: Matrix}"
      ],
      "spread": false,
      "description": "V*D*V'=A, Vは右固有ベクトルを列にもつ行列で正規直行行列、Dは固有値を対角成分に持つ行列"
    }
  },
  {
    "__docId__": 628,
    "kind": "method",
    "name": "svd",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.svd",
    "access": "public",
    "description": "特異値分解",
    "lineNumber": 1051,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{U: Matrix, S: Matrix, V: Matrix}} U*S*V'=A"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{U: Matrix, S: Matrix, V: Matrix}"
      ],
      "spread": false,
      "description": "U*S*V'=A"
    }
  },
  {
    "__docId__": 629,
    "kind": "method",
    "name": "inv",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.inv",
    "access": "public",
    "description": "逆行列",
    "lineNumber": 1097,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^-1"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^-1"
    }
  },
  {
    "__docId__": 630,
    "kind": "method",
    "name": "pinv",
    "memberof": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/LinearAlgebra.mjs~LinearAlgebra.pinv",
    "access": "public",
    "description": "疑似逆行列",
    "lineNumber": 1169,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} A^+"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mat",
        "description": "A"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "A^+"
    }
  },
  {
    "__docId__": 631,
    "kind": "file",
    "name": "src/math/tools/Random.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\nclass RandomTool {\n\n\t/**\n\t * 32ビットの負ではない整数を作成する\n\t * @param {number} x \n\t * @returns {number}\n\t */\n\tstatic unsigned32(x) {\n\t\treturn ((x < 0) ? ((x & 0x7FFFFFFF) + 0x80000000) : x);\n\t}\n\n\t/**\n\t * 2つの32ビット整数を掛け算して、32ビットの整数を出力する\n\t * @param {number} x1 \n\t * @param {number} x2 \n\t * @returns {number}\n\t */\n\tstatic multiplication32(x1, x2) {\n\t\tlet b = (x1 & 0xFFFF) * (x2 & 0xFFFF);\n\t\tlet y = RandomTool.unsigned32(b);\n\t\tb = (x1 & 0xFFFF) * (x2 >>> 16);\n\t\ty = RandomTool.unsigned32(y + ((b & 0xFFFF) << 16));\n\t\tb = (x1 >>> 16) * (x2 & 0xFFFF);\n\t\ty = RandomTool.unsigned32(y + ((b & 0xFFFF) << 16));\n\t\treturn (y & 0xFFFFFFFF);\n\t}\n\n\n}\n\n/**\n * 乱数クラス\n */\nexport default class Random {\n\t\n\t/**\n\t * 乱数を初期化する\n\t * @param {number} [seed] - 乱数のシード値、指定しない場合は時刻から作成する\n\t */\n\tconstructor(seed) {\n\t\t// 「M系列乱数」で乱数を作成します。\n\t\t// 参考：奥村晴彦 (1991). C言語による最新アルゴリズム事典.\n\t\t// 比較的長い 2^521 - 1通りを出力します。\n\t\t// 乱数はCでの動作と同じ値が出ることを確認。(seed = 1として1000番目の値が等しいことを確認)\n\n\t\t/**\n\t\t * 乱数配列\n\t\t * @private\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.x = [];\n\t\tfor(let i = 0;i < 521;i++) {\n\t\t\tthis.x[i] = 0;\n\t\t}\n\t\tif(arguments.length >= 1) {\n\t\t\tthis.setSeed(seed);\n\t\t}\n\t\telse {\n\t\t\t// 線形合同法で適当に乱数を作成する\n\t\t\tconst seed = ((new Date()).getTime() + Random.seedUniquifier) & 0xFFFFFFFF;\n\t\t\tRandom.seedUniquifier = (Random.seedUniquifier + 1) & 0xFFFFFFFF;\n\t\t\tthis.setSeed(seed);\n\t\t}\n\t}\n\n\t/**\n\t * 内部データをシャッフル\n\t */\n\t_rnd521() {\n\t\tconst x = this.x;\n\t\tfor(let i = 0; i < 32; i++) {\n\t\t\tx[i] ^= x[i + 489];\n\t\t}\n\t\tfor(let i = 32; i < 521; i++) {\n\t\t\tx[i] ^= x[i - 32];\n\t\t}\n\t}\n\n\t/**\n\t * 乱数を初期化する\n\t * @param {number} seed\n\t */\n\tsetSeed(seed) {\n\t\t// 伏見「乱数」東京大学出版会,1989 の方法により初期値を設定\n\t\tlet u = 0;\n\t\tconst x = this.x;\n\t\t// seedを使用して線形合同法でx[0-16]まで初期値を設定\n\t\tlet random_seed = seed;\n\t\tfor(let i = 0; i <= 16; i++) {\n\t\t\tfor(let j = 0; j < 32; j++) {\n\t\t\t\trandom_seed = RandomTool.multiplication32(random_seed, 0x5D588B65) + 1;\n\t\t\t\tu = (u >>> 1) + ((random_seed < 0) ? 0x80000000 : 0);\n\t\t\t}\n\t\t\tx[i] = u;\n\t\t}\n\t\t// 残りのビットはx[i] = x[i-32] ^ x[i-521]で生成\n\t\tfor(let i = 16; i < 521; i++) {\n\t\t\tu = (i === 16) ? i : (i - 17);\n\t\t\tx[i] = ((x[u] << 23) & 0xFFFFFFFF) ^ (x[i - 16] >>> 9) ^ x[i - 1];\n\t\t}\n\t\t// ビットをシャッフル\n\t\tfor(let i = 0; i < 4; i++) {\n\t\t\tthis._rnd521();\n\t\t}\n\t\t\n\t\t/**\n\t\t * 乱数配列の何番目を使用しているか\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.xi = 0;\n\t\t\n\t\t/**\n\t\t * ガウシアン分布に基づく乱数を保持しているか\n\t\t * @private\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.haveNextNextGaussian = false;\n\t\t\n\t\t/**\n\t\t * 保持したガウシアン分布に基づく乱数\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.nextNextGaussian = 0;\n\t}\n\n\t/**\n\t * 32ビットの乱数\n\t * @returns {number} - 32ビットの乱数\n\t */\n\tgenrand_int32() {\n\t\t// 全て使用したら、再び混ぜる\n\t\tif(this.xi === 521) {\n\t\t\tthis._rnd521();\n\t\t\tthis.xi = 0;\n\t\t}\n\t\tconst y = RandomTool.unsigned32(this.x[this.xi]);\n\t\tthis.xi = this.xi + 1;\n\t\treturn y;\n\t}\n\n\t/**\n\t * 指定したビット数の乱数\n\t * @param {number} bits - 必要なビット数（64まで可能）\n\t * @returns {number}\n\t */\n\tnext(bits) {\n\t\tif(bits === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(bits === 32) {\n\t\t\treturn this.genrand_int32();\n\t\t}\n\t\telse if(bits < 32) {\n\t\t\t// 線形合同法ではないため\n\n\t\t\t// 上位のビットを使用しなくてもいいがJavaっぽく。\n\t\t\treturn (this.genrand_int32() >>> (32 - bits));\n\t\t}\n\t\t// double型のため、52ビットまでは、整数として出力可能\n\t\telse if(bits === 63) {\n\t\t\t// 正の値を出力するように調節\n\t\t\treturn (this.next(32) * 0x80000000 + this.next(32));\n\t\t}\n\t\telse if(bits === 64) {\n\t\t\treturn (this.next(32) * 0x100000000 + this.next(32));\n\t\t}\n\t\telse if(bits < 64) {\n\t\t\treturn (this.genrand_int32() * (1 << (bits - 32)) + (this.genrand_int32()  >>> (64 - bits)));\n\t\t}\n\t}\n\n\t/**\n\t * 指定したサイズの8ビットの乱数\n\t * @param {number} size - 必要な長さ\n\t * @returns {Array<number>}\n\t */\n\tnextBytes(size) {\n\t\tconst y = new Array(size);\n\t\t// 配列yに乱数を入れる\n\t\t// 8ビットのために、32ビット乱数を1回回すのはもったいない\n\t\tfor(let i = 0;i < y.length; i++) {\n\t\t\ty[i] = this.next(8);\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * 16ビットの乱数\n\t * @returns {number}\n\t */\n\tnextShort() {\n\t\treturn (this.next(16));\n\t}\n\n\t/**\n\t * 32ビットの乱数\n\t * @param {number} [x] - 指定した値未満の数値を作る\n\t * @returns {number}\n\t */\n\tnextInt(x) {\n\t\tif((x !== undefined) && (typeof x === \"number\")) {\n\t\t\tlet r, y;\n\t\t\tdo {\n\t\t\t\tr = RandomTool.unsigned32(this.genrand_int32());\n\t\t\t\ty = r % x;\n\t\t\t} while((r - y + x) > 0x100000000 );\n\t\t\treturn y;\n\t\t}\n\t\treturn (this.next(32) & 0xFFFFFFFF);\n\t}\n\n\t/**\n\t * 64ビットの乱数\n\t * @returns {number}\n\t */\n\tnextLong() {\n\t\treturn this.next(64);\n\t}\n\n\t/**\n\t * 正負の乱数\n\t * @returns {boolean}\n\t */\n\tnextBoolean() {\n\t\t// 1ビットのために、32ビット乱数を1回回すのはもったいない\n\t\treturn (this.next(1) !== 0);\n\t}\n\n\t/**\n\t * 0 <= x < 1 のFloat(23ビット)乱数\n\t * @returns {number}\n\t */\n\tnextFloat() {\n\t\treturn (this.next(24) / 0x1000000);\n\t}\n\n\t/**\n\t * 0 <= x < 1 のDouble(52ビット)乱数\n\t * @returns {number}\n\t */\n\tnextDouble() {\n\t\tconst a1 = this.next(26) * 0x8000000 + this.next(27);\n\t\tconst a2 = 0x8000000 * 0x4000000;\n\t\treturn (a1 / a2);\n\t}\n\n\t/**\n\t * 平均値0、標準偏差1のガウシアン分布に基づく乱数\n\t * @returns {number}\n\t */\n\tnextGaussian() {\n\t\tif(this.haveNextNextGaussian) {\n\t\t\tthis.haveNextNextGaussian = false;\n\t\t\treturn this.nextNextGaussian;\n\t\t}\n\t\t// Box-Muller法\n\t\tconst a = Math.sqrt( -2 * Math.log( this.nextDouble() ) );\n\t\tconst b = 2 * Math.PI * this.nextDouble();\n\t\tconst y = a * Math.sin(b);\n\t\tthis.nextNextGaussian = a * Math.cos(b);\n\t\tthis.haveNextNextGaussian = true;\n\t\treturn y;\n\t}\n}\n\nRandom.seedUniquifier = 0x87654321;\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/tools/Random.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 632,
    "kind": "class",
    "name": "RandomTool",
    "memberof": "src/math/tools/Random.mjs",
    "static": true,
    "longname": "src/math/tools/Random.mjs~RandomTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Random.mjs",
    "importStyle": null,
    "description": "The script is part of konpeito.\n\nAUTHOR:\n natade (http://twitter.com/natadea)\n\nLICENSE:\n The MIT license https://opensource.org/licenses/MIT",
    "lineNumber": 12,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 633,
    "kind": "method",
    "name": "unsigned32",
    "memberof": "src/math/tools/Random.mjs~RandomTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Random.mjs~RandomTool.unsigned32",
    "access": "public",
    "description": "32ビットの負ではない整数を作成する",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 634,
    "kind": "method",
    "name": "multiplication32",
    "memberof": "src/math/tools/Random.mjs~RandomTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Random.mjs~RandomTool.multiplication32",
    "access": "public",
    "description": "2つの32ビット整数を掛け算して、32ビットの整数を出力する",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 635,
    "kind": "class",
    "name": "Random",
    "memberof": "src/math/tools/Random.mjs",
    "static": true,
    "longname": "src/math/tools/Random.mjs~Random",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/tools/Random.mjs",
    "importStyle": "Random",
    "description": "乱数クラス",
    "lineNumber": 45,
    "interface": false
  },
  {
    "__docId__": 636,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#constructor",
    "access": "public",
    "description": "乱数を初期化する",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "seed",
        "description": "乱数のシード値、指定しない場合は時刻から作成する"
      }
    ]
  },
  {
    "__docId__": 637,
    "kind": "member",
    "name": "x",
    "memberof": "src/math/tools/Random.mjs~Random",
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#x",
    "access": "private",
    "description": "乱数配列",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 638,
    "kind": "method",
    "name": "_rnd521",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#_rnd521",
    "access": "private",
    "description": "内部データをシャッフル",
    "lineNumber": 80,
    "params": [],
    "return": null
  },
  {
    "__docId__": 639,
    "kind": "method",
    "name": "setSeed",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#setSeed",
    "access": "public",
    "description": "乱数を初期化する",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 640,
    "kind": "member",
    "name": "xi",
    "memberof": "src/math/tools/Random.mjs~Random",
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#xi",
    "access": "private",
    "description": "乱数配列の何番目を使用しているか",
    "lineNumber": 122,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 641,
    "kind": "member",
    "name": "haveNextNextGaussian",
    "memberof": "src/math/tools/Random.mjs~Random",
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#haveNextNextGaussian",
    "access": "private",
    "description": "ガウシアン分布に基づく乱数を保持しているか",
    "lineNumber": 129,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 642,
    "kind": "member",
    "name": "nextNextGaussian",
    "memberof": "src/math/tools/Random.mjs~Random",
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#nextNextGaussian",
    "access": "private",
    "description": "保持したガウシアン分布に基づく乱数",
    "lineNumber": 136,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 643,
    "kind": "method",
    "name": "genrand_int32",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#genrand_int32",
    "access": "public",
    "description": "32ビットの乱数",
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} - 32ビットの乱数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "32ビットの乱数"
    },
    "params": []
  },
  {
    "__docId__": 646,
    "kind": "method",
    "name": "next",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#next",
    "access": "public",
    "description": "指定したビット数の乱数",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bits",
        "description": "必要なビット数（64まで可能）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 647,
    "kind": "method",
    "name": "nextBytes",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#nextBytes",
    "access": "public",
    "description": "指定したサイズの8ビットの乱数",
    "lineNumber": 190,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "必要な長さ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 648,
    "kind": "method",
    "name": "nextShort",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#nextShort",
    "access": "public",
    "description": "16ビットの乱数",
    "lineNumber": 204,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 649,
    "kind": "method",
    "name": "nextInt",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#nextInt",
    "access": "public",
    "description": "32ビットの乱数",
    "lineNumber": 213,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "x",
        "description": "指定した値未満の数値を作る"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 650,
    "kind": "method",
    "name": "nextLong",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#nextLong",
    "access": "public",
    "description": "64ビットの乱数",
    "lineNumber": 229,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 651,
    "kind": "method",
    "name": "nextBoolean",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#nextBoolean",
    "access": "public",
    "description": "正負の乱数",
    "lineNumber": 237,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 652,
    "kind": "method",
    "name": "nextFloat",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#nextFloat",
    "access": "public",
    "description": "0 <= x < 1 のFloat(23ビット)乱数",
    "lineNumber": 246,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 653,
    "kind": "method",
    "name": "nextDouble",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#nextDouble",
    "access": "public",
    "description": "0 <= x < 1 のDouble(52ビット)乱数",
    "lineNumber": 254,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 654,
    "kind": "method",
    "name": "nextGaussian",
    "memberof": "src/math/tools/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Random.mjs~Random#nextGaussian",
    "access": "public",
    "description": "平均値0、標準偏差1のガウシアン分布に基づく乱数",
    "lineNumber": 264,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 658,
    "kind": "file",
    "name": "src/math/tools/Signal.mjs",
    "content": "/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport Complex from \"../Complex.mjs\";\n\n// @ts-ignore\nimport Matrix from \"../Matrix.mjs\";\n\n/**\n * 高速フーリエ変換用クラス\n */\nclass FFT {\n\n\t/**\n\t * ビット反転\n\t * @param {number} x - ビット反転させる値（32ビット整数）\n\t * @returns {number} ビット反転した値\n\t */\n\tstatic bit_reverse_32(x) {\n\t\tlet y = x & 0xffffffff;\n\t\t// 1,2,4,8,16ビット単位で交換\n\t\ty = ((y & 0x55555555) << 1) | ((y >> 1) & 0x55555555);\n\t\ty = ((y & 0x33333333) << 2) | ((y >> 2) & 0x33333333);\n\t\ty = ((y & 0x0f0f0f0f) << 4) | ((y >> 4) & 0x0f0f0f0f);\n\t\ty = ((y & 0x00ff00ff) << 8) | ((y >> 8) & 0x00ff00ff);\n\t\ty = ((y & 0x0000ffff) << 16) | ((y >> 16) & 0x0000ffff);\n\t\treturn y;\n\t}\n\t\n\t/**\n\t * 指定したビット分の数値データをビット反転した配列を返す\n\t * @param {number} bit - ビット数\n\t * @returns {Array<number>} ビット反転した値の配列\n\t */\n\tstatic create_bit_reverse_table(bit) {\n\t\tconst size = 1 << bit;\n\t\tconst bitrv = [];\n\t\tfor(let i = 0; i < size; i++) {\n\t\t\tbitrv[i] = FFT.bit_reverse_32(i) >>> (32 - bit);\n\t\t}\n\t\treturn bitrv;\n\t}\n\n\t/**\n\t * FFTクラスの初期化\n\t * @param {number} size - 信号の長さ\n\t */\n\tconstructor(size) {\n\t\t\n\t\t/**\n\t\t * 信号の長さ\n\t\t */\n\t\tthis.size = size;\n\n\t\t/**\n\t\t * 信号の長さの逆数\n\t\t */\n\t\tthis.inv_size = 1.0 / this.size;\n\n\t\t/**\n\t\t * 信号の長さをビット数で表した場合の値\n\t\t */\n\t\tthis.bit_size = Math.round(Math.log(this.size)/Math.log(2));\n\n\t\t/**\n\t\t * FFTのアルゴリズムが使用できるか\n\t\t */\n\t\tthis.is_fast = (1 << this.bit_size) === this.size;\n\n\t\t/**\n\t\t * バタフライ演算用のビットリバーステーブル\n\t\t */\n\t\tthis.bitrv = null;\n\n\t\t/**\n\t\t * 複素数同士の掛け算に使用する実部テーブル\n\t\t */\n\t\tthis.fft_re = new Array(this.size);\n\t\t\n\t\t/**\n\t\t * 複素数同士の掛け算に使用する虚部テーブル\n\t\t */\n\t\tthis.fft_im = new Array(this.size);\n\t\t{\n\t\t\tconst delta = - 2.0 * Math.PI / this.size;\n\t\t\tlet err = 0.0;\n\t\t\tfor(let n = 0, x = 0; n < this.size; n++) {\n\t\t\t\tthis.fft_re[n] = Math.cos(x);\n\t\t\t\tthis.fft_im[n] = Math.sin(x);\n\t\t\t\t// カハンの加算アルゴリズム\n\t\t\t\tconst y = delta + err;\n\t\t\t\tconst t = x + y;\n\t\t\t\terr = t - x - y;\n\t\t\t\tx = t;\n\t\t\t}\n\t\t}\n\t\tif(this.is_fast) {\n\t\t\tthis.bitrv = FFT.create_bit_reverse_table(this.bit_size);\n\t\t}\n\t}\n\n\t/**\n\t * 中のデータを消去する\n\t */\n\tdelete() {\n\t\tdelete this.size;\n\t\tdelete this.inv_size;\n\t\tdelete this.bit_size;\n\t\tdelete this.is_fast;\n\t\tdelete this.bitrv;\n\t\tdelete this.fft_re;\n\t\tdelete this.fft_im;\n\t}\n\t\n\t/**\n\t * 離散フーリエ変換\n\t * @param {Array<number>} real - 実数部\n\t * @param {Array<number>} imag - 虚数部\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tfft(real, imag) {\n\t\tconst f_re = new Array(this.size);\n\t\tconst f_im = new Array(this.size);\n\t\tif(this.is_fast) {\n\t\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\t\tf_re[i] = real[this.bitrv[i]];\n\t\t\t\tf_im[i] = imag[this.bitrv[i]];\n\t\t\t}\n\t\t\t{\n\t\t\t\t// Fast Fourier Transform 時間間引き(前処理にビットリバース)\n\t\t\t\t// 段々ブロックが大きくなっていくタイプ。\n\t\t\t\tlet center = 1;\n\t\t\t\tlet blocklength = this.size / 2;\n\t\t\t\tlet pointlength = 2;\n\t\t\t\tfor(let delta = 1 << (this.bit_size - 1); delta > 0; delta >>= 1) {\n\t\t\t\t\tfor(let blocks = 0; blocks < blocklength; blocks++) {\n\t\t\t\t\t\tlet i = blocks * pointlength;\n\t\t\t\t\t\tfor(let point = 0, n = 0; point < center; point++, i++, n += delta) {\n\t\t\t\t\t\t\tconst re = f_re[i + center] * this.fft_re[n] - f_im[i + center] * this.fft_im[n];\n\t\t\t\t\t\t\tconst im = f_im[i + center] * this.fft_re[n] + f_re[i + center] * this.fft_im[n];\n\t\t\t\t\t\t\tf_re[i + center] = f_re[i] - re;\n\t\t\t\t\t\t\tf_im[i + center] = f_im[i] - im;\n\t\t\t\t\t\t\tf_re[i] += re;\n\t\t\t\t\t\t\tf_im[i] += im;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tblocklength /= 2;\n\t\t\t\t\tpointlength *= 2;\n\t\t\t\t\tcenter *= 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif(!SignalTool.isContainsZero(imag)) {\n\t\t\t\t// 実数部分のみのフーリエ変換\n\t\t\t\tfor(let t = 0; t < this.size; t++) {\n\t\t\t\t\tf_re[t] = 0.0;\n\t\t\t\t\tf_im[t] = 0.0;\n\t\t\t\t\tfor(let x = 0, n = 0; x < this.size; x++, n = (x * t) % this.size) {\n\t\t\t\t\t\tf_re[t] += real[x] * this.fft_re[n];\n\t\t\t\t\t\tf_im[t] += real[x] * this.fft_im[n];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// 実数部分と複素数部分のフーリエ変換\n\t\t\t\tfor(let t = 0; t < this.size; t++) {\n\t\t\t\t\tf_re[t] = 0.0;\n\t\t\t\t\tf_im[t] = 0.0;\n\t\t\t\t\tfor(let x = 0, n = 0; x < this.size; x++, n = (x * t) % this.size) {\n\t\t\t\t\t\tf_re[t] += real[x] * this.fft_re[n] - imag[x] * this.fft_im[n];\n\t\t\t\t\t\tf_im[t] += real[x] * this.fft_im[n] + imag[x] * this.fft_re[n];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\treal : f_re,\n\t\t\timag : f_im\n\t\t};\n\t}\n\n\t/**\n\t * 逆離散フーリエ変換\n\t * @param {Array} real - 実数部\n\t * @param {Array} imag - 虚数部\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tifft(real, imag) {\n\t\tconst f_re = new Array(this.size);\n\t\tconst f_im = new Array(this.size);\n\t\tif(this.is_fast) {\n\t\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\t\tf_re[i] = real[this.bitrv[i]];\n\t\t\t\tf_im[i] = imag[this.bitrv[i]];\n\t\t\t}\n\t\t\t{\n\t\t\t\t// Inverse Fast Fourier Transform 時間間引き(前処理にビットリバース)\n\t\t\t\t// 段々ブロックが大きくなっていくタイプ。\n\t\t\t\tlet center = 1;\n\t\t\t\tlet blocklength = this.size / 2;\n\t\t\t\tlet pointlength = 2;\n\t\t\t\tlet re, im;\n\t\t\t\tfor(let delta = 1 << (this.bit_size - 1); delta > 0; delta >>= 1) {\n\t\t\t\t\tfor(let blocks = 0; blocks < blocklength; blocks++) {\n\t\t\t\t\t\tlet i = blocks * pointlength;\n\t\t\t\t\t\tfor(let point = 0, n = 0; point < center; point++, i++, n += delta) {\n\t\t\t\t\t\t\tre = f_re[i + center] * this.fft_re[n] + f_im[i + center] * this.fft_im[n];\n\t\t\t\t\t\t\tim = f_im[i + center] * this.fft_re[n] - f_re[i + center] * this.fft_im[n];\n\t\t\t\t\t\t\tf_re[i + center] = f_re[i] - re;\n\t\t\t\t\t\t\tf_im[i + center] = f_im[i] - im;\n\t\t\t\t\t\t\tf_re[i] += re;\n\t\t\t\t\t\t\tf_im[i] += im;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tblocklength /= 2;\n\t\t\t\t\tpointlength *= 2;\n\t\t\t\t\tcenter *= 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif(!SignalTool.isContainsZero(imag)) {\n\t\t\t\t// 実数部分のみの逆フーリエ変換\n\t\t\t\tfor(let x = 0; x < this.size; x++) {\n\t\t\t\t\tf_re[x] = 0.0;\n\t\t\t\t\tf_im[x] = 0.0;\n\t\t\t\t\tfor(let t = 0, n = 0; t < this.size; t++, n = (x * t) % this.size) {\n\t\t\t\t\t\tf_re[x] +=   real[t] * this.fft_re[n];\n\t\t\t\t\t\tf_im[x] += - real[t] * this.fft_im[n];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// 実数部分と複素数部分の逆フーリエ変換\n\t\t\t\tfor(let x = 0; x < this.size; x++) {\n\t\t\t\t\tf_re[x] = 0.0;\n\t\t\t\t\tf_im[x] = 0.0;\n\t\t\t\t\tfor(let t = 0, n = 0; t < this.size; t++, n = (x * t) % this.size) {\n\t\t\t\t\t\tf_re[x] +=   real[t] * this.fft_re[n] + imag[t] * this.fft_im[n];\n\t\t\t\t\t\tf_im[x] += - real[t] * this.fft_im[n] + imag[t] * this.fft_re[n];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\tf_re[i] *= this.inv_size;\n\t\t\tf_im[i] *= this.inv_size;\n\t\t}\n\t\treturn {\n\t\t\treal : f_re,\n\t\t\timag : f_im\n\t\t};\n\t}\n}\n\n/**\n * 簡易キャッシュクラス\n * FFTで用いるテーブルなどをキャッシュ\n */\nclass Chash {\n\t\n\t/**\n\t * 簡易キャッシュ\n\t * @param {number} chash_size - キャッシュの最大サイズ\n\t * @param {*} object - 作成するオブジェクト\n\t */\n\tconstructor(chash_size, object) {\n\n\t\t/**\n\t\t * キャッシュするクラス\n\t\t */\n\t\tthis.object = object;\n\n\t\t/**\n\t\t * キャッシュする最大数\n\t\t */\n\t\tthis.table_max = chash_size;\n\n\t\t/**\n\t\t * 現在キャッシュしている数\n\t\t */\n\t\tthis.table_size = 0;\n\n\t\t/**\n\t\t * キャッシュテーブル\n\t\t */\n\t\tthis.table = [];\n\t}\n\n\t/**\n\t * 指定した長さのデータを作成する。キャッシュに存在すればキャッシュから使用する。\n\t * @param {number} size - 作成するオブジェクトのサイズ\n\t * @returns {*}\n\t */\n\tget(size) {\n\t\tfor(let index = 0; index < this.table_size; index++) {\n\t\t\tif(this.table[index].size === size) {\n\t\t\t\t// 先頭にもってくる\n\t\t\t\tconst object = this.table.splice(index, 1);\n\t\t\t\tthis.table.unshift(object);\n\t\t\t\treturn object;\n\t\t\t}\n\t\t}\n\t\tconst new_object = new this.object(size);\n\t\tif(this.table_size === this.table_max) {\n\t\t\t// 後ろのデータを消去\n\t\t\tconst delete_object = this.table.pop();\n\t\t\tdelete_object.delete();\n\t\t}\n\t\t// 前方に追加\n\t\tthis.table.unshift(new_object);\n\t\treturn new_object;\n\t}\n\n}\n\n/**\n * FFT用のキャッシュ\n */\nconst fft_chash = new Chash(4, FFT);\n\n/**\n * 離散コサイン変換のクラス\n */\nclass DCT {\n\t\n\t/**\n\t * DCTクラスの初期化\n\t * @param {number} size - 信号の長さ\n\t */\n\tconstructor(size) {\n\n\t\t/**\n\t\t * 信号長\n\t\t */\n\t\tthis.size = size;\n\n\t\t/**\n\t\t * 信号長の2倍\n\t\t * DCT変換では、実際の信号にゼロ詰めした2倍の信号長を用意しそれに対してFFTを行う。\n\t\t */\n\t\tthis.dct_size = size * 2;\n\n\t\t/**\n\t\t * DCT変換に使用する計算用テーブル\n\t\t */\n\t\tthis.dct_re = new Array(this.size);\n\n\t\t/**\n\t\t * DCT変換に使用する計算用テーブル\n\t\t */\n\t\tthis.dct_im = new Array(this.size);\n\t\t{\n\t\t\tconst x_0 = 1.0 / Math.sqrt(this.size);\n\t\t\tconst x_n = x_0 * Math.sqrt(2);\n\t\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\t\tconst x = - Math.PI * i / this.dct_size;\n\t\t\t\tthis.dct_re[i] = Math.cos(x) * (i === 0 ? x_0 : x_n);\n\t\t\t\tthis.dct_im[i] = Math.sin(x) * (i === 0 ? x_0 : x_n);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * 中のデータを消去する\n\t */\n\tdelete() {\n\t\tdelete this.size;\n\t\tdelete this.dct_size;\n\t\tdelete this.dct_re;\n\t\tdelete this.dct_im;\n\t}\n\n\t/**\n\t * DCT-II\n\t * @param {Array<number>} real - 実数部\n\t * @returns {Array<number>}\n\t */\n\tdct(real) {\n\t\tconst re = new Array(this.dct_size);\n\t\tconst im = new Array(this.dct_size);\n\t\tfor(let i = 0; i < this.dct_size; i++) {\n\t\t\tre[i] = i < this.size ? real[i] : 0.0;\n\t\t\tim[i] = 0.0;\n\t\t}\n\t\tconst fft = fft_chash.get(this.dct_size).fft(re, im);\n\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\tre[i] = fft.real[i] * this.dct_re[i] - fft.imag[i] * this.dct_im[i];\n\t\t}\n\t\tre.splice(this.size);\n\t\treturn re;\n\t}\n\n\t/**\n\t * DCT-III (IDCT)\n\t * @param {Array<number>} real - 実数部\n\t * @returns {Array<number>}\n\t */\n\tidct(real) {\n\t\tconst re = new Array(this.dct_size);\n\t\tconst im = new Array(this.dct_size);\n\t\tconst denormlize = this.size * 2.0;\n\t\tfor(let i = 0; i < this.dct_size; i++) {\n\t\t\tre[i] = i < this.size ? (denormlize * real[i] *    this.dct_re[i])  : 0.0;\n\t\t\tim[i] = i < this.size ? (denormlize * real[i] * (- this.dct_im[i])) : 0.0;\n\t\t}\n\t\tconst ifft = fft_chash.get(this.dct_size).ifft(re, im);\n\t\tifft.real.splice(this.size);\n\t\treturn ifft.real;\n\t}\n\t\n}\n\n/**\n * 離散コサイン変換用のキャッシュ\n */\nconst dct_chash = new Chash(4, DCT);\n\n/**\n * Signalクラスの内部で使用する関数集\n */\nclass SignalTool {\n\t\n\t/**\n\t * 0が含まれるか\n\t * @param {Array<number>} x - 調べたい配列\n\t * @returns {boolean}\n\t */\n\tstatic isContainsZero(x) {\n\t\tfor(let i = 0; i < x.length; i++) {\n\t\t\tif(x[i] !== 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * 離散フーリエ変換\n\t * @param {Array<number>} real - 実数部\n\t * @param {Array<number>} imag - 虚数部\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tstatic fft(real, imag) {\n\t\tconst obj = fft_chash.get(real.length);\n\t\treturn obj.fft(real, imag);\n\t}\n\n\t/**\n\t * 逆離散フーリエ変換\n\t * @param {Array<number>} real - 実数部\n\t * @param {Array<number>} imag - 虚数部\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tstatic ifft(real, imag) {\n\t\tconst obj = fft_chash.get(real.length);\n\t\treturn obj.ifft(real, imag);\n\t}\n\n\t/**\n\t * DCT-II (DCT)\n\t * @param {Array<number>} real - 実数部\n\t * @returns {Array<number>}\n\t */\n\tstatic dct(real) {\n\t\tconst obj = dct_chash.get(real.length);\n\t\treturn obj.dct(real);\n\t}\n\n\t/**\n\t * DCT-III (IDCT)\n\t * @param {Array<number>} real - 実数部\n\t * @returns {Array<number>}\n\t */\n\tstatic idct(real) {\n\t\tconst obj = dct_chash.get(real.length);\n\t\treturn obj.idct(real);\n\t}\n\n\t/**\n\t * パワースペクトル密度\n\t * @param {Array<number>} real - 実数部\n\t * @param {Array<number>} imag - 虚数部\n\t * @returns {Array<number>}\n\t */\n\tstatic powerfft(real, imag) {\n\t\tconst size = real.length;\n\t\tconst X = SignalTool.fft(real, imag);\n\t\tconst power = new Array(size);\n\t\tfor(let i = 0; i < size; i++) {\n\t\t\tpower[i] = X.real[i] * X.real[i] + X.imag[i] * X.imag[i];\n\t\t}\n\t\treturn power;\n\t}\n\n\t/**\n\t * 畳み込み積分、多項式乗算\n\t * @param {Array} x1_real - 実数部\n\t * @param {Array} x1_imag - 虚数部\n\t * @param {Array} x2_real - 実数部\n\t * @param {Array} x2_imag - 虚数部\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tstatic conv(x1_real, x1_imag, x2_real, x2_imag) {\n\t\tlet is_self = false;\n\t\tif(x1_real.length === x2_real.length) {\n\t\t\tis_self = true;\n\t\t\tfor(let i = 0; i < x1_real.length;i++) {\n\t\t\t\tif((x1_real[i] !== x2_real[i]) || (x1_imag[i] !== x2_imag[i])) {\n\t\t\t\t\tis_self = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst size = x1_real.length;\n\t\tconst N2 = size * 2;\n\t\tconst bit_size = Math.round(Math.log(size)/Math.log(2));\n\t\tconst is_fast = (1 << bit_size) === size;\n\t\tif(is_fast) {\n\t\t\t// FFTを用いた手法へ切り替え\n\t\t\t// 周波数空間上では掛け算になる\n\t\t\tif(is_self) {\n\t\t\t\tconst size = x1_real.length;\n\t\t\t\tconst real = new Array(N2);\n\t\t\t\tconst imag = new Array(N2);\n\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\treal[i] = i < size ? x1_real[i] : 0.0;\n\t\t\t\t\timag[i] = i < size ? x1_imag[i] : 0.0;\n\t\t\t\t}\n\t\t\t\tconst X = SignalTool.fft(real, imag);\n\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\treal[i] = X.real[i] * X.real[i] - X.imag[i] * X.imag[i];\n\t\t\t\t\timag[i] = X.real[i] * X.imag[i] + X.imag[i] * X.real[i];\n\t\t\t\t}\n\t\t\t\tconst x = SignalTool.ifft(real, imag);\n\t\t\t\tx.real.splice(N2 - 1);\n\t\t\t\tx.imag.splice(N2 - 1);\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\telse if(x1_real.length === x2_real.length) {\n\t\t\t\tconst size = x1_real.length;\n\t\t\t\tconst real1 = new Array(N2);\n\t\t\t\tconst imag1 = new Array(N2);\n\t\t\t\tconst real2 = new Array(N2);\n\t\t\t\tconst imag2 = new Array(N2);\n\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\treal1[i] = i < size ? x1_real[i] : 0.0;\n\t\t\t\t\timag1[i] = i < size ? x1_imag[i] : 0.0;\n\t\t\t\t\treal2[i] = i < size ? x2_real[i] : 0.0;\n\t\t\t\t\timag2[i] = i < size ? x2_imag[i] : 0.0;\n\t\t\t\t}\n\t\t\t\tconst F = SignalTool.fft(real1, imag1);\n\t\t\t\tconst G = SignalTool.fft(real2, imag2);\n\t\t\t\tconst real = new Array(N2);\n\t\t\t\tconst imag = new Array(N2);\n\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\treal[i] = F.real[i] * G.real[i] - F.imag[i] * G.imag[i];\n\t\t\t\t\timag[i] = F.real[i] * G.imag[i] + F.imag[i] * G.real[i];\n\t\t\t\t}\n\t\t\t\tconst fg = SignalTool.ifft(real, imag);\n\t\t\t\tfg.real.splice(N2 - 1);\n\t\t\t\tfg.imag.splice(N2 - 1);\n\t\t\t\treturn fg;\n\t\t\t}\n\t\t}\n\t\tlet is_real_number = !SignalTool.isContainsZero(x1_imag);\n\t\tif(is_real_number) {\n\t\t\tis_real_number = !SignalTool.isContainsZero(x2_imag);\n\t\t}\n\t\t{\n\t\t\t// まじめに計算する\n\t\t\tconst real = new Array(x1_real.length + x2_real.length - 1);\n\t\t\tconst imag = new Array(x1_real.length + x2_real.length - 1);\n\t\t\tfor(let i = 0; i < real.length; i++) {\n\t\t\t\treal[i] = 0;\n\t\t\t\timag[i] = 0;\n\t\t\t}\n\t\t\tif(is_real_number) {\n\t\t\t\t// 実数部分のみの畳み込み積分\n\t\t\t\t// スライドさせていく\n\t\t\t\t// AAAA\n\t\t\t\t//  BBBB\n\t\t\t\t//   CCCC\n\t\t\t\tfor(let y = 0; y < x2_real.length; y++) {\n\t\t\t\t\tfor(let x = 0; x < x1_real.length; x++) {\n\t\t\t\t\t\treal[y + x] += x1_real[x] * x2_real[y];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// 実数部分と複素数部分の畳み込み積分\n\t\t\t\tfor(let y = 0; y < x2_real.length; y++) {\n\t\t\t\t\tfor(let x = 0; x < x1_real.length; x++) {\n\t\t\t\t\t\treal[y + x] += x1_real[x] * x2_real[y] - x1_imag[x] * x2_imag[y];\n\t\t\t\t\t\timag[y + x] += x1_real[x] * x2_imag[y] + x1_imag[x] * x2_real[y];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\treal : real,\n\t\t\t\timag : imag\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * 自己相関関数、相互相関関数\n\t * @param {Array} x1_real - 実数部\n\t * @param {Array} x1_imag - 虚数部\n\t * @param {Array} x2_real - 実数部\n\t * @param {Array} x2_imag - 虚数部\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tstatic xcorr(x1_real, x1_imag, x2_real, x2_imag) {\n\t\tlet is_self = false;\n\t\tif(x1_real.length === x2_real.length) {\n\t\t\tis_self = true;\n\t\t\tfor(let i = 0; i < x1_real.length;i++) {\n\t\t\t\tif((x1_real[i] !== x2_real[i]) || (x1_imag[i] !== x2_imag[i])) {\n\t\t\t\t\tis_self = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(x1_real.length === x2_real.length) {\n\t\t\tconst size = x1_real.length;\n\t\t\tconst N2 = size * 2;\n\t\t\tconst bit_size = Math.round(Math.log(size)/Math.log(2));\n\t\t\tconst is_fast = (1 << bit_size) === size;\n\t\t\tif(is_fast) {\n\t\t\t\tlet fg = null;\n\t\t\t\tif(is_self) {\n\t\t\t\t\tconst real = new Array(N2);\n\t\t\t\t\tconst imag = new Array(N2);\n\t\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\t\treal[i] = i < size ? x1_real[i] : 0.0;\n\t\t\t\t\t\timag[i] = i < size ? x1_imag[i] : 0.0;\n\t\t\t\t\t}\n\t\t\t\t\t// パワースペクトル密度は、自己相関のフーリエ変換のため、\n\t\t\t\t\t// パワースペクトル密度の逆変換で求められる。\n\t\t\t\t\tconst power = SignalTool.powerfft(real, imag);\n\t\t\t\t\tfg = SignalTool.ifft(power, imag);\n\t\t\t\t\t// シフト\n\t\t\t\t\treal.pop();\n\t\t\t\t\timag.pop();\n\t\t\t\t\tfor(let i = 0, j = size + 1 ; i < real.length; i++, j++) {\n\t\t\t\t\t\tif(N2 <= j) {\n\t\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treal[i] = fg.real[j];\n\t\t\t\t\t\timag[i] = fg.imag[j];\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\treal : real,\n\t\t\t\t\t\timag : imag\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst f_real = new Array(N2);\n\t\t\t\t\tconst f_imag = new Array(N2);\n\t\t\t\t\tconst g_real = new Array(N2);\n\t\t\t\t\tconst g_imag = new Array(N2);\n\t\t\t\t\t// gの順序を反転かつ共役複素数にする\n\t\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\t\tf_real[i] = i < size ?   x1_real[i] : 0.0;\n\t\t\t\t\t\tf_imag[i] = i < size ?   x1_imag[i] : 0.0;\n\t\t\t\t\t\tg_real[i] = i < size ?   x2_real[size - i - 1] : 0.0;\n\t\t\t\t\t\tg_imag[i] = i < size ? - x2_imag[size - i - 1] : 0.0;\n\t\t\t\t\t}\n\t\t\t\t\t// 畳み込み掛け算\n\t\t\t\t\tconst F = SignalTool.fft(f_real, f_imag);\n\t\t\t\t\tconst G = SignalTool.fft(g_real, g_imag);\n\t\t\t\t\tconst real = new Array(N2);\n\t\t\t\t\tconst imag = new Array(N2);\n\t\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\t\treal[i] = F.real[i] * G.real[i] - F.imag[i] * G.imag[i];\n\t\t\t\t\t\timag[i] = F.real[i] * G.imag[i] + F.imag[i] * G.real[i];\n\t\t\t\t\t}\n\t\t\t\t\tfg = SignalTool.ifft(real, imag);\n\t\t\t\t\tfg.real.splice(N2 - 1);\n\t\t\t\t\tfg.imag.splice(N2 - 1);\n\t\t\t\t\treturn fg;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet is_real_number = !SignalTool.isContainsZero(x1_imag);\n\t\tif(is_real_number) {\n\t\t\tis_real_number = !SignalTool.isContainsZero(x2_imag);\n\t\t}\n\t\tif(is_self) {\n\t\t\tconst size = x1_real.length;\n\t\t\tconst N2 = size * 2;\n\t\t\t// 実数の自己相関関数\n\t\t\tif(is_real_number) {\n\t\t\t\tconst fg = new Array(size);\n\t\t\t\tfor(let m = 0; m < size; m++) {\n\t\t\t\t\tfg[m] = 0;\n\t\t\t\t\tconst tmax = size - m;\n\t\t\t\t\tfor(let t = 0; t < tmax; t++) {\n\t\t\t\t\t\tfg[m] += x1_real[t] * x2_real[t + m];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 半分の値は同一なので折り返して計算を省く\n\t\t\t\tconst real = new Array(N2 - 1);\n\t\t\t\tconst imag = new Array(N2 - 1);\n\t\t\t\tfor(let i = 0, j = size - 1 ; i < size; i++, j--) {\n\t\t\t\t\treal[i] = fg[j];\n\t\t\t\t\treal[size + i - 1] = fg[i];\n\t\t\t\t}\n\t\t\t\tfor(let i = 0; i < imag.length; i++) {\n\t\t\t\t\timag[i] = 0.0;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\treal : real,\n\t\t\t\t\timag : imag\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t// 2つの信号の長さが違う、又は2の累乗の長さではない別のデータの場合は通常計算\n\t\t{\n\t\t\tconst g_real = new Array(x2_real.length);\n\t\t\tconst g_imag = new Array(x2_real.length);\n\t\t\t// gの順序を反転かつ共役複素数にする\n\t\t\tfor(let i = 0; i < x2_real.length; i++) {\n\t\t\t\tg_real[i] =   x2_real[x2_real.length - i - 1];\n\t\t\t\tg_imag[i] = - x2_imag[x2_real.length - i - 1];\n\t\t\t}\n\t\t\tconst y = SignalTool.conv(x1_real, x1_imag, g_real, g_imag);\n\t\t\tif(x1_real.length === x2_real.length) {\n\t\t\t\treturn y;\n\t\t\t}\n\t\t\tconst delta = Math.abs(x1_real.length - x2_real.length);\n\t\t\tconst zeros = new Array(delta);\n\t\t\tfor(let i = 0; i < delta; i++) {\n\t\t\t\tzeros[i] = 0;\n\t\t\t}\n\t\t\tif(x1_real.length > x2_real.length) {\n\t\t\t\t// データの最初に「0」を加える\n\t\t\t\treturn {\n\t\t\t\t\treal : zeros.concat(y.real),\n\t\t\t\t\timag : zeros.concat(y.imag)\n\t\t\t\t};\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// データの最後に「0」を加える\n\t\t\t\treturn {\n\t\t\t\t\treal : y.real.concat(zeros),\n\t\t\t\t\timag : y.imag.concat(zeros)\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 窓を作成する\n\t * @param {string} name - 窓関数の名前\n\t * @param {number} size - 長さ\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\", 1/\"periodic\"\n\t * @returns {Array<number>}\n\t */\n\tstatic window(name, size, periodic) {\n\t\tconst periodic_ = periodic !== undefined ? periodic : \"symmetric\";\n\t\tconst name_ = name.toLocaleLowerCase();\n\t\tconst size_ = size;\n\t\tconst window = new Array(size_);\n\t\t\n\t\tlet normalzie;\n\t\tif((periodic_ === \"symmetric\") || (periodic_ === 0)) {\n\t\t\tnormalzie = function(y) {\n\t\t\t\treturn (y / (size_ - 1) * (Math.PI * 2.0));\n\t\t\t};\n\t\t}\n\t\telse if((periodic_ === \"periodic\") || (periodic_ !== 0)) {\n\t\t\tnormalzie = function(y) {\n\t\t\t\treturn (y / size_ * (Math.PI * 2.0));\n\t\t\t};\n\t\t}\n\n\t\tconst setBlackmanWindow = function( alpha0, alpha1, alpha2, alpha3, alpha4) {\n\t\t\tfor(let i = 0; i < size_; i++) {\n\t\t\t\twindow[i]  = alpha0;\n\t\t\t\twindow[i] -= alpha1 * Math.cos(1.0 * normalzie(i));\n\t\t\t\twindow[i] += alpha2 * Math.cos(2.0 * normalzie(i));\n\t\t\t\twindow[i] -= alpha3 * Math.cos(3.0 * normalzie(i));\n\t\t\t\twindow[i] += alpha4 * Math.cos(4.0 * normalzie(i));\n\t\t\t}\n\t\t};\n\n\t\tswitch(name_) {\n\t\t\t// rect 矩形窓(rectangular window)\n\t\t\tcase \"rectangle\":\n\t\t\t\tsetBlackmanWindow(1.0, 0.0, 0.0, 0.0, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// hann ハン窓・ハニング窓(hann/hanning window)\n\t\t\tcase \"hann\":\n\t\t\t\tsetBlackmanWindow(0.5, 0.5, 0.0, 0.0, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// hamming ハミング窓(hamming window)\n\t\t\tcase \"hamming\":\n\t\t\t\tsetBlackmanWindow(0.54, 0.46, 0.0, 0.0, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// blackman ブラックマン窓(Blackman window)\n\t\t\tcase \"blackman\":\n\t\t\t\tsetBlackmanWindow(0.42, 0.50, 0.08, 0.0, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// blackmanharris Blackman-Harris window\n\t\t\tcase \"blackmanharris\":\n\t\t\t\tsetBlackmanWindow(0.35875, 0.48829, 0.14128, 0.01168, 0);\n\t\t\t\tbreak;\n\n\t\t\t// blackmannuttall Blackman-Nuttall window\n\t\t\tcase \"blackmannuttall\":\n\t\t\t\tsetBlackmanWindow(0.3635819, 0.4891775, 0.1365995, 0.0106411, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// flattop Flat top window\n\t\t\tcase \"flattop\":\n\t\t\t\tsetBlackmanWindow(1.0, 1.93, 1.29, 0.388, 0.032);\n\t\t\t\tbreak;\n\n\t\t\t// Half cycle sine window(MDCT窓)\n\t\t\tcase \"sin\":\n\t\t\t\tfor(let i = 0; i < size_; i++) {\n\t\t\t\t\twindow[i]  = Math.sin(normalzie(i) * 0.5);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t// Vorbis window(MDCT窓)\n\t\t\tcase \"vorbis\":\n\t\t\t\tfor(let i = 0; i < size_; i++) {\n\t\t\t\t\tconst x = Math.sin(normalzie(i) * 0.5);\n\t\t\t\t\twindow[i]  = Math.sin(Math.PI * 0.5 * x * x);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn window;\n\t}\n\n\t/**\n\t * ハニング窓\n\t * @param {number} size - 長さ\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\", 1/\"periodic\"\n\t * @returns {Array<number>}\n\t */\n\tstatic hann(size, periodic) {\n\t\treturn SignalTool.window(\"hann\", size, periodic);\n\t}\n\t\n\t/**\n\t * ハミング窓を作成\n\t * @param {number} size - 長さ\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\", 1/\"periodic\"\n\t * @returns {Array<number>}\n\t */\n\tstatic hamming(size, periodic) {\n\t\treturn SignalTool.window(\"hamming\", size, periodic);\n\t}\n\t\n}\n\n/**\n * Matrix用の信号処理用の計算クラス\n */\nexport default class Signal {\n\t\n\t/**\n\t * 離散フーリエ変換\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix} fft(x)\n\t */\n\tstatic fft(x, type) {\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Matrix._toMatrix(x);\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tconst imag = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t\timag[i] = data[i].imag;\n\t\t\t}\n\t\t\tconst result = SignalTool.fft(real, imag);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex([result.real[i], result.imag[i]]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn M.eachVector(main, dim);\n\t}\n\n\t/**\n\t * 逆離散フーリエ変換\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} X\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix} ifft(X)\n\t */\n\tstatic ifft(X, type) {\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Matrix._toMatrix(X);\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tconst imag = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t\timag[i] = data[i].imag;\n\t\t\t}\n\t\t\tconst result = SignalTool.ifft(real, imag);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex([result.real[i], result.imag[i]]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn M.eachVector(main, dim);\n\t}\n\n\t/**\n\t * パワースペクトル密度\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix} abs(fft(x)).^2\n\t */\n\tstatic powerfft(x, type) {\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Matrix._toMatrix(x);\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tconst imag = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t\timag[i] = data[i].imag;\n\t\t\t}\n\t\t\tconst result = SignalTool.powerfft(real, imag);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex(result[i]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn M.eachVector(main, dim);\n\t}\n\n\t/**\n\t * 離散コサイン変換\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix} dct(x)\n\t */\n\tstatic dct(x, type) {\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Matrix._toMatrix(x);\n\t\tif(M.isComplex()) {\n\t\t\tthrow \"dct don't support complex numbers.\";\n\t\t}\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t}\n\t\t\tconst result = SignalTool.dct(real);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex(result[i]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn M.eachVector(main, dim);\n\t}\n\n\t/**\n\t * 逆離散コサイン変換\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} X\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix} idct(x)\n\t */\n\tstatic idct(X, type) {\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Matrix._toMatrix(X);\n\t\tif(M.isComplex()) {\n\t\t\tthrow \"idct don't support complex numbers.\";\n\t\t}\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t}\n\t\t\tconst result = SignalTool.idct(real);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex(result[i]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn M.eachVector(main, dim);\n\t}\n\n\t/**\n\t * 2次元の離散フーリエ変換\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @returns {Matrix}\n\t */\n\tstatic fft2(x) {\n\t\treturn Signal.fft(x, {dimension : \"both\"});\n\t}\n\n\t/**\n\t * 2次元の逆離散フーリエ変換\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} X\n\t * @returns {Matrix}\n\t */\n\tstatic ifft2(X) {\n\t\treturn Signal.ifft(X, {dimension : \"both\"});\n\t}\n\n\t/**\n\t * 2次元のDCT変換\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @returns {Matrix}\n\t */\n\tstatic dct2(x) {\n\t\treturn Signal.dct(x, {dimension : \"both\"});\n\t}\n\n\t/**\n\t * 2次元の逆DCT変換\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} X\n\t * @returns {Matrix}\n\t */\n\tstatic idct2(X) {\n\t\treturn Signal.idct(X, {dimension : \"both\"});\n\t}\n\n\t/**\n\t * 畳み込み積分、多項式乗算\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x1\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x2\n\t * @returns {Matrix}\n\t */\n\tstatic conv(x1, x2) {\n\t\tconst M1 = Matrix._toMatrix(x1);\n\t\tconst M2 = Matrix._toMatrix(x2);\n\t\tif(M1.isMatrix() || M2.isMatrix()) {\n\t\t\tthrow \"conv don't support matrix numbers.\";\n\t\t}\n\t\tconst M1_real = new Array(M1.length);\n\t\tconst M1_imag = new Array(M1.length);\n\t\tconst M2_real = new Array(M2.length);\n\t\tconst M2_imag = new Array(M2.length);\n\t\tif(M1.isRow()) {\n\t\t\tfor(let i = 0; i < M1.column_length; i++) {\n\t\t\t\tM1_real[i] = M1.matrix_array[0][i].real;\n\t\t\t\tM1_imag[i] = M1.matrix_array[0][i].imag;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor(let i = 0; i < M1.row_length; i++) {\n\t\t\t\tM1_real[i] = M1.matrix_array[i][0].real;\n\t\t\t\tM1_imag[i] = M1.matrix_array[i][0].imag;\n\t\t\t}\n\t\t}\n\t\tif(M2.isRow()) {\n\t\t\tfor(let i = 0; i < M2.column_length; i++) {\n\t\t\t\tM2_real[i] = M2.matrix_array[0][i].real;\n\t\t\t\tM2_imag[i] = M2.matrix_array[0][i].imag;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor(let i = 0; i < M2.row_length; i++) {\n\t\t\t\tM2_real[i] = M2.matrix_array[i][0].real;\n\t\t\t\tM2_imag[i] = M2.matrix_array[i][0].imag;\n\t\t\t}\n\t\t}\n\t\tconst y = SignalTool.conv(M1_real, M1_imag, M2_real, M2_imag);\n\t\tconst m = new Array(y.real.length);\n\t\tfor(let i = 0; i < y.real.length; i++) {\n\t\t\tm[i] = new Complex([y.real[i], y.imag[i]]);\n\t\t}\n\t\tconst M = new Matrix([m]);\n\t\treturn M2.isRow() ? M : M.transpose();\n\t}\n\n\t/**\n\t * 自己相関関数、相互相関関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x1\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [x2] - 省略した場合は自己相関関数\n\t * @returns {Matrix}\n\t */\n\tstatic xcorr(x1, x2) {\n\t\tconst M1 = Matrix._toMatrix(x1);\n\t\tif(!x2) {\n\t\t\treturn M1.xcorr(M1);\n\t\t}\n\t\tconst M2 = Matrix._toMatrix(x2);\n\t\tif(M1.isMatrix() || M2.isMatrix()) {\n\t\t\tthrow \"conv don't support matrix numbers.\";\n\t\t}\n\t\tconst M1_real = new Array(M1.length);\n\t\tconst M1_imag = new Array(M1.length);\n\t\tconst M2_real = new Array(M2.length);\n\t\tconst M2_imag = new Array(M2.length);\n\t\tif(M1.isRow()) {\n\t\t\tfor(let i = 0; i < M1.column_length; i++) {\n\t\t\t\tM1_real[i] = M1.matrix_array[0][i].real;\n\t\t\t\tM1_imag[i] = M1.matrix_array[0][i].imag;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor(let i = 0; i < M1.row_length; i++) {\n\t\t\t\tM1_real[i] = M1.matrix_array[i][0].real;\n\t\t\t\tM1_imag[i] = M1.matrix_array[i][0].imag;\n\t\t\t}\n\t\t}\n\t\tif(M2.isRow()) {\n\t\t\tfor(let i = 0; i < M2.column_length; i++) {\n\t\t\t\tM2_real[i] = M2.matrix_array[0][i].real;\n\t\t\t\tM2_imag[i] = M2.matrix_array[0][i].imag;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor(let i = 0; i < M2.row_length; i++) {\n\t\t\t\tM2_real[i] = M2.matrix_array[i][0].real;\n\t\t\t\tM2_imag[i] = M2.matrix_array[i][0].imag;\n\t\t\t}\n\t\t}\n\t\tconst y = SignalTool.xcorr(M1_real, M1_imag, M2_real, M2_imag);\n\t\tconst m = new Array(y.real.length);\n\t\tfor(let i = 0; i < y.real.length; i++) {\n\t\t\tm[i] = new Complex([y.real[i], y.imag[i]]);\n\t\t}\n\t\tconst M = new Matrix([m]);\n\t\treturn M1.isRow() ? M : M.transpose();\n\t}\n\n\t/**\n\t * 窓関数\n\t * @param {string} name - 窓関数の名前\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} size - 長さ\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\", 1/\"periodic\"\n\t * @returns {Matrix} 列ベクトル\n\t */\n\tstatic window(name, size, periodic) {\n\t\tconst size_ = Matrix._toInteger(size);\n\t\tconst y = SignalTool.window(name, size_, periodic);\n\t\treturn (new Matrix(y)).transpose();\n\t}\n\n\t/**\n\t * ハニング窓\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} size - 長さ\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\", 1/\"periodic\"\n\t * @returns {Matrix} 列ベクトル\n\t */\n\tstatic hann(size, periodic) {\n\t\treturn Signal.window(\"hann\", size, periodic);\n\t}\n\t\n\t/**\n\t * ハミング窓\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} size - 長さ\n\t * @param {string|number} [periodic=\"symmetric\"] - 0/\"symmetric\", 1/\"periodic\"\n\t * @returns {Matrix} 列ベクトル\n\t */\n\tstatic hamming(size, periodic) {\n\t\treturn Signal.window(\"hamming\", size, periodic);\n\t}\n\t\n\t\n}",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/tools/Signal.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 659,
    "kind": "class",
    "name": "FFT",
    "memberof": "src/math/tools/Signal.mjs",
    "static": true,
    "longname": "src/math/tools/Signal.mjs~FFT",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Signal.mjs",
    "importStyle": null,
    "description": "高速フーリエ変換用クラス",
    "lineNumber": 21,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 660,
    "kind": "method",
    "name": "bit_reverse_32",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~FFT.bit_reverse_32",
    "access": "public",
    "description": "ビット反転",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} ビット反転した値"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "ビット反転させる値（32ビット整数）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "ビット反転した値"
    }
  },
  {
    "__docId__": 661,
    "kind": "method",
    "name": "create_bit_reverse_table",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~FFT.create_bit_reverse_table",
    "access": "public",
    "description": "指定したビット分の数値データをビット反転した配列を返す",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} ビット反転した値の配列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": "ビット数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "ビット反転した値の配列"
    }
  },
  {
    "__docId__": 662,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#constructor",
    "access": "public",
    "description": "FFTクラスの初期化",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "信号の長さ"
      }
    ]
  },
  {
    "__docId__": 663,
    "kind": "member",
    "name": "size",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#size",
    "access": "public",
    "description": "信号の長さ",
    "lineNumber": 62,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 664,
    "kind": "member",
    "name": "inv_size",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#inv_size",
    "access": "public",
    "description": "信号の長さの逆数",
    "lineNumber": 67,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 665,
    "kind": "member",
    "name": "bit_size",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#bit_size",
    "access": "public",
    "description": "信号の長さをビット数で表した場合の値",
    "lineNumber": 72,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 666,
    "kind": "member",
    "name": "is_fast",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#is_fast",
    "access": "public",
    "description": "FFTのアルゴリズムが使用できるか",
    "lineNumber": 77,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 667,
    "kind": "member",
    "name": "bitrv",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#bitrv",
    "access": "public",
    "description": "バタフライ演算用のビットリバーステーブル",
    "lineNumber": 82,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 668,
    "kind": "member",
    "name": "fft_re",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#fft_re",
    "access": "public",
    "description": "複素数同士の掛け算に使用する実部テーブル",
    "lineNumber": 87,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 669,
    "kind": "member",
    "name": "fft_im",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#fft_im",
    "access": "public",
    "description": "複素数同士の掛け算に使用する虚部テーブル",
    "lineNumber": 92,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 671,
    "kind": "method",
    "name": "delete",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#delete",
    "access": "public",
    "description": "中のデータを消去する",
    "lineNumber": 114,
    "params": [],
    "return": null
  },
  {
    "__docId__": 672,
    "kind": "method",
    "name": "fft",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#fft",
    "access": "public",
    "description": "離散フーリエ変換",
    "lineNumber": 130,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "実数部"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "虚数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 673,
    "kind": "method",
    "name": "ifft",
    "memberof": "src/math/tools/Signal.mjs~FFT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~FFT#ifft",
    "access": "public",
    "description": "逆離散フーリエ変換",
    "lineNumber": 198,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "実数部"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "虚数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 674,
    "kind": "class",
    "name": "Chash",
    "memberof": "src/math/tools/Signal.mjs",
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Chash",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Signal.mjs",
    "importStyle": null,
    "description": "簡易キャッシュクラス\nFFTで用いるテーブルなどをキャッシュ",
    "lineNumber": 270,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 675,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/tools/Signal.mjs~Chash",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~Chash#constructor",
    "access": "public",
    "description": "簡易キャッシュ",
    "lineNumber": 277,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "chash_size",
        "description": "キャッシュの最大サイズ"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "作成するオブジェクト"
      }
    ]
  },
  {
    "__docId__": 676,
    "kind": "member",
    "name": "object",
    "memberof": "src/math/tools/Signal.mjs~Chash",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~Chash#object",
    "access": "public",
    "description": "キャッシュするクラス",
    "lineNumber": 282,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 677,
    "kind": "member",
    "name": "table_max",
    "memberof": "src/math/tools/Signal.mjs~Chash",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~Chash#table_max",
    "access": "public",
    "description": "キャッシュする最大数",
    "lineNumber": 287,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 678,
    "kind": "member",
    "name": "table_size",
    "memberof": "src/math/tools/Signal.mjs~Chash",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~Chash#table_size",
    "access": "public",
    "description": "現在キャッシュしている数",
    "lineNumber": 292,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 679,
    "kind": "member",
    "name": "table",
    "memberof": "src/math/tools/Signal.mjs~Chash",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~Chash#table",
    "access": "public",
    "description": "キャッシュテーブル",
    "lineNumber": 297,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 680,
    "kind": "method",
    "name": "get",
    "memberof": "src/math/tools/Signal.mjs~Chash",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~Chash#get",
    "access": "public",
    "description": "指定した長さのデータを作成する。キャッシュに存在すればキャッシュから使用する。",
    "lineNumber": 305,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "作成するオブジェクトのサイズ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 681,
    "kind": "variable",
    "name": "fft_chash",
    "memberof": "src/math/tools/Signal.mjs",
    "static": true,
    "longname": "src/math/tools/Signal.mjs~fft_chash",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Signal.mjs",
    "importStyle": null,
    "description": "FFT用のキャッシュ",
    "lineNumber": 330,
    "type": {
      "types": [
        "src/math/tools/Signal.mjs~Chash"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 682,
    "kind": "class",
    "name": "DCT",
    "memberof": "src/math/tools/Signal.mjs",
    "static": true,
    "longname": "src/math/tools/Signal.mjs~DCT",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Signal.mjs",
    "importStyle": null,
    "description": "離散コサイン変換のクラス",
    "lineNumber": 335,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 683,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/tools/Signal.mjs~DCT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~DCT#constructor",
    "access": "public",
    "description": "DCTクラスの初期化",
    "lineNumber": 341,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "信号の長さ"
      }
    ]
  },
  {
    "__docId__": 684,
    "kind": "member",
    "name": "size",
    "memberof": "src/math/tools/Signal.mjs~DCT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~DCT#size",
    "access": "public",
    "description": "信号長",
    "lineNumber": 346,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 685,
    "kind": "member",
    "name": "dct_size",
    "memberof": "src/math/tools/Signal.mjs~DCT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~DCT#dct_size",
    "access": "public",
    "description": "信号長の2倍\nDCT変換では、実際の信号にゼロ詰めした2倍の信号長を用意しそれに対してFFTを行う。",
    "lineNumber": 352,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 686,
    "kind": "member",
    "name": "dct_re",
    "memberof": "src/math/tools/Signal.mjs~DCT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~DCT#dct_re",
    "access": "public",
    "description": "DCT変換に使用する計算用テーブル",
    "lineNumber": 357,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 687,
    "kind": "member",
    "name": "dct_im",
    "memberof": "src/math/tools/Signal.mjs~DCT",
    "static": false,
    "longname": "src/math/tools/Signal.mjs~DCT#dct_im",
    "access": "public",
    "description": "DCT変換に使用する計算用テーブル",
    "lineNumber": 362,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 688,
    "kind": "method",
    "name": "delete",
    "memberof": "src/math/tools/Signal.mjs~DCT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~DCT#delete",
    "access": "public",
    "description": "中のデータを消去する",
    "lineNumber": 377,
    "params": [],
    "return": null
  },
  {
    "__docId__": 689,
    "kind": "method",
    "name": "dct",
    "memberof": "src/math/tools/Signal.mjs~DCT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~DCT#dct",
    "access": "public",
    "description": "DCT-II",
    "lineNumber": 389,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "実数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 690,
    "kind": "method",
    "name": "idct",
    "memberof": "src/math/tools/Signal.mjs~DCT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/tools/Signal.mjs~DCT#idct",
    "access": "public",
    "description": "DCT-III (IDCT)",
    "lineNumber": 409,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "実数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 691,
    "kind": "variable",
    "name": "dct_chash",
    "memberof": "src/math/tools/Signal.mjs",
    "static": true,
    "longname": "src/math/tools/Signal.mjs~dct_chash",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Signal.mjs",
    "importStyle": null,
    "description": "離散コサイン変換用のキャッシュ",
    "lineNumber": 427,
    "type": {
      "types": [
        "src/math/tools/Signal.mjs~Chash"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 692,
    "kind": "class",
    "name": "SignalTool",
    "memberof": "src/math/tools/Signal.mjs",
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Signal.mjs",
    "importStyle": null,
    "description": "Signalクラスの内部で使用する関数集",
    "lineNumber": 432,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 693,
    "kind": "method",
    "name": "isContainsZero",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.isContainsZero",
    "access": "public",
    "description": "0が含まれるか",
    "lineNumber": 439,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "調べたい配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 694,
    "kind": "method",
    "name": "fft",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.fft",
    "access": "public",
    "description": "離散フーリエ変換",
    "lineNumber": 454,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "実数部"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "虚数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 695,
    "kind": "method",
    "name": "ifft",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.ifft",
    "access": "public",
    "description": "逆離散フーリエ変換",
    "lineNumber": 465,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "実数部"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "虚数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 696,
    "kind": "method",
    "name": "dct",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.dct",
    "access": "public",
    "description": "DCT-II (DCT)",
    "lineNumber": 475,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "実数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 697,
    "kind": "method",
    "name": "idct",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.idct",
    "access": "public",
    "description": "DCT-III (IDCT)",
    "lineNumber": 485,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "実数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 698,
    "kind": "method",
    "name": "powerfft",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.powerfft",
    "access": "public",
    "description": "パワースペクトル密度",
    "lineNumber": 496,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "実数部"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "虚数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 699,
    "kind": "method",
    "name": "conv",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.conv",
    "access": "public",
    "description": "畳み込み積分、多項式乗算",
    "lineNumber": 514,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x1_real",
        "description": "実数部"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x1_imag",
        "description": "虚数部"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x2_real",
        "description": "実数部"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x2_imag",
        "description": "虚数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 700,
    "kind": "method",
    "name": "xcorr",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.xcorr",
    "access": "public",
    "description": "自己相関関数、相互相関関数",
    "lineNumber": 624,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x1_real",
        "description": "実数部"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x1_imag",
        "description": "虚数部"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x2_real",
        "description": "実数部"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x2_imag",
        "description": "虚数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 701,
    "kind": "method",
    "name": "window",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.window",
    "access": "public",
    "description": "窓を作成する",
    "lineNumber": 771,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "窓関数の名前"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "長さ"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\", 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 702,
    "kind": "method",
    "name": "hann",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.hann",
    "access": "public",
    "description": "ハニング窓",
    "lineNumber": 860,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "長さ"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\", 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 703,
    "kind": "method",
    "name": "hamming",
    "memberof": "src/math/tools/Signal.mjs~SignalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~SignalTool.hamming",
    "access": "public",
    "description": "ハミング窓を作成",
    "lineNumber": 870,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "長さ"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\", 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 704,
    "kind": "class",
    "name": "Signal",
    "memberof": "src/math/tools/Signal.mjs",
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/tools/Signal.mjs",
    "importStyle": "Signal",
    "description": "Matrix用の信号処理用の計算クラス",
    "lineNumber": 879,
    "interface": false
  },
  {
    "__docId__": 705,
    "kind": "method",
    "name": "fft",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.fft",
    "access": "public",
    "description": "離散フーリエ変換",
    "lineNumber": 887,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} fft(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "fft(x)"
    }
  },
  {
    "__docId__": 706,
    "kind": "method",
    "name": "ifft",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.ifft",
    "access": "public",
    "description": "逆離散フーリエ変換",
    "lineNumber": 913,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} ifft(X)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "X",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "ifft(X)"
    }
  },
  {
    "__docId__": 707,
    "kind": "method",
    "name": "powerfft",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.powerfft",
    "access": "public",
    "description": "パワースペクトル密度",
    "lineNumber": 939,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} abs(fft(x)).^2"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "abs(fft(x)).^2"
    }
  },
  {
    "__docId__": 708,
    "kind": "method",
    "name": "dct",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.dct",
    "access": "public",
    "description": "離散コサイン変換",
    "lineNumber": 965,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} dct(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "dct(x)"
    }
  },
  {
    "__docId__": 709,
    "kind": "method",
    "name": "idct",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.idct",
    "access": "public",
    "description": "逆離散コサイン変換",
    "lineNumber": 992,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} idct(x)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "X",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "idct(x)"
    }
  },
  {
    "__docId__": 710,
    "kind": "method",
    "name": "fft2",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.fft2",
    "access": "public",
    "description": "2次元の離散フーリエ変換",
    "lineNumber": 1018,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 711,
    "kind": "method",
    "name": "ifft2",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.ifft2",
    "access": "public",
    "description": "2次元の逆離散フーリエ変換",
    "lineNumber": 1027,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "X",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 712,
    "kind": "method",
    "name": "dct2",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.dct2",
    "access": "public",
    "description": "2次元のDCT変換",
    "lineNumber": 1036,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 713,
    "kind": "method",
    "name": "idct2",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.idct2",
    "access": "public",
    "description": "2次元の逆DCT変換",
    "lineNumber": 1045,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "X",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 714,
    "kind": "method",
    "name": "conv",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.conv",
    "access": "public",
    "description": "畳み込み積分、多項式乗算",
    "lineNumber": 1055,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 715,
    "kind": "method",
    "name": "xcorr",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.xcorr",
    "access": "public",
    "description": "自己相関関数、相互相関関数",
    "lineNumber": 1104,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "name": "x2",
        "description": "省略した場合は自己相関関数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 716,
    "kind": "method",
    "name": "window",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.window",
    "access": "public",
    "description": "窓関数",
    "lineNumber": 1157,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 列ベクトル"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "窓関数の名前"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "長さ"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\", 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "列ベクトル"
    }
  },
  {
    "__docId__": 717,
    "kind": "method",
    "name": "hann",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.hann",
    "access": "public",
    "description": "ハニング窓",
    "lineNumber": 1169,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 列ベクトル"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "長さ"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\", 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "列ベクトル"
    }
  },
  {
    "__docId__": 718,
    "kind": "method",
    "name": "hamming",
    "memberof": "src/math/tools/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Signal.mjs~Signal.hamming",
    "access": "public",
    "description": "ハミング窓",
    "lineNumber": 1179,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 列ベクトル"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "長さ"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"symmetric\"",
        "defaultRaw": "symmetric",
        "name": "periodic",
        "description": "0/\"symmetric\", 1/\"periodic\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "列ベクトル"
    }
  },
  {
    "__docId__": 719,
    "kind": "file",
    "name": "src/math/tools/Statistics.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport Complex from \"../Complex.mjs\";\n\n// @ts-ignore\nimport Matrix from \"../Matrix.mjs\";\n\n/**\n * 実数専用の統計処理用の関数集\n */\nclass StatisticsTool {\n\n\t/**\n\t * gammaln(x) 対数ガンマ関数 \n\t * @param {number} x\n\t * @returns {number}\n\t */\n\tstatic gammaln(x) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p30,技術評論社,1991\n\t\tconst LOG_2PI = Math.log(2.0 * Math.PI);\n\t\t//ベルヌーイ数\n\t\t//http://fr.wikipedia.org/wiki/Nombre_de_Bernoulli\n\t\tconst K2 = ( 1.0 / 6.0)\t\t\t\t\t/ (2 * 1);\n\t\tconst K4 = (-1.0 / 30.0)\t\t\t\t/ (4 * 3);\n\t\tconst K6 = ( 1.0 / 42.0)\t\t\t\t/ (6 * 5);\n\t\tconst K8 = (-1.0 / 30.0)\t\t\t\t/ (8 * 7);\n\t\tconst K10 = ( 5.0 / 66.0)\t\t\t\t/ (10 * 9);\n\t\tconst K12 = (-691.0 / 2730.0)\t\t\t/ (12 * 11);\n\t\tconst K14 = ( 7.0 / 6.0)\t\t\t\t/ (14 * 13);\n\t\tconst K16 = (-3617.0 / 510.0)\t\t\t/ (16 * 15);\n\t\tconst K18 = (43867.0 / 798.0)\t\t\t/ (18 * 17);\n\t\tconst K20 = (-174611.0 / 330.0)\t\t\t/ (20 * 19);\n\t\tconst K22 = (854513.0 / 138.0)\t\t\t/ (22 * 21);\n\t\tconst K24 = (-236364091.0 / 2730.0)\t\t/ (24 * 23);\n\t\tconst K26 = (8553103.0 / 6.0)\t\t\t/ (26 * 25);\n\t\tconst K28 = (-23749461029.0 / 870.0)\t/ (28 * 27);\n\t\tconst K30 = (8615841276005.0 / 14322.0)\t/ (30 * 29);\n\t\tconst K32 = (-7709321041217.0 / 510.0)\t/ (32 * 31);\n\t\tconst LIST = [\n\t\t\tK32, K30, K28, K26, K24, K22, K20, K18,\n\t\t\tK16, K14, K12, K10, K8, K6, K4, K2\n\t\t];\n\t\tlet v = 1;\n\t\tlet lx = x;\n\t\twhile(lx < LIST.length) {\n\t\t\tv *= lx;\n\t\t\tlx++;\n\t\t}\n\t\tconst w = 1 / (lx * lx);\n\t\tlet y = LIST[0];\n\t\tfor(let i = 1; i < LIST.length; i++) {\n\t\t\ty *= w;\n\t\t\ty += LIST[i];\n\t\t}\n\t\ty /= lx;\n\t\ty += 0.5 * LOG_2PI;\n\t\ty += - Math.log(v) - lx + (lx - 0.5) * Math.log(lx);\n\t\treturn(y);\n\t}\n\n\t/**\n\t * q_gamma(x, a, gammaln_a) 不完全ガンマ関数 上側\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} gammaln_a\n\t * @returns {number}\n\t */\n\tstatic q_gamma(x, a, gammaln_a) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p227,技術評論社,1991\n\t\tlet k;\n\t\tlet result, w, temp, previous;\n\t\t// Laguerreの多項式\n\t\tlet la = 1.0, lb = 1.0 + x - a;\n\t\tif(x < 1.0 + a) {\n\t\t\treturn (1 - StatisticsTool.p_gamma(x, a, gammaln_a));\n\t\t}\n\t\tw = Math.exp(a * Math.log(x) - x - gammaln_a);\n\t\tresult = w / lb;\n\t\tfor(k = 2; k < 1000; k++) {\n\t\t\ttemp = ((k - 1.0 - a) * (lb - la) + (k + x) * lb) / k;\n\t\t\tla = lb;\n\t\t\tlb = temp;\n\t\t\tw *= (k - 1.0 - a) / k;\n\t\t\ttemp = w / (la * lb);\n\t\t\tprevious = result;\n\t\t\tresult += temp;\n\t\t\tif(result == previous) {\n\t\t\t\treturn(result);\n\t\t\t}\n\t\t}\n\t\treturn Number.NaN;\n\t}\n\n\t/**\n\t * p_gamma(x, a, gammaln_a) 不完全ガンマ関数 下側\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} gammaln_a\n\t * @returns {number}\n\t */\n\tstatic p_gamma(x, a, gammaln_a) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p227,技術評論社,1991\n\t\tlet k;\n\t\tlet result, term, previous;\n\t\tif(x >= 1.0 + a) {\n\t\t\treturn (1.0 - StatisticsTool.q_gamma(x, a, gammaln_a));\n\t\t}\n\t\tif(x === 0.0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tresult = term = Math.exp(a * Math.log(x) - x - gammaln_a) / a;\n\t\tfor(k = 1; k < 1000; k++) {\n\t\t\tterm *= x / (a + k);\n\t\t\tprevious = result;\n\t\t\tresult += term;\n\t\t\tif(result == previous) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn Number.NaN;\n\t}\n\n\t/**\n\t * gamma(z) ガンマ関数\n\t * @param {number} z\n\t * @returns {number}\n\t */\n\tstatic gamma(z) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p30,技術評論社,1991\n\t\tif(z < 0) {\n\t\t\treturn (Math.PI / (Math.sin(Math.PI * z) * Math.exp(StatisticsTool.gammaln(1.0 - z))));\n\t\t}\n\t\treturn Math.exp(StatisticsTool.gammaln(z));\n\t}\n\n\t/**\n\t * gammainc(x, a, tail) 不完全ガンマ関数\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {string} [tail=\"lower\"] lower(デフォルト)/upper\n\t * @returns {number}\n\t */\n\tstatic gammainc(x, a, tail) {\n\t\tif(tail === \"lower\") {\n\t\t\treturn StatisticsTool.p_gamma(x, a, StatisticsTool.gammaln(a));\n\t\t}\n\t\telse if(tail === \"upper\") {\n\t\t\treturn StatisticsTool.q_gamma(x, a, StatisticsTool.gammaln(a));\n\t\t}\n\t\telse if(arguments.length === 2) {\n\t\t\t// 引数を省略した場合\n\t\t\treturn StatisticsTool.gammainc(x, a, \"lower\");\n\t\t}\n\t\telse {\n\t\t\tthrow \"gammainc unsupported argument [\" + tail + \"]\";\n\t\t}\n\t}\n\t\n\t/**\n\t * gampdf(x, k, s) ガンマ分布の確率密度関数\n\t * @param {number} x\n\t * @param {number} k - 形状母数\n\t * @param {number} s - 尺度母数\n\t * @returns {number}\n\t */\n\tstatic gampdf(x, k, s) {\n\t\tlet y = 1.0 / (StatisticsTool.gamma(k) * Math.pow(s, k));\n\t\ty *= Math.pow( x, k - 1);\n\t\ty *= Math.exp( - x / s );\n\t\treturn y;\n\t}\n\n\t/**\n\t * gamcdf(x, k, s) ガンマ分布の累積分布関数\n\t * @param {number} x\n\t * @param {number} k - 形状母数\n\t * @param {number} s - 尺度母数\n\t * @returns {number}\n\t */\n\tstatic gamcdf(x, k, s) {\n\t\treturn StatisticsTool.gammainc(x / s, k);\n\t}\n\t\n\t/**\n\t * gaminv(p, k, s) ガンマ分布の累積分布関数の逆関数\n\t * @param {number} p\n\t * @param {number} k - 形状母数\n\t * @param {number} s - 尺度母数\n\t * @returns {number}\n\t */\n\tstatic gaminv(p, k, s) {\n\t\tif((p < 0.0) || (p > 1.0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if(p == 0.0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\telse if(p == 1.0) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\tconst eps = 1.0e-12;\n\t\t// 初期値を決める\n\t\tlet y = k * s;\n\t\t// 単調増加関数なのでニュートン・ラフソン法で解く\n\t\t// x_n+1 = x_n - f(x) / f'(x)\n\t\t// ここで f(x) は累積分布関数、f'(x) は確率密度関数\n\t\t// a = 累積分関数 → f(x)  = 累積分関数 - a と置く。\n\t\t// aの微分は0なので無関係\n\t\tlet delta, y2;\n\t\tfor(let i = 0; i < 100; i++) {\n\t\t\ty2 = y - ((StatisticsTool.gamcdf(y, k, s) - p) / StatisticsTool.gampdf(y, k, s));\n\t\t\tdelta = y2 - y;\n\t\t\tif(Math.abs(delta) <= eps) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y2;\n\t\t\tif(y < 0.0) {\n\t\t\t\ty = eps;\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * beta(x, y) ベータ関数\n\t * @param {number} x\n\t * @param {number} y\n\t * @returns {number}\n\t */\n\tstatic beta(x, y) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p30,技術評論社,1991\n\t\treturn (Math.exp(StatisticsTool.gammaln(x) + StatisticsTool.gammaln(y) - StatisticsTool.gammaln(x + y)));\n\t}\n\t\n\t/**\n\t * p_beta(x, a, b) 不完全ベータ関数 下側\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic p_beta(x, a, b) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p231,技術評論社,1991\n\t\tlet k;\n\t\tlet result, term, previous;\n\t\tif(a <= 0.0) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\tif(b <= 0.0) {\n\t\t\tif(x < 1.0) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\telse if(x === 1.0) {\n\t\t\t\treturn 1.0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\tif(x > (a + 1.0) / (a + b + 2.0)) {\n\t\t\treturn (1.0 - StatisticsTool.p_beta(1.0 - x, b, a));\n\t\t}\n\t\tif(x <= 0.0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tterm = a * Math.log(x);\n\t\tterm += b * Math.log(1.0 - x);\n\t\tterm += StatisticsTool.gammaln(a + b);\n\t\tterm -= StatisticsTool.gammaln(a) + StatisticsTool.gammaln(b);\n\t\tterm = Math.exp(term);\n\t\tterm /= a;\n\t\tresult = term;\n\t\tfor(k = 1; k < 1000; k++) {\n\t\t\tterm *= a + b + k - 1.0;\n\t\t\tterm *= x;\n\t\t\tterm /= a + k;\n\t\t\tprevious = result;\n\t\t\tresult += term;\n\t\t\tif(result === previous) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn Number.NaN;\n\t}\n\n\t/**\n\t * q_beta(x, a, b) 不完全ベータ関数 上側\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic q_beta(x, a, b) {\n\t\treturn (1.0 - StatisticsTool.p_beta(x, a, b));\n\t}\n\n\t/**\n\t * betainc(x, a, b, tail) 不完全ベータ関数\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @param {string} [tail=\"lower\"] {string} lower(デフォルト)/upper\n\t * @returns {number}\n\t */\n\tstatic betainc(x, a, b, tail) {\n\t\tif(tail === \"lower\") {\n\t\t\treturn StatisticsTool.p_beta(x, a, b);\n\t\t}\n\t\telse if(tail === \"upper\") {\n\t\t\treturn StatisticsTool.q_beta(x, a, b);\n\t\t}\n\t\telse if(arguments.length === 3) {\n\t\t\t// 引数を省略した場合\n\t\t\treturn StatisticsTool.betainc(x, a, b, \"lower\");\n\t\t}\n\t\telse {\n\t\t\tthrow \"betainc unsupported argument [\" + tail + \"]\";\n\t\t}\n\t}\n\t\n\t/**\n\t * isInteger(x) xが整数かどうか\n\t * @param {number} x\n\t * @returns {boolean}\n\t */\n\tstatic isInteger(x) {\n\t\treturn (x - (x | 0) !== 0.0);\n\t}\n\t\n\t/**\n\t * betapdf(x, a, b) ベータ分布の確率密度関数\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic betapdf(x, a, b) {\n\t\t// powの計算結果が複素数になる場合は計算を行わない\n\t\tif\t(\n\t\t\t((x < 0) && (StatisticsTool.isInteger(b - 1))) ||\n\t\t\t((1 - x < 0) && (StatisticsTool.isInteger(b - 1)))\n\t\t) {\n\t\t\treturn 0.0;\n\t\t}\n\t\t// 以下の式でも求められるが betapdf(0, 1, 1)で、Log(0)の計算が発生しNaNを返してしまう。実際は1を返すべき。\n\t\t//return(Math.exp((a - 1) * Math.log(x) + (b - 1) * Math.log(1 - x)) / StatisticsTool.beta(a,  b));\n\t\treturn (Math.pow(x, a - 1) * Math.pow(1 - x, b - 1) / StatisticsTool.beta(a,  b));\n\t}\n\n\t/**\n\t * betacdf(x, a, b) ベータ分布の累積分布関数\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic betacdf(x, a, b) {\n\t\treturn StatisticsTool.betainc(x, a, b);\n\t}\n\t\n\t/**\n\t * betainv(p, a, b) ベータ分布の累積分布関数の逆関数\n\t * @param {number} p\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic betainv(p, a, b) {\n\t\tif((p < 0.0) || (p > 1.0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if((p == 0.0) && (a > 0.0) && (b > 0.0)) {\n\t\t\treturn 0.0;\n\t\t}\n\t\telse if((p == 1.0) && (a > 0.0) && (b > 0.0)) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tconst eps = 1.0e-14;\n\t\t// 初期値を決める\n\t\tlet y;\n\t\tif(b == 0) {\n\t\t\ty = 1.0 - eps;\n\t\t}\n\t\telse if(a == 0) {\n\t\t\ty = eps;\n\t\t}\n\t\telse {\n\t\t\ty = a / (a + b);\n\t\t}\n\t\t// 単調増加関数なのでニュートン・ラフソン法で解く\n\t\t// x_n+1 = x_n - f(x) / f'(x)\n\t\t// ここで f(x) は累積分布関数、f'(x) は確率密度関数\n\t\t// a = 累積分関数 → f(x)  = 累積分関数 - a と置く。\n\t\t// aの微分は0なので無関係\n\t\tlet delta, y2;\n\t\tfor(let i = 0; i < 100; i++) {\n\t\t\ty2 = y - ((StatisticsTool.betacdf(y, a, b) - p) / StatisticsTool.betapdf(y, a, b));\n\t\t\tdelta = y2 - y;\n\t\t\tif(Math.abs(delta) <= eps) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y2;\n\t\t\tif(y > 1.0) {\n\t\t\t\ty = 1.0 - eps;\n\t\t\t}\n\t\t\telse if(y < 0.0) {\n\t\t\t\ty = eps;\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * factorial(n) = n! 階乗関数\n\t * @param {number} n\n\t * @returns {number}\n\t */\n\tstatic factorial(n) {\n\t\tconst y = StatisticsTool.gamma(n + 1.0);\n\t\tif((n | 0) === n) {\n\t\t\treturn Math.round(y);\n\t\t}\n\t\telse {\n\t\t\treturn y;\n\t\t}\n\t}\n\n\t/**\n\t * nchoosek(n, k) = nCk 二項係数またはすべての組合わせ\n\t * @param {number} n\n\t * @param {number} k\n\t * @returns {number} nCk\n\t */\n\tstatic nchoosek(n, k) {\n\t\treturn (Math.round(StatisticsTool.factorial(n) / (StatisticsTool.factorial(n - k) * StatisticsTool.factorial(k))));\n\t}\n\n\t/**\n\t * erf(x) 誤差関数\n\t * @param {number} x\n\t * @returns {number}\n\t */\n\tstatic erf(x) {\n\t\treturn (StatisticsTool.p_gamma(x * x, 0.5, Math.log(Math.PI) * 0.5) * (x >= 0 ? 1.0 : -1.0));\n\t}\n\n\t/**\n\t * erfc(x) 相補誤差関数\n\t * @param {number} x\n\t * @returns {number}\n\t */\n\tstatic erfc(x) {\n\t\treturn 1.0 - StatisticsTool.erf(x);\n\t}\n\n\t/**\n\t\t erfinv(p) 誤差逆関数\n\t\t @param_ {number} p\n\t\t @returns_ {number}\n\t\t\n\t\tstatic erfinv(p) {\n\t\t\tif((p < 0.0) || (p > 1.0)) {\n\t\t\t\treturn Number.NaN;\n\t\t\t}\n\t\t\telse if(p == 0.0) {\n\t\t\t\treturn Number.NEGATIVE_INFINITY;\n\t\t\t}\n\t\t\telse if(p == 1.0) {\n\t\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t\t}\n\t\t\tlet y = 0;\n\t\t\tconst c = [];\n\t\t\tfor(let k = 0; k < 100; k++) {\n\t\t\t\tlet ck = 0;\n\t\t\t\tif(0 === k) {\n\t\t\t\t\tck = 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfor(let m = 0; m < k; m++) {\n\t\t\t\t\t\tck += c[m] * c[k - 1 - m] / ((m + 1) * (2 * m + 1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tc.push(ck);\n\t\t\t\tconsole.log(y + \"\\t\" + ck / (2 * k + 1) + \"\\t\" + Math.pow(Math.sqrt(Math.PI) * 0.5 * p, 2 * k + 1))\n\t\t\t\ty += ck / (2 * k + 1) * Math.pow(Math.sqrt(Math.PI) * 0.5 * p, 2 * k + 1);\n\t\t\t}\n\t\t\treturn y;\n\t\t\t// 0.5 * Math.sqrt(Math.PI) = 0.8862269254527579\n\t\t\t// Math.PI / 12 = 0.2617993877991494\n\t\t\t// 7 * Math.pow(Math.PI, 2) / 480 = 0.14393173084921979\n\t\t\t// 127 * Math.pow(Math.PI, 3) / 40320 = 0.09766361950392055\n\t\t\t// 4369 * Math.pow(Math.PI, 4) / 5806080 = 0.07329907936638086\n\t\t\t// 34807 * Math.pow(Math.PI, 5) / 182476800 = 0.05837250087858452\n\t\t\treturn (p\n\t\t\t\t+ 0.2617993877991494 * Math.pow(p, 3)\n\t\t\t\t+ 0.14393173084921979 * Math.pow(p, 5)\n\t\t\t\t+ 0.09766361950392055 * Math.pow(p, 7)\n\t\t\t\t+ 0.07329907936638086 * Math.pow(p, 9)\n\t\t\t\t+ 0.05837250087858452 * Math.pow(p, 11)\n\t\t\t) * 0.8862269254527579;\n\t\t}\n\t*/\n\n\t/**\n\t * normpdf(x, u, s) 正規分布の確率密度関数\n\t * @param {number} x\n\t * @param {number} [u=0.0] - 平均値\n\t * @param {number} [s=1.0] - 分散\n\t * @returns {number}\n\t */\n\tstatic normpdf(x, u, s) {\n\t\tconst u_ = typeof u === \"number\" ? u : 0.0;\n\t\tconst s_ = typeof s === \"number\" ? s : 1.0;\n\t\tlet y = 1.0 / Math.sqrt( 2.0 * Math.PI * s_ * s_ );\n\t\ty *= Math.exp( - (x - u_) * (x - u_) / (2.0 * s_ * s_));\n\t\treturn y;\n\t}\n\n\t/**\n\t * normcdf(x, u, s) 正規分布の累積分布関数\n\t * @param {number} x\n\t * @param {number} [u=0.0] - 平均値\n\t * @param {number} [s=1.0] - 分散\n\t * @returns {number}\n\t */\n\tstatic normcdf(x, u, s) {\n\t\tconst u_ = typeof u === \"number\" ? u : 0.0;\n\t\tconst s_ = typeof s === \"number\" ? s : 1.0;\n\t\treturn (1.0 + StatisticsTool.erf( (x - u_) / (s_ * Math.sqrt(2.0)) )) / 2.0;\n\t}\n\n\t/**\n\t * norminv(p, u, s) 正規分布の累積分布関数の逆関数\n\t * @param {number} p - 確率\n\t * @param {number} [u=0.0] - 平均値\n\t * @param {number} [s=1.0] - 分散\n\t * @returns {number}\n\t */\n\tstatic norminv(p, u, s) {\n\t\tif((p < 0.0) || (p > 1.0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if(p == 0.0) {\n\t\t\treturn Number.NEGATIVE_INFINITY;\n\t\t}\n\t\telse if(p == 1.0) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\tconst u_ = typeof u === \"number\" ? u : 0.0;\n\t\tconst s_ = typeof s === \"number\" ? s : 1.0;\n\t\tconst eps = 1.0e-12;\n\t\t// 初期値を決める\n\t\tlet y = u_;\n\t\t// 単調増加関数なのでニュートン・ラフソン法で解く\n\t\t// x_n+1 = x_n - f(x) / f'(x)\n\t\t// ここで f(x) は累積分布関数、f'(x) は確率密度関数\n\t\t// a = 累積分関数 → f(x)  = 累積分関数 - a と置く。\n\t\t// aの微分は0なので無関係\n\t\tlet delta, y2;\n\t\tfor(let i = 0; i < 200; i++) {\n\t\t\ty2 = y - ((StatisticsTool.normcdf(y, u_, s_) - p) / StatisticsTool.normpdf(y, u_, s_));\n\t\t\tdelta = y2 - y;\n\t\t\tif(Math.abs(delta) <= eps) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y2;\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * tpdf(t, k) t分布の確率密度関数\n\t * @param {number} t - t値\n\t * @param {number} v - 自由度\n\t * @returns {number}\n\t */\n\tstatic tpdf(t, v) {\n\t\tlet y = 1.0 / (Math.sqrt(v) * StatisticsTool.beta(0.5, v * 0.5));\n\t\ty *= Math.pow( 1 + t * t / v, - (v + 1) * 0.5);\n\t\treturn y;\n\t}\n\n\t/**\n\t * tcdf(t) t分布の累積分布関数\n\t * @param {number} t - t値\n\t * @param {number} v - 自由度\n\t * @returns {number}\n\t */\n\tstatic tcdf(t, v) {\n\t\tconst y = (t * t) / (v + t * t) ;\n\t\tconst p = StatisticsTool.betainc( y, 0.5, v * 0.5 ) * (t < 0 ? -1 : 1);\n\t\treturn 0.5 * (1 + p);\n\t}\n\n\t/**\n\t * tinv(p, v) t分布の累積分布関数の逆関数\n\t * @param {number} p - 確率\n\t * @param {number} v - 自由度\n\t * @returns {number}\n\t */\n\tstatic tinv(p, v) {\n\t\tif((p < 0) || (p > 1)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\tif(p == 0) {\n\t\t\treturn Number.NEGATIVE_INFINITY;\n\t\t}\n\t\telse if(p == 1) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\telse if(p < 0.5) {\n\t\t\tconst y = StatisticsTool.betainv(2.0 * p, 0.5 * v, 0.5);\n\t\t\treturn - Math.sqrt(v / y - v);\n\t\t}\n\t\telse {\n\t\t\tconst y = StatisticsTool.betainv(2.0 * (1.0 - p), 0.5 * v, 0.5);\n\t\t\treturn Math.sqrt(v / y - v);\n\t\t}\n\t}\n\n\t/**\n\t * tdist(t, v, tails) 尾部が指定可能なt分布の累積分布関数\n\t * @param {number} t - t値\n\t * @param {number} v - 自由度\n\t * @param {number} tails - 尾部(1...片側、2...両側)\n\t * @returns {number}\n\t */\n\tstatic tdist(t, v, tails) {\n\t\treturn (1.0 - StatisticsTool.tcdf(t, v)) * tails;\n\t}\n\n\t/**\n\t * tinv2(p, v) 両側検定時のt分布の累積分布関数\n\t * @param {number} p - 確率\n\t * @param {number} v - 自由度\n\t * @returns {number}\n\t */\n\tstatic tinv2(p, v) {\n\t\treturn - StatisticsTool.tinv( p * 0.5, v);\n\t}\n\n\t/**\n\t * chi2pdf(x, v) カイ二乗分布の確率密度関数\n\t * @param {number} x \n\t * @param {number} k - 自由度\n\t * @returns {number}\n\t */\n\tstatic chi2pdf(x, k) {\n\t\tif(x < 0.0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(x === 0.0) {\n\t\t\treturn 0.5;\n\t\t}\n\t\tlet y = Math.pow(x, k / 2.0 - 1.0) * Math.exp( - x / 2.0 );\n\t\ty /= Math.pow(2, k / 2.0) * StatisticsTool.gamma( k / 2.0);\n\t\treturn y;\n\t}\n\n\t/**\n\t * chi2cdf(x, v) カイ二乗分布の累積分布関数\n\t * @param {number} x \n\t * @param {number} k - 自由度\n\t * @returns {number}\n\t */\n\tstatic chi2cdf(x, k) {\n\t\treturn StatisticsTool.gammainc(x / 2.0, k / 2.0);\n\t}\n\n\t/**\n\t * chi2inv(p, v) カイ二乗分布の逆累積分布関数\n\t * @param {number} p - 確率\n\t * @param {number} k - 自由度\n\t * @returns {number}\n\t */\n\tstatic chi2inv(p, k) {\n\t\treturn StatisticsTool.gaminv(p, k / 2.0, 2);\n\t}\n\n\t/**\n\t * fpdf(x, d1, d2) F分布の確率密度関数\n\t * @param {number} x\n\t * @param {number} d1 - 分子の自由度\n\t * @param {number} d2 - 分母の自由度\n\t * @returns {number}\n\t */\n\tstatic fpdf(x, d1, d2) {\n\t\tif((d1 < 0) || (d2 < 0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if(x <= 0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tlet y = 1.0;\n\t\ty *= Math.pow( (d1 * x) / (d1 * x + d2) , d1 / 2.0);\n\t\ty *= Math.pow( 1.0 - ((d1 * x) / (d1 * x + d2)), d2 / 2.0);\n\t\ty /= x * StatisticsTool.beta(d1 / 2.0, d2 / 2.0);\n\t\treturn y;\n\t}\n\n\t/**\n\t * fcdf(x, d1, d2) F分布の累積分布関数\n\t * @param {number} x\n\t * @param {number} d1 - 分子の自由度\n\t * @param {number} d2 - 分母の自由度\n\t * @returns {number}\n\t */\n\tstatic fcdf(x, d1, d2) {\n\t\treturn StatisticsTool.betacdf( d1 * x / (d1 * x + d2), d1 / 2.0, d2 / 2.0 );\n\t}\n\n\t/**\n\t * finv(p, d1, d2) F分布の累積分布関数の逆関数\n\t * @param {number} p - 確率\n\t * @param {number} d1 - 分子の自由度\n\t * @param {number} d2 - 分母の自由度\n\t * @returns {number}\n\t */\n\tstatic finv(p, d1, d2) {\n\t\treturn (1.0 / StatisticsTool.betainv( 1.0 - p, d2 / 2.0, d1 / 2.0 ) - 1.0) * d2 / d1;\n\t}\n\n}\n\n/**\n * 文字列か判定\n * @param text \n */\nconst isStr = function(text) {\n\treturn (text && (typeof text === \"string\" || text instanceof String));\n};\n\n/**\n * Complexクラスから利用する統計処理関数集\n * @ignore\n */\nclass StatisticsComplex {\n\n\t/**\n\t * gammaln(x) 対数ガンマ関数\n\t * @param {Complex} x\n\t * @returns {Complex}\n\t */\n\tstatic gammaln(x) {\n\t\treturn new Complex(StatisticsTool.gammaln(Complex._toDouble(x)));\n\t}\n\t\n\t/**\n\t * gamma(z) ガンマ関数 \n\t * @param {Complex} z\n\t * @returns {Complex}\n\t */\n\tstatic gamma(z) {\n\t\treturn new Complex(StatisticsTool.gamma(Complex._toDouble(z)));\n\t}\n\t\n\t/**\n\t * gammainc(x, a, tail) 不完全ガンマ関数\n\t * @param {Complex} x\n\t * @param {Complex} a\n\t * @param {string} [tail=\"lower\"] - lower/upper\n\t * @returns {Complex}\n\t */\n\tstatic gammainc(x, a, tail) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst a_ = Complex._toDouble(a);\n\t\tconst tail_ = isStr(tail) ? tail : \"lower\";\n\t\treturn new Complex(StatisticsTool.gammainc(X, a_, tail_));\n\t}\n\n\t/**\n\t * gampdf(x, k, s) ガンマ分布の確率密度関数\n\t * @param {Complex} x\n\t * @param {Complex} k - 形状母数\n\t * @param {Complex} s - 尺度母数\n\t * @returns {Complex}\n\t */\n\tstatic gampdf(x, k, s) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst k_ = Complex._toDouble(k);\n\t\tconst s_ = Complex._toDouble(s);\n\t\treturn new Complex(StatisticsTool.gampdf(X, k_, s_));\n\t}\n\n\t/**\n\t * gamcdf(x, k, s) ガンマ分布の確率密度関数\n\t * @param {Complex} x\n\t * @param {Complex} k - 形状母数\n\t * @param {Complex} s - 尺度母数\n\t * @returns {Complex}\n\t */\n\tstatic gamcdf(x, k, s) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst k_ = Complex._toDouble(k);\n\t\tconst s_ = Complex._toDouble(s);\n\t\treturn new Complex(StatisticsTool.gamcdf(X, k_, s_));\n\t}\n\n\t/**\n\t * gaminv(p, k, s) ガンマ分布の累積分布関数の逆関数\n\t * @param {Complex} p\n\t * @param {Complex} k - 形状母数\n\t * @param {Complex} s - 尺度母数\n\t * @returns {Complex}\n\t */\n\tstatic gaminv(p, k, s) {\n\t\tconst p_ = Complex._toDouble(p);\n\t\tconst k_ = Complex._toDouble(k);\n\t\tconst s_ = Complex._toDouble(s);\n\t\treturn new Complex(StatisticsTool.gaminv(p_, k_, s_));\n\t}\n\n\t/**\n\t * beta(x, y) ベータ関数\n\t * @param {Complex} x\n\t * @param {Complex} y\n\t * @returns {Complex}\n\t */\n\tstatic beta(x, y) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst y_ = Complex._toDouble(y);\n\t\treturn new Complex(StatisticsTool.beta(X, y_));\n\t}\n\n\t/**\n\t * betainc(x, a, b, tail) 不完全ベータ関数\n\t * @param {Complex} x\n\t * @param {Complex} a\n\t * @param {Complex} b\n\t * @param {string} [tail=\"lower\"] lower/upper\n\t * @returns {Complex}\n\t */\n\tstatic betainc(x, a, b, tail) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst a_ = Complex._toDouble(a);\n\t\tconst b_ = Complex._toDouble(b);\n\t\tconst tail_ = isStr(tail) ? tail : \"lower\";\n\t\treturn new Complex(StatisticsTool.betainc(X, a_, b_, tail_));\n\t}\n\n\t/**\n\t * betapdf(x, a, b) ベータ分布の確率密度関数\n\t * @param {Complex} x\n\t * @param {Complex} a\n\t * @param {Complex} b\n\t * @returns {Complex}\n\t */\n\tstatic betapdf(x, a, b) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst a_ = Complex._toDouble(a);\n\t\tconst b_ = Complex._toDouble(b);\n\t\treturn new Complex(StatisticsTool.betapdf(X, a_, b_));\n\t}\n\n\t/**\n\t * betacdf(x, a, b) ベータ分布の累積分布関数\n\t * @param {Complex} x\n\t * @param {Complex} a\n\t * @param {Complex} b\n\t * @returns {Complex}\n\t */\n\tstatic betacdf(x, a, b) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst a_ = Complex._toDouble(a);\n\t\tconst b_ = Complex._toDouble(b);\n\t\treturn new Complex(StatisticsTool.betacdf(X, a_, b_));\n\t}\n\n\t/**\n\t * betainv(p, a, b) ベータ分布の累積分布関数の逆関数\n\t * @param {Complex} p\n\t * @param {Complex} a\n\t * @param {Complex} b\n\t * @returns {Complex}\n\t */\n\tstatic betainv(p, a, b) {\n\t\tconst p_ = Complex._toDouble(p);\n\t\tconst a_ = Complex._toDouble(a);\n\t\tconst b_ = Complex._toDouble(b);\n\t\treturn new Complex(StatisticsTool.betainv(p_, a_, b_));\n\t}\n\n\t/**\n\t * factorial(n), n! 階乗関数\n\t * @param {Complex} n\n\t * @returns {Complex}\n\t */\n\tstatic factorial(n) {\n\t\treturn new Complex(StatisticsTool.factorial(Complex._toDouble(n)));\n\t}\n\n\t/**\n\t * nchoosek(n, k), nCk 二項係数またはすべての組合わせ\n\t * @param {Complex} n\n\t * @param {Complex} k\n\t * @returns {Complex}\n\t */\n\tstatic nchoosek(n, k) {\n\t\tconst n_ = Complex._toDouble(n);\n\t\tconst k_ = Complex._toDouble(k);\n\t\treturn new Complex(StatisticsTool.nchoosek(n_, k_));\n\t}\n\t\n\t/**\n\t * erf(x) 誤差関数\n\t * @param {Complex} x\n\t * @returns {Complex}\n\t */\n\tstatic erf(x) {\n\t\tconst X = Complex._toDouble(x);\n\t\treturn new Complex(StatisticsTool.erf(X));\n\t}\n\n\t/**\n\t * erfc(x) 相補誤差関数\n\t * @param {Complex} x\n\t * @returns {Complex}\n\t */\n\tstatic erfc(x) {\n\t\tconst X = Complex._toDouble(x);\n\t\treturn new Complex(StatisticsTool.erfc(X));\n\t}\n\n\t/**\n\t * normpdf(x, u, s) 正規分布の確率密度関数\n\t * @param {Complex} x\n\t * @param {Complex} [u=0.0] - 平均値\n\t * @param {Complex} [s=1.0] - 分散\n\t * @returns {Complex}\n\t */\n\tstatic normpdf(x, u=0.0, s=1.0) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst u_ = Complex._toDouble(u);\n\t\tconst s_ = Complex._toDouble(s);\n\t\treturn new Complex(StatisticsTool.normpdf(X, u_, s_));\n\t}\n\n\t/**\n\t * normcdf(x, u, s) 正規分布の累積分布関数\n\t * @param {Complex} x\n\t * @param {Complex} [u=0.0] - 平均値\n\t * @param {Complex} [s=1.0] - 分散\n\t * @returns {Complex}\n\t */\n\tstatic normcdf(x, u=0.0, s=1.0) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst u_ = Complex._toDouble(u);\n\t\tconst s_ = Complex._toDouble(s);\n\t\treturn new Complex(StatisticsTool.normcdf(X, u_, s_));\n\t}\n\n\t/**\n\t * norminv(x, u, s) 正規分布の累積分布関数の逆関数\n\t * @param {Complex} x\n\t * @param {Complex} [u=0.0] - 平均値\n\t * @param {Complex} [s=1.0] - 分散\n\t * @returns {Complex}\n\t */\n\tstatic norminv(x, u=0.0, s=1.0) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst u_ = Complex._toDouble(u);\n\t\tconst s_ = Complex._toDouble(s);\n\t\treturn new Complex(StatisticsTool.norminv(X, u_, s_));\n\t}\n\t\n\t/**\n\t * tpdf(x, v) t分布の確率密度関数\n\t * @param {Complex} x\n\t * @param {Complex} v - 自由度\n\t * @returns {Complex}\n\t */\n\tstatic tpdf(x, v) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst v_ = Complex._toDouble(v);\n\t\treturn new Complex(StatisticsTool.tpdf(X, v_));\n\t}\n\n\t/**\n\t * tcdf(t, v) t分布の累積分布関数\n\t * @param {Complex} t\n\t * @param {Complex} v - 自由度\n\t * @returns {Complex}\n\t */\n\tstatic tcdf(t, v) {\n\t\tconst t_ = Complex._toDouble(t);\n\t\tconst v_ = Complex._toDouble(v);\n\t\treturn new Complex(StatisticsTool.tcdf(t_, v_));\n\t}\n\n\t/**\n\t * tinv(p, v) t分布の累積分布関数の逆関数\n\t * @param {Complex} p\n\t * @param {Complex} v - 自由度\n\t * @returns {Complex}\n\t */\n\tstatic tinv(p, v) {\n\t\tconst p_ = Complex._toDouble(p);\n\t\tconst v_ = Complex._toDouble(v);\n\t\treturn new Complex(StatisticsTool.tinv(p_, v_));\n\t}\n\n\t/**\n\t * tdist(t, v, tails) 尾部が指定可能なt分布の累積分布関数\n\t * @param {Complex} t\n\t * @param {Complex} v - 自由度\n\t * @param {Complex} tails - 尾部(1...片側、2...両側)\n\t * @returns {Complex}\n\t */\n\tstatic tdist(t, v, tails) {\n\t\tconst t_ = Complex._toDouble(t);\n\t\tconst v_ = Complex._toDouble(v);\n\t\tconst tails_ = Complex._toInteger(tails);\n\t\treturn new Complex(StatisticsTool.tdist(t_, v_, tails_));\n\t}\n\n\t/**\n\t * tinv2(p, v) 両側検定時のt分布の累積分布関数\n\t * @param {Complex} p\n\t * @param {Complex} v - 自由度\n\t * @returns {Complex}\n\t */\n\tstatic tinv2(p, v) {\n\t\tconst p_ = Complex._toDouble(p);\n\t\tconst v_ = Complex._toDouble(v);\n\t\treturn new Complex(StatisticsTool.tinv2(p_, v_));\n\t}\n\n\t/**\n\t * chi2pdf(x, k) カイ二乗分布の確率密度関数\n\t * @param {Complex} x\n\t * @param {Complex} k - 自由度\n\t * @returns {Complex}\n\t */\n\tstatic chi2pdf(x, k) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst k_ = Complex._toDouble(k);\n\t\treturn new Complex(StatisticsTool.chi2pdf(X, k_));\n\t}\n\n\t/**\n\t * chi2cdf(x, k) カイ二乗分布の累積分布関数\n\t * @param {Complex} x\n\t * @param {Complex} k - 自由度\n\t * @returns {Complex}\n\t */\n\tstatic chi2cdf(x, k) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst k_ = Complex._toDouble(k);\n\t\treturn new Complex(StatisticsTool.chi2cdf(X, k_));\n\t}\n\n\t/**\n\t * chi2inv(p, k) カイ二乗分布の累積分布関数の逆関数\n\t * @param {Complex} p\n\t * @param {Complex} k - 自由度\n\t * @returns {Complex}\n\t */\n\tstatic chi2inv(p, k) {\n\t\tconst p_ = Complex._toDouble(p);\n\t\tconst k_ = Complex._toDouble(k);\n\t\treturn new Complex(StatisticsTool.chi2inv(p_, k_));\n\t}\n\n\t/**\n\t * fpdf(x, d1, d2) F分布の確率密度関数\n\t * @param {Complex} x\n\t * @param {Complex} d1 - 分子の自由度\n\t * @param {Complex} d2 - 分母の自由度\n\t * @returns {Complex}\n\t */\n\tstatic fpdf(x, d1, d2) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst d1_ = Complex._toDouble(d1);\n\t\tconst d2_ = Complex._toDouble(d2);\n\t\treturn new Complex(StatisticsTool.fpdf(X, d1_, d2_));\n\t}\n\n\t/**\n\t * fcdf(x, d1, d2) F分布の累積分布関数\n\t * @param {Complex} x\n\t * @param {Complex} d1 - 分子の自由度\n\t * @param {Complex} d2 - 分母の自由度\n\t * @returns {Complex}\n\t */\n\tstatic fcdf(x, d1, d2) {\n\t\tconst X = Complex._toDouble(x);\n\t\tconst d1_ = Complex._toDouble(d1);\n\t\tconst d2_ = Complex._toDouble(d2);\n\t\treturn new Complex(StatisticsTool.fcdf(X, d1_, d2_));\n\t}\n\n\t/**\n\t * finv(p, d1, d2) F分布の累積分布関数の逆関数\n\t * @param {Complex} p\n\t * @param {Complex} d1 - 分子の自由度\n\t * @param {Complex} d2 - 分母の自由度\n\t * @returns {Complex}\n\t */\n\tstatic finv(p, d1, d2) {\n\t\tconst p_ = Complex._toDouble(p);\n\t\tconst d1_ = Complex._toDouble(d1);\n\t\tconst d2_ = Complex._toDouble(d2);\n\t\treturn new Complex(StatisticsTool.finv(p_, d1_, d2_));\n\t}\n\n}\n\n/**\n * Matrix用の統計処理用の計算クラス\n */\nexport default class Statistics {\n\n\t/**\n\t * 対数ガンマ関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @returns {Matrix}\n\t */\n\tstatic gammaln(x) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.gammaln(num);\n\t\t});\n\t}\n\n\t/**\n\t * ガンマ関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @returns {Matrix}\n\t */\n\tstatic gamma(x) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.gamma(num);\n\t\t});\n\t}\n\n\t/**\n\t * 不完全ガンマ関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {string} [tail=\"lower\"] - lower/upper\n\t * @returns {Matrix}\n\t */\n\tstatic gammainc(x, a, tail) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst a_ = Matrix._toDouble(a);\n\t\tconst tail_ = isStr(tail) ? tail : \"lower\";\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.gammainc(num, a_, tail_);\n\t\t});\n\t}\n\n\t/**\n\t * ガンマ分布の確率密度関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - 形状母数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} s - 尺度母数\n\t * @returns {Matrix}\n\t */\n\tstatic gampdf(x, k, s) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst k_ = Matrix._toDouble(k);\n\t\tconst s_ = Matrix._toDouble(s);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.gampdf(num, k_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * ガンマ分布の確率密度関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - 形状母数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} s - 尺度母数\n\t * @returns {Matrix}\n\t */\n\tstatic gamcdf(x, k, s) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst k_ = Matrix._toDouble(k);\n\t\tconst s_ = Matrix._toDouble(s);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.gamcdf(num, k_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * ガンマ分布の累積分布関数の逆関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - 形状母数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} s - 尺度母数\n\t * @returns {Matrix}\n\t */\n\tstatic gaminv(x, k, s) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst k_ = Matrix._toDouble(k);\n\t\tconst s_ = Matrix._toDouble(s);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.gaminv(num, k_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * ベータ関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} y\n\t * @returns {Matrix}\n\t */\n\tstatic beta(x, y) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst y_ = Matrix._toDouble(y);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.beta(num, y_);\n\t\t});\n\t}\n\t\n\t/**\n\t * 不完全ベータ関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} b\n\t * @param {string} [tail=\"lower\"] - lower/upper\n\t * @returns {Matrix}\n\t */\n\tstatic betainc(x, a, b, tail) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst a_ = Matrix._toDouble(a);\n\t\tconst b_ = Matrix._toDouble(b);\n\t\tconst tail_ = isStr(tail) ? tail : \"lower\";\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.betainc(num, a_, b_, tail_);\n\t\t});\n\t}\n\n\t/**\n\t * ベータ分布の確率密度関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} b\n\t * @returns {Matrix}\n\t */\n\tstatic betacdf(x, a, b) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst a_ = Matrix._toDouble(a);\n\t\tconst b_ = Matrix._toDouble(b);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.betacdf(num, a_, b_);\n\t\t});\n\t}\n\n\t/**\n\t * ベータ分布の累積分布関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} b\n\t * @returns {Matrix}\n\t */\n\tstatic betapdf(x, a, b) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst a_ = Matrix._toDouble(a);\n\t\tconst b_ = Matrix._toDouble(b);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.betapdf(num, a_, b_);\n\t\t});\n\t}\n\n\t/**\n\t * ベータ分布の累積分布関数の逆関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} a\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} b\n\t * @returns {Matrix}\n\t */\n\tstatic betainv(x, a, b) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst a_ = Matrix._toDouble(a);\n\t\tconst b_ = Matrix._toDouble(b);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.betainv(num, a_, b_);\n\t\t});\n\t}\n\n\t/**\n\t * x! 階乗関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @returns {Matrix}\n\t */\n\tstatic factorial(x) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.factorial(num);\n\t\t});\n\t}\n\t\n\t/**\n\t * nCk 二項係数またはすべての組合わせ\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k\n\t * @returns {Matrix}\n\t */\n\tstatic nchoosek(x, k) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst k_ = Matrix._toDouble(k);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.nchoosek(num, k_);\n\t\t});\n\t}\n\t\n\t/**\n\t * 誤差関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @returns {Matrix}\n\t */\n\tstatic erf(x) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.erf(num);\n\t\t});\n\t}\n\n\t/**\n\t * 相補誤差関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @returns {Matrix}\n\t */\n\tstatic erfc(x) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.erfc(num);\n\t\t});\n\t}\n\t\n\t/**\n\t * 正規分布の確率密度関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [u=0.0] - 平均値\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [s=1.0] - 分散\n\t * @returns {Matrix}\n\t */\n\tstatic normpdf(x, u=0.0, s=1.0) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst u_ = Complex._toDouble(u);\n\t\tconst s_ = Complex._toDouble(s);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.normpdf(num, u_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * 正規分布の累積分布関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [u=0.0] - 平均値\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [s=1.0] - 分散\n\t * @returns {Matrix}\n\t */\n\tstatic normcdf(x, u=0.0, s=1.0) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst u_ = Complex._toDouble(u);\n\t\tconst s_ = Complex._toDouble(s);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.normcdf(num, u_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * 正規分布の累積分布関数の逆関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [u=0.0] - 平均値\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} [s=1.0] - 分散\n\t * @returns {Matrix}\n\t */\n\tstatic norminv(x, u=0.0, s=1.0) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst u_ = Complex._toDouble(u);\n\t\tconst s_ = Complex._toDouble(s);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.norminv(num, u_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * t分布の確率密度関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - 自由度\n\t * @returns {Matrix}\n\t */\n\tstatic tpdf(x, v) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst v_ = Matrix._toDouble(v);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.tpdf(num, v_);\n\t\t});\n\t}\n\n\t/**\n\t * t分布の累積分布関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - 自由度\n\t * @returns {Matrix}\n\t */\n\tstatic tcdf(x, v) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst v_ = Matrix._toDouble(v);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.tcdf(num, v_);\n\t\t});\n\t}\n\n\t/**\n\t * t分布の累積分布関数の逆関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - 自由度\n\t * @returns {Matrix}\n\t */\n\tstatic tinv(x, v) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst v_ = Matrix._toDouble(v);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.tinv(num, v_);\n\t\t});\n\t}\n\n\t/**\n\t * 尾部が指定可能なt分布の累積分布関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - 自由度\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} tails - 尾部(1...片側、2...両側)\n\t * @returns {Matrix}\n\t */\n\tstatic tdist(x, v, tails) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst v_ = Matrix._toDouble(v);\n\t\tconst tails_ = Matrix._toDouble(tails);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.tdist(num, v_, tails_);\n\t\t});\n\t}\n\n\t/**\n\t * 両側検定時のt分布の累積分布関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} v - 自由度\n\t * @returns {Matrix}\n\t */\n\tstatic tinv2(x, v) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst v_ = Matrix._toDouble(v);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.tinv2(num, v_);\n\t\t});\n\t}\n\n\t/**\n\t * カイ二乗分布の確率密度関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - 自由度\n\t * @returns {Matrix}\n\t */\n\tstatic chi2pdf(x, k) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst k_ = Matrix._toDouble(k);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.chi2pdf(num, k_);\n\t\t});\n\t}\n\n\t/**\n\t * カイ二乗分布の累積分布関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - 自由度\n\t * @returns {Matrix}\n\t */\n\tstatic chi2cdf(x, k) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst k_ = Matrix._toDouble(k);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.chi2cdf(num, k_);\n\t\t});\n\t}\n\t\n\t/**\n\t * カイ二乗分布の累積分布関数の逆関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} k - 自由度\n\t * @returns {Matrix}\n\t */\n\tstatic chi2inv(x, k) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst k_ = Matrix._toDouble(k);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.chi2inv(num, k_);\n\t\t});\n\t}\n\n\t/**\n\t * F分布の確率密度関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d1 - 分子の自由度\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d2 - 分母の自由度\n\t * @returns {Matrix}\n\t */\n\tstatic fpdf(x, d1, d2) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst d1_ = Matrix._toDouble(d1);\n\t\tconst d2_ = Matrix._toDouble(d2);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.fpdf(num, d1_, d2_);\n\t\t});\n\t}\n\n\t/**\n\t * F分布の累積分布関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d1 - 分子の自由度\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d2 - 分母の自由度\n\t * @returns {Matrix}\n\t */\n\tstatic fcdf(x, d1, d2) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst d1_ = Matrix._toDouble(d1);\n\t\tconst d2_ = Matrix._toDouble(d2);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.fcdf(num, d1_, d2_);\n\t\t});\n\t}\n\n\t/**\n\t * F分布の累積分布関数の逆関数\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d1 - 分子の自由度\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} d2 - 分母の自由度\n\t * @returns {Matrix}\n\t */\n\tstatic finv(x, d1, d2) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst d1_ = Matrix._toDouble(d1);\n\t\tconst d2_ = Matrix._toDouble(d2);\n\t\treturn X.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn StatisticsComplex.finv(num, d1_, d2_);\n\t\t});\n\t}\n\t\n\t/**\n\t * 最大値\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix} max([A, B])\n\t */\n\tstatic max(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst main = function(data) {\n\t\t\tlet x = data[0];\n\t\t\tfor(let i = 1; i < data.length; i++) {\n\t\t\t\tif(x.compareTo(data[i]) < 0) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [x];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\t\n\t/**\n\t * 最小値\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix} min([A, B])\n\t */\n\tstatic min(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst main = function(data) {\n\t\t\tlet x = data[0];\n\t\t\tfor(let i = 1; i < data.length; i++) {\n\t\t\t\tif(x.compareTo(data[i]) > 0) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [x];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * 合計\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic sum(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst main = function(data) {\n\t\t\t// カハンの加算アルゴリズム\n\t\t\tlet sum = Complex.ZERO;\n\t\t\tlet delta = Complex.ZERO;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst new_number = data[i].add(delta);\n\t\t\t\tconst new_sum = sum.add(new_number);\n\t\t\t\tdelta = new_sum.sub(sum).sub(new_number);\n\t\t\t\tsum = new_sum;\n\t\t\t}\n\t\t\treturn [sum];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * 相加平均\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic mean(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst main = function(data) {\n\t\t\t// カハンの加算アルゴリズム\n\t\t\tlet sum = Complex.ZERO;\n\t\t\tlet delta = Complex.ZERO;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst new_number = data[i].add(delta);\n\t\t\t\tconst new_sum = sum.add(new_number);\n\t\t\t\tdelta = new_sum.sub(sum).sub(new_number);\n\t\t\t\tsum = new_sum;\n\t\t\t}\n\t\t\treturn [sum.div(data.length)];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * 配列の積\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic prod(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst main = function(data) {\n\t\t\tlet x = Complex.ONE;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tx = x.mul(data[i]);\n\t\t\t}\n\t\t\treturn [x];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * 相乗平均／幾何平均\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic geomean(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst main = function(data) {\n\t\t\tlet x = Complex.ONE;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tx = x.mul(data[i]);\n\t\t\t}\n\t\t\treturn [x.pow(Complex.create(data.length).inv())];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\t\n\t/**\n\t * 中央値\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic median(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst compare = function(a, b){\n\t\t\treturn a.compareTo(b);\n\t\t};\n\t\tconst main = function(data) {\n\t\t\tdata.sort(compare);\n\t\t\tlet y;\n\t\t\tif((data.length % 2) === 1) {\n\t\t\t\ty = data[Math.floor(data.length / 2)];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst x1 = data[Math.floor(data.length / 2) - 1];\n\t\t\t\tconst x2 = data[Math.floor(data.length / 2)];\n\t\t\t\ty = x1.add(x2).div(Complex.TWO);\n\t\t\t}\n\t\t\treturn [y];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * 最頻値\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number)}} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic mode(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst compare = function(a, b){\n\t\t\treturn a.compareTo(b);\n\t\t};\n\t\tconst main = function(data) {\n\t\t\tdata.sort(compare);\n\t\t\tconst map = {};\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst str = data[i].real + \" \" + data[i].imag;\n\t\t\t\tif(!map[str]) {\n\t\t\t\t\tmap[str] = {\n\t\t\t\t\t\tcomplex : data[i],\n\t\t\t\t\t\tvalue : 1\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmap[str].value++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet max_complex = Complex.ZERO;\n\t\t\tlet max_number = Number.NEGATIVE_INFINITY;\n\t\t\tfor(const key in map) {\n\t\t\t\tconst tgt = map[key];\n\t\t\t\tif(tgt.value > max_number) {\n\t\t\t\t\tmax_number\t= tgt.value;\n\t\t\t\t\tmax_complex\t= tgt.complex;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [max_complex];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * 中心積率\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number), correction : ?number, nth_order : number}} [type]\n\t * @returns {Matrix} n次のモーメント、2で分散の定義と同等。\n\t */\n\tstatic moment(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst M = Statistics.mean(X);\n\t\t// 補正値 0(不偏分散), 1(標本分散)。規定値は、標本分散とする\n\t\tconst cor = !(type && typeof type.correction === \"number\") ? 1: Matrix._toDouble(type.correction);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst order = Matrix._toComplex(type.nth_order);\n\t\tlet col = 0;\n\t\tconst main = function(data) {\n\t\t\tlet mean;\n\t\t\tif(M.isScalar()) {\n\t\t\t\tmean = M.scalar;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmean = M.getComplex(col++);\n\t\t\t}\n\t\t\tlet x = Complex.ZERO;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\t// 計算方法について\n\t\t\t\t// ・複素数は、ノルムをとらずに複素数用のpowを使用したほうがいいのか\n\t\t\t\t// ・分散と同様にnormで計算したほうがいいのか\n\t\t\t\t// 複素数でのモーメントの定義がないため不明であるが、\n\t\t\t\t// 分散を拡張した考えであれば、normをとった累乗のほうが良いと思われる。\n\t\t\t\tconst a = data[i].sub(mean);\n\t\t\t\tx = x.add(a.pow(order));\n\t\t\t}\n\t\t\tif(data.length === 1) {\n\t\t\t\treturn [x.div(data.length)];\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn [x.div(data.length - 1 + cor)];\n\t\t\t}\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * 分散\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number), correction : ?number}} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic var(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst M = Statistics.mean(X);\n\t\t// 補正値 0(不偏分散), 1(標本分散)。規定値は、不偏分散とする\n\t\tconst cor = !(type && typeof type.correction === \"number\") ? 0: Matrix._toDouble(type.correction);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tlet col = 0;\n\t\tconst main = function(data) {\n\t\t\tif(data.length === 1) {\n\t\t\t\t// 要素が1であれば、分散は0固定\n\t\t\t\treturn [Complex.ZERO];\n\t\t\t}\n\t\t\tconst mean = M.getComplex(col++);\n\t\t\t// 分散は、ノルムの2乗で計算するため必ず実数になる。\n\t\t\tlet x = 0;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst a = data[i].sub(mean).norm;\n\t\t\t\tx += a * a;\n\t\t\t}\n\t\t\treturn [Complex.create(x / (data.length - 1 + cor))];\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\t/**\n\t * 標準偏差\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number), correction : ?number}} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic std(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\t// 補正値 0(不偏分散), 1(標本分散)。規定値は、不偏分散とする\n\t\tconst cor = !(type && typeof type.correction === \"number\") ? 0: Matrix._toDouble(type.correction);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst M = Statistics.var(X, { correction : cor, dimension : dim });\n\t\tM._each(function(num) {\n\t\t\treturn num.sqrt();\n\t\t});\n\t\treturn M;\n\t}\n\n\t/**\n\t * 絶対偏差\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number), algorithm : (?string|?number)}} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic mad(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst alg = !(type && type.algorithm) ? \"mean\" : type.algorithm;\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tif((alg === \"mean\") || (alg === 0)) {\n\t\t\treturn Statistics.mean(X.sub(Statistics.mean(X, {dimension : dim} )).abs(), {dimension : dim});\n\t\t}\n\t\telse if((alg === \"median\") || (alg === 1)) {\n\t\t\treturn Statistics.median(X.sub(Statistics.median(X, {dimension : dim} )).abs(), {dimension : dim});\n\t\t}\n\t\telse {\n\t\t\tthrow \"mad unsupported argument \" + alg;\n\t\t}\n\t}\n\n\t/**\n\t * 歪度\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number), correction : ?number}} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic skewness(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\t// 補正値 0(不偏), 1(標本)。規定値は、標本とする\n\t\tconst cor = !(type && typeof type.correction === \"number\") ? 1: Matrix._toDouble(type.correction);\n\t\tconst dim = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst order = Statistics.moment(X, { correction : cor, dimension : dim, nth_order : 3  });\n\t\tconst std = Statistics.std(X, { correction : cor, dimension : dim });\n\t\tif(cor === 1) {\n\t\t\treturn order.ndiv(std.npow(3));\n\t\t}\n\t\telse {\n\t\t\treturn order.ndiv(std.npow(3)).nmul(2);\n\t\t}\n\t}\n\n\t/**\n\t * 共分散行列\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number), correction : ?number}} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic cov(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\t// 補正値 0(不偏分散), 1(標本分散)。規定値は、不偏分散とする\n\t\tconst cor = !(type && typeof type.correction === \"number\") ? 0: Matrix._toDouble(type.correction);\n\t\tif(X.isVector()) {\n\t\t\treturn Statistics.var(X, type);\n\t\t}\n\t\tconst correction = X.row_length === 1 ? 1 : cor;\n\t\tconst arr = X.matrix_array;\n\t\tconst mean = Statistics.mean(X).matrix_array[0];\n\t\t// 上三角行列、対角行列\n\t\tconst y = new Array(X.column_length);\n\t\tfor(let a = 0; a < X.column_length; a++) {\n\t\t\tconst a_mean = mean[a];\n\t\t\ty[a] = new Array(X.column_length);\n\t\t\tfor(let b = a; b < X.column_length; b++) {\n\t\t\t\tconst b_mean = mean[b];\n\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\tfor(let row = 0; row < X.row_length; row++) {\n\t\t\t\t\tsum = sum.add((arr[row][a].sub(a_mean)).dot(arr[row][b].sub(b_mean)));\n\t\t\t\t}\n\t\t\t\ty[a][b] = sum.div(X.row_length - 1 + correction);\n\t\t\t}\n\t\t}\n\t\t// 下三角行列を作る\n\t\tfor(let row = 1; row < y[0].length; row++) {\n\t\t\tfor(let col = 0; col < row; col++) {\n\t\t\t\ty[row][col] = y[col][row];\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * 標本の標準化\n\t * 平均値0、標準偏差1に変更する\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number), correction : ?number}} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic normalize(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst mean_zero = X.sub(Statistics.mean(X, type));\n\t\tconst std_one = mean_zero.ndiv(Statistics.std(mean_zero, type));\n\t\treturn std_one;\n\t}\n\n\t/**\n\t * 相関行列\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number), correction : ?number}} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic corrcoef(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\treturn Statistics.cov(Statistics.normalize(X, type), type);\n\t}\n\n\t/**\n\t * ソート\n\t * @param {Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object} x\n\t * @param {{dimension : (?string|?number), order : ?string}} [type]\n\t * @returns {Matrix}\n\t */\n\tstatic sort(x, type) {\n\t\tconst X = Matrix._toMatrix(x);\n\t\tconst dim   = !(type && type.dimension) ? \"auto\" : type.dimension;\n\t\tconst order = !(type && type.order) ? \"ascend\" : type.order;\n\t\tlet compare;\n\t\tif(order === \"ascend\") {\n\t\t\tcompare = function(a, b){\n\t\t\t\treturn a.compareTo(b);\n\t\t\t};\n\t\t}\n\t\telse {\n\t\t\tcompare = function(a, b){\n\t\t\t\treturn b.compareTo(a);\n\t\t\t};\n\t\t}\n\t\tconst main = function(data) {\n\t\t\tdata.sort(compare);\n\t\t\treturn data;\n\t\t};\n\t\treturn X.eachVector(main, dim);\n\t}\n\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/math/tools/Statistics.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 720,
    "kind": "class",
    "name": "StatisticsTool",
    "memberof": "src/math/tools/Statistics.mjs",
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Statistics.mjs",
    "importStyle": null,
    "description": "実数専用の統計処理用の関数集",
    "lineNumber": 21,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 721,
    "kind": "method",
    "name": "gammaln",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.gammaln",
    "access": "public",
    "description": "gammaln(x) 対数ガンマ関数 ",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 722,
    "kind": "method",
    "name": "q_gamma",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.q_gamma",
    "access": "public",
    "description": "q_gamma(x, a, gammaln_a) 不完全ガンマ関数 上側",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "gammaln_a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 723,
    "kind": "method",
    "name": "p_gamma",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.p_gamma",
    "access": "public",
    "description": "p_gamma(x, a, gammaln_a) 不完全ガンマ関数 下側",
    "lineNumber": 111,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "gammaln_a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 724,
    "kind": "method",
    "name": "gamma",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.gamma",
    "access": "public",
    "description": "gamma(z) ガンマ関数",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 725,
    "kind": "method",
    "name": "gammainc",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.gammainc",
    "access": "public",
    "description": "gammainc(x, a, tail) 不完全ガンマ関数",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower(デフォルト)/upper"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 726,
    "kind": "method",
    "name": "gampdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.gampdf",
    "access": "public",
    "description": "gampdf(x, k, s) ガンマ分布の確率密度関数",
    "lineNumber": 176,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 727,
    "kind": "method",
    "name": "gamcdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.gamcdf",
    "access": "public",
    "description": "gamcdf(x, k, s) ガンマ分布の累積分布関数",
    "lineNumber": 190,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 728,
    "kind": "method",
    "name": "gaminv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.gaminv",
    "access": "public",
    "description": "gaminv(p, k, s) ガンマ分布の累積分布関数の逆関数",
    "lineNumber": 201,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 729,
    "kind": "method",
    "name": "beta",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.beta",
    "access": "public",
    "description": "beta(x, y) ベータ関数",
    "lineNumber": 240,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 730,
    "kind": "method",
    "name": "p_beta",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.p_beta",
    "access": "public",
    "description": "p_beta(x, a, b) 不完全ベータ関数 下側",
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 731,
    "kind": "method",
    "name": "q_beta",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.q_beta",
    "access": "public",
    "description": "q_beta(x, a, b) 不完全ベータ関数 上側",
    "lineNumber": 303,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 732,
    "kind": "method",
    "name": "betainc",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.betainc",
    "access": "public",
    "description": "betainc(x, a, b, tail) 不完全ベータ関数",
    "lineNumber": 315,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "{string} lower(デフォルト)/upper"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 733,
    "kind": "method",
    "name": "isInteger",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.isInteger",
    "access": "public",
    "description": "isInteger(x) xが整数かどうか",
    "lineNumber": 336,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 734,
    "kind": "method",
    "name": "betapdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.betapdf",
    "access": "public",
    "description": "betapdf(x, a, b) ベータ分布の確率密度関数",
    "lineNumber": 347,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 735,
    "kind": "method",
    "name": "betacdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.betacdf",
    "access": "public",
    "description": "betacdf(x, a, b) ベータ分布の累積分布関数",
    "lineNumber": 367,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 736,
    "kind": "method",
    "name": "betainv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.betainv",
    "access": "public",
    "description": "betainv(p, a, b) ベータ分布の累積分布関数の逆関数",
    "lineNumber": 378,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 737,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.factorial",
    "access": "public",
    "description": "factorial(n) = n! 階乗関数",
    "lineNumber": 428,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 738,
    "kind": "method",
    "name": "nchoosek",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.nchoosek",
    "access": "public",
    "description": "nchoosek(n, k) = nCk 二項係数またはすべての組合わせ",
    "lineNumber": 444,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} nCk"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "nCk"
    }
  },
  {
    "__docId__": 739,
    "kind": "method",
    "name": "erf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.erf",
    "access": "public",
    "description": "erf(x) 誤差関数",
    "lineNumber": 453,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 740,
    "kind": "method",
    "name": "erfc",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.erfc",
    "access": "public",
    "description": "erfc(x) 相補誤差関数",
    "lineNumber": 462,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 741,
    "kind": "method",
    "name": "normpdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.normpdf",
    "access": "public",
    "description": "normpdf(x, u, s) 正規分布の確率密度関数",
    "lineNumber": 521,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 742,
    "kind": "method",
    "name": "normcdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.normcdf",
    "access": "public",
    "description": "normcdf(x, u, s) 正規分布の累積分布関数",
    "lineNumber": 536,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 743,
    "kind": "method",
    "name": "norminv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.norminv",
    "access": "public",
    "description": "norminv(p, u, s) 正規分布の累積分布関数の逆関数",
    "lineNumber": 549,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "確率"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 744,
    "kind": "method",
    "name": "tpdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.tpdf",
    "access": "public",
    "description": "tpdf(t, k) t分布の確率密度関数",
    "lineNumber": 587,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "t値"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 745,
    "kind": "method",
    "name": "tcdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.tcdf",
    "access": "public",
    "description": "tcdf(t) t分布の累積分布関数",
    "lineNumber": 599,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "t値"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 746,
    "kind": "method",
    "name": "tinv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.tinv",
    "access": "public",
    "description": "tinv(p, v) t分布の累積分布関数の逆関数",
    "lineNumber": 611,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "確率"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 747,
    "kind": "method",
    "name": "tdist",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.tdist",
    "access": "public",
    "description": "tdist(t, v, tails) 尾部が指定可能なt分布の累積分布関数",
    "lineNumber": 638,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "t値"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "tails",
        "description": "尾部(1...片側、2...両側)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 748,
    "kind": "method",
    "name": "tinv2",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.tinv2",
    "access": "public",
    "description": "tinv2(p, v) 両側検定時のt分布の累積分布関数",
    "lineNumber": 648,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "確率"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 749,
    "kind": "method",
    "name": "chi2pdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.chi2pdf",
    "access": "public",
    "description": "chi2pdf(x, v) カイ二乗分布の確率密度関数",
    "lineNumber": 658,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 750,
    "kind": "method",
    "name": "chi2cdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.chi2cdf",
    "access": "public",
    "description": "chi2cdf(x, v) カイ二乗分布の累積分布関数",
    "lineNumber": 676,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 751,
    "kind": "method",
    "name": "chi2inv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.chi2inv",
    "access": "public",
    "description": "chi2inv(p, v) カイ二乗分布の逆累積分布関数",
    "lineNumber": 686,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "確率"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 752,
    "kind": "method",
    "name": "fpdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.fpdf",
    "access": "public",
    "description": "fpdf(x, d1, d2) F分布の確率密度関数",
    "lineNumber": 697,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 753,
    "kind": "method",
    "name": "fcdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.fcdf",
    "access": "public",
    "description": "fcdf(x, d1, d2) F分布の累積分布関数",
    "lineNumber": 718,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 754,
    "kind": "method",
    "name": "finv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsTool.finv",
    "access": "public",
    "description": "finv(p, d1, d2) F分布の累積分布関数の逆関数",
    "lineNumber": 729,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "確率"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 755,
    "kind": "function",
    "name": "isStr",
    "memberof": "src/math/tools/Statistics.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~isStr",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Statistics.mjs",
    "importStyle": null,
    "description": "文字列か判定",
    "lineNumber": 739,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 756,
    "kind": "class",
    "name": "StatisticsComplex",
    "memberof": "src/math/tools/Statistics.mjs",
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/math/tools/Statistics.mjs",
    "importStyle": null,
    "description": "Complexクラスから利用する統計処理関数集",
    "lineNumber": 747,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 757,
    "kind": "method",
    "name": "gammaln",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.gammaln",
    "access": "public",
    "description": "gammaln(x) 対数ガンマ関数",
    "lineNumber": 754,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 758,
    "kind": "method",
    "name": "gamma",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.gamma",
    "access": "public",
    "description": "gamma(z) ガンマ関数 ",
    "lineNumber": 763,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 759,
    "kind": "method",
    "name": "gammainc",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.gammainc",
    "access": "public",
    "description": "gammainc(x, a, tail) 不完全ガンマ関数",
    "lineNumber": 774,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower/upper"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 760,
    "kind": "method",
    "name": "gampdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.gampdf",
    "access": "public",
    "description": "gampdf(x, k, s) ガンマ分布の確率密度関数",
    "lineNumber": 788,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 761,
    "kind": "method",
    "name": "gamcdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.gamcdf",
    "access": "public",
    "description": "gamcdf(x, k, s) ガンマ分布の確率密度関数",
    "lineNumber": 802,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 762,
    "kind": "method",
    "name": "gaminv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.gaminv",
    "access": "public",
    "description": "gaminv(p, k, s) ガンマ分布の累積分布関数の逆関数",
    "lineNumber": 816,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 763,
    "kind": "method",
    "name": "beta",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.beta",
    "access": "public",
    "description": "beta(x, y) ベータ関数",
    "lineNumber": 829,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 764,
    "kind": "method",
    "name": "betainc",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.betainc",
    "access": "public",
    "description": "betainc(x, a, b, tail) 不完全ベータ関数",
    "lineNumber": 843,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower/upper"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 765,
    "kind": "method",
    "name": "betapdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.betapdf",
    "access": "public",
    "description": "betapdf(x, a, b) ベータ分布の確率密度関数",
    "lineNumber": 858,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 766,
    "kind": "method",
    "name": "betacdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.betacdf",
    "access": "public",
    "description": "betacdf(x, a, b) ベータ分布の累積分布関数",
    "lineNumber": 872,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 767,
    "kind": "method",
    "name": "betainv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.betainv",
    "access": "public",
    "description": "betainv(p, a, b) ベータ分布の累積分布関数の逆関数",
    "lineNumber": 886,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 768,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.factorial",
    "access": "public",
    "description": "factorial(n), n! 階乗関数",
    "lineNumber": 898,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 769,
    "kind": "method",
    "name": "nchoosek",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.nchoosek",
    "access": "public",
    "description": "nchoosek(n, k), nCk 二項係数またはすべての組合わせ",
    "lineNumber": 908,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 770,
    "kind": "method",
    "name": "erf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.erf",
    "access": "public",
    "description": "erf(x) 誤差関数",
    "lineNumber": 919,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 771,
    "kind": "method",
    "name": "erfc",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.erfc",
    "access": "public",
    "description": "erfc(x) 相補誤差関数",
    "lineNumber": 929,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 772,
    "kind": "method",
    "name": "normpdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.normpdf",
    "access": "public",
    "description": "normpdf(x, u, s) 正規分布の確率密度関数",
    "lineNumber": 941,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 773,
    "kind": "method",
    "name": "normcdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.normcdf",
    "access": "public",
    "description": "normcdf(x, u, s) 正規分布の累積分布関数",
    "lineNumber": 955,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 774,
    "kind": "method",
    "name": "norminv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.norminv",
    "access": "public",
    "description": "norminv(x, u, s) 正規分布の累積分布関数の逆関数",
    "lineNumber": 969,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 775,
    "kind": "method",
    "name": "tpdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.tpdf",
    "access": "public",
    "description": "tpdf(x, v) t分布の確率密度関数",
    "lineNumber": 982,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 776,
    "kind": "method",
    "name": "tcdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.tcdf",
    "access": "public",
    "description": "tcdf(t, v) t分布の累積分布関数",
    "lineNumber": 994,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 777,
    "kind": "method",
    "name": "tinv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.tinv",
    "access": "public",
    "description": "tinv(p, v) t分布の累積分布関数の逆関数",
    "lineNumber": 1006,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 778,
    "kind": "method",
    "name": "tdist",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.tdist",
    "access": "public",
    "description": "tdist(t, v, tails) 尾部が指定可能なt分布の累積分布関数",
    "lineNumber": 1019,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "tails",
        "description": "尾部(1...片側、2...両側)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 779,
    "kind": "method",
    "name": "tinv2",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.tinv2",
    "access": "public",
    "description": "tinv2(p, v) 両側検定時のt分布の累積分布関数",
    "lineNumber": 1032,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 780,
    "kind": "method",
    "name": "chi2pdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.chi2pdf",
    "access": "public",
    "description": "chi2pdf(x, k) カイ二乗分布の確率密度関数",
    "lineNumber": 1044,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 781,
    "kind": "method",
    "name": "chi2cdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.chi2cdf",
    "access": "public",
    "description": "chi2cdf(x, k) カイ二乗分布の累積分布関数",
    "lineNumber": 1056,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 782,
    "kind": "method",
    "name": "chi2inv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.chi2inv",
    "access": "public",
    "description": "chi2inv(p, k) カイ二乗分布の累積分布関数の逆関数",
    "lineNumber": 1068,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 783,
    "kind": "method",
    "name": "fpdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.fpdf",
    "access": "public",
    "description": "fpdf(x, d1, d2) F分布の確率密度関数",
    "lineNumber": 1081,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 784,
    "kind": "method",
    "name": "fcdf",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.fcdf",
    "access": "public",
    "description": "fcdf(x, d1, d2) F分布の累積分布関数",
    "lineNumber": 1095,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 785,
    "kind": "method",
    "name": "finv",
    "memberof": "src/math/tools/Statistics.mjs~StatisticsComplex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~StatisticsComplex.finv",
    "access": "public",
    "description": "finv(p, d1, d2) F分布の累積分布関数の逆関数",
    "lineNumber": 1109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 786,
    "kind": "class",
    "name": "Statistics",
    "memberof": "src/math/tools/Statistics.mjs",
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/math/tools/Statistics.mjs",
    "importStyle": "Statistics",
    "description": "Matrix用の統計処理用の計算クラス",
    "lineNumber": 1121,
    "interface": false
  },
  {
    "__docId__": 787,
    "kind": "method",
    "name": "gammaln",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.gammaln",
    "access": "public",
    "description": "対数ガンマ関数",
    "lineNumber": 1128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 788,
    "kind": "method",
    "name": "gamma",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.gamma",
    "access": "public",
    "description": "ガンマ関数",
    "lineNumber": 1140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 789,
    "kind": "method",
    "name": "gammainc",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.gammainc",
    "access": "public",
    "description": "不完全ガンマ関数",
    "lineNumber": 1154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower/upper"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 790,
    "kind": "method",
    "name": "gampdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.gampdf",
    "access": "public",
    "description": "ガンマ分布の確率密度関数",
    "lineNumber": 1170,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 791,
    "kind": "method",
    "name": "gamcdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.gamcdf",
    "access": "public",
    "description": "ガンマ分布の確率密度関数",
    "lineNumber": 1186,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 792,
    "kind": "method",
    "name": "gaminv",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.gaminv",
    "access": "public",
    "description": "ガンマ分布の累積分布関数の逆関数",
    "lineNumber": 1202,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 793,
    "kind": "method",
    "name": "beta",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.beta",
    "access": "public",
    "description": "ベータ関数",
    "lineNumber": 1217,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 794,
    "kind": "method",
    "name": "betainc",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.betainc",
    "access": "public",
    "description": "不完全ベータ関数",
    "lineNumber": 1233,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower/upper"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 795,
    "kind": "method",
    "name": "betacdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.betacdf",
    "access": "public",
    "description": "ベータ分布の確率密度関数",
    "lineNumber": 1250,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 796,
    "kind": "method",
    "name": "betapdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.betapdf",
    "access": "public",
    "description": "ベータ分布の累積分布関数",
    "lineNumber": 1266,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 797,
    "kind": "method",
    "name": "betainv",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.betainv",
    "access": "public",
    "description": "ベータ分布の累積分布関数の逆関数",
    "lineNumber": 1282,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 798,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.factorial",
    "access": "public",
    "description": "x! 階乗関数",
    "lineNumber": 1296,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 799,
    "kind": "method",
    "name": "nchoosek",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.nchoosek",
    "access": "public",
    "description": "nCk 二項係数またはすべての組合わせ",
    "lineNumber": 1309,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 800,
    "kind": "method",
    "name": "erf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.erf",
    "access": "public",
    "description": "誤差関数",
    "lineNumber": 1322,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 801,
    "kind": "method",
    "name": "erfc",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.erfc",
    "access": "public",
    "description": "相補誤差関数",
    "lineNumber": 1334,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 802,
    "kind": "method",
    "name": "normpdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.normpdf",
    "access": "public",
    "description": "正規分布の確率密度関数",
    "lineNumber": 1348,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 803,
    "kind": "method",
    "name": "normcdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.normcdf",
    "access": "public",
    "description": "正規分布の累積分布関数",
    "lineNumber": 1364,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 804,
    "kind": "method",
    "name": "norminv",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.norminv",
    "access": "public",
    "description": "正規分布の累積分布関数の逆関数",
    "lineNumber": 1380,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 805,
    "kind": "method",
    "name": "tpdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.tpdf",
    "access": "public",
    "description": "t分布の確率密度関数",
    "lineNumber": 1395,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 806,
    "kind": "method",
    "name": "tcdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.tcdf",
    "access": "public",
    "description": "t分布の累積分布関数",
    "lineNumber": 1409,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 807,
    "kind": "method",
    "name": "tinv",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.tinv",
    "access": "public",
    "description": "t分布の累積分布関数の逆関数",
    "lineNumber": 1423,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 808,
    "kind": "method",
    "name": "tdist",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.tdist",
    "access": "public",
    "description": "尾部が指定可能なt分布の累積分布関数",
    "lineNumber": 1438,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tails",
        "description": "尾部(1...片側、2...両側)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 809,
    "kind": "method",
    "name": "tinv2",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.tinv2",
    "access": "public",
    "description": "両側検定時のt分布の累積分布関数",
    "lineNumber": 1453,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 810,
    "kind": "method",
    "name": "chi2pdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.chi2pdf",
    "access": "public",
    "description": "カイ二乗分布の確率密度関数",
    "lineNumber": 1467,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 811,
    "kind": "method",
    "name": "chi2cdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.chi2cdf",
    "access": "public",
    "description": "カイ二乗分布の累積分布関数",
    "lineNumber": 1481,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 812,
    "kind": "method",
    "name": "chi2inv",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.chi2inv",
    "access": "public",
    "description": "カイ二乗分布の累積分布関数の逆関数",
    "lineNumber": 1495,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 813,
    "kind": "method",
    "name": "fpdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.fpdf",
    "access": "public",
    "description": "F分布の確率密度関数",
    "lineNumber": 1510,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 814,
    "kind": "method",
    "name": "fcdf",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.fcdf",
    "access": "public",
    "description": "F分布の累積分布関数",
    "lineNumber": 1526,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 815,
    "kind": "method",
    "name": "finv",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.finv",
    "access": "public",
    "description": "F分布の累積分布関数の逆関数",
    "lineNumber": 1542,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 816,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.max",
    "access": "public",
    "description": "最大値",
    "lineNumber": 1557,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} max([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "max([A, B])"
    }
  },
  {
    "__docId__": 817,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.min",
    "access": "public",
    "description": "最小値",
    "lineNumber": 1578,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} min([A, B])"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "min([A, B])"
    }
  },
  {
    "__docId__": 818,
    "kind": "method",
    "name": "sum",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.sum",
    "access": "public",
    "description": "合計",
    "lineNumber": 1599,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 819,
    "kind": "method",
    "name": "mean",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.mean",
    "access": "public",
    "description": "相加平均",
    "lineNumber": 1623,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 820,
    "kind": "method",
    "name": "prod",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.prod",
    "access": "public",
    "description": "配列の積",
    "lineNumber": 1647,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 821,
    "kind": "method",
    "name": "geomean",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.geomean",
    "access": "public",
    "description": "相乗平均／幾何平均",
    "lineNumber": 1666,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 822,
    "kind": "method",
    "name": "median",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.median",
    "access": "public",
    "description": "中央値",
    "lineNumber": 1685,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 823,
    "kind": "method",
    "name": "mode",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.mode",
    "access": "public",
    "description": "最頻値",
    "lineNumber": 1713,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 824,
    "kind": "method",
    "name": "moment",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.moment",
    "access": "public",
    "description": "中心積率",
    "lineNumber": 1754,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} n次のモーメント、2で分散の定義と同等。"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number), correction : ?number, nth_order : number}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "n次のモーメント、2で分散の定義と同等。"
    }
  },
  {
    "__docId__": 825,
    "kind": "method",
    "name": "var",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.var",
    "access": "public",
    "description": "分散",
    "lineNumber": 1796,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number), correction : ?number}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 826,
    "kind": "method",
    "name": "std",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.std",
    "access": "public",
    "description": "標準偏差",
    "lineNumber": 1826,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number), correction : ?number}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 827,
    "kind": "method",
    "name": "mad",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.mad",
    "access": "public",
    "description": "絶対偏差",
    "lineNumber": 1844,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number), algorithm : (?string|?number)}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 828,
    "kind": "method",
    "name": "skewness",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.skewness",
    "access": "public",
    "description": "歪度",
    "lineNumber": 1865,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number), correction : ?number}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 829,
    "kind": "method",
    "name": "cov",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.cov",
    "access": "public",
    "description": "共分散行列",
    "lineNumber": 1886,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number), correction : ?number}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 830,
    "kind": "method",
    "name": "normalize",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.normalize",
    "access": "public",
    "description": "標本の標準化\n平均値0、標準偏差1に変更する",
    "lineNumber": 1926,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number), correction : ?number}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 831,
    "kind": "method",
    "name": "corrcoef",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.corrcoef",
    "access": "public",
    "description": "相関行列",
    "lineNumber": 1939,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number), correction : ?number}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 832,
    "kind": "method",
    "name": "sort",
    "memberof": "src/math/tools/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/tools/Statistics.mjs~Statistics.sort",
    "access": "public",
    "description": "ソート",
    "lineNumber": 1950,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix|Complex|number|string|Array<string|number|Complex>|Array<Array<string|number|Complex>>|Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{dimension : (?string|?number), order : ?string}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 833,
    "kind": "file",
    "name": "src/utility/Format.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n/**\n  * \n  * @ignore\n  */\nexport default class Format {\n\n\t/**\n\t * C言語のprintfを再現\n\t * ロケール、日付時刻等はサポートしていません。\n\t * sprintfの変換指定子のpとnはサポートしていません。\n\t * @param {string} text \n\t * @param {string} parmeter パラメータは可変引数\n\t * @returns {string}\n\t * @ignore\n\t */\n\tstatic format(text, parmeter) {\n\t\tlet parm_number = 1;\n\t\tconst parm = arguments;\n\t\tconst toUnsign  = function(num) {\n\t\t\tlet x = num;\n\t\t\tif(x >= 0) {\n\t\t\t\treturn(x);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tx = -x;\n\t\t\t\t//16ビットごとに分けてビット反転\n\t\t\t\tlet high = ((~x) >> 16) & 0xFFFF;\n\t\t\t\thigh *= 0x00010000;\n\t\t\t\tconst low  =  (~x) & 0xFFFF;\n\t\t\t\treturn(high + low + 1);\n\t\t\t}\n\t\t};\n\t\tconst func = function(text) {\n\t\t\tlet str = text;\n\t\t\t// 1文字目の%を除去\n\t\t\tstr = str.substring(1, str.length);\n\t\t\tlet buff;\n\t\t\t// [6] 変換指定子(最後の1文字を取得)\n\t\t\tbuff = str.match(/.$/);\n\t\t\tconst type = buff[0];\n\t\t\tif(type === \"%\") {\n\t\t\t\treturn(\"%\");\n\t\t\t}\n\t\t\t// ここからパラメータの解析開始\n\t\t\t// [1] 引数順\n\t\t\tbuff = str.match(/^[0-9]+\\$/);\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0];\n\t\t\t\t// 残りの文字列を取得\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t\t// 数字だけ切り出す\n\t\t\t\tbuff = buff.substring(0, buff.length - 1);\n\t\t\t\t// 整数へ\n\t\t\t\tparm_number = parseInt(buff , 10);\n\t\t\t}\n\t\t\t// 引数を取得\n\t\t\tlet parameter = parm[parm_number];\n\t\t\tparm_number = parm_number + 1;\n\t\t\t// [2] フラグ\n\t\t\tbuff = str.match(/^[-+ #0]+/);\n\t\t\tlet isFlagSharp = false;\n\t\t\tlet isFlagTextAlignLeft = false;\n\t\t\tconst isFlagFill = false;\n\t\t\tlet sFillCharacter = \" \";\n\t\t\tlet isFlagFillZero = false;\n\t\t\tlet isFlagDrawSign = false;\n\t\t\tlet sSignCharacter = \"\";\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0];\n\t\t\t\t// 残りの文字列を取得\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t\tif(buff.indexOf(\"#\") !== -1) {\n\t\t\t\t\tisFlagSharp = true;\n\t\t\t\t}\n\t\t\t\tif(buff.indexOf(\"-\") !== -1) {\n\t\t\t\t\tisFlagTextAlignLeft = true;\n\t\t\t\t}\n\t\t\t\tif(buff.indexOf(\" \") !== -1) {\n\t\t\t\t\tisFlagDrawSign = true;\n\t\t\t\t\tsSignCharacter = \" \";\n\t\t\t\t}\n\t\t\t\tif(buff.indexOf(\"+\") !== -1) {\n\t\t\t\t\tisFlagDrawSign = true;\n\t\t\t\t\tsSignCharacter = \"+\";\n\t\t\t\t}\n\t\t\t\tif(buff.indexOf(\"0\") !== -1) {\n\t\t\t\t\tisFlagFillZero = true;\n\t\t\t\t\tsFillCharacter = \"0\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t// [3] 最小フィールド幅\n\t\t\tlet width = 0;\n\t\t\tbuff = str.match(/^([0-9]+|\\*)/);\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0];\n\t\t\t\t// 残りの文字列を取得\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t\tif(buff.indexOf(\"*\") !== -1) { // 引数で最小フィールド幅を指定\n\t\t\t\t\twidth = parameter;\n\t\t\t\t\tparameter = parm[parm_number];\n\t\t\t\t\tparm_number = parm_number + 1;\n\t\t\t\t}\n\t\t\t\telse { // 数字で指定\n\t\t\t\t\twidth = parseInt(buff , 10);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// [4] 精度の指定\n\t\t\tlet isPrecision = false;\n\t\t\tlet precision = 0;\n\t\t\tbuff = str.match(/^(\\.((-?[0-9]+)|\\*)|\\.)/); //.-3, .* , .\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0];\n\t\t\t\t// 残りの文字列を取得\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t\tisPrecision = true;\n\t\t\t\tif(buff.indexOf(\"*\") !== -1) { // 引数で精度を指定\n\t\t\t\t\tprecision = parameter;\n\t\t\t\t\tparameter = parm[parm_number];\n\t\t\t\t\tparm_number = parm_number + 1;\n\t\t\t\t}\n\t\t\t\telse if(buff.length === 1) { // 小数点だけの指定\n\t\t\t\t\tprecision = 0;\n\t\t\t\t}\n\t\t\t\telse { // 数字で指定\n\t\t\t\t\tbuff = buff.substring(1, buff.length);\n\t\t\t\t\tprecision = parseInt(buff , 10);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 長さ修飾子(非サポート)\n\t\t\tbuff = str.match(/^hh|h|ll|l|L|z|j|t/);\n\t\t\tif(buff !== null) {\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t}\n\t\t\t// 文字列を作成する\n\t\t\tlet output = \"\";\n\t\t\tlet isInteger = false;\n\t\t\tswitch(type.toLowerCase()) {\n\t\t\t\t// 数字関連\n\t\t\t\tcase \"d\":\n\t\t\t\tcase \"i\":\n\t\t\t\tcase \"u\":\n\t\t\t\tcase \"b\":\n\t\t\t\tcase \"o\":\n\t\t\t\tcase \"x\":\n\t\t\t\t\tisInteger = true;\n\t\t\t\t\t// falls through\n\t\t\t\tcase \"e\":\n\t\t\t\tcase \"f\":\n\t\t\t\tcase \"g\":\n\t\t\t\t{\n\t\t\t\t\tlet sharpdata = \"\";\n\t\t\t\t\tlet textlength = 0; // 現在の文字を構成するために必要な長さ\n\t\t\t\t\tlet spacesize;  // 追加する横幅\n\t\t\t\t\t// 整数\n\t\t\t\t\tif(isInteger) {\n\t\t\t\t\t\t// 数字に変換\n\t\t\t\t\t\tif(isNaN(parameter)) {\n\t\t\t\t\t\t\tparameter = parseInt(parameter, 10);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 正負判定\n\t\t\t\t\t\tif((type === \"d\") || (type === \"i\")) {\n\t\t\t\t\t\t\tif(parameter < 0) {\n\t\t\t\t\t\t\t\tsSignCharacter = \"-\";\n\t\t\t\t\t\t\t\tparameter  = -parameter;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tparameter  = Math.floor(parameter);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif(parameter >= 0) {\n\t\t\t\t\t\t\t\tparameter  = Math.floor(parameter);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tparameter  = Math.ceil(parameter);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 実数\n\t\t\t\t\telse {\n\t\t\t\t\t\t// 数字に変換\n\t\t\t\t\t\tif(isNaN(parameter)) {\n\t\t\t\t\t\t\tparameter = parseFloat(parameter);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 正負判定\n\t\t\t\t\t\tif(parameter < 0) {\n\t\t\t\t\t\t\tsSignCharacter = \"-\";\n\t\t\t\t\t\t\tparameter  = -parameter;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!isPrecision) {\n\t\t\t\t\t\t\tprecision = 6;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 文字列を作成していく\n\t\t\t\t\tswitch(type.toLowerCase()) {\n\t\t\t\t\t\tcase \"d\":\n\t\t\t\t\t\tcase \"i\":\n\t\t\t\t\t\t\toutput += parameter.toString(10);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"u\":\n\t\t\t\t\t\t\toutput += toUnsign(parameter).toString(10);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"b\":\n\t\t\t\t\t\t\toutput += toUnsign(parameter).toString(2);\n\t\t\t\t\t\t\tif(isFlagSharp) {\n\t\t\t\t\t\t\t\tsharpdata = \"0b\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"o\":\n\t\t\t\t\t\t\toutput  += toUnsign(parameter).toString(8);\n\t\t\t\t\t\t\tif(isFlagSharp) {\n\t\t\t\t\t\t\t\tsharpdata = \"0\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"x\":\n\t\t\t\t\t\tcase \"X\":\n\t\t\t\t\t\t\toutput  += toUnsign(parameter).toString(16);\n\t\t\t\t\t\t\tif(isFlagSharp) {\n\t\t\t\t\t\t\t\tsharpdata = \"0x\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"e\":\n\t\t\t\t\t\t\toutput += parameter.toExponential(precision);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"f\":\n\t\t\t\t\t\t\toutput += parameter.toFixed(precision);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"g\":\n\t\t\t\t\t\t\tif(precision === 0) { // 0は1とする\n\t\t\t\t\t\t\t\tprecision = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\toutput += parameter.toPrecision(precision);\n\t\t\t\t\t\t\t// 小数点以下の語尾の0の削除\n\t\t\t\t\t\t\tif((!isFlagSharp) && (output.indexOf(\".\") !== -1)) {\n\t\t\t\t\t\t\t\toutput = output.replace(/\\.?0+$/, \"\");  // 1.00 , 1.10\n\t\t\t\t\t\t\t\toutput = output.replace(/\\.?0+e/, \"e\"); // 1.0e , 1.10e\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// 上でチェックしているため、ありえない\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// 整数での後処理\n\t\t\t\t\tif(isInteger) {\n\t\t\t\t\t\tif(isPrecision) { // 精度の付け足し\n\t\t\t\t\t\t\tspacesize  = precision - output.length;\n\t\t\t\t\t\t\tfor(let i = 0; i < spacesize; i++) {\n\t\t\t\t\t\t\t\toutput = \"0\" + output;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 実数での後処理\n\t\t\t\t\telse {\n\t\t\t\t\t\tif(isFlagSharp) { \n\t\t\t\t\t\t\t// sharp指定の時は小数点を必ず残す\n\t\t\t\t\t\t\tif(output.indexOf(\".\") === -1) {\n\t\t\t\t\t\t\t\tif(output.indexOf(\"e\") !== -1) {\n\t\t\t\t\t\t\t\t\toutput = output.replace(\"e\", \".e\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\toutput += \".\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 指数表記は、3桁表示(double型のため)\n\t\t\t\t\tif(output.indexOf(\"e\") !== -1) {\n\t\t\t\t\t\tconst buff = function(str) {\n\t\t\t\t\t\t\tconst l   = str.length;\n\t\t\t\t\t\t\tif(str.length === 3) { // e+1 -> e+001\n\t\t\t\t\t\t\t\treturn(str.substring(0, l - 1) + \"00\" + str.substring(l - 1, l));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse { // e+10 -> e+010\n\t\t\t\t\t\t\t\treturn(str.substring(0, l - 2) + \"0\" + str.substring(l - 2, l));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\toutput = output.replace(/e[+-][0-9]{1,2}$/, buff);\n\t\t\t\t\t}\n\t\t\t\t\ttextlength = output.length + sharpdata.length + sSignCharacter.length;\n\t\t\t\t\tspacesize  = width - textlength;\n\t\t\t\t\t// 左よせ\n\t\t\t\t\tif(isFlagTextAlignLeft) {\n\t\t\t\t\t\tfor(let i = 0; i < spacesize; i++) {\n\t\t\t\t\t\t\toutput = output + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 0を埋める場合\n\t\t\t\t\tif(isFlagFillZero) {\n\t\t\t\t\t\tfor(let i = 0; i < spacesize; i++) {\n\t\t\t\t\t\t\toutput = \"0\" + output;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// マイナスや、「0x」などを接続\n\t\t\t\t\toutput = sharpdata + output;\n\t\t\t\t\toutput = sSignCharacter + output;\n\t\t\t\t\t// 0 で埋めない場合\n\t\t\t\t\tif((!isFlagFillZero) && (!isFlagTextAlignLeft)) {\n\t\t\t\t\t\tfor(let i = 0; i < spacesize; i++) {\n\t\t\t\t\t\t\toutput = \" \" + output;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 大文字化\n\t\t\t\t\tif(type.toUpperCase() === type) {\n\t\t\t\t\t\toutput = output.toUpperCase();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// 文字列の場合\n\t\t\t\tcase \"c\":\n\t\t\t\t\tif(!isNaN(parameter)) {\n\t\t\t\t\t\tparameter = String.fromCharCode(parameter);\n\t\t\t\t\t}\n\t\t\t\t\t// falls through\n\t\t\t\tcase \"s\":\n\t\t\t\t{\n\t\t\t\t\tif(!isNaN(parameter)) {\n\t\t\t\t\t\tparameter = parameter.toString(10);\n\t\t\t\t\t}\n\t\t\t\t\toutput = parameter;\n\t\t\t\t\tif(isPrecision) { // 最大表示文字数\n\t\t\t\t\t\tif(output.length > precision) {\n\t\t\t\t\t\t\toutput = output.substring(0, precision);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst s_textlength = output.length; // 現在の文字を構成するために必要な長さ\n\t\t\t\t\tconst s_spacesize  = width - s_textlength;  // 追加する横幅\n\t\t\t\t\t// 左よせ / 右よせ\n\t\t\t\t\tif(isFlagTextAlignLeft) {\n\t\t\t\t\t\tfor(let i = 0; i < s_spacesize; i++) {\n\t\t\t\t\t\t\toutput = output + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// 拡張\n\t\t\t\t\t\tconst s = isFlagFillZero ? \"0\" : \" \";\n\t\t\t\t\t\tfor(let i = 0; i < s_spacesize; i++) {\n\t\t\t\t\t\t\toutput = s + output;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// パーセント\n\t\t\t\tcase \"%\":\n\t\t\t\t\toutput = \"%\";\n\t\t\t\t\tbreak;\n\t\t\t\t// 未サポート\n\t\t\t\tcase \"p\":\n\t\t\t\tcase \"n\":\n\t\t\t\t\toutput = \"(変換できません)\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// 正規表現でチェックしているため、ありえない\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn (output);\t\n\t\t};\n\t\treturn (parm[0].replace(/%[^diubBoxXeEfFgGaAcspn%]*[diubBoxXeEfFgGaAcspn%]/g, func));\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/utility/Format.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 834,
    "kind": "class",
    "name": "Format",
    "memberof": "src/utility/Format.mjs",
    "static": true,
    "longname": "src/utility/Format.mjs~Format",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/utility/Format.mjs",
    "importStyle": "Format",
    "description": "",
    "lineNumber": 16,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 835,
    "kind": "method",
    "name": "format",
    "memberof": "src/utility/Format.mjs~Format",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utility/Format.mjs~Format.format",
    "access": "public",
    "description": "C言語のprintfを再現\nロケール、日付時刻等はサポートしていません。\nsprintfの変換指定子のpとnはサポートしていません。",
    "lineNumber": 27,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "parmeter",
        "description": "パラメータは可変引数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 836,
    "kind": "file",
    "name": "src/utility/Log.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n// @ts-check\n\n// @ts-ignore\nimport Format from \"./Format.mjs\";\n\n/**\n * ログのバッファ\n */\nlet printbuffer = \"\";\n\n/**\n * ログを記録するクラス\n * @ignore\n */\nclass Log {\n\n\t/**\n\t * 文字列へ変換する\n\t * @param text_obj {*}\n\t * @returns {string}\n\t */\n\tstatic _toStringFromObj(text_obj) {\n\t\tlet text;\n\t\tif((typeof text_obj === \"string\")||(text_obj instanceof String)) {\n\t\t\tif(text_obj.length === 0) {\n\t\t\t\t// Edge だと console.log(\"\") でエラー表示になるため\n\t\t\t\ttext = \" \";\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttext = text_obj;\n\t\t\t}\n\t\t}\n\t\telse if(typeof text_obj === \"undefined\") {\n\t\t\ttext = typeof text_obj;\n\t\t}\n\t\telse if(text_obj === null) {\n\t\t\ttext = \"null\";\n\t\t}\n\t\telse if(typeof text_obj.toString === \"function\") {\n\t\t\ttext = text_obj.toString();\n\t\t}\n\t\telse if(text_obj instanceof Object) {\n\t\t\ttext = \"Object\";\n\t\t}\n\t\telse {\n\t\t\ttext = \"null\";\n\t\t}\n\t\treturn text;\n\t}\n\t\n\t/**\n\t * データを文字列化して記録\n\t * @param {*} text_obj \n\t */\n\tstatic println(text_obj) {\n\t\tconst text = printbuffer + Log._toStringFromObj(text_obj);\n\t\tprintbuffer = \"\";\n\t\tconsole.log(text);\n\t}\n\t\n\t/**\n\t * データを文字列化して記録（折り返し禁止）\n\t * @param {*} text_obj \n\t */\n\tstatic print(text_obj) {\n\t\tprintbuffer += Log._toStringFromObj(text_obj);\n\t}\n\t\n\t/**\n\t * ログを記録する\n\t * C言語のprintfのようなフォーマットが指定可能\n\t * @param {string} text \n\t * @param {string} parmeter パラメータは可変引数\n\t */\n\tstatic printf(text, parmeter) {\n\t\tconst x = [];\n\t\tfor(let i = 0 ; i < arguments.length ; i++) {\n\t\t\tx.push(arguments[i]);\n\t\t}\n\t\tLog.print(Format.format.apply(this, x));\n\t}\n\n}\n\nexport default Log;",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/utility/Log.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 837,
    "kind": "variable",
    "name": "printbuffer",
    "memberof": "src/utility/Log.mjs",
    "static": true,
    "longname": "src/utility/Log.mjs~printbuffer",
    "access": "public",
    "export": false,
    "importPath": "konpeito/src/utility/Log.mjs",
    "importStyle": null,
    "description": "ログのバッファ",
    "lineNumber": 18,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 838,
    "kind": "class",
    "name": "Log",
    "memberof": "src/utility/Log.mjs",
    "static": true,
    "longname": "src/utility/Log.mjs~Log",
    "access": "public",
    "export": true,
    "importPath": "konpeito/src/utility/Log.mjs",
    "importStyle": "Log",
    "description": "ログを記録するクラス",
    "lineNumber": 24,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 839,
    "kind": "method",
    "name": "_toStringFromObj",
    "memberof": "src/utility/Log.mjs~Log",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utility/Log.mjs~Log._toStringFromObj",
    "access": "private",
    "description": "文字列へ変換する",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "text_obj",
        "description": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 840,
    "kind": "method",
    "name": "println",
    "memberof": "src/utility/Log.mjs~Log",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utility/Log.mjs~Log.println",
    "access": "public",
    "description": "データを文字列化して記録",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "text_obj",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 841,
    "kind": "method",
    "name": "print",
    "memberof": "src/utility/Log.mjs~Log",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utility/Log.mjs~Log.print",
    "access": "public",
    "description": "データを文字列化して記録（折り返し禁止）",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "text_obj",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 842,
    "kind": "method",
    "name": "printf",
    "memberof": "src/utility/Log.mjs~Log",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utility/Log.mjs~Log.printf",
    "access": "public",
    "description": "ログを記録する\nC言語のprintfのようなフォーマットが指定可能",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "parmeter",
        "description": "パラメータは可変引数"
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# konpeito\n[![Build Status](https://travis-ci.org/natade-jp/konpeito.svg?branch=master)](https://travis-ci.org/natade-jp/konpeito)\n[![ESDoc coverage badge](https://natade-jp.github.io/konpeito/doc/badge.svg)](https://natade-jp.github.io/konpeito/doc/)\n![MIT License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat)\n\n\"konpeito\" is a library to \"compute\". :)\n\n## What\n- The library for math calculations.\n- When calculating, use method chain.\n- Coding in ES6, and published ES6 modules and UMD.\n- [API reference is complete](https://natade-jp.github.io/konpeito/doc/).\n\n## Features\nThis library has 4 functions.\n- BigInteger\n- BigDecimal\n- Complex\n- Matrix\n\nHas the following features.\n- BigDecimal is constructed by BigInteger.\n- Matrix is constructed by array of Complex.\n- Matrix and Complex can't use huge real numbers like BigInteger or BigDecimal, but they are powerful.\n- Matrix initialization can be described as Scilab, Octave, MATLAB.\n\nPlease check the console and main.mjs.\n- [BigDecimal](https://natade-jp.github.io/konpeito/html/examples/demos/BigDecimal/)\n- [BigInteger](https://natade-jp.github.io/konpeito/html/examples/demos/BigInteger/)\n- [Matrix](https://natade-jp.github.io/konpeito/html/examples/demos/Matrix/)\n- [Random](https://natade-jp.github.io/konpeito/html/examples/demos/Random/)\n- [UMD](https://natade-jp.github.io/konpeito/html/examples/demos/UMD/)\n\n## Install for node.js\n\n1. This library can be installed using [npm](https://www.npmjs.com/package/konpeito).\n```\nnpm install konpeito\n```\n\n2. Then you can include it in your code:\n```\nvar konpeito = require(\"konpeito\");\n```\n\nIf you want to use in the ES6 module, please execute with the following command.\n```\nnode --experimental-modules main.mjs\n```\n\n## Install for browser\n\n1. Download the [zip](https://github.com/natade-jp/konpeito/archive/master.zip) by [GitHub](https://github.com/natade-jp/konpeito).\n\n2. Please use mjs file when using ES6 modules. And use js file when using UMD.\n- `./build/konpeito.module.mjs`\n- `./build/konpeito.umd.js`\n\n### with ES6 module.\n```\n<script type=\"module\" src=\"./main.mjs\" charset=\"utf-8\"></script>\n```\n\n### with UMD\n```\n<script src=\"./konpeito.umd.js\" charset=\"utf-8\"></script>\n<script src=\"./main.js\" charset=\"utf-8\"></script>\n```\n\n## Repository\n- https://github.com/natade-jp/konpeito.git\n\n## Sample\n\n### BigInteger\narbitrary-precision integer class.\n\n```\nimport konpeito from \"konpeito.module.mjs\";\nconst BigInteger = konpeito.BigInteger;\nconst $ = BigInteger.create;\n\nconsole.log($(\"-1234567890\").mul(\"987654321098765432109876543210\").toString());\nconsole.log($(\"7\").pow(\"50\").toString());\n```\n```\n> -1219326311248285321124828532111263526900\n> 1798465042647412146620280340569649349251249\n```\n\n### BigDecimal\nfloating-point math class.\n\n```\nimport konpeito from \"konpeito.module.mjs\";\nconst BigDecimal = konpeito.BigDecimal;\nconst MathContext = konpeito.MathContext;\nconst $ = BigDecimal.create;\n\nBigDecimal.setDefaultContext(MathContext.UNLIMITED);\nconsole.log($(\"-123456.7890\").mul(\"987654321098765.432109876543210\").toString());\n```\n```\n> -121932631124828532112.4828532111263526900\n```\n\n### Complex\ncomplex class.\n- use the JavaScript standard number.\n\n```\nimport konpeito from \"konpeito.module.mjs\";\nconst Complex = konpeito.Complex;\nconst $ = Complex.create;\n\nconsole.log($(\"3 + 4i\").pow(\"2 + 8j\").toString());\n```\n```\n> -0.0083837 + 0.0124424i\n```\n\n### Matrix\ncomplex matrix class.\n- use the JavaScript standard number.\n- Some methods do not support complex arithmetic.\n\n```\nimport konpeito from \"konpeito.module.mjs\";\nconst Matrix = konpeito.Matrix;\nconst $ = Matrix.create;\n\nconsole.log($(\"[1 2;3 4;5 6]\").toString());\nconst USV = $(\"[1 2;3 4;5 6]\").svd();\nconsole.log(USV.U.toString());\nconsole.log(USV.S.toString());\nconsole.log(USV.V.toString());\nconsole.log(USV.U.mul(USV.S).mul(USV.V.T()).toString());\n\nconsole.log($(\"[1+j 2-3j -3 -4]\").fft().toString());\nconsole.log($(\"[1 2 30]\").dct().toString());\n```\n```\n>\n 1  2\n 3  4\n 5  6\n> \n 0.2298 -0.8835  0.4082\n 0.5247 -0.2408 -0.8165\n 0.8196  0.4019  0.4082\n> \n 9.5255  0.0000\n 0.0000  0.5143\n 0.0000  0.0000\n> \n 0.7849  0.6196\n-0.6196  0.7849\n> \n 1.0000  2.0000\n 3.0000  4.0000\n 5.0000  6.0000\n> -4.0000 - 2.0000i  1.0000 - 5.0000i  0.0000 + 4.0000i  7.0000 + 7.0000i\n> 19.0526 -20.5061  11.0227\n```\n",
    "longname": "D:\\JavaScript\\konpeito\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]