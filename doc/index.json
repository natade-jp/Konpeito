[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/konpeito.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport File from \"./Util/File.mjs\";\nimport Format from \"./Util/Format.mjs\";\nimport Log from \"./Util/Log.mjs\";\n\nimport Random from \"./MathUtil/Random.mjs\";\nimport RoundingMode from \"./MathUtil/RoundingMode.mjs\";\nimport MathContext from \"./MathUtil/MathContext.mjs\";\nimport BigDecimal from \"./Math/BigDecimal.mjs\";\nimport BigInteger from \"./Math/BigInteger.mjs\";\nimport Complex from \"./Math/Complex.mjs\";\nimport Matrix from \"./Math/Matrix.mjs\";\n\n/**\n * 計算に利用できるデータを提供するクラス\n * 大まかに、 BigInteger, BigDecimal, Matrix の3つに分かれる。\n * Matrix は、 Complex を包括している。\n * 多倍長整数演算を特化した計算クラスは、 BigInteger 。\n * 任意精度浮動小数点演算を特化した計算クラスは、 BigDecimal 。\n * 信号処理や統計処理等を備えた汎用的な計算クラスは、 Matrix 。\n */\nexport default class konpeito {\n\n\t/**\n\t * ファイル操作用クラス\n\t * @returns {File}\n\t * @ignore\n\t */\n\tstatic get File() {\n\t\treturn File;\n\t}\n\n\t/**\n\t * フォーマットクラス\n\t * @returns {function(text: string, parmeter: ?(string|number)}\n\t * @ignore\n\t */\n\tstatic get format() {\n\t\treturn Format.format;\n\t}\n\n\t/**\n\t * フォーマットクラス\n\t * @returns {Log}\n\t * @ignore\n\t */\n\tstatic get Log() {\n\t\treturn Log;\n\t}\n\n\t/**\n\t * 多倍長整数クラス\n\t * @returns {BigInteger}\n\t */\n\tstatic get BigInteger() {\n\t\treturn BigInteger;\n\t}\n\n\t/**\n\t * 任意精度浮動小数点クラス\n\t * @returns {BigDecimal}\n\t */\n\tstatic get BigDecimal() {\n\t\treturn BigDecimal;\n\t}\n\n\t/**\n\t * BigDecimal用の丸め設定クラス\n\t * @returns {RoundingMode}\n\t */\n\tstatic get RoundingMode() {\n\t\treturn RoundingMode;\n\t}\n\n\t/**\n\t * BigDecimal用の環境設定クラス\n\t * @returns {MathContext}\n\t */\n\tstatic get MathContext() {\n\t\treturn MathContext;\n\t}\n\n\t/**\n\t * 複素数クラス\n\t * @returns {Complex}\n\t */\n\tstatic get Complex() {\n\t\treturn Complex;\n\t}\n\n\t/**\n\t * 複素行列クラス\n\t * @returns {Matrix}\n\t */\n\tstatic get Matrix() {\n\t\treturn Matrix;\n\t}\n\n\t/**\n\t * 乱数クラス\n\t * @returns {Random}\n\t */\n\tstatic get Random() {\n\t\treturn Random;\n\t}\n\t\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/konpeito.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "konpeito",
    "memberof": "src/konpeito.mjs",
    "static": true,
    "longname": "src/konpeito.mjs~konpeito",
    "access": "public",
    "export": true,
    "importPath": "konpeito.js/src/konpeito.mjs",
    "importStyle": "konpeito",
    "description": "計算に利用できるデータを提供するクラス\n大まかに、 BigInteger, BigDecimal, Matrix の3つに分かれる。\nMatrix は、 Complex を包括している。\n多倍長整数演算を特化した計算クラスは、 BigInteger 。\n任意精度浮動小数点演算を特化した計算クラスは、 BigDecimal 。\n信号処理や統計処理等を備えた汎用的な計算クラスは、 Matrix 。",
    "lineNumber": 31,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "get",
    "name": "File",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.File",
    "access": "public",
    "description": "ファイル操作用クラス",
    "lineNumber": 38,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{File}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "get",
    "name": "format",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.format",
    "access": "public",
    "description": "フォーマットクラス",
    "lineNumber": 47,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function(text: string, parmeter: ?(string|number)}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function(text: string, parmeter: ?(string",
        "number)"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "get",
    "name": "Log",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.Log",
    "access": "public",
    "description": "フォーマットクラス",
    "lineNumber": 56,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Log}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Log"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "get",
    "name": "BigInteger",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.BigInteger",
    "access": "public",
    "description": "多倍長整数クラス",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "get",
    "name": "BigDecimal",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.BigDecimal",
    "access": "public",
    "description": "任意精度浮動小数点クラス",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "get",
    "name": "RoundingMode",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.RoundingMode",
    "access": "public",
    "description": "BigDecimal用の丸め設定クラス",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingMode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingMode"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "get",
    "name": "MathContext",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.MathContext",
    "access": "public",
    "description": "BigDecimal用の環境設定クラス",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "get",
    "name": "Complex",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.Complex",
    "access": "public",
    "description": "複素数クラス",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "get",
    "name": "Matrix",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.Matrix",
    "access": "public",
    "description": "複素行列クラス",
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "get",
    "name": "Random",
    "memberof": "src/konpeito.mjs~konpeito",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/konpeito.mjs~konpeito.Random",
    "access": "public",
    "description": "乱数クラス",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Random}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Random"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/Math/BigDecimal.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport BigInteger from \"./BigInteger.mjs\";\nimport RoundingMode from \"../MathUtil/RoundingMode.mjs\";\nimport MathContext from \"../MathUtil/MathContext.mjs\";\n\nclass DecimalTool {\n\n\tstatic ToBigDecimalFromString(ntext) {\n\t\tlet scale = 0;\n\t\tlet buff;\n\t\t// 正規化\n\t\tlet text = ntext.replace(/\\s/g, \"\").toLowerCase();\n\t\t// +-の符号があるか\n\t\tlet number_text = \"\";\n\t\tbuff = text.match(/^[+-]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tif(buff.indexOf(\"-\") !== -1) {\n\t\t\t\tnumber_text += \"-\";\n\t\t\t}\n\t\t}\n\t\t// 整数部があるか\n\t\tbuff = text.match(/^[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tnumber_text += buff;\n\t\t}\n\t\t// 小数部があるか\n\t\tbuff = text.match(/^\\.[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\ttext = text.substr(buff.length);\n\t\t\tbuff = buff.substr(1);\n\t\t\tscale = scale + buff.length;\n\t\t\tnumber_text += buff;\n\t\t}\n\t\t// 指数表記があるか\n\t\tbuff = text.match(/^e[+-]?[0-9]+/);\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0].substr(1);\n\t\t\tscale   = scale - parseInt(buff, 10);\n\t\t}\n\t\treturn {\n\t\t\tscale : scale,\n\t\t\tinteger : new BigInteger([number_text, 10])\n\t\t};\n\t}\n\n}\n\n/**\n * 任意精度浮動小数点演算クラス (immutable)\n */\nexport default class BigDecimal {\n\t\n\t/**\n\t * 任意精度浮動小数点を作成\n\t * 配列で設定する場合は、 BigInteger, [スケール値=0], [環境=default], [精度設定=default]\n\t * オブジェクトで設定する場合は、 integer, [scale=0], [default_context=default], [context=default]\n\t * 精度設定の初期値設定は、設定可能とする予定。\n\t * @param {BigDecimal|BigInteger|number|string} number - 任意精度実数データ\n\t */\n\tconstructor(number) {\n\n\t\t/**\n\t\t * スケール\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis._scale\t= 0;\n\t\t\n\t\t/**\n\t\t * 初期化時に使用したcontext\n\t\t * @private\n\t\t * @type {MathContext}\n\t\t */\n\t\tthis.default_context = BigDecimal.DEFAULT_CONTEXT;\n\n\t\tlet context = null;\n\t\tif(arguments.length > 1) {\n\t\t\tthrow \"BigDecimal Unsupported argument[\" + arguments.length + \"]\";\n\t\t}\n\t\tif(number instanceof BigDecimal) {\n\n\t\t\t/**\n\t\t\t * 整数部分\n\t\t\t * @private\n\t\t\t * @type {BigInteger}\n\t\t\t */\n\t\t\tthis.integer\t\t\t= number.integer.clone();\n\n\t\t\tthis._scale\t\t\t\t= number._scale;\n\t\t\t\n\t\t\t/**\n\t\t\t * 文字列化した整数部分（キャッシュ用）\n\t\t\t * @private\n\t\t\t * @type {string}\n\t\t\t */\n\t\t\tthis.int_string\t\t\t= number.int_string;\n\n\t\t\tthis.default_context\t= number.default_context;\n\n\t\t}\n\t\telse if(number instanceof BigInteger) {\n\t\t\tthis.integer\t= number.clone();\n\t\t}\n\t\telse if(typeof number === \"number\" || number instanceof Number) {\n\t\t\t// 整数か\n\t\t\tif(number === Math.floor(number)) {\n\t\t\t\tthis.integer = new BigInteger(number);\n\t\t\t}\n\t\t\t// 実数か\n\t\t\telse {\n\t\t\t\tlet scale = 0;\n\t\t\t\tlet x = number;\n\t\t\t\twhile(true) {\n\t\t\t\t\tx = x * 10;\n\t\t\t\t\tscale = scale + 1;\n\t\t\t\t\tif(x === Math.floor(x)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._scale = scale;\n\t\t\t\tthis.integer = new BigInteger(x);\n\t\t\t}\n\t\t}\n\t\telse if(number instanceof Array) {\n\t\t\tif(number.length >= 1) {\n\t\t\t\tif(!(typeof number[0] === \"string\" || number[0] instanceof String)) {\n\t\t\t\t\tthis.integer = new BigInteger(number[0]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// 1番目が文字列の場合は、文字列用の設定初期化を行う\n\t\t\t\t\tconst data = DecimalTool.ToBigDecimalFromString(number[0]);\n\t\t\t\t\tthis.integer\t= data.integer;\n\t\t\t\t\tthis._scale\t\t= data.scale;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(number.length >= 2) {\n\t\t\t\t// スケール値を省略しているかどうかを、数値かどうかで判定している。\n\t\t\t\tif(typeof number[1] === \"number\" || number[1] instanceof Number) {\n\t\t\t\t\tthis._scale\t= number[1];\n\t\t\t\t\tif(number.length >= 3) {\n\t\t\t\t\t\tthis.default_context = number[2];\n\t\t\t\t\t}\n\t\t\t\t\tif(number.length >= 4) {\n\t\t\t\t\t\tcontext = number[3];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(number.length >= 2) {\n\t\t\t\t\t\tthis.default_context = number[1];\n\t\t\t\t\t}\n\t\t\t\t\tif(number.length >= 3) {\n\t\t\t\t\t\tcontext = number[2];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(typeof number === \"string\" || number instanceof String) {\n\t\t\tconst data = DecimalTool.ToBigDecimalFromString(number);\n\t\t\tthis.integer\t= data.integer;\n\t\t\tthis._scale\t\t= data.scale;\n\t\t}\n\t\telse if((number instanceof Object) && (number.scale !== undefined && number.default_context !== undefined)) {\n\t\t\tthis.integer\t= new BigInteger(number.integer);\n\t\t\tif(number.scale) {\n\t\t\t\tthis._scale = number.scale;\n\t\t\t}\n\t\t\tif(number.default_context) {\n\t\t\t\tthis.default_context = number.default_context;\n\t\t\t}\n\t\t\tif(number.context) {\n\t\t\t\tcontext = number.context;\n\t\t\t}\n\t\t}\n\t\telse if((number instanceof Object) && (number.toString !== undefined)) {\n\t\t\tconst data = DecimalTool.ToBigDecimalFromString(number.toString());\n\t\t\tthis.integer\t= data.integer;\n\t\t\tthis._scale\t\t= data.scale;\n\t\t}\n\t\telse {\n\t\t\tthrow \"BigDecimal Unsupported argument \" + arguments;\n\t\t}\n\t\t// データを正規化\n\t\tif(context) {\n\t\t\tconst newbigdecimal = this.round(context);\n\t\t\tthis.integer\t= newbigdecimal.integer;\n\t\t\tthis._scale\t\t= newbigdecimal._scale;\n\t\t\tdelete this.int_string;\n\t\t}\n\t\t// データが正しいかチェックする\n\t\tif((!(this.integer instanceof BigInteger)) || (!(this.default_context instanceof MathContext))) {\n\t\t\tthrow \"BigDecimal Unsupported argument \" + arguments;\n\t\t}\n\t}\n\n\t/**\n\t * 引数から任意精度実数を作成する（作成が不要の場合はnewしない）\n\t * @param {BigDecimal|BigInteger|number|string} number - 任意精度実数データ\n\t * @returns {BigDecimal}\n\t */\n\tstatic createConstBigDecimal(number) {\n\t\tif(number instanceof BigDecimal) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new BigDecimal(number);\n\t\t}\n\t}\n\n\t/**\n\t * 絶対値の文字列を作成する\n\t * キャッシュがなければ作成し、キャッシュがあればそれを返す\n\t * @returns {string}\n\t */\n\t_getUnsignedIntegerString() {\n\t\t// キャッシュする\n\t\tif(typeof this.int_string === \"undefined\") {\n\t\t\tthis.int_string = this.integer.toString(10).replace(/^-/, \"\");\n\t\t}\n\t\treturn this.int_string;\n\t}\n\n\t/**\n\t * ディープコピー\n\t * @returns {BigDecimal} \n\t */\n\tclone() {\n\t\treturn new BigDecimal(this);\n\t}\n\n\t/**\n\t * 倍率\n\t * @returns {number} \n\t */\n\tscale() {\n\t\treturn this._scale;\n\t}\n\n\t/**\n\t * A.signum() 符号値（1, -1）、0の場合は0を返す\n\t * @returns {number}\n\t */\n\tsignum() {\n\t\treturn this.integer.signum();\n\t}\n\n\t/**\n\t * 精度（下位が0の場合は、制度が低くなる）\n\t * @returns {number} \n\t */\n\tprecision() {\n\t\treturn this._getUnsignedIntegerString().length;\n\t}\n\n\t/**\n\t * 拡大させない値\n\t * @returns {BigInteger} \n\t */\n\tunscaledValue() {\n\t\treturn new BigInteger(this.integer);\n\t}\n\n\t/**\n\t * 指定した指数部の桁数で文字列を作成する\n\t * @param {number} e - 表示させる指数部\n\t * @returns {string} \n\t */\n\ttoScientificNotation(e) {\n\t\tconst text\t= this._getUnsignedIntegerString();\n\t\tlet s\t\t= this.scale();\n\t\tconst x\t\t= [];\n\t\tlet i, k;\n\t\t// -\n\t\tif(this.signum() === -1) {\n\t\t\tx[x.length] = \"-\";\n\t\t}\n\t\t// 表示上の桁数\n\t\ts = - e - s;\n\t\t// 小数点が付かない\n\t\tif(s >= 0) {\n\t\t\tx[x.length] = text;\n\t\t\tfor(i = 0; i < s; i++) {\n\t\t\t\tx[x.length] = \"0\";\n\t\t\t}\n\t\t}\n\t\t// 小数点が付く\n\t\telse {\n\t\t\tk = this.precision() + s;\n\t\t\tif(0 < k) {\n\t\t\t\tx[x.length] = text.substring(0, k);\n\t\t\t\tx[x.length] = \".\";\n\t\t\t\tx[x.length] = text.substring(k, text.length);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tk = - k;\n\t\t\t\tx[x.length] = \"0.\";\n\t\t\t\tfor(i = 0; i < k; i++) {\n\t\t\t\t\tx[x.length] = \"0\";\n\t\t\t\t}\n\t\t\t\tx[x.length] = text;\n\t\t\t}\n\t\t}\n\t\tx[x.length] = \"E\";\n\t\tif(e >= 0) {\n\t\t\tx[x.length] = \"+\";\n\t\t}\n\t\tx[x.length] = e;\n\t\treturn x.join(\"\");\n\t}\n\n\t/**\n\t * 文字列化（指数表記が不要である場合は除く）\n\t * @returns {string} \n\t */\n\ttoString() {\n\t\t// 「調整された指数」\n\t\tconst x = - this.scale() + (this.precision() - 1);\n\t\t// スケールが 0 以上で、「調整された指数」が -6 以上\n\t\tif((this.scale() >= 0) && (x >= -6)) {\n\t\t\treturn this.toPlainString();\n\t\t}\n\t\telse {\n\t\t\treturn this.toScientificNotation(x);\n\t\t}\n\t}\n\n\t/**\n\t * 文字列化（指数表記する）\n\t * @returns {string} \n\t */\n\ttoEngineeringString() {\n\t\t// 「調整された指数」\n\t\tconst x = - this.scale() + (this.precision() - 1);\n\t\t// スケールが 0 以上で、「調整された指数」が -6 以上\n\t\tif((this.scale() >= 0) && (x >= -6)) {\n\t\t\treturn this.toPlainString();\n\t\t}\n\t\telse {\n\t\t\t// 0 でない値の整数部が 1 〜 999 の範囲に収まるように調整\n\t\t\treturn this.toScientificNotation(Math.floor(x / 3) * 3);\n\t\t}\n\t}\n\n\t/**\n\t * 文字列化（指数表記しない）\n\t * @returns {string} \n\t */\n\ttoPlainString() {\n\t\t// スケールの変換なし\n\t\tif(this.scale() === 0) {\n\t\t\tif(this.signum() < 0) {\n\t\t\t\treturn \"-\" + this._getUnsignedIntegerString();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this._getUnsignedIntegerString();\n\t\t\t}\n\t\t}\n\t\t// 指数0で文字列を作成後、Eの後ろの部分をとっぱらう\n\t\tconst text = this.toScientificNotation(0);\n\t\treturn text.match(/^[^E]*/)[0];\n\t}\n\n\t/**\n\t * 現在の精度で表すことができる最も小さな値\n\t * @returns {BigDecimal} \n\t */\n\tulp() {\n\t\treturn new BigDecimal([BigInteger.ONE, this.scale(), this.default_context]);\n\t}\n\n\t/**\n\t * スケールを切り替える\n\t * @param {number} newScale - 新しいスケール\n\t * @param {RoundingModeEntity} [roundingMode=RoundingMode.UNNECESSARY] - 精度を変換する際の丸め方\n\t * @param {MathContext} [mc] - 切り替え先の設定（これのみ変更する場合は、roundを使用すること）\n\t * @returns {BigDecimal} \n\t */\n\tsetScale(newScale, roundingMode=RoundingMode.UNNECESSARY, mc) {\n\t\tif(this.scale() === newScale) {\n\t\t\t// scaleが同一なので処理の必要なし\n\t\t\treturn(this.clone());\n\t\t}\n\t\tconst context = (mc !== undefined) ? mc : this.default_context;\n\t\t// 文字列を扱ううえで、符号があるとやりにくいので外しておく\n\t\tlet text\t\t= this._getUnsignedIntegerString();\n\t\tconst sign\t\t= this.signum();\n\t\tconst sign_text\t= sign >= 0 ? \"\" : \"-\";\n\t\t// scale の誤差\n\t\t// 0 以上なら 0 を加えればいい。0未満なら0を削るか、四捨五入など丸めを行う\n\t\tconst delta\t\t= newScale - this.scale();\t// この桁分増やすといい\n\t\tif(0 <= delta) {\n\t\t\t// 0を加える\n\t\t\tlet i;\n\t\t\tfor(i = 0; i < delta; i++) {\n\t\t\t\ttext = text + \"0\";\n\t\t\t}\n\t\t\treturn new BigDecimal([new BigInteger(sign_text + text), newScale, context]);\n\t\t}\n\t\tconst keta = text.length + delta;\t\t// 最終的な桁数\n\t\tconst keta_marume = keta + 1;\n\t\tif(keta <= 0) {\n\t\t\t// 指定した scale では設定できない場合\n\t\t\t// 例えば \"0.1\".setScale(-2), \"10\".setScale(-3) としても表すことは不可能であるため、\n\t\t\t// sign（-1, 0, +1）のどれかの数値を使用して丸める\n\t\t\tconst outdata = (sign + roundingMode.getAddNumber(sign)) / 10;\n\t\t\t// 上記の式は、CEILINGなら必ず1、正でCEILINGなら1、負でFLOORなら1、それ以外は0となり、\n\t\t\t// さらに元々の数値が 0 なら 0、切り捨て不能なら例外が返る計算式である。\n\t\t\t// これは Java の動作をまねています。\n\t\t\treturn new BigDecimal([new BigInteger(outdata), newScale, context]);\n\t\t}\n\t\t{\n\t\t\t// 0を削るだけで解決する場合\n\t\t\t// 単純な切捨て(0を削るのみ)\n\t\t\tconst zeros\t\t\t= text.match(/0+$/);\n\t\t\tconst zero_length\t\t= (zeros !== null) ? zeros[0].length : 0;\n\t\t\tif(( (zero_length + delta) >= 0 ) || (roundingMode === RoundingMode.DOWN)) {\n\t\t\t\treturn new BigDecimal([new BigInteger(sign_text + text.substring(0, keta)), newScale, context]);\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\t// 丸め計算で解決する場合\n\t\t\t// 12345 -> '123'45\n\t\t\ttext = text.substring(0, keta_marume);\n\t\t\t// 丸め計算に必要な切り取る桁数(後ろの1～2桁を取得)\n\t\t\tconst cutsize = text.length > 1 ? 2 : 1;\n\t\t\t// '123'45 -> 1'23'4\n\t\t\tconst number = parseInt(text.substring(text.length - cutsize, text.length)) * sign;\n\t\t\t// 「元の数」と「丸めに必要な数」を足す\n\t\t\tconst x1 = new BigInteger(sign_text + text);\n\t\t\tconst x2 = new BigInteger(roundingMode.getAddNumber(number));\n\t\t\ttext = x1.add(x2).toString();\n\t\t\t// 丸め後の桁数に戻して\n\t\t\treturn new BigDecimal([new BigInteger(text.substring(0, text.length - 1)), newScale, context]);\n\t\t}\n\t}\n\n\t/**\n\t * 環境設定を切り替える\n\t * @param {MathContext} mc - 切り替え先の設定\n\t * @returns {BigDecimal} \n\t */\n\tround(mc) {\n\t\tif(!(mc instanceof MathContext)) {\n\t\t\tthrow \"not MathContext\";\n\t\t}\n\t\tconst newPrecision\t= mc.getPrecision();\n\t\tconst delta\t\t\t= newPrecision - this.precision();\n\t\tif((delta === 0)||(newPrecision === 0)) {\n\t\t\treturn this.clone();\n\t\t}\n\t\tconst newBigDecimal = this.setScale( this.scale() + delta, mc.getRoundingMode(), mc);\n\t\t/* 精度を上げる必要があるため、0を加えた場合 */\n\t\tif(delta > 0) {\n\t\t\treturn newBigDecimal;\n\t\t}\n\t\t/* 精度を下げる必要があるため、丸めた場合は、桁の数が正しいか調べる */\n\t\tif(newBigDecimal.precision() === mc.getPrecision()) {\n\t\t\treturn newBigDecimal;\n\t\t}\n\t\t/* 切り上げなどで桁数が１つ増えた場合 */\n\t\tconst sign_text\t= newBigDecimal.integer.signum() >= 0 ? \"\" : \"-\";\n\t\tconst abs_text\t= newBigDecimal._getUnsignedIntegerString();\n\t\tconst inte_text\t= sign_text + abs_text.substring(0, abs_text.length - 1);\n\t\treturn new BigDecimal([new BigInteger(inte_text), newBigDecimal.scale() - 1, mc]);\n\t}\n\n\t/**\n\t * A.abs() = abs(A)\n\t * @param {MathContext} [mc] - 計算に使用する設定\n\t * @returns {BigDecimal} \n\t */\n\tabs(mc) {\n\t\tconst output = this.clone();\n\t\toutput.integer = output.integer.abs();\n\t\treturn (mc === undefined) ? output : output.round(mc);\n\t}\n\n\t/**\n\t * A.plus() = + A\n\t * @param {MathContext} [mc] - 計算に使用する設定\n\t * @returns {BigDecimal} \n\t */\n\tplus(mc) {\n\t\tconst output = this.clone();\n\t\treturn (mc === undefined) ? output : output.round(mc);\n\t}\n\n\t/**\n\t * A.negate() = - A\n\t * @param {MathContext} [mc] - 計算に使用する設定\n\t * @returns {BigDecimal} \n\t */\n\tnegate(mc) {\n\t\tconst output = this.clone();\n\t\toutput.integer = output.integer.negate();\n\t\treturn (mc === undefined) ? output : output.round(mc);\n\t}\n\n\t/**\n\t * A.compareTo(B) 値同士で比較する\n\t * @param {Object|number|string|Array} number \n\t * @returns {number} A < B ? 1 : (A === B ? 0 : -1)（※非Complexオブジェクト）\n\t */\n\tcompareTo(number) {\n\t\tconst val = BigDecimal.createConstBigDecimal(number);\n\t\tconst src = this;\n\t\tconst tgt = val;\n\t\t// 簡易計算\n\t\t{\n\t\t\tconst src_sign\t= src.signum();\n\t\t\tconst tgt_sign\t= tgt.signum();\n\t\t\tif((src_sign === 0) && (src_sign === tgt_sign)) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse if(src_sign === 0) {\n\t\t\t\treturn - tgt_sign;\n\t\t\t}\n\t\t\telse if(tgt_sign === 0) {\n\t\t\t\treturn src_sign;\n\t\t\t}\n\t\t}\n\t\t// 実際に計算する\n\t\tif(src._scale === tgt._scale) {\n\t\t\treturn src.integer.compareTo(tgt.integer);\n\t\t}\n\t\telse if(src._scale > tgt._scale) {\n\t\t\tconst newdst = tgt.setScale(src._scale);\n\t\t\treturn src.integer.compareTo(newdst.integer);\n\t\t}\n\t\telse {\n\t\t\tconst newsrc = src.setScale(tgt._scale);\n\t\t\treturn newsrc.integer.compareTo(tgt.integer);\n\t\t}\n\t}\n\n\t/**\n\t * A.equals(B) 精度やスケール含めて等しいかをテストする\n\t * @param {Object|number|string|Array} number \n\t * @returns {boolean} A === B\n\t */\n\tequals(number) {\n\t\tconst val = BigDecimal.createConstBigDecimal(number);\n\t\treturn ((this._scale === val._scale) && (this.integer.equals(val.integer)));\n\t}\n\n\t/**\n\t * A.min(B) = min([A, B])\n\t * @param {Object|number|string|Array} number \n\t * @returns {BigDecimal} \n\t */\n\tmin(number) {\n\t\tconst val = BigDecimal.createConstBigDecimal(number);\n\t\tif(this.compareTo(val) <= 0) {\n\t\t\treturn this.clone();\n\t\t}\n\t\telse {\n\t\t\treturn val.clone();\n\t\t}\n\t}\n\n\t/**\n\t * A.max(B) = max([A, B])\n\t * @param {Object|number|string|Array} number \n\t * @returns {BigDecimal} \n\t */\n\tmax(number) {\n\t\tconst val = BigDecimal.createConstBigDecimal(number);\n\t\tif(this.compareTo(val) >= 0) {\n\t\t\treturn this.clone();\n\t\t}\n\t\telse {\n\t\t\treturn val.clone();\n\t\t}\n\t}\n\n\t/**\n\t * A.scaleByPowerOfTen(n) = A * 10^n\n\t * @param {number} n \n\t * @returns {BigDecimal} \n\t */\n\tscaleByPowerOfTen(n) {\n\t\tconst output = this.clone();\n\t\toutput._scale = this.scale() - n;\n\t\treturn output;\n\t}\n\n\t/**\n\t * A.movePointLeft(n) = A * 10^(-n)\n\t * @param {number} n \n\t * @returns {BigDecimal} \n\t */\n\tmovePointLeft(n) {\n\t\tlet output = this.scaleByPowerOfTen( -n );\n\t\toutput = output.setScale(Math.max(this.scale() + n, 0));\n\t\treturn output;\n\t}\n\n\t/**\n\t * A.movePointRight(n) = A * 10^(n)\n\t * @param {number} n \n\t * @returns {BigDecimal} \n\t */\n\tmovePointRight(n) {\n\t\tlet output = this.scaleByPowerOfTen( n );\n\t\toutput = output.setScale(Math.max(this.scale() - n, 0));\n\t\treturn output;\n\t}\n\n\t/**\n\t * A.stripTrailingZeros() 数字の右側にある0を取り除き、スケールを調整する\n\t * @returns {BigDecimal} \n\t */\n\tstripTrailingZeros() {\n\t\t// 0をできる限り取り除く\n\t\tconst sign\t\t= this.signum();\n\t\tconst sign_text\t= sign >= 0 ? \"\" : \"-\";\n\t\tconst text\t\t= this.integer.toString(10).replace(/^-/, \"\");\n\t\tconst zeros\t\t= text.match(/0+$/);\n\t\tlet zero_length\t= (zeros !== null) ? zeros[0].length : 0;\n\t\tif(zero_length === text.length) {\n\t\t\t// 全て 0 なら 1 ケタ残す\n\t\t\tzero_length = text.length - 1;\n\t\t}\n\t\tconst newScale\t= this.scale() - zero_length;\n\t\treturn new BigDecimal([new BigInteger(sign_text + text.substring(0, text.length - zero_length)), newScale, this.default_context]);\n\t}\n\n\t/**\n\t * A.add(B) = A + B\n\t * @param {Object|number|string|Array} number \n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する\n\t * @returns {BigDecimal} \n\t */\n\tadd(number, context) {\n\t\tconst augend = BigDecimal.createConstBigDecimal(number);\n\t\tconst mc = context ? context : augend.default_context;\n\t\tconst src\t\t\t= this;\n\t\tconst tgt\t\t\t= augend;\n\t\tconst newscale\t= Math.max(src._scale, tgt._scale);\n\t\tif(src._scale === tgt._scale) {\n\t\t\t// 1 e1 + 1 e1 = 1\n\t\t\treturn new BigDecimal([src.integer.add(tgt.integer), newscale, mc, mc]);\n\t\t}\n\t\telse if(src._scale > tgt._scale) {\n\t\t\t// 1 e-2 + 1 e-1\n\t\t\tconst newdst = tgt.setScale(src._scale);\n\t\t\t// 0.01 + 0.10 = 0.11 = 11 e-2\n\t\t\treturn new BigDecimal([src.integer.add(newdst.integer), newscale, mc, mc]);\n\t\t}\n\t\telse {\n\t\t\t// 1 e-1 + 1 e-2\n\t\t\tconst newsrc = src.setScale(tgt._scale);\n\t\t\t// 0.1 + 0.01 = 0.11 = 11 e-2\n\t\t\treturn new BigDecimal([newsrc.integer.add(tgt.integer), newscale, mc, mc]);\n\t\t}\n\t}\n\n\t/**\n\t * A.subtract(B) = A - B\n\t * @param {Object|number|string|Array} number \n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する\n\t * @returns {BigDecimal} \n\t */\n\tsubtract(number, context) {\n\t\tconst subtrahend = BigDecimal.createConstBigDecimal(number);\n\t\tconst mc = context ? context : subtrahend.default_context;\n\t\tconst src\t\t\t= this;\n\t\tconst tgt\t\t\t= subtrahend;\n\t\tconst newscale\t= Math.max(src._scale, tgt._scale);\n\t\tif(src._scale === tgt._scale) {\n\t\t\treturn new BigDecimal([src.integer.subtract(tgt.integer), newscale, mc, mc]);\n\t\t}\n\t\telse if(src._scale > tgt._scale) {\n\t\t\tconst newdst = tgt.setScale(src._scale);\n\t\t\treturn new BigDecimal([src.integer.subtract(newdst.integer), newscale, mc, mc]);\n\t\t}\n\t\telse {\n\t\t\tconst newsrc = src.setScale(tgt._scale);\n\t\t\treturn new BigDecimal([newsrc.integer.subtract(tgt.integer), newscale, mc, mc]);\n\t\t}\n\t}\n\n\t/**\n\t * A.sub(B) = A - B\n\t * @param {Object|number|string|Array} number \n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する\n\t * @returns {BigDecimal} \n\t */\n\tsub(number, context) {\n\t\treturn this.subtract(number, context);\n\t}\n\n\t/**\n\t * A.multiply(B) = A * B\n\t * @param {Object|number|string|Array} number \n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する\n\t * @returns {BigDecimal} \n\t */\n\tmultiply(number, context) {\n\t\tconst multiplicand = BigDecimal.createConstBigDecimal(number);\n\t\tconst mc = context ? context : multiplicand.default_context;\n\t\tconst src\t\t\t= this;\n\t\tconst tgt\t\t\t= multiplicand;\n\t\tconst newinteger\t= src.integer.multiply(tgt.integer);\n\t\t// 0.1 * 0.01 = 0.001\n\t\tconst newscale\t= src._scale + tgt._scale;\n\t\treturn new BigDecimal([newinteger, newscale, mc]);\n\t}\n\n\t/**\n\t * A.mul(B) = A * B\n\t * @param {Object|number|string|Array} number \n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する\n\t * @returns {BigDecimal} \n\t */\n\tmul(number, context) {\n\t\treturn this.multiply(number, context);\n\t}\n\n\t/**\n\t * A.divideToIntegralValue(B) = (int)(A / B)\n\t * @param {Object|number|string|Array} number \n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する\n\t * @returns {BigDecimal} \n\t */\n\tdivideToIntegralValue(number, context) {\n\t\tconst divisor = BigDecimal.createConstBigDecimal(number);\n\t\tconst mc = context ? context : divisor.default_context;\n\t\tconst getDigit  = function( num ) {\n\t\t\tlet i;\n\t\t\tlet text = \"1\";\n\t\t\tfor(i = 0; i < num; i++) {\n\t\t\t\ttext = text + \"0\";\n\t\t\t}\n\t\t\treturn new BigInteger(text);\n\t\t};\n\t\tif(divisor.compareTo(BigDecimal.ZERO) === 0) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\n\t\t// 1000e0\t\t/\t1e2\t\t\t\t=\t1000e-2\n\t\t// 1000e0\t\t/\t10e1\t\t\t=\t100e-1\n\t\t// 1000e0\t\t/\t100e0\t\t\t=\t10e0\n\t\t// 1000e0\t\t/\t1000e-1\t\t\t=\t1e1\n\t\t// 1000e0\t\t/\t10000e-2\t\t=\t1e1\n\t\t// 1000e0\t\t/\t100000e-3\t\t=\t1e1\n\n\t\t// 10e2\t\t\t/\t100e0\t\t\t=\t1e1\n\t\t// 100e1\t\t/\t100e0\t\t\t=\t1e1\n\t\t// 1000e0\t\t/\t100e0\t\t\t=\t10e0\n\t\t// 10000e-1\t\t/\t100e0\t\t\t=\t100e-1\t\n\t\t// 100000e-2\t/\t100e0\t\t\t=\t1000e-2\n\n\t\tconst src\t\t= this;\n\t\tconst tgt\t\t= divisor;\n\t\tlet src_integer\t= src.integer;\n\t\tlet tgt_integer\t= tgt.integer;\n\t\tconst newScale\t= src._scale - tgt._scale;\n\n\t\t// 100e-2 / 3e-1 = 1 / 0.3 -> 100 / 30\n\t\tif(src._scale > tgt._scale) {\n\t\t\t// src._scale に合わせる\n\t\t\ttgt_integer = tgt_integer.multiply(getDigit(  newScale ));\n\t\t}\n\t\t// 1e-1 / 3e-2 = 0.1 / 0.03 -> 10 / 3\n\t\telse if(src._scale < tgt._scale) {\n\t\t\t// tgt._scale に合わせる\n\t\t\tsrc_integer = src_integer.multiply(getDigit( -newScale ));\n\t\t}\n\n\t\t// とりあえず計算結果だけ作ってしまう\n\t\tconst new_integer\t= src_integer.divide(tgt_integer);\n\t\tconst sign\t\t\t= new_integer.signum();\n\t\tif(sign !== 0) {\n\t\t\tconst text\t= new_integer.toString(10).replace(/^-/, \"\");\n\t\t\t// 指定した桁では表すことができない\n\t\t\tif((mc.getPrecision() !== 0) && (text.length > mc.getPrecision())) {\n\t\t\t\tthrow \"ArithmeticException\";\n\t\t\t}\n\t\t\t// 結果の優先スケール に合わせる (this.scale() - divisor.scale())\n\t\t\tif(text.length <= (-newScale)) {\n\t\t\t\t// 合わせることができないので、0をできる限り削る = stripTrailingZerosメソッド\n\t\t\t\tconst zeros\t\t\t= text.match(/0+$/);\n\t\t\t\tconst zero_length\t= (zeros !== null) ? zeros[0].length : 0;\n\t\t\t\tconst sign_text\t\t= sign >= 0 ? \"\" : \"-\";\n\t\t\t\treturn new BigDecimal([new BigInteger(sign_text + text.substring(0, text.length - zero_length)), -zero_length, mc]);\n\t\t\t}\n\t\t}\n\n\t\tlet output = new BigDecimal(new_integer);\n\t\toutput = output.setScale(newScale, RoundingMode.UP);\n\t\toutput = output.round(mc);\n\t\toutput.default_context = mc;\n\t\treturn output;\n\t}\n\n\t/**\n\t * A.divideAndRemainder(B) = (int)(A / B) ... mod\n\t * @param {Object|number|string|Array} number \n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する\n\t * @returns {Array<BigDecimal>} [C = (int)(A / B), A - C * B]\n\t */\n\tdivideAndRemainder(number, context) {\n\t\tconst divisor = BigDecimal.createConstBigDecimal(number);\n\t\tconst mc = context ? context : divisor.default_context;\n\n\t\t// 1000e0\t\t/\t1e2\t\t\t\t=\t1000e-2\t... 0e0\n\t\t// 1000e0\t\t/\t10e1\t\t\t=\t100e-1\t... 0e0\n\t\t// 1000e0\t\t/\t100e0\t\t\t=\t10e0\t... 0e0\n\t\t// 1000e0\t\t/\t1000e-1\t\t\t=\t1e1\t\t... 0e0\n\t\t// 1000e0\t\t/\t10000e-2\t\t=\t1e1\t\t... 0e-1\n\t\t// 1000e0\t\t/\t100000e-3\t\t=\t1e1\t\t... 0e-2\n\n\t\t// 10e2\t\t\t/\t100e0\t\t\t=\t1e1\t\t... 0e1\n\t\t// 100e1\t\t/\t100e0\t\t\t=\t1e1\t\t... 0e1\n\t\t// 1000e0\t\t/\t100e0\t\t\t=\t10e0\t... 0e0\n\t\t// 10000e-1\t\t/\t100e0\t\t\t=\t100e-1\t... 0e-1\n\t\t// 100000e-2\t/\t100e0\t\t\t=\t1000e-2\t... 0e-2\n\n\t\tconst result_divide\t= this.divideToIntegralValue(divisor, mc);\n\t\tconst result_remaind\t= this.subtract(result_divide.multiply(divisor, mc), mc);\n\n\t\tconst output = [result_divide, result_remaind];\n\t\treturn output;\n\t}\n\n\t/**\n\t * A.rem(B) = A rem B\n\t * @param {Object|number|string|Array} number \n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する\n\t * @returns {BigDecimal}\n\t */\n\trem(number, context) {\n\t\treturn this.divideAndRemainder(number, context)[1];\n\t}\n\n\t/**\n\t * A.mod(B) = A mod B\n\t * @param {Object|number|string|Array} number \n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する\n\t * @returns {BigDecimal}\n\t */\n\tmod(number, context) {\n\t\tconst x = this.rem(number, context);\n\t\tif(x.compareTo(BigDecimal.ZERO) < 0) {\n\t\t\treturn x.add(number, context);\n\t\t}\n\t}\n\n\t/**\n\t * A.divide(B) = A / B\n\t * @param {Object|number|string|Array} number \n\t * @param {{scale: ?number, context: ?MathContext, roundingMode: ?RoundingModeEntity}} [type] - 計算に使用する scale, context, roundingMode を設定する\n\t * @returns {BigDecimal}\n\t */\n\tdivide(number, type) {\n\t\tconst divisor = BigDecimal.createConstBigDecimal(number);\n\t\tconst src\t\t\t= this;\n\t\tconst tgt\t\t\t= divisor;\n\t\tlet roundingMode\t= null;\n\t\tlet mc\t\t\t\t= null;\n\t\tlet newScale\t\t= 0;\n\t\tlet isPriorityScale\t= false;\n\t\tif(type && type.scale) {\n\t\t\tisPriorityScale\t= false;\n\t\t\tnewScale = type.scale;\n\t\t}\n\t\telse {\n\t\t\tisPriorityScale\t= true;\n\t\t\tif(type && (type.roundingMode || type.context)) {\n\t\t\t\tnewScale = src.scale();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnewScale = src.scale() - tgt.scale();\n\t\t\t}\n\t\t}\n\t\tif(type && type.context) {\n\t\t\troundingMode = type.context.getRoundingMode();\n\t\t\tnewScale = type.context.getPrecision();\n\t\t\tmc = type.context;\n\t\t}\n\t\telse {\n\t\t\tmc = this.default_context;\n\t\t}\n\t\tif(type && type.roundingMode) {\n\t\t\troundingMode = type.roundingMode;\n\t\t}\n\t\telse {\n\t\t\troundingMode = mc.getRoundingMode();\n\t\t}\n\t\t\n\t\tif(tgt.compareTo(BigDecimal.ZERO) === 0) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t\tlet i;\n\t\tlet newsrc = src;\n\t\tconst result_map = [];\n\t\tlet result, result_divide, result_remaind, all_result;\n\t\tall_result = BigDecimal.ZERO;\n\t\tconst precision = mc.getPrecision();\n\t\tconst check_max = precision !== 0 ? (precision + 8) : 0x3FFFF;\n\t\tfor(i = 0; i < check_max; i++) {\n\t\t\tresult = newsrc.divideAndRemainder(tgt, MathContext.UNLIMITED);\n\t\t\tresult_divide\t= result[0];\n\t\t\tresult_remaind\t= result[1];\n\t\t\tall_result = all_result.add(result_divide.scaleByPowerOfTen(-i), MathContext.UNLIMITED);\n\t\t\tif(result_remaind.compareTo(BigDecimal.ZERO) !== 0) {\n\t\t\t\tif(precision === 0) {\t// 精度無限大の場合は、循環小数のチェックが必要\n\t\t\t\t\tif(result_map[result_remaind._getUnsignedIntegerString()]) {\n\t\t\t\t\t\tthrow \"ArithmeticException \" + all_result + \"[\" + result_remaind._getUnsignedIntegerString() + \"]\";\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tresult_map[result_remaind._getUnsignedIntegerString()] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewsrc = result_remaind.scaleByPowerOfTen(1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isPriorityScale) {\n\t\t\t// 優先スケールの場合は、スケールの変更に失敗する可能性あり\n\t\t\ttry {\n\t\t\t\tall_result = all_result.setScale(newScale, roundingMode);\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\t// falls through\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tall_result = all_result.setScale(newScale, roundingMode);\n\t\t}\n\t\tall_result = all_result.round(mc);\n\t\treturn all_result;\n\t}\n\n\t/**\n\t * A.divide(B) = A / B\n\t * @param {Object|number|string|Array} number \n\t * @param {{scale: ?number, context: ?MathContext, roundingMode: ?RoundingModeEntity}} [type] - 計算に使用する scale, context, roundingMode を設定する\n\t * @returns {BigDecimal}\n\t */\n\tdiv(number, type) {\n\t\treturn this.divide(number, type);\n\t}\n\n\t/**\n\t * BigInteger に変換する\n\t * @returns {BigInteger}\n\t */\n\ttoBigInteger() {\n\t\tconst x = this.toPlainString().replace(/\\.\\d*$/, \"\");\n\t\treturn new BigInteger(x);\n\t}\n\n\t/**\n\t * BigInteger に変換する。\n\t * @returns {BigInteger}\n\t */\n\ttoBigIntegerExact() {\n\t\tconst x = this.setScale(0, RoundingMode.UNNECESSARY);\n\t\treturn new BigInteger(x.toPlainString());\n\t}\n\n\t/**\n\t * int型に変換\n\t * @returns {number}\n\t */\n\tget intValue() {\n\t\tlet x = this.toBigInteger();\n\t\tx = x.intValue;\n\t\treturn x & 0xFFFFFFFF;\n\t}\n\n\t/**\n\t * int型に変換。32ビット整数に収まらない場合はエラーを発生させる。\n\t * @returns {number}\n\t */\n\tget intValueExact() {\n\t\tlet x = this.toBigIntegerExact();\n\t\tx = x.intValue;\n\t\tif((x < -2147483648) || (2147483647 < x)) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 32ビットの実数型に変換\n\t * @returns {number}\n\t */\n\tget floatValue() {\n\t\tconst p = this.precision();\n\t\tif(MathContext.DECIMAL32.getPrecision() < p) {\n\t\t\treturn(this.signum() >= 0 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY);\n\t\t}\n\t\treturn parseFloat(p.toEngineeringString());\n\t}\n\n\t/**\n\t * 64ビットの実数型に変換\n\t * @returns {number}\n\t */\n\tget doubleValue() {\n\t\tconst p = this.precision();\n\t\tif(MathContext.DECIMAL64.getPrecision() < p) {\n\t\t\treturn(this.signum() >= 0 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY);\n\t\t}\n\t\treturn parseFloat(p.toEngineeringString());\n\t}\n\n\t/**\n\t * A.pow(B) = A ^ B\n\t * @param {Object|number|string|Array} number \n\t * @param {MathContext} [context] - 計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する\n\t * @returns {BigDecimal}\n\t */\n\tpow(number, context) {\n\t\tlet n = BigDecimal.createConstBigDecimal(number);\n\t\tconst mc = context ? context : n.default_context;\n\t\tn = n.intValue;\n\t\tif(Math.abs(n) > 999999999) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t\tif((mc.getPrecision() === 0) && (n < 0)) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t\tif((mc.getPrecision() > 0) && (n > mc.getPrecision())) {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t\tlet x, y;\n\t\tx = this.clone();\n\t\ty = BigDecimal.ONE;\n\t\twhile(n !== 0) {\n\t\t\tif((n & 1) !== 0) {\n\t\t\t\ty = y.multiply(x, MathContext.UNLIMITED);\n\t\t\t}\n\t\t\tx = x.multiply(x, MathContext.UNLIMITED);\n\t\t\tn >>>= 1;\n\t\t}\n\t\treturn y.round(mc);\n\t}\n\t\n\t/**\n\t * 指定した数値から BigInteger 型に変換\n\t * @param {number} x \n\t * @param {number} [scale] \n\t * @returns {BigInteger}\n\t */\n\tstatic valueOf(x, scale) {\n\t\tif(!scale) {\n\t\t\treturn new BigDecimal(x);\n\t\t}\n\t\telse {\n\t\t\treturn new BigDecimal([x, scale]);\n\t\t}\n\t}\n}\n\nBigDecimal.DEFAULT_CONTEXT = MathContext.DECIMAL128;\nBigDecimal.RoundingMode = RoundingMode;\nBigDecimal.MathContext = MathContext;\n\nBigDecimal.ZERO\t\t\t\t\t= new BigDecimal(0);\nBigDecimal.ONE\t\t\t\t\t= new BigDecimal(1);\nBigDecimal.TEN\t\t\t\t\t= new BigDecimal(10);\n\nBigDecimal.ROUND_CEILING\t\t= RoundingMode.CEILING;\nBigDecimal.ROUND_DOWN\t\t\t= RoundingMode.DOWN;\nBigDecimal.ROUND_FLOOR\t\t\t= RoundingMode.FLOOR;\nBigDecimal.ROUND_HALF_DOWN\t\t= RoundingMode.HALF_DOWN;\nBigDecimal.ROUND_HALF_EVEN\t\t= RoundingMode.HALF_EVEN;\nBigDecimal.ROUND_HALF_UP\t\t= RoundingMode.HALF_UP;\nBigDecimal.ROUND_UNNECESSARY\t= RoundingMode.UNNECESSARY;\nBigDecimal.ROUND_UP\t\t\t\t= RoundingMode.UP;\n\nBigDecimal.CONTEXT_UNLIMITED\t= MathContext.UNLIMITED;\nBigDecimal.CONTEXT_DECIMAL32\t= MathContext.DECIMAL32;\nBigDecimal.CONTEXT_DECIMAL64\t= MathContext.DECIMAL64;\nBigDecimal.CONTEXT_DECIMAL128\t= MathContext.DECIMAL128;\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/Math/BigDecimal.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "class",
    "name": "DecimalTool",
    "memberof": "src/Math/BigDecimal.mjs",
    "static": true,
    "longname": "src/Math/BigDecimal.mjs~DecimalTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/Math/BigDecimal.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "ToBigDecimalFromString",
    "memberof": "src/Math/BigDecimal.mjs~DecimalTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/BigDecimal.mjs~DecimalTool.ToBigDecimalFromString",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "ntext",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"scale\": *, \"integer\": *}"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "class",
    "name": "BigDecimal",
    "memberof": "src/Math/BigDecimal.mjs",
    "static": true,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal",
    "access": "public",
    "export": true,
    "importPath": "konpeito.js/src/Math/BigDecimal.mjs",
    "importStyle": "BigDecimal",
    "description": "任意精度浮動小数点演算クラス (immutable)",
    "lineNumber": 65,
    "interface": false
  },
  {
    "__docId__": 64,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#constructor",
    "access": "public",
    "description": "任意精度浮動小数点を作成\n配列で設定する場合は、 BigInteger, [スケール値=0], [環境=default], [精度設定=default]\nオブジェクトで設定する場合は、 integer, [scale=0], [default_context=default], [context=default]\n精度設定の初期値設定は、設定可能とする予定。",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal",
          "BigInteger",
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "任意精度実数データ"
      }
    ]
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "_scale",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#_scale",
    "access": "private",
    "description": "スケール",
    "lineNumber": 81,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "default_context",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#default_context",
    "access": "private",
    "description": "初期化時に使用したcontext",
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "integer",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#integer",
    "access": "private",
    "description": "整数部分",
    "lineNumber": 101,
    "type": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "int_string",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#int_string",
    "access": "private",
    "description": "文字列化した整数部分（キャッシュ用）",
    "lineNumber": 110,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "createConstBigDecimal",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal.createConstBigDecimal",
    "access": "public",
    "description": "引数から任意精度実数を作成する（作成が不要の場合はnewしない）",
    "lineNumber": 214,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigDecimal",
          "BigInteger",
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "任意精度実数データ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "_getUnsignedIntegerString",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#_getUnsignedIntegerString",
    "access": "private",
    "description": "絶対値の文字列を作成する\nキャッシュがなければ作成し、キャッシュがあればそれを返す",
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "clone",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#clone",
    "access": "public",
    "description": "ディープコピー",
    "lineNumber": 240,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "scale",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#scale",
    "access": "public",
    "description": "倍率",
    "lineNumber": 248,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "signum",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#signum",
    "access": "public",
    "description": "A.signum() 符号値（1, -1）、0の場合は0を返す",
    "lineNumber": 256,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "precision",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#precision",
    "access": "public",
    "description": "精度（下位が0の場合は、制度が低くなる）",
    "lineNumber": 264,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "unscaledValue",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#unscaledValue",
    "access": "public",
    "description": "拡大させない値",
    "lineNumber": 272,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "toScientificNotation",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#toScientificNotation",
    "access": "public",
    "description": "指定した指数部の桁数で文字列を作成する",
    "lineNumber": 281,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "表示させる指数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#toString",
    "access": "public",
    "description": "文字列化（指数表記が不要である場合は除く）",
    "lineNumber": 328,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "toEngineeringString",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#toEngineeringString",
    "access": "public",
    "description": "文字列化（指数表記する）",
    "lineNumber": 344,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "toPlainString",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#toPlainString",
    "access": "public",
    "description": "文字列化（指数表記しない）",
    "lineNumber": 361,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "ulp",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#ulp",
    "access": "public",
    "description": "現在の精度で表すことができる最も小さな値",
    "lineNumber": 380,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "setScale",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#setScale",
    "access": "public",
    "description": "スケールを切り替える",
    "lineNumber": 391,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newScale",
        "description": "新しいスケール"
      },
      {
        "nullable": null,
        "types": [
          "RoundingModeEntity"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "RoundingMode.UNNECESSARY",
        "defaultRaw": "RoundingMode.UNNECESSARY",
        "name": "roundingMode",
        "description": "精度を変換する際の丸め方"
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "切り替え先の設定（これのみ変更する場合は、roundを使用すること）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "round",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#round",
    "access": "public",
    "description": "環境設定を切り替える",
    "lineNumber": 455,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": false,
        "name": "mc",
        "description": "切り替え先の設定"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "abs",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#abs",
    "access": "public",
    "description": "A.abs() = abs(A)",
    "lineNumber": 485,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "計算に使用する設定"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "plus",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#plus",
    "access": "public",
    "description": "A.plus() = + A",
    "lineNumber": 496,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "計算に使用する設定"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "negate",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#negate",
    "access": "public",
    "description": "A.negate() = - A",
    "lineNumber": 506,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "mc",
        "description": "計算に使用する設定"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#compareTo",
    "access": "public",
    "description": "A.compareTo(B) 値同士で比較する",
    "lineNumber": 517,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A < B ? 1 : (A === B ? 0 : -1)（※非Complexオブジェクト）"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "number",
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A < B ? 1 : (A === B ? 0 : -1)（※非Complexオブジェクト）"
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "equals",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#equals",
    "access": "public",
    "description": "A.equals(B) 精度やスケール含めて等しいかをテストする",
    "lineNumber": 554,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "number",
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "min",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#min",
    "access": "public",
    "description": "A.min(B) = min([A, B])",
    "lineNumber": 564,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "number",
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "max",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#max",
    "access": "public",
    "description": "A.max(B) = max([A, B])",
    "lineNumber": 579,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "number",
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "scaleByPowerOfTen",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#scaleByPowerOfTen",
    "access": "public",
    "description": "A.scaleByPowerOfTen(n) = A * 10^n",
    "lineNumber": 594,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "movePointLeft",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#movePointLeft",
    "access": "public",
    "description": "A.movePointLeft(n) = A * 10^(-n)",
    "lineNumber": 605,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "movePointRight",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#movePointRight",
    "access": "public",
    "description": "A.movePointRight(n) = A * 10^(n)",
    "lineNumber": 616,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "stripTrailingZeros",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#stripTrailingZeros",
    "access": "public",
    "description": "A.stripTrailingZeros() 数字の右側にある0を取り除き、スケールを調整する",
    "lineNumber": 626,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "add",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#add",
    "access": "public",
    "description": "A.add(B) = A + B",
    "lineNumber": 647,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "number",
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "subtract",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#subtract",
    "access": "public",
    "description": "A.subtract(B) = A - B",
    "lineNumber": 677,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "number",
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "sub",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#sub",
    "access": "public",
    "description": "A.sub(B) = A - B",
    "lineNumber": 702,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "number",
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "multiply",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#multiply",
    "access": "public",
    "description": "A.multiply(B) = A * B",
    "lineNumber": 712,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "number",
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "mul",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#mul",
    "access": "public",
    "description": "A.mul(B) = A * B",
    "lineNumber": 729,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "number",
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "divideToIntegralValue",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#divideToIntegralValue",
    "access": "public",
    "description": "A.divideToIntegralValue(B) = (int)(A / B)",
    "lineNumber": 739,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "number",
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "divideAndRemainder",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#divideAndRemainder",
    "access": "public",
    "description": "A.divideAndRemainder(B) = (int)(A / B) ... mod",
    "lineNumber": 816,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<BigDecimal>} [C = (int)(A / B), A - C * B]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "number",
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<BigDecimal>"
      ],
      "spread": false,
      "description": "[C = (int)(A / B), A - C * B]"
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "rem",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#rem",
    "access": "public",
    "description": "A.rem(B) = A rem B",
    "lineNumber": 846,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "number",
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "mod",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#mod",
    "access": "public",
    "description": "A.mod(B) = A mod B",
    "lineNumber": 856,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "number",
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "divide",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#divide",
    "access": "public",
    "description": "A.divide(B) = A / B",
    "lineNumber": 869,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "number",
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{scale: ?number, context: ?MathContext, roundingMode: ?RoundingModeEntity}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": "計算に使用する scale, context, roundingMode を設定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "div",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#div",
    "access": "public",
    "description": "A.divide(B) = A / B",
    "lineNumber": 957,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "number",
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{scale: ?number, context: ?MathContext, roundingMode: ?RoundingModeEntity}"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": "計算に使用する scale, context, roundingMode を設定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "toBigInteger",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#toBigInteger",
    "access": "public",
    "description": "BigInteger に変換する",
    "lineNumber": 965,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "toBigIntegerExact",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#toBigIntegerExact",
    "access": "public",
    "description": "BigInteger に変換する。",
    "lineNumber": 974,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 129,
    "kind": "get",
    "name": "intValue",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#intValue",
    "access": "public",
    "description": "int型に変換",
    "lineNumber": 983,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "get",
    "name": "intValueExact",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#intValueExact",
    "access": "public",
    "description": "int型に変換。32ビット整数に収まらない場合はエラーを発生させる。",
    "lineNumber": 993,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "get",
    "name": "floatValue",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#floatValue",
    "access": "public",
    "description": "32ビットの実数型に変換",
    "lineNumber": 1006,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "get",
    "name": "doubleValue",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#doubleValue",
    "access": "public",
    "description": "64ビットの実数型に変換",
    "lineNumber": 1018,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "pow",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal#pow",
    "access": "public",
    "description": "A.pow(B) = A ^ B",
    "lineNumber": 1032,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigDecimal}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "number",
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "計算に使用する設定、省略した場合は、本オブジェクトの設定デフォルト値を使用する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigDecimal"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/Math/BigDecimal.mjs~BigDecimal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/BigDecimal.mjs~BigDecimal.valueOf",
    "access": "public",
    "description": "指定した数値から BigInteger 型に変換",
    "lineNumber": 1064,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "scale",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "src/Math/BigInteger.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Random from \"../MathUtil/Random.mjs\";\n\nclass IntegerTool {\n\n\t/**\n\t * 数値が入った文字列から16進数ごとの配列へ変換する\n\t * @param {string} text - 数値が入ったテキストデータ（負の値などを含めない）\n\t * @param {number} radix - テキストデータの進数\n\t * @returns {Array<number>} 16進数ごとに代入された配列 \n\t */\n\tstatic string_to_binary_number(text, radix) {\n\t\t// 下の変換をすることで、2進数での変換時に内部のforの繰り返す回数が減る\n\t\t// v0.03 出来る限りまとめてn進数変換する\n\t\tconst max_num = 0x3FFFFFFF;\n\t\tconst keta = Math.floor( Math.log(max_num) / Math.log(radix) );\n\t\tconst calcradix = Math.round(Math.pow(radix, keta));\n\t\tlet x = [];\n\t\tconst y = [];\n\t\tconst len = Math.ceil(text.length / keta);\n\t\tlet offset = text.length;\n\t\tfor(let i = 0; i < len; i++ ) {\n\t\t\toffset -= keta;\n\t\t\tif(offset >= 0) {\n\t\t\t\tx[i] = parseInt(text.substring(offset, offset + keta), radix);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tx[i] = parseInt(text.substring(0, offset + keta), radix);\n\t\t\t}\n\t\t}\n\t\tradix = calcradix;\n\t\t// v0.03ここまで\n\t\t// 2で割っていくアルゴリズムで2進数に変換する\n\t\twhile(x.length !==  0) {\n\t\t\t// 2で割っていく\n\t\t\t// 隣の桁でたcarryはradix進数をかけて桁上げしてる\n\t\t\tlet carry = 0;\n\t\t\tfor(let i = x.length - 1; i >= 0; i--) {\n\t\t\t\tconst a = x[i] + carry * radix;\n\t\t\t\tx[i]  = a >>> 1;\n\t\t\t\tcarry = a & 1;\n\t\t\t}\n\t\t\t// 1余るかどうかをテストする\n\t\t\ty[y.length] = carry;\n\t\t\t// xが0になっている部分は削除していく\n\t\t\tif(x[x.length - 1] === 0) {\n\t\t\t\tx.pop();\n\t\t\t}\n\t\t}\n\t\t// メモリ節約のため1つの変数（16ビット）に収めるだけ収めていく\n\t\tx = [];\n\t\tfor(let i = 0; i < y.length; i++) {\n\t\t\tx[i >>> 4] |= y[i] << (i & 0xF);\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 数値から16進数ごとの配列へ変換する\n\t * @param {number} x - 変換したい数値 \n\t * @returns {Array<number>} 16進数ごとに代入された配列 \n\t */\n\tstatic number_to_binary_number(x) {\n\t\tif(x > 0xFFFFFFFF) {\n\t\t\treturn IntegerTool.string_to_binary_number(x.toFixed(), 10);\n\t\t}\n\t\tconst y = [];\n\t\twhile(x !==  0) {\n\t\t\ty[y.length] = x & 1;\n\t\t\tx >>>= 1;\n\t\t}\n\t\tx = [];\n\t\tfor(let i = 0; i < y.length; i++) {\n\t\t\tx[i >>> 4] |= y[i] << (i & 0xF);\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 16進数の配列データから数列が入った文字列を作成\n\t * @param {Array<number>} binary - 16進数ごとに代入された配列 \n\t * @param {number} radix - 変換後の進数\n\t * @returns {string} 文字列化したデータ \n\t */\n\tstatic binary_number_to_string(binary, radix) {\n\t\tconst add = function(x1, x2, y) {\n\t\t\tconst size = x1.length;\n\t\t\tlet carry = 0;\n\t\t\tfor(let i = 0; i < size; i++) {\n\t\t\t\ty[i] = x1[i] + ((x2.length >= (i + 1)) ? x2[i] : 0) + carry;\n\t\t\t\tif(y[i] >= radix) {\n\t\t\t\t\tcarry = 1;\n\t\t\t\t\ty[i] -= radix;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(carry === 1) {\n\t\t\t\ty[size] = 1;\n\t\t\t}\n\t\t};\n\t\tconst y = [0];\n\t\tconst t = [1];\n\t\tfor(let i = 0;i < binary.length;i++) {\n\t\t\tfor(let j = 0; j < 16; j++) {\n\t\t\t\tif((binary[i] >>> j) & 1) {\n\t\t\t\t\tadd(t, y, y);\n\t\t\t\t}\n\t\t\t\tadd(t, t, t);\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * 数値が入った文字列から多倍長数値を表すためのデータを作成する\n\t * @param {string} text - 数値が入ったテキストデータ\n\t * @param {number} [radix=10] - テキストデータの進数\n\t * @returns {Object} 多倍長数値を表すためのデータ \n\t */\n\tstatic ToBigIntegerFromString(text, radix) {\n\t\tlet x = text.replace(/\\s/g, \"\").toLowerCase();\n\t\tlet buff = x.match(/^[-+]+/);\n\n\t\tlet element     = [];\n\t\tlet sign        = 1;\n\n\t\tif(buff !== null) {\n\t\t\tbuff = buff[0];\n\t\t\tx = x.substring(buff.length, x.length);\n\t\t\tif(buff.indexOf(\"-\") !== -1) {\n\t\t\t\tsign = -1;\n\t\t\t}\n\t\t}\n\t\tif(radix) {\n\t\t\telement = IntegerTool.string_to_binary_number(x, radix);\n\t\t}\n\t\telse if(/^0x/.test(x)) {\n\t\t\telement = IntegerTool.string_to_binary_number(x.substring(2, x.length), 16);\n\t\t}\n\t\telse if(/^0b/.test(x)) {\n\t\t\telement = IntegerTool.string_to_binary_number(x.substring(2, x.length), 2);\n\t\t}\n\t\telse if(/^0/.test(x)) {\n\t\t\telement = IntegerTool.string_to_binary_number(x.substring(1, x.length), 8);\n\t\t}\n\t\telse {\n\t\t\telement = IntegerTool.string_to_binary_number(x, 10);\n\t\t}\n\t\t// \"0\"の場合がある為\n\t\tif((element.length === 1)&&(element[0] === 0)) {\n\t\t\telement = [];\n\t\t\tsign = 0;\n\t\t}\n\n\t\treturn {\n\t\t\telement : element,\n\t\t\tsign : sign\n\t\t};\n\t}\n}\n\n// 内部では1変数内の中の16ビットごとに管理\n// 2変数で16ビット*16ビットで32ビットを表す\n// this.element\t...\t16ビットごとに管理\n// this.sign\t...\t負なら-1、正なら1、ゼロなら0\n//\n// 本クラスはイミュータブルです。\n// 内部の「_」から始まるメソッドは内部計算用で非公開です。またミュータブルです。\n\n/**\n * 多倍長整数演算クラス (immutable)\n */\nexport default class BigInteger {\n\n\t/**\n\t * 多倍長整数を作成\n\t * 文字列で指定する場合は指数表記には非対応。\n\t * 指定した進数で指定する場合は[\"ff\", 16] という配列で指定する。\n\t * @param {BigInteger|number|string|Array<string|number>} number - 整数値\n\t */\n\tconstructor(number) {\n\t\t\n\t\t/**\n\t\t * 1要素、16ビット整数の配列\n\t\t * @private\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.element     = [];\n\n\t\t/**\n\t\t * 正負（プラスなら+1、マイナスなら-1、0なら0）\n\t\t * ※計算によってはここの値の再設定をしていない箇所があるので、ここを見る時は注意\n\t\t * @private\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.sign        = 0;\n\n\t\tif(arguments.length === 0) {\n\t\t\tthis.element     = [];\n\t\t\tthis.sign        = 0;\n\t\t}\n\t\telse if(arguments.length === 1) {\n\t\t\tthis.sign = 1;\n\t\t\tif(number instanceof BigInteger) {\n\t\t\t\tfor(let i = 0; i < number.element.length; i++) {\n\t\t\t\t\tthis.element[i] = number.element[i];\n\t\t\t\t}\n\t\t\t\tthis.sign = arguments[0].sign;\n\t\t\t}\n\t\t\telse if((typeof number === \"number\") || (number instanceof Number)) {\n\t\t\t\tlet x = number;\n\t\t\t\tif(x < 0) {\n\t\t\t\t\tthis.sign = -1;\n\t\t\t\t\tx = -x;\n\t\t\t\t}\n\t\t\t\tthis.element = IntegerTool.number_to_binary_number(x);\n\t\t\t}\n\t\t\telse if((typeof number === \"string\") || (number instanceof String)) {\n\t\t\t\tconst x = IntegerTool.ToBigIntegerFromString(number);\n\t\t\t\tthis.element = x.element;\n\t\t\t\tthis.sign = x.sign;\n\t\t\t}\n\t\t\telse if(number instanceof Array) {\n\t\t\t\tconst x = IntegerTool.ToBigIntegerFromString(number[0], number[1]);\n\t\t\t\tthis.element = x.element;\n\t\t\t\tthis.sign = x.sign;\n\t\t\t}\n\t\t\telse if(number instanceof Object && number.toString) {\n\t\t\t\tconst x = IntegerTool.ToBigIntegerFromString(number.toString());\n\t\t\t\tthis.element = x.element;\n\t\t\t\tthis.sign = x.sign;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow \"BigInteger Unsupported argument \" + number;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow \"BigInteger Unsupported argument \" + number;\n\t\t}\n\t}\n\n\t/**\n\t * 引数から多倍長整数を作成する（作成が不要の場合はnewしない）\n\t * @param {BigInteger} number \n\t * @returns {BigInteger}\n\t */\n\tstatic create(number) {\n\t\tif(number instanceof BigInteger) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new BigInteger(number);\n\t\t}\n\t}\n\n\t/**\n\t * 指定したビット数の乱数を作成します\n\t * @param {number} bits - 作成する乱数のビット数\n\t * @param {Random} random - 作成に使用するRandom\n\t * @returns {BigInteger}\n\t */\n\tstatic createRandomBigInteger(bits, random) {\n\t\tif(!(random instanceof Random)) {\n\t\t\tthrow \"createRandomBigInteger\";\n\t\t}\n\t\tconst x = new BigInteger();\n\t\tx.sign = 1;\n\t\tconst size = ((bits - 1) >> 4) + 1;\n\t\tlet r;\n\t\tif(bits === 0) {\n\t\t\treturn;\n\t\t}\n\t\tfor(let i = 0, j = 0; i < size; i++) {\n\t\t\tif(j === 0) {\n\t\t\t\tr = random.nextInt(); // 32ビットずつ作成する\n\t\t\t\tx.element[i] = r & 0xFFFF;\n\t\t\t\tj = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tx.element[i] = (r >>> 16) & 0xFFFF;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t\t// 1～15ビット余る場合は、16ビットずつ作成しているので削る\n\t\tif((bits % 16) !== 0) {\n\t\t\tx.element[x.element.length - 1] &= (1 << (bits % 16)) - 1;\n\t\t}\n\t\t// 最後のビットに 0 をたくさん作成していると、\n\t\t// 0のみのデータになる可能性があるためメモリを修正\n\t\tx._memory_reduction();\n\t\treturn x;\n\t}\n\n\t/**\n\t * 指定したビット数の素数の乱数を作成します\n\t * @param {number} bits - 作成する素数の乱数のビット数\n\t * @param {Random} random - 作成に使用するRandom\n\t * @param {number} [certainty=100] - ミラーラビン素数判定法に使用する繰り返し回数\n\t * @returns {BigInteger}\n\t */\n\tstatic probablePrime(bits, random, certainty = 100) {\n\t\twhile(true) {\n\t\t\tconst x = BigInteger.createRandomBigInteger(bits, random);\n\t\t\tif(x.isProbablePrime(certainty)) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * A.equals(B)\n\t * @param {BigInteger} number\n\t * @returns {boolean} A === B\n\t */\n\tequals(number) {\n\t\tconst x = BigInteger.create(number);\n\t\tif(this.signum() !==  x.signum()) {\n\t\t\treturn false;\n\t\t}\n\t\tif(this.element.length !==  x.element.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor(let i = 0;i < x.element.length; i++) {\n\t\t\tif(this.element[i] !==  x.element[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * 文字列化\n\t * @param {number} [radix=10] - 文字列変換後の進数\n\t * @returns {string}\n\t */\n\ttoString(radix) {\n\t\tif(arguments.length === 0) {\n\t\t\tradix = 10;\n\t\t}\n\t\t// int型で扱える数値で toString が可能なので、\n\t\t// せっかくだからより大きな進数で計算していけば、あとでtoStringする回数が減るテクニック\n\t\t// 2進数であれば、2^n乗で計算しても問題がない 4進数や8進数で計算して、2進数に戻せば巡回少数なし\n\t\t// v0.03 出来る限りまとめてn進数変換する\n\t\tconst max_num = 0x3FFFFFFF;\n\t\t//                        max_num > radix^x\n\t\t// floor(log max_num / log radix) = x\n\t\tconst keta = Math.floor( Math.log(max_num) / Math.log(radix) );\n\t\tconst calcradix = Math.round(Math.pow(radix, keta));\n\t\t// zeros = \"00000000....\"\n\t\tlet zeros = [];\n\t\tlet i;\n\t\tfor(i = 0; i < keta; i++) {\n\t\t\tzeros[i] = \"0\";\n\t\t}\n\t\tzeros = zeros.join(\"\");\n\t\t// v0.03ここまで\n\t\tconst x = IntegerTool.binary_number_to_string(this.element, calcradix);\n\t\tconst y = [];\n\t\tlet z = \"\";\n\t\tif(this.signum() < 0) {\n\t\t\ty[y.length] = \"-\";\n\t\t}\n\t\tfor(i = x.length - 1;i >= 0; i--) {\n\t\t\tz = x[i].toString(radix);\n\t\t\tif(i < (x.length - 1)) {\n\t\t\t\ty[y.length] = zeros.substring(0, keta - z.length);\n\t\t\t}\n\t\t\ty[y.length] = z;\n\t\t}\n\t\treturn y.join(\"\");\n\t}\n\n\t/**\n\t * 16進数データで表された内部値の指定した位置の値を取得する\n\t * @param {number} n - 位置\n\t * @returns {number}\n\t */\n\tgetShort(n) {\n\t\tif((n < 0) || (this.element.length <= n)) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.element[n];\n\t}\n\n\t/**\n\t * 32ビット整数値として取得する（数値が大きいと正確ではない可能性がある）\n\t * @returns {number}\n\t */\n\tget intValue() {\n\t\tlet x = this.getShort(0) + (this.getShort(1) << 16);\n\t\tx &= 0xFFFFFFFF;\n\t\tif((x > 0)&&(this.sign < 0)) {\n\t\t\tx = -x;\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 64ビット整数値として取得する（数値が大きいと正確ではない可能性がある）\n\t * @returns {number}\n\t */\n\tget longValue() {\n\t\tlet x = 0;\n\t\tfor(let i = 3; i >= 0; i--) {\n\t\t\tx *= 65536;\n\t\t\tx += this.getShort(i);\n\t\t}\n\t\tif(this.sign < 0) {\n\t\t\tx = -x;\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 64ビット実数値として取得する（数値が大きいと正確ではない可能性がある）\n\t * @returns {number}\n\t */\n\tget doubleValue() {\n\t\treturn parseFloat(this.toString());\n\t}\n\n\t/**\n\t * ディープコピー\n\t * @returns {BigInteger}\n\t */\n\tclone() {\n\t\tconst y = new BigInteger();\n\t\ty.element = this.element.slice(0);\n\t\ty.sign    = this.sign;\n\t\treturn y;\n\t}\n\n\t/**\n\t * x < 0\n\t * @returns {boolean}\n\t */\n\tisNegative() {\n\t\treturn this.sign < 0;\n\t}\n\n\t/**\n\t * x === 0\n\t * @returns {boolean}\n\t */\n\tisZero() {\n\t\tthis._memory_reduction();\n\t\treturn this.sign === 0;\n\t}\n\t\n\t/**\n\t * x > 0\n\t * @returns {boolean}\n\t */\n\tisPositive() {\n\t\treturn this.sign > 0;\n\t}\n\n\t/**\n\t * 2進数で表した場合に最も右側に現れる1の桁数\n\t * @returns {number} 存在しない場合は -1\n\t */\n\tgetLowestSetBit() {\n\t\tfor(let i = 0; i < this.element.length; i++) {\n\t\t\tif(this.element[i] !==  0) {\n\t\t\t\tconst x = this.element[i];\n\t\t\t\tfor(let j = 0; j < 16; j++) {\n\t\t\t\t\tif(((x >>> j) & 1) !==  0) {\n\t\t\t\t\t\treturn i * 16 + j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t * 2進数で表した場合に何ビットで表すことができるか\n\t * @returns {number}\n\t */\n\tbitLength() {\n\t\tfor(let i = this.element.length - 1; i >= 0; i--) {\n\t\t\tif(this.element[i] !==  0) {\n\t\t\t\tconst x = this.element[i];\n\t\t\t\tfor(let j = 15; j >= 0; j--) {\n\t\t\t\t\tif(((x >>> j) & 1) !==  0) {\n\t\t\t\t\t\treturn i * 16 + j + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\t/**\n\t * 2の補数表現で表した場合に、いくつビットが立つか\n\t * @returns {number}\n\t */\n\tbitCount() {\n\t\tlet target;\n\t\tif(this.sign >= 0) {\n\t\t\ttarget = this;\n\t\t}\n\t\telse {\n\t\t\ttarget = this.add(new BigInteger(1));\n\t\t}\n\t\tconst len = target.bitLength();\n\t\tlet bit = 0;\n\t\tlet count = 0;\n\t\tfor(let i = 0;bit < len;i++) {\n\t\t\tconst x = target.element[i];\n\t\t\tfor(let j = 0;((j < 16) && (bit < len));j++, bit++) {\n\t\t\t\tif(((x >>> j) & 1) !==  0) {\n\t\t\t\t\tcount = count + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * 負の場合は、2の補数表現を作成する\n\t * 内部計算用\n\t * @param [len] - ビット長（省略時は自動計算）\n\t */\n\tgetTwosComplement(len) {\n\t\tconst y = this.clone();\n\t\tif(y.sign >= 0) {\n\t\t\treturn y;\n\t\t}\n\t\telse {\n\t\t\t// 正にする\n\t\t\ty.sign = 1;\n\t\t\t// ビットの数が存在しない場合は数える\n\t\t\tif(arguments.length === 0) {\n\t\t\t\tlen = y.bitLength();\n\t\t\t}\n\t\t\tconst e = y.element;\n\t\t\t// ビット反転後\n\t\t\tfor(let i = 0; i < e.length; i++) {\n\t\t\t\te[i] ^= 0xFFFF;\n\t\t\t}\n\t\t\t// 1～15ビット余る場合は、16ビットずつ作成しているので削る\n\t\t\t// nビットのマスク（なお負の値を表す最上位ビットは削除する）\n\t\t\tif((len % 16) !== 0) {\n\t\t\t\te[e.length - 1] &= (1 << (len % 16)) - 1;\n\t\t\t}\n\t\t\t// 1を加算\n\t\t\ty._add(new BigInteger(1));\n\t\t\treturn y;\n\t\t}\n\t}\n\n\t/**\n\t * A._and(B) = A += B\n\t * @param {BigInteger} number \n\t * @returns {BigInteger}\n\t */\n\t_and(number) {\n\t\tconst val = BigInteger.create(number);\n\t\tlet e1 = this;\n\t\tlet e2 = val;\n\t\tconst s1  = e1.signum(), s2 = e2.signum();\n\t\tconst len = Math.max(e1.bitLength(), e2.bitLength());\n\t\t// 引数が負の場合は、2の補数\n\t\te1 = e1.getTwosComplement(len).element;\n\t\te2 = e2.getTwosComplement(len).element;\n\t\tconst size = Math.max(e1.length, e2.length);\n\t\tthis.element = [];\n\t\tfor(let i = 0;i < size;i++) {\n\t\t\tconst x1 = (i >= e1.length) ? 0 : e1[i];\n\t\t\tconst x2 = (i >= e2.length) ? 0 : e2[i];\n\t\t\tthis.element[i] = x1 & x2;\n\t\t}\n\t\tif(this.bitLength() === 0) {\n\t\t\tthis.element = [];\n\t\t\tthis.sign = 0;\n\t\t}\n\t\tif((s1 === 1)||(s2 === 1)) {\n\t\t\tthis.sign = 1;\n\t\t}\n\t\t// 出力が負の場合は、2の補数\n\t\telse if(this.sign === -1) {\n\t\t\tthis.element = this.getTwosComplement(len).element;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * A.and(B) = A + B\n\t * @param {BigInteger} number \n\t * @returns {BigInteger}\n\t */\n\tand(number) {\n\t\treturn this.clone()._and(number);\n\t}\n\n\t/**\n\t * A._or(B) = A |= B\n\t * @param {BigInteger} number \n\t * @returns {BigInteger}\n\t */\n\t_or(number) {\n\t\tconst val = BigInteger.create(number);\n\t\tlet e1 = this;\n\t\tlet e2 = val;\n\t\tconst s1  = e1.signum(), s2 = e2.signum();\n\t\tconst len = Math.max(e1.bitLength(), e2.bitLength());\n\t\t// 引数が負の場合は、2の補数\n\t\te1 = e1.getTwosComplement(len).element;\n\t\te2 = e2.getTwosComplement(len).element;\n\t\tconst size = Math.max(e1.length, e2.length);\n\t\tthis.element = [];\n\t\tfor(let i = 0;i < size;i++) {\n\t\t\tconst x1 = (i >= e1.length) ? 0 : e1[i];\n\t\t\tconst x2 = (i >= e2.length) ? 0 : e2[i];\n\t\t\tthis.element[i] = x1 | x2;\n\t\t}\n\t\tthis.sign = ((s1 === -1)||(s2 === -1)) ? -1 : Math.max(s1, s2);\n\t\t// 出力が負の場合は、2の補数\n\t\tif(this.sign === -1) {\n\t\t\tthis.element = this.getTwosComplement(len).element;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * A.or(B) = A | B\n\t * @param {BigInteger} number \n\t * @returns {BigInteger}\n\t */\n\tor(number) {\n\t\treturn this.clone()._or(number);\n\t}\n\n\t/**\n\t * A._xor(B) = A ^= B\n\t * @param {BigInteger} number \n\t * @returns {BigInteger}\n\t */\n\t_xor(number) {\n\t\tconst val = BigInteger.create(number);\n\t\tlet e1 = this;\n\t\tlet e2 = val;\n\t\tconst s1  = e1.signum(), s2 = e2.signum();\n\t\tconst len = Math.max(e1.bitLength(), e2.bitLength());\n\t\t// 引数が負の場合は、2の補数\n\t\te1 = e1.getTwosComplement(len).element;\n\t\te2 = e2.getTwosComplement(len).element;\n\t\tconst size = Math.max(e1.length, e2.length);\n\t\tthis.element = [];\n\t\tfor(let i = 0;i < size;i++) {\n\t\t\tconst x1 = (i >= e1.length) ? 0 : e1[i];\n\t\t\tconst x2 = (i >= e2.length) ? 0 : e2[i];\n\t\t\tthis.element[i] = x1 ^ x2;\n\t\t}\n\t\tthis.sign = ((s1 !== 0)&&(s1 !== s2)) ? -1 : 1;\n\t\t// 出力が負の場合は、2の補数\n\t\tif(this.sign === -1) {\n\t\t\tthis.element = this.getTwosComplement(len).element;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * A.xor(B) = A ^ B\n\t * @param {BigInteger} number \n\t * @returns {BigInteger}\n\t */\n\txor(number) {\n\t\treturn(this.clone()._xor(number));\n\t}\n\n\t/**\n\t * A._not() = !A (mutable)\n\t * @returns {BigInteger}\n\t */\n\t_not() {\n\t\treturn(this._add(new BigInteger(1))._negate());\n\t}\n\n\t/**\n\t * A.not() = !A\n\t * @returns {BigInteger}\n\t */\n\tnot() {\n\t\treturn(this.clone()._not());\n\t}\n\n\t/**\n\t * A._andNot(B) = A &= (!B)\n\t * @param {BigInteger} number \n\t * @returns {BigInteger}\n\t */\n\t_andNot(number) {\n\t\tconst val = BigInteger.create(number);\n\t\treturn(this._and(val.not()));\n\t}\n\n\t/**\n\t * A.andNot(B) = A & (!B)\n\t * @param {BigInteger} number \n\t * @returns {BigInteger}\n\t */\n\tandNot(number) {\n\t\treturn(this.clone()._andNot(number));\n\t}\n\n\t/**\n\t * 指定したビット長まで配列を拡張する\n\t * @param {number} n - ビット数\n\t */\n\t_memory_allocation(n) {\n\t\tconst elementsize = this.element.length << 4;\n\t\tif(elementsize < n) {\n\t\t\tconst addsize = (((n - elementsize - 1) & 0xFFFFFFF0) >>> 4) + 1;\n\t\t\tfor(let i = 0;i < addsize;i++) {\n\t\t\t\tthis.element[this.element.length] = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 不要なデータを除去する\n\t */\n\t_memory_reduction() {\n\t\tfor(let i = this.element.length - 1;i >= 0;i--) {\n\t\t\tif(this.element[i] !==  0) {\n\t\t\t\tif(i < this.element.length - 1) {\n\t\t\t\t\tthis.element.splice(i + 1, this.element.length - i - 1);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.sign = 0;\n\t\tthis.element = [];\n\t}\n\n\t/**\n\t * ユークリッド互除法\n\t * x = this, y = number としたとき gcd(x,y)を返す\n\t * @param {BigInteger} number \n\t * @returns {BigInteger}\n\t */\n\tgcd(number) {\n\t\tconst val = BigInteger.create(number);\n\t\t// 非再帰\n\t\tlet x = this, y = val, z;\n\t\twhile(y.signum() !== 0) {\n\t\t\tz = x.remainder(y);\n\t\t\tx = y;\n\t\t\ty = z;\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 拡張ユークリッド互除法\n\t * x = this, y = number としたとき、 a*x + b*y = c = gcd(x, y) の[a, b, c]を返す\n\t * @param {BigInteger} number \n\t * @returns Array<BigInteger> BigInteger が入った配列\n\t */\n\textgcd(number) {\n\t\tconst val = BigInteger.create(number);\n\t\t// 非再帰\n\t\tconst ONE  = new BigInteger(1);\n\t\tconst ZERO = new BigInteger(0);\n\t\tlet r0 = this, r1 = val, r2, q1;\n\t\tlet a0 = ONE,  a1 = ZERO, a2;\n\t\tlet b0 = ZERO, b1 = ONE,  b2;\n\t\twhile(r1.signum() !== 0) {\n\t\t\tconst y = r0.divideAndRemainder(r1);\n\t\t\tq1 = y[0];\n\t\t\tr2 = y[1];\n\t\t\ta2 = a0.subtract(q1.multiply(a1));\n\t\t\tb2 = b0.subtract(q1.multiply(b1));\n\t\t\ta0 = a1;\n\t\t\ta1 = a2;\n\t\t\tb0 = b1;\n\t\t\tb1 = b2;\n\t\t\tr0 = r1;\n\t\t\tr1 = r2;\n\t\t}\n\t\treturn [a0, b0, r0];\n\t}\n\n\t/**\n\t * A._abs() = A = abs(A)\n\t * @returns {BigInteger}\n\t */\n\t_abs() {\n\t\t// -1 -> 1, 0 -> 0, 1 -> 1\n\t\tthis.sign *= this.sign;\n\t\treturn this;\n\t}\n\n\t/**\n\t * A.abs() = abs(A)\n\t * @returns {BigInteger}\n\t */\n\tabs() {\n\t\treturn this.clone()._abs();\n\t}\n\n\t/**\n\t * A._negate() = A = - A\n\t * @returns {BigInteger}\n\t */\n\t_negate() {\n\t\tthis.sign *= -1;\n\t\treturn this;\n\t}\n\n\t/**\n\t * A.negate() = - A\n\t * @returns {BigInteger}\n\t */\n\tnegate() {\n\t\treturn this.clone()._negate();\n\t}\n\n\t/**\n\t * A.signum() 符号値（1, -1）、0の場合は0を返す\n\t * @returns {number}\n\t */\n\tsignum() {\n\t\tif(this.element.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.sign;\n\t}\n\n\t/**\n\t * A.compareToAbs(B) 絶対値をとった値同士で比較する\n\t * @param {BigInteger} number \n\t * @returns {number} abs(A) < abs(B) ? 1 : (abs(A) === abs(B) ? 0 : -1)（※非Complexオブジェクト）\n\t */\n\tcompareToAbs(number) {\n\t\tconst val = BigInteger.create(number);\n\t\tif(this.element.length < val.element.length) {\n\t\t\treturn -1;\n\t\t}\n\t\telse if(this.element.length > val.element.length) {\n\t\t\treturn 1;\n\t\t}\n\t\tfor(let i = this.element.length - 1;i >= 0;i--) {\n\t\t\tif(this.element[i] !== val.element[i]) {\n\t\t\t\tconst x = this.element[i] - val.element[i];\n\t\t\t\treturn ( (x === 0) ? 0 : ((x > 0) ? 1 : -1) );\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\t/**\n\t * A.compareTo(B) 値同士で比較する\n\t * @param {BigInteger} number \n\t * @returns {number} A < B ? 1 : (A === B ? 0 : -1)（※非Complexオブジェクト）\n\t */\n\tcompareTo(number) {\n\t\tconst val = BigInteger.create(number);\n\t\tif(this.signum() !== val.signum()) {\n\t\t\tif(this.sign > val.sign) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\telse if(this.signum() === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.compareToAbs(val) * this.sign;\n\t}\n\n\t/**\n\t * A.max(B) = max([A, B])\n\t * @param {BigInteger} number\n\t * @returns {BigInteger}\n\t */\n\tmax(number) {\n\t\tconst val = BigInteger.create(number);\n\t\tif(this.compareTo(val) >= 0) {\n\t\t\treturn this.clone();\n\t\t}\n\t\telse {\n\t\t\treturn val.clone();\n\t\t}\n\t}\n\n\t/**\n\t * A.min(B) = min([A, B])\n\t * @param {BigInteger} number\n\t * @returns {BigInteger}\n\t */\n\tmin(number) {\n\t\tconst val = BigInteger.create(number);\n\t\tif(this.compareTo(val) >= 0) {\n\t\t\treturn val.clone();\n\t\t}\n\t\telse {\n\t\t\treturn this.clone();\n\t\t}\n\t}\n\n\t/**\n\t * A._shift() = A <<= n\n\t * @param {number} n\n\t * @returns {BigInteger}\n\t */\n\t_shift(n) {\n\t\tif(n === 0) {\n\t\t\treturn this;\n\t\t}\n\t\tconst x = this.element;\n\t\t// 1ビットなら専用コードで高速計算\n\t\tif(n === 1) {\n\t\t\tlet i = x.length - 1;\n\t\t\tif((x[i] & 0x8000) !==  0) {\n\t\t\t\tx[x.length] = 1;\n\t\t\t}\n\t\t\tfor(;i >= 0;i--) {\n\t\t\t\tx[i] <<= 1;\n\t\t\t\tx[i]  &= 0xFFFF;\n\t\t\t\tif((i > 0) && ((x[i - 1] & 0x8000) !==  0)) {\n\t\t\t\t\tx[i] += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(n === -1) {\n\t\t\tfor(let i = 0;i < x.length;i++) {\n\t\t\t\tx[i] >>>= 1;\n\t\t\t\tif((i < x.length - 1) && ((x[i + 1] & 1) !==  0)) {\n\t\t\t\t\tx[i] |= 0x8000;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(x[x.length - 1] === 0) {\n\t\t\t\tx.pop();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// 16ビット単位なら配列を追加削除する高速計算\n\t\t\tif(n >= 16) {\n\t\t\t\tconst m = n >>> 4;\n\t\t\t\tfor(let i = x.length - 1; i >= 0; i--) {\n\t\t\t\t\tx[i + m] = x[i];\n\t\t\t\t}\n\t\t\t\tfor(let i = m - 1; i >= 0; i--) {\n\t\t\t\t\tx[i] = 0;\n\t\t\t\t}\n\t\t\t\tn &= 0xF;\n\t\t\t}\n\t\t\telse if(n <= -16){\n\t\t\t\tconst m = (-n) >>> 4;\n\t\t\t\tx.splice(0, m);\n\t\t\t\tn += m << 4;\n\t\t\t}\n\t\t\tif(n !== 0) {\n\t\t\t\t// 15ビット以内ならビット演算でまとめて操作\n\t\t\t\tif(0 < n) {\n\t\t\t\t\tlet carry = 0;\n\t\t\t\t\tfor(let i = 0; i < x.length; i++) {\n\t\t\t\t\t\tx[i] = (x[i] << n) + carry;\n\t\t\t\t\t\tif(x[i] > 0xFFFF) {\n\t\t\t\t\t\t\tcarry = x[i] >>> 16;\n\t\t\t\t\t\t\tx[i] &= 0xFFFF;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tcarry = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(carry !== 0) {\n\t\t\t\t\t\tx[x.length] = carry;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tn = -n;\n\t\t\t\t\tfor(let i = 0; i < x.length; i++) {\n\t\t\t\t\t\tif(i !== x.length - 1) {\n\t\t\t\t\t\t\tx[i] += x[i + 1] << 16;\n\t\t\t\t\t\t\tx[i] >>>= n;\n\t\t\t\t\t\t\tx[i] &= 0xFFFF;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tx[i] >>>= n;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(x[x.length - 1] === 0) {\n\t\t\t\t\t\tx.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * A.shift() = A << n\n\t * @param {number} n\n\t * @returns {BigInteger}\n\t */\n\tshift(n) {\n\t\treturn this.clone()._shift(n);\n\t}\n\n\t/**\n\t * A.shiftLeft() = A << n\n\t * @param {number} n\n\t * @returns {BigInteger}\n\t */\n\tshiftLeft(n) {\n\t\treturn this.shift(n);\n\t}\n\n\t/**\n\t * A.shiftRight() = A >> n\n\t * @param {number} n\n\t * @returns {BigInteger}\n\t */\n\tshiftRight(n) {\n\t\treturn this.shift(-n);\n\t}\n\n\t/**\n\t * A._add(B) = A += B\n\t * @param {BigInteger} number\n\t * @returns {BigInteger}\n\t */\n\t_add(number) {\n\t\tconst val = BigInteger.create(number);\n\t\tconst o1 = this;\n\t\tconst o2 = val;\n\t\tlet x1 = o1.element;\n\t\tlet x2 = o2.element;\n\t\tif(o1.sign === o2.sign) {\n\t\t\t//足し算\n\t\t\tthis._memory_allocation(x2.length << 4);\n\t\t\tlet carry = 0;\n\t\t\tfor(let i = 0; i < x1.length; i++) {\n\t\t\t\tx1[i] += ((x2.length >= (i + 1)) ? x2[i] : 0) + carry;\n\t\t\t\tif(x1[i] > 0xFFFF) {\n\t\t\t\t\tcarry = 1;\n\t\t\t\t\tx1[i] &= 0xFFFF;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(carry !== 0) {\n\t\t\t\tx1[x1.length] = carry;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// 引き算\n\t\t\tconst compare = o1.compareToAbs(o2);\n\t\t\tif(compare === 0) {\n\t\t\t\tthis.element = [];\n\t\t\t\tthis.sign = 1;\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\telse if(compare === -1) {\n\t\t\t\tthis.sign = o2.sign;\n\t\t\t\tconst swap = x1;\n\t\t\t\tx1 = x2.slice(0);\n\t\t\t\tx2 = swap;\n\t\t\t}\n\t\t\tlet carry = 0;\n\t\t\tfor(let i = 0; i < x1.length; i++) {\n\t\t\t\tx1[i] -= ((x2.length >= (i + 1)) ? x2[i] : 0) + carry;\n\t\t\t\tif(x1[i] < 0) {\n\t\t\t\t\tx1[i] += 0x10000;\n\t\t\t\t\tcarry  = 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry  = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.element = x1;\n\t\t\tthis._memory_reduction();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * A.add(B) = A + B\n\t * @param {BigInteger} number\n\t * @returns {BigInteger}\n\t */\n\tadd(number) {\n\t\treturn this.clone()._add(number);\n\t}\n\n\t/**\n\t * A._subtract(B) = A -= B\n\t * @param {BigInteger} number\n\t * @returns {BigInteger}\n\t */\n\t_subtract(number) {\n\t\tconst val = BigInteger.create(number);\n\t\tconst sign = val.sign;\n\t\tconst out  = this._add(val._negate());\n\t\tval.sign = sign;\n\t\treturn out;\n\t}\n\n\t/**\n\t * A.subtract(B) = A - B\n\t * @param {BigInteger} number\n\t * @returns {BigInteger}\n\t */\n\tsubtract(number) {\n\t\treturn this.clone()._subtract(number);\n\t}\n\n\t/**\n\t * A.sub(B) = A - B\n\t * @param {BigInteger} number\n\t * @returns {BigInteger}\n\t */\n\tsub(number) {\n\t\treturn this.subtract(number);\n\t}\n\n\t/**\n\t * A._multiply(B) = A *= B\n\t * @param {BigInteger} number\n\t * @returns {BigInteger}\n\t */\n\t_multiply(number) {\n\t\tconst x = this.multiply(number);\n\t\tthis.element = x.element;\n\t\tthis.sign    = x.sign;\n\t\treturn this;\n\t}\n\n\t/**\n\t * A.number(B) = A * B\n\t * @param {BigInteger} number\n\t * @returns {BigInteger}\n\t */\n\tmultiply(number) {\n\t\tconst val = BigInteger.create(number);\n\t\tconst out  = new BigInteger();\n\t\tconst buff = new BigInteger();\n\t\tconst o1 = this;\n\t\tconst o2 = val;\n\t\tconst x1 = o1.element;\n\t\tconst x2 = o2.element;\n\t\tconst y  = out.element;\n\t\tfor(let i = 0; i < x1.length; i++) {\n\t\t\tbuff.element = [];\n\t\t\t// x3 = x1[i] * x2\n\t\t\tconst x3 = buff.element;\n\t\t\tlet carry = 0;\n\t\t\tfor(let j = 0; j < x2.length; j++) {\n\t\t\t\tx3[j] = x1[i] * x2[j] + carry;\n\t\t\t\tif(x3[j] > 0xFFFF) {\n\t\t\t\t\tcarry = x3[j] >>> 16;\n\t\t\t\t\tx3[j] &= 0xFFFF;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(carry !== 0) {\n\t\t\t\tx3[x3.length] = carry;\n\t\t\t}\n\t\t\t// x3 = x3 << (i * 16)\n\t\t\t//buff._shift(i << 4);\n\t\t\tfor(let j = x3.length - 1; j >= 0; j--) {\n\t\t\t\tx3[j + i] = x3[j];\n\t\t\t}\n\t\t\tfor(let j = i - 1; j >= 0; j--) {\n\t\t\t\tx3[j] = 0;\n\t\t\t}\n\t\t\t// y = y + x3 (out._add(buff))\n\t\t\t//out._add(buff);\n\t\t\tcarry = 0;\n\t\t\tout._memory_allocation(x3.length << 4);\n\t\t\tfor(let j = i; j < y.length; j++) {\n\t\t\t\ty[j] += ((x3.length >= (j + 1)) ? x3[j] : 0) + carry;\n\t\t\t\tif(y[j] > 0xFFFF) {\n\t\t\t\t\tcarry = 1;\n\t\t\t\t\ty[j] &= 0xFFFF;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcarry = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(carry !== 0) {\n\t\t\t\ty[y.length] = carry;\n\t\t\t}\n\t\t}\n\t\tout.sign = this.sign * val.sign;\n\t\treturn out;\n\t}\n\n\t/**\n\t * A.mul(B) = A * B\n\t * @param {BigInteger} number\n\t * @returns {BigInteger}\n\t */\n\tmul(number) {\n\t\treturn this.multiply(number);\n\t}\n\n\t/**\n\t * A._divideAndRemainder(B) = A /= B\n\t * @param {BigInteger} number\n\t * @returns {Array<BigInteger>} [C = floor(A / B), A - C * B]\n\t */\n\t_divideAndRemainder(number) {\n\t\tconst val = BigInteger.create(number);\n\t\tconst out = [];\n\t\tif(val.signum() === 0) {\n\t\t\tout[0] = 1 / 0;\n\t\t\tout[1] = 0 / 0;\n\t\t\treturn out;\n\t\t}\n\t\tconst compare = this.compareToAbs(val);\n\t\tif(compare < 0) {\n\t\t\tout[0] = new BigInteger(0);\n\t\t\tout[1] = this.clone();\n\t\t\treturn out;\n\t\t}\n\t\telse if(compare === 0) {\n\t\t\tout[0] = new BigInteger(1);\n\t\t\tout[0].sign = this.sign * val.sign;\n\t\t\tout[1] = new BigInteger(0);\n\t\t\treturn out;\n\t\t}\n\t\tconst ONE = new BigInteger(1);\n\t\tconst size = this.bitLength() - val.bitLength();\n\t\tconst x1 = this.clone()._abs();\n\t\tconst x2 = val.shift(size)._abs();\n\t\tconst y  = new BigInteger();\n\t\tfor(let i = 0; i <= size; i++) {\n\t\t\tif(x1.compareToAbs(x2) >= 0) {\n\t\t\t\tx1._subtract(x2);\n\t\t\t\ty._add(ONE);\n\t\t\t}\n\t\t\tif(i === size) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx2._shift(-1);\n\t\t\ty._shift(1);\n\t\t}\n\t\tout[0] = y;\n\t\tout[0].sign = this.sign * val.sign;\n\t\tout[1] = x1;\n\t\tout[1].sign = this.sign;\n\t\treturn out;\n\t}\n\n\t/**\n\t * A.divideAndRemainder(B) = A / B\n\t * @param {BigInteger} number\n\t * @returns {Array<BigInteger>} [C = floor(A / B), A - C * B]\n\t */\n\tdivideAndRemainder(number) {\n\t\treturn this.clone()._divideAndRemainder(number);\n\t}\n\n\t/**\n\t * A._divide(B) = A /= B\n\t * @param {BigInteger} number\n\t * @returns {BigInteger} floor(A / B)\n\t */\n\t_divide(number) {\n\t\treturn this._divideAndRemainder(number)[0];\n\t}\n\n\t/**\n\t * A.divide(B) = A / B\n\t * @param {BigInteger} number\n\t * @returns {BigInteger} floor(A / B)\n\t */\n\tdivide(number) {\n\t\treturn this.clone()._divide(number);\n\t}\n\n\t/**\n\t * A.div(B) = A / B\n\t * @param {BigInteger} number\n\t * @returns {BigInteger} floor(A / B)\n\t */\n\tdiv(number) {\n\t\treturn this.divide(number);\n\t}\n\n\t/**\n\t * A._remainder(B) = A rem B\n\t * @param {BigInteger} number\n\t * @returns {BigInteger}\n\t */\n\t_remainder(number) {\n\t\treturn this._divideAndRemainder(number)[1];\n\t}\n\n\t/**\n\t * A.remainder(B) = A rem B\n\t * @param {BigInteger} number\n\t * @returns {BigInteger}\n\t */\n\tremainder(number) {\n\t\treturn this.clone()._remainder(number);\n\t}\n\n\t/**\n\t * A.rem(B) = A rem B\n\t * @param {BigInteger} number\n\t * @returns {BigInteger}\n\t */\n\trem(number) {\n\t\treturn this.remainder(number);\n\t}\n\n\t/**\n\t * A._mod(B) = A _mod B\n\t * @param {BigInteger} number\n\t * @returns {BigInteger}\n\t */\n\t_mod(number) {\n\t\tconst val = BigInteger.create(number);\n\t\tif(val.signum() < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tconst y = this._divideAndRemainder(val);\n\t\tif(y[1] instanceof BigInteger) {\n\t\t\tif(y[1].signum() >= 0) {\n\t\t\t\treturn y[1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn y[1]._add(val);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * A.mod(B) = A mod B\n\t * @param {BigInteger} number\n\t * @returns {BigInteger}\n\t */\n\tmod(number) {\n\t\treturn this.clone()._mod(number);\n\t}\n\n\t/**\n\t * 指定したビットを立てる (mutable)\n\t * @param {number} n \n\t * @returns {BigInteger}\n\t */\n\t_setBit(n) {\n\t\tthis._memory_allocation(n + 1);\n\t\tthis.element[n >>> 4] |= 1 << (n & 0xF);\n\t\treturn this;\n\t}\n\n\t/**\n\t * 指定したビットを立てる\n\t * @param {number} n \n\t * @returns {BigInteger}\n\t */\n\tsetBit(n) {\n\t\treturn this.clone()._setBit(n);\n\t}\n\n\t/**\n\t * 指定したビットを反転させる (mutable)\n\t * @param {number} n \n\t * @returns {BigInteger}\n\t */\n\t_flipBit(n) {\n\t\tthis._memory_allocation(n + 1);\n\t\tthis.element[n >>> 4] ^= 1 << (n & 0xF);\n\t\treturn this;\n\t}\n\n\t/**\n\t * 指定したビットを反転させる\n\t * @param {number} n \n\t * @returns {BigInteger}\n\t */\n\tflipBit(n) {\n\t\treturn this.clone()._flipBit(n);\n\t}\n\n\t/**\n\t * 指定したビットを落とす\n\t * @param {number} n \n\t * @returns {BigInteger}\n\t */\n\tclearBit(n) {\n\t\tconst y = this.clone();\n\t\ty.element[n >>> 4] &= ~(1 << (n & 0xF));\n\t\ty._memory_reduction();\n\t\treturn y;\n\t}\n\n\t/**\n\t * 指定したビットが立っているか\n\t * @param {number} n \n\t * @returns {boolean}\n\t */\n\ttestBit(n) {\n\t\treturn ((this.element[n >>> 4] >>> (n & 0xF)) & 1) !== 0;\n\t}\n\n\t/**\n\t * A.pow(B) = A^B\n\t * @param {BigInteger} exponent\n\t * @returns {BigInteger}\n\t */\n\tpow(exponent) {\n\t\tconst e = new BigInteger(exponent);\n\t\tlet x = new BigInteger(this);\n\t\tlet y = new BigInteger(1);\n\t\twhile(e.element.length !== 0) {\n\t\t\tif((e.element[0] & 1) !== 0) {\n\t\t\t\ty = y.multiply(x);\n\t\t\t}\n\t\t\tx = x.multiply(x);\n\t\t\te._shift(-1);\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * A.modPow(B, m) = A^B mod m\n\t * @param {BigInteger} exponent\n\t * @param {BigInteger} m \n\t * @returns {BigInteger}\n\t */\n\tmodPow(exponent, m) {\n\t\tconst m_ = BigInteger.create(m);\n\t\tlet x = new BigInteger(this);\n\t\tlet y = new BigInteger(1);\n\t\tconst e = new BigInteger(exponent);\n\t\twhile(e.element.length !== 0) {\n\t\t\tif((e.element[0] & 1) !== 0) {\n\t\t\t\ty = y.multiply(x).mod(m_);\n\t\t\t}\n\t\t\tx = x.multiply(x).mod(m_);\n\t\t\te._shift(-1);\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * A.modInverse(m) = A^(-1) mod m\n\t * @param {BigInteger} m\n\t * @returns {BigInteger}\n\t */\n\tmodInverse(m) {\n\t\tconst m_ = BigInteger.create(m);\n\t\tconst y = this.extgcd(m);\n\t\tconst ONE  = new BigInteger(1);\n\t\tif(y[2].compareTo(ONE) !== 0) {\n\t\t\treturn null;\n\t\t}\n\t\t// 正にするため remainder ではなく mod を使用する\n\t\treturn y[0]._add(m_)._mod(m_);\n\t}\n\n\t/**\n\t * A.isProbablePrime(certainty) 複素数かミラーラビン素数判定法で判定する\n\t * @param {number} certainty - ミラーラビン素数判定法に使用する繰り返し回数\n\t * @returns {boolean}\n\t */\n\tisProbablePrime(certainty) {\n\t\tconst e = this.element;\n\t\t//0, 1, 2 -> true\n\t\tif( (e.length === 0) || ((e.length === 1)&&(e[0] <= 2)) ) {\n\t\t\treturn true;\n\t\t}\n\t\t//even number -> false\n\t\telse if( ((e[0] & 1) === 0) || (certainty <= 0) ) {\n\t\t\treturn false;\n\t\t}\n\t\tif(typeof Random === \"undefined\") {\n\t\t\treturn false;\n\t\t}\n\t\t// ミラーラビン素数判定法\n\t\t// かなり処理が重たいです。まあお遊び程度に使用という感じで。\n\t\tcertainty\t= certainty >> 1;\n\t\tconst ZERO\t= new BigInteger(0);\n\t\tconst ONE\t= new BigInteger(1);\n\t\tconst n\t\t= this;\n\t\tconst LEN\t= n.bitLength();\n\t\tconst n_1\t= n.subtract(ONE);\n\t\tconst s \t= n_1.getLowestSetBit();\n\t\tconst d \t= n_1.shift(-s);\n\t\tconst random = new Random();\n\t\tlet a;\n\t\tlet isComposite;\n\t\tfor(let i = 0; i < certainty; i++ ) {\n\t\t\t//[ 1, n - 1] の範囲から a を選択\n\t\t\tdo {\n\t\t\t\ta = BigInteger.createRandomBigInteger(LEN, random);\n\t\t\t} while(( a.compareTo(ZERO) === 0 )||( a.compareTo(n) !== -1 ));\n\t\t\t// a^d != 1 mod n\n\t\t\ta = a.modPow(d, n);\n\t\t\tif( a.compareTo(ONE) === 0 ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// x ^ 4 % 2 = ((x ^ 2 % 2) ^ 2 % 2) のように分解しておく\n\t\t\tisComposite = true;\n\t\t\tfor(let j = 0; j <= s; j++) {\n\t\t\t\tif(a.compareTo(n_1) === 0) {\n\t\t\t\t\tisComposite = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(j < s) {\n\t\t\t\t\ta = a.multiply(a)._mod(n);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(isComposite) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * A.nextProbablePrime() 次の素数を求める\n\t * @returns {BigInteger}\n\t */\n\tnextProbablePrime() {\n\t\tconst x = this.clone();\n\t\twhile(true) {\n\t\t\tx._add(BigInteger.ONE);\n\t\t\tif(x.isProbablePrime(100)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t\n\t/**\n\t * 指定した数値から BigInteger 型に変換\n\t * @param {number} x \n\t * @returns {BigInteger}\n\t */\n\tstatic valueOf(x) {\n\t\treturn new BigInteger(x);\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * 1\n\t * @returns {BigInteger}\n\t */\n\tstatic get ONE() {\n\t\treturn DEFINE.ONE;\n\t}\n\t\n\t/**\n\t * 2\n\t * @returns {BigInteger}\n\t */\n\tstatic get TWO() {\n\t\treturn DEFINE.TWO;\n\t}\n\t\n\t/**\n\t * 10\n\t * @returns {BigInteger}\n\t */\n\tstatic get TEN() {\n\t\treturn DEFINE.TEN;\n\t}\n\t\n\t/**\n\t * 0\n\t * @returns {BigInteger}\n\t */\n\tstatic get ZERO() {\n\t\treturn DEFINE.ZERO;\n\t}\n\n}\n\nconst DEFINE = {\n\tONE : new BigInteger(1),\n\tTWO : new BigInteger(2),\n\tTEN : new BigInteger(10),\n\tZERO : new BigInteger(0)\n};\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/Math/BigInteger.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "class",
    "name": "IntegerTool",
    "memberof": "src/Math/BigInteger.mjs",
    "static": true,
    "longname": "src/Math/BigInteger.mjs~IntegerTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/Math/BigInteger.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "string_to_binary_number",
    "memberof": "src/Math/BigInteger.mjs~IntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/BigInteger.mjs~IntegerTool.string_to_binary_number",
    "access": "public",
    "description": "数値が入った文字列から16進数ごとの配列へ変換する",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} 16進数ごとに代入された配列 "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "数値が入ったテキストデータ（負の値などを含めない）"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radix",
        "description": "テキストデータの進数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "16進数ごとに代入された配列"
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "number_to_binary_number",
    "memberof": "src/Math/BigInteger.mjs~IntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/BigInteger.mjs~IntegerTool.number_to_binary_number",
    "access": "public",
    "description": "数値から16進数ごとの配列へ変換する",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} 16進数ごとに代入された配列 "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "変換したい数値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "16進数ごとに代入された配列"
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "binary_number_to_string",
    "memberof": "src/Math/BigInteger.mjs~IntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/BigInteger.mjs~IntegerTool.binary_number_to_string",
    "access": "public",
    "description": "16進数の配列データから数列が入った文字列を作成",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 文字列化したデータ "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "binary",
        "description": "16進数ごとに代入された配列"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radix",
        "description": "変換後の進数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "文字列化したデータ"
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "ToBigIntegerFromString",
    "memberof": "src/Math/BigInteger.mjs~IntegerTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/BigInteger.mjs~IntegerTool.ToBigIntegerFromString",
    "access": "public",
    "description": "数値が入った文字列から多倍長数値を表すためのデータを作成する",
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} 多倍長数値を表すためのデータ "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "数値が入ったテキストデータ"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "radix",
        "description": "テキストデータの進数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "多倍長数値を表すためのデータ"
    }
  },
  {
    "__docId__": 141,
    "kind": "class",
    "name": "BigInteger",
    "memberof": "src/Math/BigInteger.mjs",
    "static": true,
    "longname": "src/Math/BigInteger.mjs~BigInteger",
    "access": "public",
    "export": true,
    "importPath": "konpeito.js/src/Math/BigInteger.mjs",
    "importStyle": "BigInteger",
    "description": "多倍長整数演算クラス (immutable)",
    "lineNumber": 184,
    "interface": false
  },
  {
    "__docId__": 142,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#constructor",
    "access": "public",
    "description": "多倍長整数を作成\n文字列で指定する場合は指数表記には非対応。\n指定した進数で指定する場合は[\"ff\", 16] という配列で指定する。",
    "lineNumber": 192,
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger|number|string|Array<string|number>"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "整数値"
      }
    ]
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "element",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#element",
    "access": "private",
    "description": "1要素、16ビット整数の配列",
    "lineNumber": 199,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "sign",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#sign",
    "access": "private",
    "description": "正負（プラスなら+1、マイナスなら-1、0なら0）\n※計算によってはここの値の再設定をしていない箇所があるので、ここを見る時は注意",
    "lineNumber": 207,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "create",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/BigInteger.mjs~BigInteger.create",
    "access": "public",
    "description": "引数から多倍長整数を作成する（作成が不要の場合はnewしない）",
    "lineNumber": 258,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "createRandomBigInteger",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/BigInteger.mjs~BigInteger.createRandomBigInteger",
    "access": "public",
    "description": "指定したビット数の乱数を作成します",
    "lineNumber": 273,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bits",
        "description": "作成する乱数のビット数"
      },
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": false,
        "name": "random",
        "description": "作成に使用するRandom"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "probablePrime",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/BigInteger.mjs~BigInteger.probablePrime",
    "access": "public",
    "description": "指定したビット数の素数の乱数を作成します",
    "lineNumber": 312,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bits",
        "description": "作成する素数の乱数のビット数"
      },
      {
        "nullable": null,
        "types": [
          "Random"
        ],
        "spread": false,
        "optional": false,
        "name": "random",
        "description": "作成に使用するRandom"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "certainty",
        "description": "ミラーラビン素数判定法に使用する繰り返し回数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "equals",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#equals",
    "access": "public",
    "description": "A.equals(B)",
    "lineNumber": 326,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#toString",
    "access": "public",
    "description": "文字列化",
    "lineNumber": 347,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "radix",
        "description": "文字列変換後の進数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "getShort",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#getShort",
    "access": "public",
    "description": "16進数データで表された内部値の指定した位置の値を取得する",
    "lineNumber": 389,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "位置"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 163,
    "kind": "get",
    "name": "intValue",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#intValue",
    "access": "public",
    "description": "32ビット整数値として取得する（数値が大きいと正確ではない可能性がある）",
    "lineNumber": 400,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "get",
    "name": "longValue",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#longValue",
    "access": "public",
    "description": "64ビット整数値として取得する（数値が大きいと正確ではない可能性がある）",
    "lineNumber": 413,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "get",
    "name": "doubleValue",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#doubleValue",
    "access": "public",
    "description": "64ビット実数値として取得する（数値が大きいと正確ではない可能性がある）",
    "lineNumber": 429,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "clone",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#clone",
    "access": "public",
    "description": "ディープコピー",
    "lineNumber": 437,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "isNegative",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#isNegative",
    "access": "public",
    "description": "x < 0",
    "lineNumber": 448,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "isZero",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#isZero",
    "access": "public",
    "description": "x === 0",
    "lineNumber": 456,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "isPositive",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#isPositive",
    "access": "public",
    "description": "x > 0",
    "lineNumber": 465,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "getLowestSetBit",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#getLowestSetBit",
    "access": "public",
    "description": "2進数で表した場合に最も右側に現れる1の桁数",
    "lineNumber": 473,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 存在しない場合は -1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "存在しない場合は -1"
    },
    "params": []
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "bitLength",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#bitLength",
    "access": "public",
    "description": "2進数で表した場合に何ビットで表すことができるか",
    "lineNumber": 491,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "bitCount",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#bitCount",
    "access": "public",
    "description": "2の補数表現で表した場合に、いくつビットが立つか",
    "lineNumber": 509,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "getTwosComplement",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#getTwosComplement",
    "access": "public",
    "description": "負の場合は、2の補数表現を作成する\n内部計算用",
    "lineNumber": 536,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "len",
        "description": "ビット長（省略時は自動計算）"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "_and",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_and",
    "access": "private",
    "description": "A._and(B) = A += B",
    "lineNumber": 569,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "and",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#and",
    "access": "public",
    "description": "A.and(B) = A + B",
    "lineNumber": 604,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "_or",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_or",
    "access": "private",
    "description": "A._or(B) = A |= B",
    "lineNumber": 613,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "or",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#or",
    "access": "public",
    "description": "A.or(B) = A | B",
    "lineNumber": 642,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "_xor",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_xor",
    "access": "private",
    "description": "A._xor(B) = A ^= B",
    "lineNumber": 651,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "xor",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#xor",
    "access": "public",
    "description": "A.xor(B) = A ^ B",
    "lineNumber": 680,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "_not",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_not",
    "access": "private",
    "description": "A._not() = !A (mutable)",
    "lineNumber": 688,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "not",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#not",
    "access": "public",
    "description": "A.not() = !A",
    "lineNumber": 696,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "_andNot",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_andNot",
    "access": "private",
    "description": "A._andNot(B) = A &= (!B)",
    "lineNumber": 705,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "andNot",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#andNot",
    "access": "public",
    "description": "A.andNot(B) = A & (!B)",
    "lineNumber": 715,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "_memory_allocation",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_memory_allocation",
    "access": "private",
    "description": "指定したビット長まで配列を拡張する",
    "lineNumber": 723,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "ビット数"
      }
    ],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "_memory_reduction",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_memory_reduction",
    "access": "private",
    "description": "不要なデータを除去する",
    "lineNumber": 736,
    "params": [],
    "return": null
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "gcd",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#gcd",
    "access": "public",
    "description": "ユークリッド互除法\nx = this, y = number としたとき gcd(x,y)を返す",
    "lineNumber": 755,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "extgcd",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#extgcd",
    "access": "public",
    "description": "拡張ユークリッド互除法\nx = this, y = number としたとき、 a*x + b*y = c = gcd(x, y) の[a, b, c]を返す",
    "lineNumber": 773,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Array<BigInteger> BigInteger が入った配列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Array<BigInteger> BigInteger が入った配列"
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "_abs",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_abs",
    "access": "private",
    "description": "A._abs() = A = abs(A)",
    "lineNumber": 801,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "abs",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#abs",
    "access": "public",
    "description": "A.abs() = abs(A)",
    "lineNumber": 811,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "_negate",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_negate",
    "access": "private",
    "description": "A._negate() = A = - A",
    "lineNumber": 819,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "negate",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#negate",
    "access": "public",
    "description": "A.negate() = - A",
    "lineNumber": 828,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "signum",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#signum",
    "access": "public",
    "description": "A.signum() 符号値（1, -1）、0の場合は0を返す",
    "lineNumber": 836,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "compareToAbs",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#compareToAbs",
    "access": "public",
    "description": "A.compareToAbs(B) 絶対値をとった値同士で比較する",
    "lineNumber": 848,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} abs(A) < abs(B) ? 1 : (abs(A) === abs(B) ? 0 : -1)（※非Complexオブジェクト）"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "abs(A) < abs(B) ? 1 : (abs(A) === abs(B) ? 0 : -1)（※非Complexオブジェクト）"
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#compareTo",
    "access": "public",
    "description": "A.compareTo(B) 値同士で比較する",
    "lineNumber": 870,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A < B ? 1 : (A === B ? 0 : -1)（※非Complexオブジェクト）"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A < B ? 1 : (A === B ? 0 : -1)（※非Complexオブジェクト）"
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "max",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#max",
    "access": "public",
    "description": "A.max(B) = max([A, B])",
    "lineNumber": 891,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "min",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#min",
    "access": "public",
    "description": "A.min(B) = min([A, B])",
    "lineNumber": 906,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "_shift",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_shift",
    "access": "private",
    "description": "A._shift() = A <<= n",
    "lineNumber": 921,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "shift",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#shift",
    "access": "public",
    "description": "A.shift() = A << n",
    "lineNumber": 1012,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "shiftLeft",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#shiftLeft",
    "access": "public",
    "description": "A.shiftLeft() = A << n",
    "lineNumber": 1021,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "shiftRight",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#shiftRight",
    "access": "public",
    "description": "A.shiftRight() = A >> n",
    "lineNumber": 1030,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "_add",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_add",
    "access": "private",
    "description": "A._add(B) = A += B",
    "lineNumber": 1039,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "add",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#add",
    "access": "public",
    "description": "A.add(B) = A + B",
    "lineNumber": 1099,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "_subtract",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_subtract",
    "access": "private",
    "description": "A._subtract(B) = A -= B",
    "lineNumber": 1108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "subtract",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#subtract",
    "access": "public",
    "description": "A.subtract(B) = A - B",
    "lineNumber": 1121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "sub",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#sub",
    "access": "public",
    "description": "A.sub(B) = A - B",
    "lineNumber": 1130,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "_multiply",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_multiply",
    "access": "private",
    "description": "A._multiply(B) = A *= B",
    "lineNumber": 1139,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "multiply",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#multiply",
    "access": "public",
    "description": "A.number(B) = A * B",
    "lineNumber": 1151,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "mul",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#mul",
    "access": "public",
    "description": "A.mul(B) = A * B",
    "lineNumber": 1213,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "_divideAndRemainder",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_divideAndRemainder",
    "access": "private",
    "description": "A._divideAndRemainder(B) = A /= B",
    "lineNumber": 1222,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<BigInteger>} [C = floor(A / B), A - C * B]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<BigInteger>"
      ],
      "spread": false,
      "description": "[C = floor(A / B), A - C * B]"
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "divideAndRemainder",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#divideAndRemainder",
    "access": "public",
    "description": "A.divideAndRemainder(B) = A / B",
    "lineNumber": 1270,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<BigInteger>} [C = floor(A / B), A - C * B]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<BigInteger>"
      ],
      "spread": false,
      "description": "[C = floor(A / B), A - C * B]"
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "_divide",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_divide",
    "access": "private",
    "description": "A._divide(B) = A /= B",
    "lineNumber": 1279,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} floor(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "floor(A / B)"
    }
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "divide",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#divide",
    "access": "public",
    "description": "A.divide(B) = A / B",
    "lineNumber": 1288,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} floor(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "floor(A / B)"
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "div",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#div",
    "access": "public",
    "description": "A.div(B) = A / B",
    "lineNumber": 1297,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger} floor(A / B)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": "floor(A / B)"
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "_remainder",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_remainder",
    "access": "private",
    "description": "A._remainder(B) = A rem B",
    "lineNumber": 1306,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "remainder",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#remainder",
    "access": "public",
    "description": "A.remainder(B) = A rem B",
    "lineNumber": 1315,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "rem",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#rem",
    "access": "public",
    "description": "A.rem(B) = A rem B",
    "lineNumber": 1324,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "_mod",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_mod",
    "access": "private",
    "description": "A._mod(B) = A _mod B",
    "lineNumber": 1333,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "mod",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#mod",
    "access": "public",
    "description": "A.mod(B) = A mod B",
    "lineNumber": 1355,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "_setBit",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_setBit",
    "access": "private",
    "description": "指定したビットを立てる (mutable)",
    "lineNumber": 1364,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "setBit",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#setBit",
    "access": "public",
    "description": "指定したビットを立てる",
    "lineNumber": 1375,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "_flipBit",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#_flipBit",
    "access": "private",
    "description": "指定したビットを反転させる (mutable)",
    "lineNumber": 1384,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "flipBit",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#flipBit",
    "access": "public",
    "description": "指定したビットを反転させる",
    "lineNumber": 1395,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "clearBit",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#clearBit",
    "access": "public",
    "description": "指定したビットを落とす",
    "lineNumber": 1404,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "testBit",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#testBit",
    "access": "public",
    "description": "指定したビットが立っているか",
    "lineNumber": 1416,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "pow",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#pow",
    "access": "public",
    "description": "A.pow(B) = A^B",
    "lineNumber": 1425,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "exponent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "modPow",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#modPow",
    "access": "public",
    "description": "A.modPow(B, m) = A^B mod m",
    "lineNumber": 1445,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "exponent",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "modInverse",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#modInverse",
    "access": "public",
    "description": "A.modInverse(m) = A^(-1) mod m",
    "lineNumber": 1465,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigInteger"
        ],
        "spread": false,
        "optional": false,
        "name": "m",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "isProbablePrime",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#isProbablePrime",
    "access": "public",
    "description": "A.isProbablePrime(certainty) 複素数かミラーラビン素数判定法で判定する",
    "lineNumber": 1481,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "certainty",
        "description": "ミラーラビン素数判定法に使用する繰り返し回数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "nextProbablePrime",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/BigInteger.mjs~BigInteger#nextProbablePrime",
    "access": "public",
    "description": "A.nextProbablePrime() 次の素数を求める",
    "lineNumber": 1539,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/BigInteger.mjs~BigInteger.valueOf",
    "access": "public",
    "description": "指定した数値から BigInteger 型に変換",
    "lineNumber": 1555,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 252,
    "kind": "get",
    "name": "ONE",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/BigInteger.mjs~BigInteger.ONE",
    "access": "public",
    "description": "1",
    "lineNumber": 1567,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "get",
    "name": "TWO",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/BigInteger.mjs~BigInteger.TWO",
    "access": "public",
    "description": "2",
    "lineNumber": 1575,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "get",
    "name": "TEN",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/BigInteger.mjs~BigInteger.TEN",
    "access": "public",
    "description": "10",
    "lineNumber": 1583,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "get",
    "name": "ZERO",
    "memberof": "src/Math/BigInteger.mjs~BigInteger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/BigInteger.mjs~BigInteger.ZERO",
    "access": "public",
    "description": "0",
    "lineNumber": 1591,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigInteger}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigInteger"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "variable",
    "name": "DEFINE",
    "memberof": "src/Math/BigInteger.mjs",
    "static": true,
    "longname": "src/Math/BigInteger.mjs~DEFINE",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/Math/BigInteger.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 1597,
    "undocument": true,
    "type": {
      "types": [
        "{\"ONE\": *, \"TWO\": *, \"TEN\": *, \"ZERO\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 257,
    "kind": "file",
    "name": "src/Math/Complex.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Random from \"../MathUtil/Random.mjs\";\nimport Statistics from \"../MathUtil/Statistics.mjs\";\n\nconst random_class = new Random();\n\n/**\n * 文字列から複素数を解析する\n * @param {string} text - 解析したい文字列\n * @param {Complex} that - 代入先 \n * @returns\n */\nconst ToComplexFromString = function(text, that) {\n\tconst str = text.replace(/\\s/g, \"\").toLowerCase();\n\t// 複素数の宣言がない場合\n\tif(!(/[ij]/.test(str))) {\n\t\tthat._re = parseFloat(str);\n\t\tthat._im = 0.0;\n\t\treturn;\n\t}\n\t// この時点で複素数である。\n\t// 以下真面目に調査\n\tlet re = 0;\n\tlet im = 0;\n\tlet buff;\n\t// 最後が$なら右側が実数、最後が[+-]なら左側が実数\n\tbuff = str.match(/[+-]?[0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?($|[+-])/);\n\tif(buff) {\n\t\tre = parseFloat(buff[0]);\n\t}\n\t// 複素数は数値が省略される場合がある\n\tbuff = str.match(/[+-]?([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)?[ij]/);\n\tif(buff) {\n\t\tbuff = buff[0].substring(0, buff[0].length - 1);\n\t\t// i, +i, -j のように実数部がなく、数値もない場合\n\t\tif((/^[-+]$/.test(buff)) || buff.length === 0) {\n\t\t\tim = buff === \"-\" ? -1 : 1;\n\t\t}\n\t\telse {\n\t\t\tim = parseFloat(buff);\n\t\t}\n\t}\n\tthat._re = re;\n\tthat._im = im;\n};\n\n/**\n * 複素数クラス (immutable)\n */\nexport default class Complex {\n\n\t/**\n\t * 複素数を作成\n\t * @param {Complex|number|string|Array<number>} number - 複素数データ( \"1 + j\", [1 , 1] など)\n\t */\n\tconstructor(number) {\n\t\t// 行列で使うためイミュータブルは必ず守ること。\n\t\tif(arguments.length === 1) {\n\t\t\tconst obj = number;\n\t\t\tif((obj instanceof Complex) || ((obj instanceof Object) && (obj._re && obj._im))) {\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * 実部\n\t\t\t\t * @private\n\t\t\t\t * @type {number}\n\t\t\t\t */\n\t\t\t\tthis._re = obj._re;\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * 虚部\n\t\t\t\t * @private\n\t\t\t\t * @type {number}\n\t\t\t\t */\n\t\t\t\tthis._im = obj._im;\n\t\t\t}\n\t\t\telse if(typeof obj === \"number\" || obj instanceof Number) {\n\t\t\t\tthis._re = obj;\n\t\t\t\tthis._im = 0.0;\n\t\t\t}\n\t\t\telse if(obj instanceof Array && obj.length === 2) {\n\t\t\t\tthis._re = obj[0];\n\t\t\t\tthis._im = obj[1];\n\t\t\t}\n\t\t\telse if(typeof obj === \"string\" || obj instanceof String) {\n\t\t\t\tToComplexFromString(obj, this);\n\t\t\t}\n\t\t\telse if(obj instanceof Object && obj.toString) {\n\t\t\t\tToComplexFromString(obj.toString(), this);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow \"Complex Unsupported argument \" + arguments;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow \"Complex Many arguments : \" + arguments.length;\n\t\t}\n\t}\n\n\t/**\n\t * ディープコピー（※実際にはイミュータブルなのでコピーする）\n\t * @returns {Complex} \n\t */\n\tclone() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * 文字列データ\n\t * @returns {string} \n\t */\n\ttoString() {\n\t\tconst formatG = function(x) {\n\t\t\tlet numstr = x.toPrecision(6);\n\t\t\tif(numstr.indexOf(\".\") !== -1) {\n\t\t\t\tnumstr = numstr.replace(/\\.?0+$/, \"\");  // 1.00 , 1.10\n\t\t\t\tnumstr = numstr.replace(/\\.?0+e/, \"e\"); // 1.0e , 1.10e\n\t\t\t}\n\t\t\treturn numstr;\n\t\t};\n\t\tif(!this.isReal()) {\n\t\t\tif(this._re === 0) {\n\t\t\t\treturn formatG(this._im) + \"i\";\n\t\t\t}\n\t\t\telse if(this._im >= 0) {\n\t\t\t\treturn formatG(this._re) + \" + \" + formatG(this._im) + \"i\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn formatG(this._re) + \" - \" + formatG(-this._im) + \"i\";\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn formatG(this._re);\n\t\t}\n\t}\n\t\n\t/**\n\t * 引数から複素数を作成する（作成が不要の場合はnewしない）\n\t * @param {Complex} number\n\t * @returns {Complex}\n\t */\n\tstatic create(number) {\n\t\tif(number instanceof Complex) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new Complex(number);\n\t\t}\n\t}\n\t\n\t/**\n\t * ランダムな値を作成\n\t * @returns {Complex}\n\t */\n\tstatic rand() {\n\t\treturn new Complex(random_class.nextDouble());\n\t}\n\n\t/**\n\t * 正規分布に従うランダムな値を作成\n\t * @returns {Complex}\n\t */\n\tstatic randn() {\n\t\treturn new Complex(random_class.nextGaussian());\n\t}\n\n\t/**\n\t * A.equals(B)\n\t * @param {Complex} number\n\t * @param {number} [epsilon=Number.EPSILON] - 誤差\n\t * @returns {boolean} A === B\n\t */\n\tequals(number, epsilon) {\n\t\tconst x = Complex.create(number);\n\t\tconst tolerance = epsilon ? epsilon : Number.EPSILON;\n\t\treturn (Math.abs(this._re - x._re) <  tolerance) && (Math.abs(this._im - x._im) < tolerance);\n\t}\n\n\t/**\n\t * 実部\n\t * @returns {number} 実部の数値（非Complexオブジェクト）\n\t */\n\tget real() {\n\t\treturn this._re;\n\t}\n\t\n\t/**\n\t * 虚部\n\t * @returns {number} 虚部の数値（非Complexオブジェクト）\n\t */\n\tget imag() {\n\t\treturn this._im;\n\t}\n\n\t/**\n\t * ノルム（極座標のノルム）\n\t * @returns {number} ノルムの数値（非Complexオブジェクト）\n\t */\n\tget norm() {\n\t\tif(this._im === 0) {\n\t\t\treturn Math.abs(this._re);\n\t\t}\n\t\telse if(this._re === 0) {\n\t\t\treturn Math.abs(this._im);\n\t\t}\n\t\telse {\n\t\t\treturn Math.sqrt(this._re * this._re + this._im * this._im);\n\t\t}\n\t}\n\n\t/**\n\t * 偏角（極座標の角度）\n\t * @returns {number} 偏角の数値（非Complexオブジェクト）\n\t */\n\tget angle() {\n\t\tif(this._im === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(this._re === 0) {\n\t\t\treturn Math.PI * (this._im >= 0.0 ? 0.5 : -0.5);\n\t\t}\n\t\telse {\n\t\t\treturn Math.atan2(this._im, this._re);\n\t\t}\n\t}\n\n\t/**\n\t * 実部、虚部の小数点の桁数の最大値\n\t * @returns {number} 小数点の桁（非Complexオブジェクト）\n\t */\n\tgetDecimalPosition() {\n\t\tlet point = 0;\n\t\tlet x = this;\n\t\tfor(let i = 0; i < 20; i++) {\n\t\t\tif(x.isComplexInteger()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx = x.mul(Complex.TEN);\n\t\t\tpoint++;\n\t\t}\n\t\treturn point;\n\t}\n\n\t/**\n\t * A.add(B) = A + B\n\t * @param {Complex} number\n\t * @returns {Complex}\n\t */\n\tadd(number) {\n\t\tconst x = new Complex(number);\n\t\tx._re = this._re + x._re;\n\t\tx._im = this._im + x._im;\n\t\treturn x;\n\t}\n\n\t/**\n\t * A.sub(B) = A - B\n\t * @param {Complex} number\n\t * @returns {Complex}\n\t */\n\tsub(number) {\n\t\tconst x = new Complex(number);\n\t\tx._re = this._re - x._re;\n\t\tx._im = this._im - x._im;\n\t\treturn x;\n\t}\n\n\t/**\n\t * A.mul(B) = A * B\n\t * @param {Complex} number\n\t * @returns {Complex}\n\t */\n\tmul(number) {\n\t\tconst x = new Complex(number);\n\t\tif((this._im === 0) && (x._im === 0)) {\n\t\t\tx._re = this._re * x._re;\n\t\t\treturn x;\n\t\t}\n\t\telse if((this._re === 0) && (x._re === 0)) {\n\t\t\tx._re = - this._im * x._im;\n\t\t\tx._im = 0;\n\t\t\treturn x;\n\t\t}\n\t\telse {\n\t\t\tconst re = this._re * x._re - this._im * x._im;\n\t\t\tconst im = this._im * x._re + this._re * x._im;\n\t\t\tx._re = re;\n\t\t\tx._im = im;\n\t\t\treturn x;\n\t\t}\n\t}\n\t\n\t/**\n\t * A.dot(B) = A・B = A * conj(B)\n\t * @param {Complex} number\n\t * @returns {Complex}\n\t */\n\tdot(number) {\n\t\tconst x = new Complex(number);\n\t\tif((this._im === 0) && (x._im === 0)) {\n\t\t\tx._re = this._re * x._re;\n\t\t\treturn x;\n\t\t}\n\t\telse if((this._re === 0) && (x._re === 0)) {\n\t\t\tx._re = this._im * x._im;\n\t\t\tx._im = 0;\n\t\t\treturn x;\n\t\t}\n\t\telse {\n\t\t\tconst re = this._re * x._re + this._im * x._im;\n\t\t\tconst im = - this._im * x._re + this._re * x._im;\n\t\t\tx._re = re;\n\t\t\tx._im = im;\n\t\t\treturn x;\n\t\t}\n\t}\n\t\n\t/**\n\t * A.div(B) = A / B\n\t * @param {Complex} number\n\t * @returns {Complex}\n\t */\n\tdiv(number) {\n\t\tconst x = new Complex(number);\n\t\tif((this._im === 0) && (x._im === 0)) {\n\t\t\tx._re = this._re / x._re;\n\t\t\treturn x;\n\t\t}\n\t\telse if((this._re === 0) && (x._re === 0)) {\n\t\t\tx._re = this._im / x._im;\n\t\t\tx._im = 0;\n\t\t\treturn x;\n\t\t}\n\t\telse {\n\t\t\tconst re = this._re * x._re + this._im * x._im;\n\t\t\tconst im = this._im * x._re - this._re * x._im;\n\t\t\tconst denominator = 1.0 / (x._re * x._re + x._im * x._im);\n\t\t\tx._re = re * denominator;\n\t\t\tx._im = im * denominator;\n\t\t\treturn x;\n\t\t}\n\t}\n\n\t/**\n\t * A.mod(B) = A mod B (複素数での計算はできません)\n\t * @param {Complex} number - 複素数を含まない数値 \n\t * @returns {Complex}\n\t */\n\tmod(number) {\n\t\tconst x = new Complex(number);\n\t\tif((this._im !== 0) || (x._im !== 0)) {\n\t\t\tthrow \"calculation method is undefined.\";\n\t\t}\n\t\tlet _re = this._re - x._re * (0 | (this._re / x._re));\n\t\tif(_re < 0) {\n\t\t\t_re += x._re;\n\t\t}\n\t\tx._re = _re;\n\t\treturn x;\n\t}\n\n\t/**\n\t * A.inv() = 1 / A\n\t * @returns {Complex}\n\t */\n\tinv() {\n\t\tif(this._im === 0) {\n\t\t\treturn new Complex(1.0 / this._re);\n\t\t}\n\t\telse if(this._re === 0) {\n\t\t\treturn new Complex([0, - 1.0 / this._im]);\n\t\t}\n\t\treturn Complex.ONE.div(this);\n\t}\n\n\t/**\n\t * A.sign() は長さを1にします -100 なら -1 にします\n\t * @returns {Complex}\n\t */\n\tsign() {\n\t\tif(this._im === 0) {\n\t\t\tif(this._re === 0) {\n\t\t\t\treturn new Complex(0);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new Complex(this._re > 0 ? 1 : -1);\n\t\t\t}\n\t\t}\n\t\treturn this.div(this.norm);\n\t}\n\t\n\t/**\n\t * A.max(B) = max([A, B])\n\t * @param {Complex} number\n\t * @param {number} [epsilon=Number.EPSILON] - 誤差\n\t * @returns {Complex}\n\t */\n\tmax(number, epsilon) {\n\t\tconst x = Complex.create(number);\n\t\tif(this.compareTo(x, epsilon) <= 0) {\n\t\t\treturn this;\n\t\t}\n\t\telse {\n\t\t\treturn x;\n\t\t}\n\t}\n\n\t/**\n\t * A.min(B) = min([A, B])\n\t * @param {Complex} number\n\t * @param {number} [epsilon=Number.EPSILON] - 誤差\n\t * @returns {Complex}\n\t */\n\tmin(number, epsilon) {\n\t\tconst x = Complex.create(number);\n\t\tif(this.compareTo(x, epsilon) >= 0) {\n\t\t\treturn this;\n\t\t}\n\t\telse {\n\t\t\treturn x;\n\t\t}\n\t}\n\n\t/**\n\t * A.compareTo(B) 今の値Aと、指定した値Bとを比較する\n\t * 戻り値は、IF文で利用できるように、非Complexオブジェクトとなる。\n\t * @param {Complex} number\n\t * @param {number} [epsilon=Number.EPSILON] - 誤差\n\t * @returns {number} A < B ? 1 : (A === B ? 0 : -1)（※非Complexオブジェクト）\n\t */\n\tcompareTo(number, epsilon) {\n\t\t// ※実数を返す（非Complexオブジェクト）\n\t\tconst x = Complex.create(number);\n\t\tif(this.equals(x, epsilon)) {\n\t\t\treturn 0;\n\t\t}\n\t\t// 実部と虚部の比較は、どちらを優先すべきか分からない\n\t\t// 符号付きでマンハッタン距離を算出して、距離の比較を行う\n\t\tconst a = this.real + this.imag;\n\t\tconst b = x.real + x.imag;\n\t\treturn a < b ? 1 : -1;\n\t}\n\n\t// ----------------------\n\t// テスト系\n\t// ----------------------\n\t\n\t/**\n\t * 整数を判定\n\t * @param {number} [epsilon=Number.EPSILON] - 誤差\n\t * @returns {boolean}\n\t */\n\tisInteger(epsilon) {\n\t\tconst tolerance = epsilon ? epsilon : Number.EPSILON;\n\t\treturn this.isReal() && (Math.abs(this._re - (this._re | 0)) < tolerance);\n\t}\n\n\t/**\n\t * 複素整数を判定\n\t * @param {number} [epsilon=Number.EPSILON] - 誤差\n\t * @returns {boolean}\n\t */\n\tisComplexInteger(epsilon) {\n\t\tconst tolerance = epsilon ? epsilon : Number.EPSILON;\n\t\t// 複素整数\n\t\treturn (Math.abs(this._re - (this._re | 0)) < tolerance) &&\n\t\t\t\t(Math.abs(this._im - (this._im | 0)) < tolerance);\n\t}\n\n\t/**\n\t * 0 を判定\n\t * @param {number} [epsilon=Number.EPSILON] - 誤差\n\t * @returns {boolean}\n\t */\n\tisZero(epsilon) {\n\t\tconst tolerance = epsilon ? epsilon : Number.EPSILON;\n\t\treturn (Math.abs(this._re) < tolerance) && (Math.abs(this._im) < tolerance);\n\t}\n\n\t/**\n\t * 1 を判定\n\t * @param {number} [epsilon=Number.EPSILON] - 誤差\n\t * @returns {boolean}\n\t */\n\tisOne(epsilon) {\n\t\tconst tolerance = epsilon ? epsilon : Number.EPSILON;\n\t\treturn (Math.abs(this._re - 1.0) < tolerance) && (Math.abs(this._im) < tolerance);\n\t}\n\n\t/**\n\t * 複素数を判定\n\t * @param {number} [epsilon=Number.EPSILON] - 誤差\n\t * @returns {boolean}\n\t */\n\tisComplex(epsilon) {\n\t\tconst tolerance = epsilon ? epsilon : Number.EPSILON;\n\t\treturn (Math.abs(this._im) >= tolerance);\n\t}\n\t\n\t/**\n\t * 実数を判定\n\t * @param {number} [epsilon=Number.EPSILON] - 誤差\n\t * @returns {boolean}\n\t */\n\tisReal(epsilon) {\n\t\tconst tolerance = epsilon ? epsilon : Number.EPSILON;\n\t\treturn (Math.abs(this._im) < tolerance);\n\t}\n\n\t/**\n\t * 非数を判定\n\t * @returns {boolean}\n\t */\n\tisNaN() {\n\t\treturn Math.isNaN(this._re) || Math.isNaN(this._im);\n\t}\n\n\t/**\n\t * real(x) > 0\n\t * @returns {boolean}\n\t */\n\tisPositive() {\n\t\t// Number.EPSILONは使用しない。どちらにぶれるか不明な点及び\n\t\t// わずかな負の数だった場合に、sqrtでエラーが発生するため\n\t\treturn 0.0 < this._re;\n\t}\n\n\t/**\n\t * real(x) < 0\n\t * @returns {boolean}\n\t */\n\tisNegative() {\n\t\treturn 0.0 > this._re;\n\t}\n\n\t/**\n\t * real(x) >= 0\n\t * @returns {boolean}\n\t */\n\tisNotNegative() {\n\t\treturn 0.0 <= this._re;\n\t}\n\n\t/**\n\t * 無限を判定\n\t * @returns {boolean}\n\t */\n\tisInfinite() {\n\t\treturn\t(this._re === Number.POSITIVE_INFINITY) ||\n\t\t\t\t(this._im === Number.POSITIVE_INFINITY) ||\n\t\t\t\t(this._re === Number.NEGATIVE_INFINITY) ||\n\t\t\t\t(this._im === Number.NEGATIVE_INFINITY);\n\t}\n\t\n\t/**\n\t * 有限数を判定\n\t * @returns {boolean}\n\t */\n\tisFinite() {\n\t\treturn !this.isNaN() && !this.isInfinite();\n\t}\n\n\t// ----------------------\n\t// 複素数\n\t// ----------------------\n\t\n\t/**\n\t * A.abs() = abs(A)\n\t * @returns {Complex}\n\t */\n\tabs() {\n\t\treturn new Complex(this.norm);\n\t}\n\n\t/**\n\t * A.conj() = real(A) - imag(A)j (共役複素数)\n\t * @returns {Complex}\n\t */\n\tconj() {\n\t\tif(this._im === 0) {\n\t\t\treturn this;\n\t\t}\n\t\t// 共役複素数\n\t\treturn new Complex([this._re, -this._im]);\n\t}\n\n\t/**\n\t * A.negate() = - A\n\t * @returns {Complex}\n\t */\n\tnegate() {\n\t\treturn new Complex([-this._re, -this._im]);\n\t}\n\n\t// ----------------------\n\t// 指数\n\t// ----------------------\n\t\n\t/**\n\t * A.pow(B) = A^B\n\t * @param {Complex} number\n\t * @returns {Complex}\n\t */\n\tpow(number) {\n\t\tconst x = new Complex(number);\n\t\tif((this.isReal()) && (x.isReal()) && (this.isNotNegative())) {\n\t\t\tx._re = Math.pow(this._re, x._re);\n\t\t\treturn x;\n\t\t}\n\t\telse if(x.isReal()) {\n\t\t\tconst r = Math.pow(this.norm, x._re);\n\t\t\tconst s = this.angle * x._re;\n\t\t\tx._re = r * Math.cos(s);\n\t\t\tx._im = r * Math.sin(s);\n\t\t\treturn x;\n\t\t}\n\t\telse {\n\t\t\treturn x.mul(this.log()).exp();\n\t\t}\n\t}\n\n\t/**\n\t * A.square() = A^2\n\t * @returns {Complex}\n\t */\n\tsquare() {\n\t\treturn new Complex(this._re * this._re + this._im * this._im);\n\t}\n\n\t/**\n\t * A.sqrt() = sqrt(A)\n\t * @returns {Complex}\n\t */\n\tsqrt() {\n\t\tif(this.isReal()) {\n\t\t\tif(this.isNotNegative()) {\n\t\t\t\treturn new Complex(Math.sqrt(this._re));\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new Complex([0, Math.sqrt(this._re)]);\n\t\t\t}\n\t\t}\n\t\tconst r = Math.sqrt(this.norm);\n\t\tconst s = this.angle * 0.5;\n\t\treturn new Complex([r * Math.cos(s), r * Math.sin(s)]);\n\t}\n\n\t/**\n\t * A.log() = log A\n\t * @returns {Complex}\n\t */\n\tlog() {\n\t\tif(this.isReal() && this.isNotNegative()) {\n\t\t\treturn new Complex(Math.log(this._re));\n\t\t}\n\t\t// 負の値が入っているか、もともと複素数が入っている場合は、複素対数関数\n\t\treturn new Complex([Math.log(this.norm), this.angle]);\n\t}\n\n\t/**\n\t * A.exp() = e^A\n\t * @returns {Complex}\n\t */\n\texp() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.exp(this._re));\n\t\t}\n\t\t// 複素指数関数\n\t\tconst r = Math.exp(this._re);\n\t\treturn new Complex([r * Math.cos(this._im), r * Math.sin(this._im)]);\n\t}\n\n\t// ----------------------\n\t// 三角関数\n\t// ----------------------\n\t\n\t/**\n\t * A.sin() = sin(A)\n\t * @returns {Complex}\n\t */\n\tsin() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.sin(this._re));\n\t\t}\n\t\t// オイラーの公式より\n\t\t// sin x = (e^ix - e^-ex) / 2i\n\t\tconst a = this.mul(Complex.I).exp();\n\t\tconst b = this.mul(Complex.I.negate()).exp();\n\t\treturn a.sub(b).div([0, 2]);\n\t}\n\n\t/**\n\t * A.cos() = cos(A)\n\t * @returns {Complex}\n\t */\n\tcos() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.cos(this._re));\n\t\t}\n\t\t// オイラーの公式より\n\t\t// cos x = (e^ix + e^-ex) / 2\n\t\tconst a = this.mul(Complex.I).exp();\n\t\tconst b = this.mul(Complex.I.negate()).exp();\n\t\treturn a.add(b).div(2);\n\t}\n\n\t/**\n\t * A.tan() = tan(A)\n\t * @returns {Complex}\n\t */\n\ttan() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.tan(this._re));\n\t\t}\n\t\t// 三角関数の相互関係 tan x = sin x / cos x\n\t\treturn this.sin().div(this.cos());\n\t}\n\n\t/**\n\t * A.atan() = atan(A)\n\t * @returns {Complex}\n\t */\n\tatan() {\n\t\tif(this.isReal()) {\n\t\t\treturn new Complex(Math.atan(this._re));\n\t\t}\n\t\t// 逆正接 tan-1 x = i/2 log( i+x / i-x )\n\t\treturn Complex.I.div(Complex.TWO).mul(Complex.I.add(this).div(Complex.I.sub(this)).log());\n\t}\n\n\t/**\n\t * Y.atan2(X) = atan2(Y, X) 複素数のatan2は計算不能\n\t * @param {Complex} [number] - 複素数を含まない数値。省略した場合は、複素数の偏角を返す。\n\t * @returns {Complex}\n\t */\n\tatan2(number) {\n\t\tif(arguments.length === 0) {\n\t\t\treturn new Complex(this.angle);\n\t\t}\n\t\t// y.atan2(x) とする。\n\t\tconst y = this;\n\t\tconst x = Complex.create(number);\n\t\tif(y.isReal() && x.isReal()) {\n\t\t\treturn new Complex(Math.atan2(y._re, x._re));\n\t\t}\n\t\t// 複素数のatan2は未定義である（実装不可能）\n\t\tthrow \"calculation method is undefined.\";\n\t}\n\t\n\t// ----------------------\n\t// 信号処理系\n\t// ----------------------\n\t\n\t/**\n\t * A.sinc() = sinc(A)\n\t * @returns {Complex}\n\t */\n\tsinc() {\n\t\tif(this.isReal()) {\n\t\t\tif(this._re === 0) {\n\t\t\t\treturn(new Complex(1.0));\n\t\t\t}\n\t\t\treturn new Complex(Math.sin(this._re) / this._re);\n\t\t}\n\t\treturn new Complex( this.sin().div(this) );\n\t}\n\n\t// ----------------------\n\t// 丸め\n\t// ----------------------\n\t\n\t/**\n\t * A.floor() = floor(A)\n\t * @returns {Complex}\n\t */\n\tfloor() {\n\t\treturn new Complex([Math.floor(this._re), Math.floor(this._im)]);\n\t}\n\n\t/**\n\t * A.ceil() = ceil(A)\n\t * @returns {Complex}\n\t */\n\tceil() {\n\t\treturn new Complex([Math.ceil(this._re), Math.ceil(this._im)]);\n\t}\n\t\n\t/**\n\t * A.round() = round(A)\n\t * @returns {Complex}\n\t */\n\tround() {\n\t\treturn new Complex([Math.round(this._re), Math.round(this._im)]);\n\t}\n\n\t/**\n\t * A.fix() = fix(A) 小数点部を消す\n\t * @returns {Complex}\n\t */\n\tfix() {\n\t\treturn new Complex([this._re | 0, this._im | 0]);\n\t}\n\n\t/**\n\t * A.fract() = fract(A) 小数点部を残す\n\t * @returns {Complex}\n\t */\n\tfract() {\n\t\treturn new Complex([this._re - (this._re | 0), this._im - (this._im | 0)]);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// statistics 統計計算用\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * x.gammaln() = gammaln(x) 対数ガンマ関数 \n\t * @returns {Complex}\n\t */\n\tgammaln() {\n\t\tif(this.isComplex()) {\n\t\t\tthrow \"gammaln don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.gammaln(this._re));\n\t}\n\t\n\t/**\n\t * z.gamma() = gamma(z) ガンマ関数 \n\t * @returns {Complex}\n\t */\n\tgamma() {\n\t\tif(this.isComplex()) {\n\t\t\tthrow \"gamma don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.gamma(this._re));\n\t}\n\t\n\t/**\n\t * x.gammainc(a, tail) = gammainc(x, a, tail) 不完全ガンマ関数\n\t * @param {Complex} a\n\t * @param {string} [tail=\"lower\"] - lower/upper\n\t * @returns {Complex}\n\t */\n\tgammainc(a, tail) {\n\t\tconst x_ = this;\n\t\tconst a_ = Complex.create(a);\n\t\tif(x_.isComplex() || a_.isComplex()) {\n\t\t\tthrow \"gammainc don't support complex numbers.\";\n\t\t}\n\t\tconst tail_ = arguments.length === 2 ? tail : \"lower\";\n\t\treturn new Complex(Statistics.gammainc(x_._re, a_._re, tail_));\n\t}\n\n\t/**\n\t * x.gampdf(k, s) = gampdf(x, k, s) ガンマ分布の確率密度関数\n\t * @param {Complex} k - 形状母数\n\t * @param {Complex} s - 尺度母数\n\t * @returns {Complex}\n\t */\n\tgampdf(k, s) {\n\t\tconst x_ = this;\n\t\tconst k_ = Complex.create(k);\n\t\tconst s_ = Complex.create(s);\n\t\tif(x_.isComplex() || k_.isComplex() || s_.isComplex()) {\n\t\t\tthrow \"gampdf don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.gampdf(x_._re, k_._re, s_._re));\n\t}\n\n\t/**\n\t * x.gamcdf(k, s) = gamcdf(x, k, s) ガンマ分布の確率密度関数\n\t * @param {Complex} k - 形状母数\n\t * @param {Complex} s - 尺度母数\n\t * @returns {Complex}\n\t */\n\tgamcdf(k, s) {\n\t\tconst x_ = this;\n\t\tconst k_ = Complex.create(k);\n\t\tconst s_ = Complex.create(s);\n\t\tif(x_.isComplex() || k_.isComplex() || s_.isComplex()) {\n\t\t\tthrow \"gamcdf don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.gamcdf(x_._re, k_._re, s_._re));\n\t}\n\n\t/**\n\t * p.gaminv(k, s) = gaminv(p, k, s) ガンマ分布の累積分布関数の逆関数\n\t * @param {Complex} k - 形状母数\n\t * @param {Complex} s - 尺度母数\n\t * @returns {Complex}\n\t */\n\tgaminv(k, s) {\n\t\tconst p_ = this;\n\t\tconst k_ = Complex.create(k);\n\t\tconst s_ = Complex.create(s);\n\t\tif(p_.isComplex() || k_.isComplex() || s_.isComplex()) {\n\t\t\tthrow \"gaminv don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.gaminv(p_._re, k_._re, s_._re));\n\t}\n\n\t/**\n\t * x.beta(y) = beta(x, y) ベータ関数\n\t * @param {Complex} y\n\t * @returns {Complex}\n\t */\n\tbeta(y) {\n\t\tconst x_ = this;\n\t\tconst y_ = Complex.create(y);\n\t\tif(x_.isComplex() || y_.isComplex()) {\n\t\t\tthrow \"beta don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.beta(x_._re, y_._re));\n\t}\n\n\t/**\n\t * x.betainc(a, b, tail) = betainc(x, a, b, tail) 不完全ベータ関数\n\t * @param {Complex} a\n\t * @param {Complex} b\n\t * @param {string} [tail=\"lower\"] lower/upper\n\t * @returns {Complex}\n\t */\n\tbetainc(a, b, tail) {\n\t\tconst x_ = this;\n\t\tconst a_ = Complex.create(a);\n\t\tconst b_ = Complex.create(b);\n\t\tif(x_.isComplex() || a_.isComplex() || b_.isComplex()) {\n\t\t\tthrow \"betainc don't support complex numbers.\";\n\t\t}\n\t\tconst tail_ = arguments.length === 2 ? tail : \"lower\";\n\t\treturn new Complex(Statistics.betainc(x_._re, a_._re, b_._re, tail_));\n\t}\n\n\t/**\n\t * x.betapdf(a, b) = betapdf(x, a, b) ベータ分布の確率密度関数\n\t * @param {Complex} a\n\t * @param {Complex} b\n\t * @returns {Complex}\n\t */\n\tbetapdf(a, b) {\n\t\tconst x_ = this;\n\t\tconst a_ = Complex.create(a);\n\t\tconst b_ = Complex.create(b);\n\t\tif(x_.isComplex() || a_.isComplex() || b_.isComplex()) {\n\t\t\tthrow \"betapdf don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.betapdf(x_._re, a_._re, b_._re));\n\t}\n\n\t/**\n\t * x.betacdf(a, b) = betacdf(x, a, b) ベータ分布の累積分布関数\n\t * @param {Complex} a\n\t * @param {Complex} b\n\t * @returns {Complex}\n\t */\n\tbetacdf(a, b) {\n\t\tconst x_ = this;\n\t\tconst a_ = Complex.create(a);\n\t\tconst b_ = Complex.create(b);\n\t\tif(x_.isComplex() || a_.isComplex() || b_.isComplex()) {\n\t\t\tthrow \"betacdf don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.betacdf(x_._re, a_._re, b_._re));\n\t}\n\n\t/**\n\t * p.betainv(a, b) = betainv(p, a, b) ベータ分布の累積分布関数の逆関数\n\t * @param {Complex} a\n\t * @param {Complex} b\n\t * @returns {Complex}\n\t */\n\tbetainv(a, b) {\n\t\tconst p_ = this;\n\t\tconst a_ = Complex.create(a);\n\t\tconst b_ = Complex.create(b);\n\t\tif(p_.isComplex() || a_.isComplex() || b_.isComplex()) {\n\t\t\tthrow \"betainv don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.betainv(p_._re, a_._re, b_._re));\n\t}\n\n\t/**\n\t * n.factorial() = factorial(n), n! 階乗関数\n\t * @returns {Complex}\n\t */\n\tfactorial() {\n\t\tif(this.isComplex()) {\n\t\t\tthrow \"factorial don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.factorial(this._re));\n\t}\n\n\t/**\n\t * n.nchoosek(k) = nchoosek(n, k), nCk 二項係数またはすべての組合わせ\n\t * @param {Complex} k\n\t * @returns {Complex}\n\t */\n\tnchoosek(k) {\n\t\tconst n_ = this;\n\t\tconst k_ = Complex.create(k);\n\t\tif(n_.isComplex() || k_.isComplex()) {\n\t\t\tthrow \"nchoosek don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.nchoosek(n_._re, k_._re));\n\t}\n\t\n\t/**\n\t * x.erf() = erf(x) 誤差関数\n\t * @returns {Complex}\n\t */\n\terf() {\n\t\tconst x = this;\n\t\tif(x.isComplex()) {\n\t\t\tthrow \"erf don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.erf(x._re));\n\t}\n\n\t/**\n\t * x.erfc() = erfc(x) 相補誤差関数\n\t * @returns {Complex}\n\t */\n\terfc() {\n\t\tconst x = this;\n\t\tif(x.isComplex()) {\n\t\t\tthrow \"erfc don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.erfc(x._re));\n\t}\n\n\t/**\n\t * x.normpdf(u, s) = normpdf(x, u, s) 正規分布の確率密度関数\n\t * @param {Complex} [u=0.0] - 平均値\n\t * @param {Complex} [s=1.0] - 分散\n\t * @returns {Complex}\n\t */\n\tnormpdf(u, s) {\n\t\tconst x_ = this;\n\t\tconst u_ = arguments.length <= 0 ? Complex.create(u) : Complex.ZERO;\n\t\tconst s_ = arguments.length <= 1 ? Complex.create(s) : Complex.ONE;\n\t\tif(x_.isComplex() || u_.isComplex() || s_.isComplex()) {\n\t\t\tthrow \"normpdf don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.normpdf(x_._re, u_._re, s_._re));\n\t}\n\n\t/**\n\t * x.normcdf(u, s) = normcdf(x, u, s) 正規分布の累積分布関数\n\t * @param {Complex} [u=0.0] - 平均値\n\t * @param {Complex} [s=1.0] - 分散\n\t * @returns {Complex}\n\t */\n\tnormcdf(u, s) {\n\t\tconst x_ = this;\n\t\tconst u_ = arguments.length <= 0 ? Complex.create(u) : Complex.ZERO;\n\t\tconst s_ = arguments.length <= 1 ? Complex.create(s) : Complex.ONE;\n\t\tif(x_.isComplex() || u_.isComplex() || s_.isComplex()) {\n\t\t\tthrow \"normcdf don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.normcdf(x_._re, u_._re, s_._re));\n\t}\n\n\t/**\n\t * x.norminv(u, s) = norminv(x, u, s) 正規分布の累積分布関数の逆関数\n\t * @param {Complex} [u=0.0] - 平均値\n\t * @param {Complex} [s=1.0] - 分散\n\t * @returns {Complex}\n\t */\n\tnorminv(u, s) {\n\t\tconst x_ = this;\n\t\tconst u_ = arguments.length <= 0 ? Complex.create(u) : Complex.ZERO;\n\t\tconst s_ = arguments.length <= 1 ? Complex.create(s) : Complex.ONE;\n\t\tif(x_.isComplex() || u_.isComplex() || s_.isComplex()) {\n\t\t\tthrow \"norminv don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.norminv(x_._re, u_._re, s_._re));\n\t}\n\n\t/**\n\t * t.tcdf(v) = tcdf(t, v) t分布の累積分布関数\n\t * @param {Complex} v - 自由度\n\t * @returns {Complex}\n\t */\n\ttcdf(v) {\n\t\tconst t_ = this;\n\t\tconst v_ = Complex.create(v);\n\t\tif(t_.isComplex() || v_.isComplex()) {\n\t\t\tthrow \"tcdf don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.tcdf(t_._re, v_._re));\n\t}\n\n\t/**\n\t * p.tinv(v) = tinv(p, v) t分布の累積分布関数の逆関数\n\t * @param {Complex} v - 自由度\n\t * @returns {Complex}\n\t */\n\ttinv(v) {\n\t\tconst p_ = this;\n\t\tconst v_ = Complex.create(v);\n\t\tif(p_.isComplex() || v_.isComplex()) {\n\t\t\tthrow \"tinv don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.tinv(p_._re, v_._re));\n\t}\n\n\t/**\n\t * t.tdist(v, tails) = tdist(t, v, tails) 尾部が指定可能なt分布の累積分布関数\n\t * @param {Complex} v - 自由度\n\t * @param {Complex} tails - 尾部(1...片側、2...両側)\n\t * @returns {Complex}\n\t */\n\ttdist(v, tails) {\n\t\tconst t_ = this;\n\t\tconst v_ = Complex.create(v);\n\t\tconst tails_ = Complex.create(tails);\n\t\tif(t_.isComplex() || v_.isComplex() || tails_.isComplex() ) {\n\t\t\tthrow \"tcdf don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.tdist(t_._re, v_._re, tails_._re));\n\t}\n\n\t/**\n\t * p.tinv2(v) = tinv2(p, v) 両側検定時のt分布の累積分布関数\n\t * @param {Complex} v - 自由度\n\t * @returns {Complex}\n\t */\n\ttinv2(v) {\n\t\tconst p_ = this;\n\t\tconst v_ = Complex.create(v);\n\t\tif(p_.isComplex() || v_.isComplex()) {\n\t\t\tthrow \"tinv don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.tinv2(p_._re, v_._re));\n\t}\n\n\t/**\n\t * x.chi2pdf(k) = chi2pdf(x, k) カイ二乗分布の確率密度関数\n\t * @param {Complex} k - 自由度\n\t * @returns {Complex}\n\t */\n\tchi2pdf(k) {\n\t\tconst x_ = this;\n\t\tconst k_ = Complex.create(k);\n\t\tif(x_.isComplex() || k_.isComplex()) {\n\t\t\tthrow \"chi2pdf don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.chi2pdf(x_._re, k_._re));\n\t}\n\n\t/**\n\t * x.chi2cdf(k) = chi2cdf(x, k) カイ二乗分布の累積分布関数\n\t * @param {Complex} k - 自由度\n\t * @returns {Complex}\n\t */\n\tchi2cdf(k) {\n\t\tconst x_ = this;\n\t\tconst k_ = Complex.create(k);\n\t\tif(x_.isComplex() || k_.isComplex()) {\n\t\t\tthrow \"chi2cdf don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.chi2cdf(x_._re, k_._re));\n\t}\n\n\t/**\n\t * p.chi2inv(k) = chi2inv(p, k) カイ二乗分布の累積分布関数の逆関数\n\t * @param {Complex} k - 自由度\n\t * @returns {Complex}\n\t */\n\tchi2inv(k) {\n\t\tconst p_ = this;\n\t\tconst k_ = Complex.create(k);\n\t\tif(p_.isComplex() || k_.isComplex()) {\n\t\t\tthrow \"chi2inv don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.chi2inv(p_._re, k_._re));\n\t}\n\n\t/**\n\t * x.fpdf(d1, d2) = fpdf(x, d1, d2) F分布の確率密度関数\n\t * @param {Complex} d1 - 分子の自由度\n\t * @param {Complex} d2 - 分母の自由度\n\t * @returns {Complex}\n\t */\n\tfpdf(d1, d2) {\n\t\tconst x_ = this;\n\t\tconst d1_ = Complex.create(d1);\n\t\tconst d2_ = Complex.create(d2);\n\t\tif(x_.isComplex() || d1_.isComplex() || d2_.isComplex()) {\n\t\t\tthrow \"fpdf don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.fpdf(x_._re, d1_._re, d2_._re));\n\t}\n\n\t/**\n\t * x.fcdf(d1, d2) = fcdf(x, d1, d2) F分布の累積分布関数\n\t * @param {Complex} d1 - 分子の自由度\n\t * @param {Complex} d2 - 分母の自由度\n\t * @returns {Complex}\n\t */\n\tfcdf(d1, d2) {\n\t\tconst x_ = this;\n\t\tconst d1_ = Complex.create(d1);\n\t\tconst d2_ = Complex.create(d2);\n\t\tif(x_.isComplex() || d1_.isComplex() || d2_.isComplex()) {\n\t\t\tthrow \"fcdf don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.fcdf(x_._re, d1_._re, d2_._re));\n\t}\n\n\t/**\n\t * p.finv(d1, d2) = finv(p, d1, d2) F分布の累積分布関数の逆関数\n\t * @param {Complex} d1 - 分子の自由度\n\t * @param {Complex} d2 - 分母の自由度\n\t * @returns {Complex}\n\t */\n\tfinv(d1, d2) {\n\t\tconst p_ = this;\n\t\tconst d1_ = Complex.create(d1);\n\t\tconst d2_ = Complex.create(d2);\n\t\tif(p_.isComplex() || d1_.isComplex() || d2_.isComplex()) {\n\t\t\tthrow \"finv don't support complex numbers.\";\n\t\t}\n\t\treturn new Complex(Statistics.finv(p_._re, d1_._re, d2_._re));\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * 1\n\t * @returns {Complex}\n\t */\n\tstatic get ONE() {\n\t\treturn DEFINE.ONE;\n\t}\n\t\n\t/**\n\t * 2\n\t * @returns {Complex}\n\t */\n\tstatic get TWO() {\n\t\treturn DEFINE.TWO;\n\t}\n\t\n\t/**\n\t * 10\n\t * @returns {Complex}\n\t */\n\tstatic get TEN() {\n\t\treturn DEFINE.TEN;\n\t}\n\t\n\t/**\n\t * 0\n\t * @returns {Complex}\n\t */\n\tstatic get ZERO() {\n\t\treturn DEFINE.ZERO;\n\t}\n\n\t/**\n\t * -1\n\t * @returns {Complex}\n\t */\n\tstatic get MINUS_ONE() {\n\t\treturn DEFINE.MINUS_ONE;\n\t}\n\n\t/**\n\t * i, j\n\t * @returns {Complex}\n\t */\n\tstatic get I() {\n\t\treturn DEFINE.I;\n\t}\n\n\t/**\n\t * PI\n\t * @returns {Complex}\n\t */\n\tstatic get PI() {\n\t\treturn DEFINE.PI;\n\t}\n\n\t/**\n\t * 0.5\n\t * @returns {Complex}\n\t */\n\tstatic get HALF() {\n\t\treturn DEFINE.HALF;\n\t}\n\n}\n\n\nconst DEFINE = {\n\tZERO : new Complex(0),\n\tONE : new Complex(1),\n\tTWO : new Complex(2),\n\tTEN : new Complex(10),\n\tMINUS_ONE : new Complex(-1),\n\tI : new Complex([0, 1]),\n\tPI : new Complex(Math.PI),\n\tHALF : new Complex(0.5)\n};\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/Math/Complex.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 258,
    "kind": "variable",
    "name": "random_class",
    "memberof": "src/Math/Complex.mjs",
    "static": true,
    "longname": "src/Math/Complex.mjs~random_class",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/Math/Complex.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "src/MathUtil/Random.mjs~Random"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 259,
    "kind": "function",
    "name": "ToComplexFromString",
    "memberof": "src/Math/Complex.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Complex.mjs~ToComplexFromString",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/Math/Complex.mjs",
    "importStyle": null,
    "description": "文字列から複素数を解析する",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "解析したい文字列"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "that",
        "description": "代入先"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 260,
    "kind": "class",
    "name": "Complex",
    "memberof": "src/Math/Complex.mjs",
    "static": true,
    "longname": "src/Math/Complex.mjs~Complex",
    "access": "public",
    "export": true,
    "importPath": "konpeito.js/src/Math/Complex.mjs",
    "importStyle": "Complex",
    "description": "複素数クラス (immutable)",
    "lineNumber": 59,
    "interface": false
  },
  {
    "__docId__": 261,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#constructor",
    "access": "public",
    "description": "複素数を作成",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex",
          "number",
          "string",
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "複素数データ( \"1 + j\", [1 , 1] など)"
      }
    ]
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "_re",
    "memberof": "src/Math/Complex.mjs~Complex",
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#_re",
    "access": "private",
    "description": "実部",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "_im",
    "memberof": "src/Math/Complex.mjs~Complex",
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#_im",
    "access": "private",
    "description": "虚部",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "clone",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#clone",
    "access": "public",
    "description": "ディープコピー（※実際にはイミュータブルなのでコピーする）",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#toString",
    "access": "public",
    "description": "文字列データ",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "create",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Complex.mjs~Complex.create",
    "access": "public",
    "description": "引数から複素数を作成する（作成が不要の場合はnewしない）",
    "lineNumber": 150,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "rand",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Complex.mjs~Complex.rand",
    "access": "public",
    "description": "ランダムな値を作成",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "randn",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Complex.mjs~Complex.randn",
    "access": "public",
    "description": "正規分布に従うランダムな値を作成",
    "lineNumber": 171,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "equals",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#equals",
    "access": "public",
    "description": "A.equals(B)",
    "lineNumber": 181,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 274,
    "kind": "get",
    "name": "real",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#real",
    "access": "public",
    "description": "実部",
    "lineNumber": 191,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 実部の数値（非Complexオブジェクト）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "実部の数値（非Complexオブジェクト）"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "get",
    "name": "imag",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#imag",
    "access": "public",
    "description": "虚部",
    "lineNumber": 199,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 虚部の数値（非Complexオブジェクト）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "虚部の数値（非Complexオブジェクト）"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "get",
    "name": "norm",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#norm",
    "access": "public",
    "description": "ノルム（極座標のノルム）",
    "lineNumber": 207,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} ノルムの数値（非Complexオブジェクト）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "ノルムの数値（非Complexオブジェクト）"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "get",
    "name": "angle",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#angle",
    "access": "public",
    "description": "偏角（極座標の角度）",
    "lineNumber": 223,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 偏角の数値（非Complexオブジェクト）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "偏角の数値（非Complexオブジェクト）"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "getDecimalPosition",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#getDecimalPosition",
    "access": "public",
    "description": "実部、虚部の小数点の桁数の最大値",
    "lineNumber": 239,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 小数点の桁（非Complexオブジェクト）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "小数点の桁（非Complexオブジェクト）"
    },
    "params": []
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "add",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#add",
    "access": "public",
    "description": "A.add(B) = A + B",
    "lineNumber": 257,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "sub",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#sub",
    "access": "public",
    "description": "A.sub(B) = A - B",
    "lineNumber": 269,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "mul",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#mul",
    "access": "public",
    "description": "A.mul(B) = A * B",
    "lineNumber": 281,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "dot",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#dot",
    "access": "public",
    "description": "A.dot(B) = A・B = A * conj(B)",
    "lineNumber": 306,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "div",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#div",
    "access": "public",
    "description": "A.div(B) = A / B",
    "lineNumber": 331,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "mod",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#mod",
    "access": "public",
    "description": "A.mod(B) = A mod B (複素数での計算はできません)",
    "lineNumber": 357,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "複素数を含まない数値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "inv",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#inv",
    "access": "public",
    "description": "A.inv() = 1 / A",
    "lineNumber": 374,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "sign",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#sign",
    "access": "public",
    "description": "A.sign() は長さを1にします -100 なら -1 にします",
    "lineNumber": 388,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "max",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#max",
    "access": "public",
    "description": "A.max(B) = max([A, B])",
    "lineNumber": 406,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "min",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#min",
    "access": "public",
    "description": "A.min(B) = min([A, B])",
    "lineNumber": 422,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#compareTo",
    "access": "public",
    "description": "A.compareTo(B) 今の値Aと、指定した値Bとを比較する\n戻り値は、IF文で利用できるように、非Complexオブジェクトとなる。",
    "lineNumber": 439,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A < B ? 1 : (A === B ? 0 : -1)（※非Complexオブジェクト）"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A < B ? 1 : (A === B ? 0 : -1)（※非Complexオブジェクト）"
    }
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "isInteger",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#isInteger",
    "access": "public",
    "description": "整数を判定",
    "lineNumber": 461,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "isComplexInteger",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#isComplexInteger",
    "access": "public",
    "description": "複素整数を判定",
    "lineNumber": 471,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "isZero",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#isZero",
    "access": "public",
    "description": "0 を判定",
    "lineNumber": 483,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "isOne",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#isOne",
    "access": "public",
    "description": "1 を判定",
    "lineNumber": 493,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "isComplex",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#isComplex",
    "access": "public",
    "description": "複素数を判定",
    "lineNumber": 503,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "isReal",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#isReal",
    "access": "public",
    "description": "実数を判定",
    "lineNumber": 513,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "isNaN",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#isNaN",
    "access": "public",
    "description": "非数を判定",
    "lineNumber": 522,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "isPositive",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#isPositive",
    "access": "public",
    "description": "real(x) > 0",
    "lineNumber": 530,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "isNegative",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#isNegative",
    "access": "public",
    "description": "real(x) < 0",
    "lineNumber": 540,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "isNotNegative",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#isNotNegative",
    "access": "public",
    "description": "real(x) >= 0",
    "lineNumber": 548,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "isInfinite",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#isInfinite",
    "access": "public",
    "description": "無限を判定",
    "lineNumber": 556,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "isFinite",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#isFinite",
    "access": "public",
    "description": "有限数を判定",
    "lineNumber": 567,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "abs",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#abs",
    "access": "public",
    "description": "A.abs() = abs(A)",
    "lineNumber": 579,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "conj",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#conj",
    "access": "public",
    "description": "A.conj() = real(A) - imag(A)j (共役複素数)",
    "lineNumber": 587,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "negate",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#negate",
    "access": "public",
    "description": "A.negate() = - A",
    "lineNumber": 599,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "pow",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#pow",
    "access": "public",
    "description": "A.pow(B) = A^B",
    "lineNumber": 612,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "square",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#square",
    "access": "public",
    "description": "A.square() = A^2",
    "lineNumber": 634,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "sqrt",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#sqrt",
    "access": "public",
    "description": "A.sqrt() = sqrt(A)",
    "lineNumber": 642,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "log",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#log",
    "access": "public",
    "description": "A.log() = log A",
    "lineNumber": 660,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "exp",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#exp",
    "access": "public",
    "description": "A.exp() = e^A",
    "lineNumber": 672,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "sin",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#sin",
    "access": "public",
    "description": "A.sin() = sin(A)",
    "lineNumber": 689,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "cos",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#cos",
    "access": "public",
    "description": "A.cos() = cos(A)",
    "lineNumber": 704,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "tan",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#tan",
    "access": "public",
    "description": "A.tan() = tan(A)",
    "lineNumber": 719,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "atan",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#atan",
    "access": "public",
    "description": "A.atan() = atan(A)",
    "lineNumber": 731,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "atan2",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#atan2",
    "access": "public",
    "description": "Y.atan2(X) = atan2(Y, X) 複素数のatan2は計算不能",
    "lineNumber": 744,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": true,
        "name": "number",
        "description": "複素数を含まない数値。省略した場合は、複素数の偏角を返す。"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "sinc",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#sinc",
    "access": "public",
    "description": "A.sinc() = sinc(A)",
    "lineNumber": 766,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "floor",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#floor",
    "access": "public",
    "description": "A.floor() = floor(A)",
    "lineNumber": 784,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "ceil",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#ceil",
    "access": "public",
    "description": "A.ceil() = ceil(A)",
    "lineNumber": 792,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "round",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#round",
    "access": "public",
    "description": "A.round() = round(A)",
    "lineNumber": 800,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "fix",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#fix",
    "access": "public",
    "description": "A.fix() = fix(A) 小数点部を消す",
    "lineNumber": 808,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "fract",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#fract",
    "access": "public",
    "description": "A.fract() = fract(A) 小数点部を残す",
    "lineNumber": 816,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "gammaln",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#gammaln",
    "access": "public",
    "description": "x.gammaln() = gammaln(x) 対数ガンマ関数 ",
    "lineNumber": 828,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "gamma",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#gamma",
    "access": "public",
    "description": "z.gamma() = gamma(z) ガンマ関数 ",
    "lineNumber": 839,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "gammainc",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#gammainc",
    "access": "public",
    "description": "x.gammainc(a, tail) = gammainc(x, a, tail) 不完全ガンマ関数",
    "lineNumber": 852,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower/upper"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "gampdf",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#gampdf",
    "access": "public",
    "description": "x.gampdf(k, s) = gampdf(x, k, s) ガンマ分布の確率密度関数",
    "lineNumber": 868,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "gamcdf",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#gamcdf",
    "access": "public",
    "description": "x.gamcdf(k, s) = gamcdf(x, k, s) ガンマ分布の確率密度関数",
    "lineNumber": 884,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "gaminv",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#gaminv",
    "access": "public",
    "description": "p.gaminv(k, s) = gaminv(p, k, s) ガンマ分布の累積分布関数の逆関数",
    "lineNumber": 900,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "beta",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#beta",
    "access": "public",
    "description": "x.beta(y) = beta(x, y) ベータ関数",
    "lineNumber": 915,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "betainc",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#betainc",
    "access": "public",
    "description": "x.betainc(a, b, tail) = betainc(x, a, b, tail) 不完全ベータ関数",
    "lineNumber": 931,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower/upper"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "betapdf",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#betapdf",
    "access": "public",
    "description": "x.betapdf(a, b) = betapdf(x, a, b) ベータ分布の確率密度関数",
    "lineNumber": 948,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "betacdf",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#betacdf",
    "access": "public",
    "description": "x.betacdf(a, b) = betacdf(x, a, b) ベータ分布の累積分布関数",
    "lineNumber": 964,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "betainv",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#betainv",
    "access": "public",
    "description": "p.betainv(a, b) = betainv(p, a, b) ベータ分布の累積分布関数の逆関数",
    "lineNumber": 980,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#factorial",
    "access": "public",
    "description": "n.factorial() = factorial(n), n! 階乗関数",
    "lineNumber": 994,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "nchoosek",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#nchoosek",
    "access": "public",
    "description": "n.nchoosek(k) = nchoosek(n, k), nCk 二項係数またはすべての組合わせ",
    "lineNumber": 1006,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "erf",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#erf",
    "access": "public",
    "description": "x.erf() = erf(x) 誤差関数",
    "lineNumber": 1019,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "erfc",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#erfc",
    "access": "public",
    "description": "x.erfc() = erfc(x) 相補誤差関数",
    "lineNumber": 1031,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "normpdf",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#normpdf",
    "access": "public",
    "description": "x.normpdf(u, s) = normpdf(x, u, s) 正規分布の確率密度関数",
    "lineNumber": 1045,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "normcdf",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#normcdf",
    "access": "public",
    "description": "x.normcdf(u, s) = normcdf(x, u, s) 正規分布の累積分布関数",
    "lineNumber": 1061,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "norminv",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#norminv",
    "access": "public",
    "description": "x.norminv(u, s) = norminv(x, u, s) 正規分布の累積分布関数の逆関数",
    "lineNumber": 1077,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "tcdf",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#tcdf",
    "access": "public",
    "description": "t.tcdf(v) = tcdf(t, v) t分布の累積分布関数",
    "lineNumber": 1092,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "tinv",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#tinv",
    "access": "public",
    "description": "p.tinv(v) = tinv(p, v) t分布の累積分布関数の逆関数",
    "lineNumber": 1106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "tdist",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#tdist",
    "access": "public",
    "description": "t.tdist(v, tails) = tdist(t, v, tails) 尾部が指定可能なt分布の累積分布関数",
    "lineNumber": 1121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "tails",
        "description": "尾部(1...片側、2...両側)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "tinv2",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#tinv2",
    "access": "public",
    "description": "p.tinv2(v) = tinv2(p, v) 両側検定時のt分布の累積分布関数",
    "lineNumber": 1136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "chi2pdf",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#chi2pdf",
    "access": "public",
    "description": "x.chi2pdf(k) = chi2pdf(x, k) カイ二乗分布の確率密度関数",
    "lineNumber": 1150,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "chi2cdf",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#chi2cdf",
    "access": "public",
    "description": "x.chi2cdf(k) = chi2cdf(x, k) カイ二乗分布の累積分布関数",
    "lineNumber": 1164,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "chi2inv",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#chi2inv",
    "access": "public",
    "description": "p.chi2inv(k) = chi2inv(p, k) カイ二乗分布の累積分布関数の逆関数",
    "lineNumber": 1178,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "fpdf",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#fpdf",
    "access": "public",
    "description": "x.fpdf(d1, d2) = fpdf(x, d1, d2) F分布の確率密度関数",
    "lineNumber": 1193,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "fcdf",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#fcdf",
    "access": "public",
    "description": "x.fcdf(d1, d2) = fcdf(x, d1, d2) F分布の累積分布関数",
    "lineNumber": 1209,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "finv",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Complex.mjs~Complex#finv",
    "access": "public",
    "description": "p.finv(d1, d2) = finv(p, d1, d2) F分布の累積分布関数の逆関数",
    "lineNumber": 1225,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 349,
    "kind": "get",
    "name": "ONE",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Complex.mjs~Complex.ONE",
    "access": "public",
    "description": "1",
    "lineNumber": 1243,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "get",
    "name": "TWO",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Complex.mjs~Complex.TWO",
    "access": "public",
    "description": "2",
    "lineNumber": 1251,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 351,
    "kind": "get",
    "name": "TEN",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Complex.mjs~Complex.TEN",
    "access": "public",
    "description": "10",
    "lineNumber": 1259,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "get",
    "name": "ZERO",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Complex.mjs~Complex.ZERO",
    "access": "public",
    "description": "0",
    "lineNumber": 1267,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "get",
    "name": "MINUS_ONE",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Complex.mjs~Complex.MINUS_ONE",
    "access": "public",
    "description": "-1",
    "lineNumber": 1275,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "get",
    "name": "I",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Complex.mjs~Complex.I",
    "access": "public",
    "description": "i, j",
    "lineNumber": 1283,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "get",
    "name": "PI",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Complex.mjs~Complex.PI",
    "access": "public",
    "description": "PI",
    "lineNumber": 1291,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "get",
    "name": "HALF",
    "memberof": "src/Math/Complex.mjs~Complex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Complex.mjs~Complex.HALF",
    "access": "public",
    "description": "0.5",
    "lineNumber": 1299,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "variable",
    "name": "DEFINE",
    "memberof": "src/Math/Complex.mjs",
    "static": true,
    "longname": "src/Math/Complex.mjs~DEFINE",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/Math/Complex.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 1306,
    "undocument": true,
    "type": {
      "types": [
        "{\"ZERO\": *, \"ONE\": *, \"TWO\": *, \"TEN\": *, \"MINUS_ONE\": *, \"I\": *, \"PI\": *, \"HALF\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 358,
    "kind": "file",
    "name": "src/Math/Matrix.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Random from \"../MathUtil/Random.mjs\";\nimport Signal from \"../MathUtil/Signal.mjs\";\nimport Complex from \"./Complex.mjs\";\n\n/**\n * 内部の行列の計算用\n */\nclass MatrixTool {\n\n\t/**\n\t * 対称行列の三重対角化する（実数計算専用）\n\t * @param {Matrix} M\n\t * @returns {Object<string, Matrix>}\n\t */\n\tstatic tridiagonalize(M) {\n\n\t\tconst A = Matrix.create(M);\n\t\tconst a = A.getNumberMatrixArray();\n\t\tconst tolerance = 1.0e-10;\n\t\t\n\t\t/**\n\t\t * ベクトルx1とベクトルx2の内積をとる\n\t\t * @param {Array<number>} x1\n\t\t * @param {Array<number>} x2\n\t\t * @param {number} [index_offset=0] - オフセット(この値から行う)\n\t\t * @param {number} [index_max=x1.length] - 最大(この値は含めない)\n\t\t * @returns {number} \n\t\t */\n\t\tconst innerproduct = function(x1, x2, index_offset, index_max) {\n\t\t\tlet y = 0;\n\t\t\tconst ioffset = index_offset ? index_offset : 0;\n\t\t\tconst imax = index_max ? index_max : x1.length;\n\t\t\tfor(let i = ioffset; i < imax; i++) {\n\t\t\t\ty += x1[i] * x2[i];\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\n\t\t/**\n\t\t * ハウスホルダー変換\n\t\t * @param {Array<number>} x - ハウスホルダー変換したいベクトル\n\t\t * @param {number} [index_offset=0] - オフセット(この値から行う)\n\t\t * @param {number} [index_max=x.length] - 最大(この値は含めない)\n\t\t * @returns {Object<string, Matrix>} \n\t\t */\n\t\tconst house = function(x, index_offset, index_max) {\n\t\t\tconst ioffset = index_offset ? index_offset : 0;\n\t\t\tconst imax = index_max ? index_max : x.length;\n\t\t\t// xの内積の平方根（ノルム）を計算\n\t\t\tlet y1 = Math.sqrt(innerproduct(x, x, ioffset, imax));\n\t\t\tconst v = [];\n\t\t\tif(Math.abs(y1) >= tolerance) {\n\t\t\t\tif(x[ioffset] < 0) {\n\t\t\t\t\ty1 = - y1;\n\t\t\t\t}\n\t\t\t\tlet t;\n\t\t\t\tfor(let i = ioffset, j = 0; i < imax; i++, j++) {\n\t\t\t\t\tif(i === ioffset) {\n\t\t\t\t\t\tv[j] = x[i] + y1;\n\t\t\t\t\t\tt = 1.0 / Math.sqrt(v[j] * y1);\n\t\t\t\t\t\tv[j] = v[j] * t;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tv[j] = x[i] * t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\ty1: - y1,\t// 鏡像の1番目の要素(y2,y3,...は0)\n\t\t\t\tv : v\t\t// 直行する単位ベクトル vT*v = 2\n\t\t\t};\n\t\t};\n\n\t\tconst n = a.length;\n\t\tconst d = []; // 対角成分\n\t\tconst e = []; // 隣の成分\n\n\t\t// 参考：奥村晴彦 (1991). C言語による最新アルゴリズム事典.\n\t\t// 3重対角化の成分を取得する\n\t\t{\n\t\t\tfor(let k = 0; k < n - 2; k++) {\n\t\t\t\tconst v = a[k];\n\t\t\t\td[k] = v[k];\n\t\t\t\t{\n\t\t\t\t\tconst H = house(v, k + 1, n);\n\t\t\t\t\te[k] = H.y1;\n\t\t\t\t\tfor(let i = 0; i < H.v.length; i++) {\n\t\t\t\t\t\tv[k + 1 + i] = H.v[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(Math.abs(e[k]) < tolerance) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor(let i = k + 1; i < n; i++) {\n\t\t\t\t\tlet s = 0;\n\t\t\t\t\tfor(let j = k + 1; j < i; j++) {\n\t\t\t\t\t\ts += a[j][i] * v[j];\n\t\t\t\t\t}\n\t\t\t\t\tfor(let j = i; j < n; j++) {\n\t\t\t\t\t\ts += a[i][j] * v[j];\n\t\t\t\t\t}\n\t\t\t\t\td[i] = s;\n\t\t\t\t}\n\t\t\t\tconst t = innerproduct(v, d, k + 1, n) / 2.0;\n\t\t\t\tfor(let i = n - 1; i > k; i--) {\n\t\t\t\t\tconst p = v[i];\n\t\t\t\t\tconst q = d[i] - (t * p);\n\t\t\t\t\td[i] = q;\n\t\t\t\t\tfor(let j = i; j < n; j++) {\n\t\t\t\t\t\tconst r = p * d[j] + q * v[j];\n\t\t\t\t\t\ta[i][j] = a[i][j] - r;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(n >= 2) {\n\t\t\t\td[n - 2] = a[n - 2][n - 2];\n\t\t\t\te[n - 2] = a[n - 2][n - 1];\n\t\t\t}\n\t\t\tif(n >= 1) {\n\t\t\t\td[n - 1] = a[n - 1][n - 1];\n\t\t\t}\n\t\t}\n\n\t\t//変換P行列を求める\n\t\tfor(let k = n - 1; k >= 0; k--) {\n\t\t\tconst v = a[k];\n\t\t\tif(k < n - 2) {\n\t\t\t\tfor(let i = k + 1; i < n; i++) {\n\t\t\t\t\tconst w = a[i];\n\t\t\t\t\tconst t = innerproduct(v, w, k + 1, n);\n\t\t\t\t\tfor(let j = k + 1; j < n; j++) {\n\t\t\t\t\t\tw[j] -= t * v[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(let i = 0; i < n; i++) {\n\t\t\t\tv[i] = 0.0;\n\t\t\t}\n\t\t\tv[k] = 1.0;\n\t\t}\n\n\t\t// d と e の配列を使って、三重対角行列を作成する\n\t\tconst H = Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\tif(row === col) {\n\t\t\t\treturn new Complex(d[row]);\n\t\t\t}\n\t\t\telse if(Math.abs(row - col) === 1) {\n\t\t\t\treturn new Complex(e[((row + col) * 0.5) | 0]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Complex.ZERO;\n\t\t\t}\n\t\t}, n, n);\n\n\t\treturn {\n\t\t\tP : (new Matrix(a)).T(),\n\t\t\tH : H\n\t\t};\n\t}\n\n\t/**\n\t * 対称行列の固有値分解する（実数計算専用）\n\t * @param {Matrix} M - 対称行列\n\t * @returns {Object<string, Matrix>}\n\t */\n\tstatic eig(M) {\n\t\t\n\t\tconst A = Matrix.create(M);\n\t\t\n\t\t// QR法により固有値を求める\n\t\tlet is_error = false;\n\t\tconst tolerance = 1.0e-10;\n\t\tconst PH = A.tridiagonalize();\n\t\tconst a = PH.P.getNumberMatrixArray();\n\t\tconst h = PH.H.getNumberMatrixArray();\n\t\tconst n = A.row_length;\n\n\t\t// 成分の抽出\n\t\tconst d = []; // 対角成分\n\t\tconst e = []; // 隣の成分\n\t\tfor(let i = 0; i < n; i++) {\n\t\t\td[i] = h[i][i];\n\t\t\te[i] = (i === 0) ? 0.0 : h[i][i - 1];\n\t\t}\n\n\t\t// 参考：奥村晴彦 (1991). C言語による最新アルゴリズム事典.\n\t\tconst MAX_ITER = 100;\n\t\tfor(let h = n - 1; h > 0; h--) {\n\t\t\tlet j = h;\n\t\t\tfor(j = h;j >= 1; j--) {\n\t\t\t\tif(Math.abs(e[j]) <= (tolerance * (Math.abs(d[j - 1]) + Math.abs(d[j])))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(j == h) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet iter = 0;\n\t\t\twhile(true) {\n\t\t\t\titer++;\n\t\t\t\tif(iter > MAX_ITER) {\n\t\t\t\t\tis_error = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlet w = (d[h - 1] - d[h]) / 2.0;\n\t\t\t\tlet t = e[h] * e[h];\n\t\t\t\tlet s = Math.sqrt(w * w + t);\n\t\t\t\tif(w < 0) {\n\t\t\t\t\ts = - s;\n\t\t\t\t}\n\t\t\t\tlet x = d[j] - d[h] + (t / (w + s));\n\t\t\t\tlet y = e[j + 1];\n\t\t\t\tfor(let k = j; k < h; k++) {\n\t\t\t\t\tlet c, s;\n\t\t\t\t\tif(Math.abs(x) >= Math.abs(y)) {\n\t\t\t\t\t\tt = - y / x;\n\t\t\t\t\t\tc = 1.0 / Math.sqrt(t * t + 1);\n\t\t\t\t\t\ts = t * c;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tt = - x / y;\n\t\t\t\t\t\ts = 1.0 / Math.sqrt(t * t + 1);\n\t\t\t\t\t\tc = t * s;\n\t\t\t\t\t}\n\t\t\t\t\tw = d[k] - d[k + 1];\n\t\t\t\t\tt = (w * s + 2.0 * c * e[k + 1]) * s;\n\t\t\t\t\td[k] -= t;\n\t\t\t\t\td[k + 1] += t;\n\t\t\t\t\tif(k > j) {\n\t\t\t\t\t\te[k] = c * e[k] - s * y;\n\t\t\t\t\t}\n\t\t\t\t\te[k + 1] += s * (c * w - 2.0 * s * e[k + 1]);\n\t\t\t\t\tfor(let i = 0; i < n; i++) {\n\t\t\t\t\t\tx = a[i][k];\n\t\t\t\t\t\ty = a[i][k + 1];\n\t\t\t\t\t\ta[i][k    ] = c * x - s * y;\n\t\t\t\t\t\ta[i][k + 1] = s * x + c * y;\n\t\t\t\t\t}\n\t\t\t\t\tif(k < h - 1) {\n\t\t\t\t\t\tx = e[k + 1];\n\t\t\t\t\t\ty = -s * e[k + 2];\n\t\t\t\t\t\te[k + 2] *= c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(Math.abs(e[h]) <= tolerance * (Math.abs(d[h - 1]) + Math.abs(d[h]))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(is_error) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// ソート\n\t\tconst vd_sort = function(V, d) {\n\t\t\tconst len = d.length;\n\t\t\tconst sortdata = [];\n\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\tsortdata[i] = {\n\t\t\t\t\tsigma : d[i],\n\t\t\t\t\tindex : i\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst compare = function(a, b){\n\t\t\t\tif(a === b) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\treturn (a < b ? -1 : 1);\n\t\t\t};\n\t\t\tsortdata.sort(compare);\n\t\t\tconst MOVE = Matrix.zeros(len);\n\t\t\tconst ND = Matrix.zeros(len);\n\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\tND.matrix_array[i][i] = new Complex(sortdata[i].sigma);\n\t\t\t\tMOVE.matrix_array[i][sortdata[i].index] = Complex.ONE;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tV : V.mul(MOVE),\n\t\t\t\tD : ND\n\t\t\t};\n\t\t};\n\t\tconst VD = vd_sort(new Matrix(a), d);\n\t\treturn VD;\n\t}\n\n\t\n\t/**\n\t * 行列をベクトルと見立て、正規直行化し、QとRの行列を作る\n\t * @param {Matrix} M_ - 正方行列\n\t * @returns {Object<string, Matrix>}\n\t */\n\tstatic _gram_schmidt_orthonormalization(M_) {\n\t\t// グラム・シュミットの正規直交化法を使用する\n\t\t// 参考：Gilbert Strang (2007). Computational Science and Engineering.\n\n\t\tconst M = Matrix.create(M_);\n\t\tconst len = M.column_length;\n\t\tconst A = M.matrix_array;\n\t\tconst Q_Matrix = Matrix.zeros(len);\n\t\tconst R_Matrix = Matrix.zeros(len);\n\t\tconst Q = Q_Matrix.matrix_array;\n\t\tconst R = R_Matrix.matrix_array;\n\t\tconst non_orthogonalized = [];\n\t\tconst a = new Array(len);\n\t\t\n\t\tfor(let col = 0; col < len; col++) {\n\t\t\t// i列目を抽出\n\t\t\tfor(let row = 0; row < len; row++) {\n\t\t\t\ta[row] = A[row][col];\n\t\t\t}\n\t\t\t// 直行ベクトルを作成\n\t\t\tif(col > 0) {\n\t\t\t\t// Rのi列目を内積で計算する\n\t\t\t\tfor(let j = 0; j < col; j++) {\n\t\t\t\t\tfor(let k = 0; k < len; k++) {\n\t\t\t\t\t\tR[j][col] = R[j][col].add(A[k][col].dot(Q[k][j]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(let j = 0; j < col; j++) {\n\t\t\t\t\tfor(let k = 0; k < len; k++) {\n\t\t\t\t\t\ta[k] = a[k].sub(R[j][col].mul(Q[k][j]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t{\n\t\t\t\t// 正規化と距離を1にする\n\t\t\t\tfor(let j = 0; j < len; j++) {\n\t\t\t\t\tR[col][col] = R[col][col].add(a[j].mul(a[j]));\n\t\t\t\t}\n\t\t\t\tR[col][col] = R[col][col].sqrt();\n\t\t\t\tif(R[col][col].isZero(1e-10)) {\n\t\t\t\t\t// 直行化が不可能だった列の番号をメモして、その列はゼロで埋める\n\t\t\t\t\tnon_orthogonalized.push(col);\n\t\t\t\t\tfor(let j = 0;j < len;j++) {\n\t\t\t\t\t\tQ[j][col] = Complex.ZERO;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// ここで R[i][i] === 0 の場合、直行させたベクトルaは0であり、\n\t\t\t\t\t// ランク落ちしており、計算不可能である。\n\t\t\t\t\t// 0割りした値を、j列目のQに記録していくがInfとなる。\n\t\t\t\t\tfor(let j = 0;j < len;j++) {\n\t\t\t\t\t\tQ[j][col] = a[j].div(R[col][col]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tQ : Q_Matrix,\n\t\t\tR : R_Matrix,\n\t\t\tnon_orthogonalized : non_orthogonalized\n\t\t};\n\t}\n\t\n\t/**\n\t * 行列の全行ベクトルに対して、直行したベクトルを作成する\n\t * @param {Matrix} M_\n\t * @param {number} [epsilon=1.0e-10] - 誤差\n\t * @returns {Matrix} 直行したベクトルがなければNULLを返す\n\t */\n\tstatic _createOrthogonalVector(M_, epsilon) {\n\t\tconst M = new Matrix(M_);\n\t\tconst column_length = M.column_length;\n\t\tconst m = M.matrix_array;\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\t// 正則行列をなす場合に問題となる行番号を取得\n\t\tconst not_regular_rows = M._get_linear_dependence_vector(tolerance);\n\t\t// 不要な行を削除する\n\t\t{\n\t\t\t// not_regular_rowsは昇順リストなので、後ろから消していく\n\t\t\tfor(let i = not_regular_rows.length - 1; i >= 0; i--) {\n\t\t\t\tm.splice(not_regular_rows[i], 1);\n\t\t\t\tM.row_length--;\n\t\t\t}\n\t\t}\n\t\t// 追加できるベクトルの数\n\t\tconst add_vectors = column_length - m.length;\n\t\tif(add_vectors <= 0) {\n\t\t\treturn null;\n\t\t}\n\t\t// ランダムベクトル（seed値は毎回同一とする）\n\t\tconst noise = new Random(0);\n\t\tlet orthogonal_matrix = null;\n\t\tfor(let i = 0; i < 100; i++) {\n\t\t\t// 直行ベクトルを作るために、いったん行と列を交換する\n\t\t\t// これは、グラム・シュミットの正規直交化法が列ごとに行う手法のため。\n\t\t\tconst M2 = M.T();\n\t\t\t// ランダム行列を作成する\n\t\t\tconst R = Matrix.createMatrixDoEachCalculation(function() {\n\t\t\t\treturn new Complex(noise.nextGaussian());\n\t\t\t}, M2.row_length, add_vectors);\n\t\t\t// 列に追加する\n\t\t\tM2._concat_left(R);\n\t\t\t// 正規直行行列を作成する\n\t\t\torthogonal_matrix = MatrixTool._gram_schmidt_orthonormalization(M2);\n\t\t\t// 正しく作成できていたら完了\n\t\t\tif(orthogonal_matrix.non_orthogonalized.length === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(orthogonal_matrix.non_orthogonalized.length !== 0) {\n\t\t\t// 普通は作成できないことはないが・・・\n\t\t\tconsole.log(\"miss\");\n\t\t\treturn null;\n\t\t}\n\t\t// 作成した列を切り出す\n\t\tconst y = new Array(add_vectors);\n\t\tconst q = orthogonal_matrix.Q.matrix_array;\n\t\tfor(let row = 0; row < add_vectors; row++) {\n\t\t\ty[row] = new Array(column_length);\n\t\t\tfor(let col = 0; col < column_length; col++) {\n\t\t\t\ty[row][col] = q[col][column_length - add_vectors + row];\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n}\n\n/**\n * コンストラクタ用の関数群\n */\nconst ConstructorTool = {\n\n\t/**\n\t * 対象ではないregexpの情報以外も抽出match\n\t * @param {string} text - 検索対象\n\t * @param {RegExp} regexp - 検索したい正規表現\n\t * @returns {Array<Object<boolean, string>>}\n\t */\n\tmatch2 : function(text, regexp) {\n\t\t// 対象ではないregexpの情報以外も抽出match\n\t\t// つまり \"1a2b\" で \\d を抽出すると、次のように抽出される\n\t\t// [false \"1\"]\n\t\t// [true \"a\"]\n\t\t// [false \"2\"]\n\t\t// [true \"b\"]\n\t\t// 0 ... 一致したかどうか\n\t\t// 1 ... 一致した文字列、あるいは一致していない文字列\n\t\tconst output = [];\n\t\tlet search_target = text;\n\t\tlet match = true;\n\t\tfor(let x = 0; x < 1000; x++) {\n\t\t\tmatch = search_target.match(regexp);\n\t\t\tif(match === null) {\n\t\t\t\tif(search_target.length) {\n\t\t\t\t\toutput.push([ false, search_target ]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(match.index > 0) {\n\t\t\t\toutput.push([ false, search_target.substr(0, match.index) ]);\n\t\t\t}\n\t\t\toutput.push([ true, match[0] ]);\n\t\t\tsearch_target = search_target.substr(match.index + match[0].length);\n\t\t}\n\t\treturn output;\n\t},\n\t\n\t/**\n\t * ブラケットに囲まれていたら、前後のブラケットを除去\n\t * @param {string} text - ブラケットを除去したい文字\n\t * @returns {string|null} 除去した文字列（ブラケットがない場合は、null）\n\t */\n\ttrimBracket : function(text) {\n\t\t// 前後に[]があるか確認\n\t\tif( !(/^\\[/).test(text) || !(/\\]$/).test(text)) {\n\t\t\treturn null;\n\t\t}\n\t\t// 前後の[]を除去\n\t\treturn text.substring(1, text.length - 1);\n\t},\n\n\t/**\n\t * JSONで定義された文字列データからMatrix型のデータを作成する\n\t * @param {string} text - 調査したい文字列\n\t * @returns {Array<Array<Complex>>} Matrix型で使用される内部の配列\n\t */\n\ttoMatrixFromStringForArrayJSON : function(text) {\n\t\tconst matrix_array = [];\n\t\t// さらにブランケット内を抽出\n\t\tlet rows = text.match(/\\[[^\\]]+\\]/g);\n\t\tif(rows === null) {\n\t\t\t// ブランケットがない場合は、1行行列である\n\t\t\trows = [text];\n\t\t}\n\t\t// 各ブランケット内を列ごとに調査\n\t\tfor(let row_count = 0; row_count < rows.length; row_count++) {\n\t\t\tconst row = rows[row_count];\n\t\t\tconst column_array = row.substring(1, row.length - 1).split(\",\");\n\t\t\tconst rows_array = [];\n\t\t\tfor(let col_count = 0; col_count < column_array.length; col_count++) {\n\t\t\t\tconst column = column_array[col_count];\n\t\t\t\trows_array[col_count] = new Complex(column);\n\t\t\t}\n\t\t\tmatrix_array[row_count] = rows_array;\n\t\t}\n\t\treturn matrix_array;\n\t},\n\n\t/**\n\t * 初期値と差分値と最終値から、その値が入った配列を作成する\n\t * @param {number} from - 最初の値\n\t * @param {number} delta - 差分\n\t * @param {number} to - 繰り返す先の値（この値は含めない）\n\t * @returns {Array<number>}\n\t */\n\tInterpolationCalculation : function(from, delta, to) {\n\t\tconst FromIsGreaterThanTo = to.compareTo(from);\n\t\tif(FromIsGreaterThanTo === 0) {\n\t\t\treturn from;\n\t\t}\n\t\tif(delta.isZero()) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\t// delta が負のため、どれだけたしても to にならない。\n\t\tif(delta.isNegative() && (FromIsGreaterThanTo === -1)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\tconst rows_array = [];\n\t\tlet num = from;\n\t\trows_array[0] = num;\n\t\tfor(let i = 1; i < 0x10000; i++) {\n\t\t\tnum = num.add(delta);\n\t\t\tif(num.compareTo(to) === FromIsGreaterThanTo) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\trows_array[i] = num;\n\t\t}\n\t\treturn rows_array;\n\t},\n\n\t/**\n\t * 文字列からMatrix型の行列データの行部分に変換\n\t * @param {string} row_text - 行列の1行を表す文字列\n\t * @returns {Array<Complex>}\n\t */\n\ttoArrayFromString : function(row_text) {\n\t\t// 「:」のみ記載されていないかの確認\n\t\tif(row_text.trim() === \":\") {\n\t\t\treturn \":\";\n\t\t}\n\t\t// 左が実数（強制）で右が複素数（任意）タイプ\n\t\tconst reg1 = /[+-]? *[0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?( *[+-] *[- ]?([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)?[ij])?/;\n\t\t// 左が複素数（強制）で右が実数（任意）タイプ\n\t\tconst reg2 = /[+-]? *([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)?[ij]( *[+] *[- ]?([0-9]+(\\.[0-9]+)?(e[+-]?[0-9]+)?)?)?/;\n\t\t// reg2優先で検索\n\t\tconst reg3 = new RegExp(\"(\" + reg2.source + \")|(\" + reg1.source + \")\", \"i\");\n\t\t// 問題として 1 - -jが通る\n\t\tconst xs = ConstructorTool.match2(row_text, reg3);\n\t\tconst rows_array = [];\n\n\t\tfor(let i = 0; i < xs.length; i++) {\n\t\t\tconst xx = xs[i];\n\t\t\tif(!xx[0]) {\n\t\t\t\t// 一致していないデータであれば次へ\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// 「:記法」 1:3 なら 1,2,3。 1:2:9 なら 1:3:5:7:9\n\t\t\tif((i < xs.length - 2) && !xs[i + 1][0] && /:/.test(xs[i + 1][1])) {\n\t\t\t\tlet from, delta, to;\n\t\t\t\tif((i < xs.length - 4) && !xs[i + 3][0] && /:/.test(xs[i + 3][1])) {\n\t\t\t\t\tfrom = new Complex(xx[1]);\n\t\t\t\t\tdelta = new Complex(xs[i + 2][1]);\n\t\t\t\t\tto = new Complex(xs[i + 4][1]);\n\t\t\t\t\ti += 4;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfrom = new Complex(xx[1]);\n\t\t\t\t\tdelta = Complex.ONE;\n\t\t\t\t\tto = new Complex(xs[i + 2][1]);\n\t\t\t\t\ti += 2;\n\t\t\t\t}\n\t\t\t\tconst ip_array = ConstructorTool.InterpolationCalculation(from, delta, to);\n\t\t\t\tfor(let j = 0; j < ip_array.length; j++) {\n\t\t\t\t\trows_array.push(ip_array[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\trows_array.push(new Complex(xx[1]));\n\t\t\t}\n\t\t}\n\n\t\treturn rows_array;\n\t},\n\n\t/**\n\t * JSON以外の文字列で定義された文字列データからMatrix型のデータを作成する\n\t * @param {string} text - 調査したい文字列\n\t * @returns {Array<Array<Complex>>} Matrix型で使用される内部の配列\n\t */\n\ttoMatrixFromStringForArrayETC : function(text) {\n\t\t// 行ごとを抽出して\n\t\tconst rows = text.split(\";\");\n\t\tconst matrix_array = new Array(rows.length);\n\t\tfor(let row_count = 0; row_count < rows.length; row_count++) {\n\t\t\t// 各行の文字を解析\n\t\t\tmatrix_array[row_count] = ConstructorTool.toArrayFromString(rows[row_count]);\n\t\t}\n\t\treturn matrix_array;\n\t},\n\n\t/**\n\t * 行列用の文字列データから構成されるMatrix型のデータを作成する\n\t * @param {string} text - 調査したい文字列\n\t * @returns {Array<Array<Complex>>} Matrix型で使用される内部の配列\n\t */\n\ttoMatrixFromStringForArray : function(text) {\n\t\t// JSON形式\n\t\tif(/[[\\],]/.test(text)) {\n\t\t\treturn ConstructorTool.toMatrixFromStringForArrayJSON(text);\n\t\t}\n\t\t// それ以外(MATLAB, Octave, Scilab)\n\t\telse {\n\t\t\treturn ConstructorTool.toMatrixFromStringForArrayETC(text);\n\t\t}\n\t},\n\n\t/**\n\t * 文字列データからMatrix型のデータを作成する\n\t * @param {string} text - 調査したい文字列\n\t * @returns {Array<Array<Complex>>} Matrix型で使用される内部の配列\n\t */\n\ttoMatrixFromString : function(text) {\n\t\t// 前後のスペースを除去\n\t\tconst trimtext = text.replace(/^\\s*|\\s*$/g, \"\");\n\t\t// ブランケットを外す\n\t\tconst withoutBracket = ConstructorTool.trimBracket(trimtext);\n\t\tif(withoutBracket) {\n\t\t\t// 配列用の初期化\n\t\t\treturn ConstructorTool.toMatrixFromStringForArray(withoutBracket);\n\t\t}\n\t\telse {\n\t\t\t// スカラー用の初期化\n\t\t\treturn [[new Complex(text)]];\n\t\t}\n\t},\n\n\t/**\n\t * Matrix型内部データが行列データとして正しいかを調べる\n\t * @param {Array<Array<Complex>>} m_array\n\t * @returns {boolean} \n\t */\n\tisCorrectMatrixArray : function(m_array) {\n\t\tif(m_array.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tconst num = m_array[0].length;\n\t\tif(num === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tfor(let i = 1; i < m_array.length; i++) {\n\t\t\tif(m_array[i].length !== num) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n};\n\n/**\n * 複素行列クラス (immutable)\n */\nexport default class Matrix {\n\t\n\t/**\n\t * 複素行列を作成\n\t * 引数は次のタイプをとれます\n\t * ・4 \t\t\t\t整数や実数\n\t * ・\"1 + j\"\t\t文字列で複素数をわたす\n\t * ・[1,2]\t\t\t1次元配列\n\t * ・[[1,2],[3,4]]\t行列\n\t * ・[\"1+j\", \"2+j\"]\t複素数を含んだ行列\n\t * ・\"[1 1:0.5:3]\"\t\tMATLAB/Octave/Scilab互換\n\t * @param {Object|number|string|Array} number - 行列データ( \"1 + j\", [1 , 1] など)\n\t */\n\tconstructor(number) {\n\t\tlet matrix_array = null;\n\t\tlet is_check_string = false;\n\t\tif(arguments.length === 1) {\n\t\t\tconst y = number;\n\t\t\t// 行列型なら中身をディープコピーする\n\t\t\tif(y instanceof Matrix) {\n\t\t\t\tmatrix_array = new Array(y.row_length);\n\t\t\t\tfor(let i = 0; i < y.row_length; i++) {\n\t\t\t\t\tmatrix_array[i] = new Array(y.column_length);\n\t\t\t\t\tfor(let j = 0; j < y.column_length; j++) {\n\t\t\t\t\t\tmatrix_array[i][j] = y.matrix_array[i][j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 複素数型なら1要素の行列\n\t\t\telse if(y instanceof Complex) {\n\t\t\t\tmatrix_array = [[y]];\n\t\t\t}\n\t\t\t// 行列の場合は中身を解析していく\n\t\t\telse if(y instanceof Array) {\n\t\t\t\tmatrix_array = [];\n\t\t\t\tfor(let row_count = 0; row_count < y.length; row_count++) {\n\t\t\t\t\t// 毎行ごと調査\n\t\t\t\t\tconst row = y[row_count];\n\t\t\t\t\t// 各行の要素が配列の場合は、配列内配列のため再度for文で調べていく\n\t\t\t\t\tif(row instanceof Array) {\n\t\t\t\t\t\tconst rows_array = new Array(row.length);\n\t\t\t\t\t\t// 1行を調査する\n\t\t\t\t\t\tfor(let col_count = 0; col_count < row.length; col_count++) {\n\t\t\t\t\t\t\tconst column = row[col_count];\n\t\t\t\t\t\t\t// 1要素が複素数ならそのまま代入\n\t\t\t\t\t\t\tif(column instanceof Complex) {\n\t\t\t\t\t\t\t\trows_array[col_count] = column;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// 1要素が行列なら、中身を抽出して代入\n\t\t\t\t\t\t\telse if(column instanceof Matrix) {\n\t\t\t\t\t\t\t\tif(!column.isScalar()) {\n\t\t\t\t\t\t\t\t\tthrow \"Matrix in matrix\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trows_array[col_count] = column.scalar;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// それ以外の場合は、複素数クラスのコンストラクタに判断させる\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\trows_array[col_count] = new Complex(column);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatrix_array[row_count] = rows_array;\n\t\t\t\t\t}\n\t\t\t\t\t// 1つの値のみ宣言の場合は、中の配列を行ベクトルとして定義する\n\t\t\t\t\telse {\n\t\t\t\t\t\t// 行ベクトルの初期化\n\t\t\t\t\t\tif(row_count === 0) {\n\t\t\t\t\t\t\tmatrix_array[0] = new Array(y.length);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 1要素が複素数ならそのまま代入\n\t\t\t\t\t\tif(row instanceof Complex) {\n\t\t\t\t\t\t\tmatrix_array[0][row_count] = row;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 1要素が行列なら、中身を抽出して代入\n\t\t\t\t\t\telse if(row instanceof Matrix) {\n\t\t\t\t\t\t\tif(!row.isScalar()) {\n\t\t\t\t\t\t\t\tthrow \"Matrix in matrix\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmatrix_array[0][row_count] = row.scalar;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// それ以外の場合は、複素数クラスのコンストラクタに判断させる\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tmatrix_array[0][row_count] = new Complex(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 文字列の場合は、文字列解析を行う\n\t\t\telse if(typeof y === \"string\" || y instanceof String) {\n\t\t\t\tis_check_string = true;\n\t\t\t\tmatrix_array = ConstructorTool.toMatrixFromString(y);\n\t\t\t}\n\t\t\t// 文字列変換できる場合は返還後に、文字列解析を行う\n\t\t\telse if(y instanceof Object && y.toString) {\n\t\t\t\tis_check_string = true;\n\t\t\t\tmatrix_array = ConstructorTool.toMatrixFromString(y.toString());\n\t\t\t}\n\t\t\t// 単純なビルトインの数値など\n\t\t\telse {\n\t\t\t\tmatrix_array = [[new Complex(y)]];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow \"Matrix : Many arguments [\" + arguments.length + \"]\";\n\t\t}\n\t\tif(is_check_string) {\n\t\t\t// 文字列データの解析の場合、\":\" データが紛れていないかを確認する。\n\t\t\t// 紛れていたらその行は削除する。\n\t\t\tfor(let row = 0; row < matrix_array.length; row++) {\n\t\t\t\tif(matrix_array[row] === \":\") {\n\t\t\t\t\tmatrix_array.splice(row--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!ConstructorTool.isCorrectMatrixArray(matrix_array)) {\n\t\t\tthrow \"new Matrix IllegalArgumentException\";\n\t\t}\n\t\t\n\t\t/**\n\t\t * 行列を構成する配列\n\t\t * @private\n\t\t * @type {Array<Array<number>>}\n\t\t */\n\t\tthis.matrix_array = matrix_array;\n\n\t\t/**\n\t\t * 行数\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.row_length = this.matrix_array.length;\n\t\t\n\t\t/**\n\t\t * 列数\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.column_length = this.matrix_array[0].length;\n\n\t\t/**\n\t\t * 文字列化に使用するキャッシュ\n\t\t * @private\n\t\t * @type {string}\n\t\t */\n\t\tthis.string_cash = null;\n\t}\n\n\t/**\n\t * 複製\n\t * @returns {Matrix}\n\t */\n\tclone() {\n\t\treturn new Matrix(this.matrix_array);\n\t}\n\n\t/**\n\t * 文字列化\n\t * @returns {string} \n\t */\n\ttoString() {\n\t\tif(this.string_cash) {\n\t\t\treturn this.string_cash;\n\t\t}\n\t\tconst exp_turn_point = 9;\n\t\tconst exp_turn_num = Math.pow(10, exp_turn_point);\n\t\tconst exp_point = 4;\n\t\tlet isDrawImag = false;\n\t\tlet isDrawExp = false;\n\t\tlet draw_decimal_position = 0;\n\n\t\t// 行列を確認して表示するための表示方法の確認する\n\t\tthis._each(\n\t\t\tfunction(num) {\n\t\t\t\tif(!num.isReal()) {\n\t\t\t\t\tisDrawImag = true;\n\t\t\t\t}\n\t\t\t\tif(Math.abs(num.real) >= exp_turn_num) {\n\t\t\t\t\tisDrawExp = true;\n\t\t\t\t}\n\t\t\t\tif(Math.abs(num.imag) >= exp_turn_num) {\n\t\t\t\t\tisDrawExp = true;\n\t\t\t\t}\n\t\t\t\tdraw_decimal_position = Math.max(draw_decimal_position, num.getDecimalPosition());\n\t\t\t}\n\t\t);\n\n\t\tif(draw_decimal_position > 0) {\n\t\t\tdraw_decimal_position = exp_point;\n\t\t}\n\n\t\t// 文字列データを作成とともに、最大の長さを記録する\n\t\tlet str_max = 0;\n\t\tconst draw_buff = [];\n\t\t// 数値データを文字列にする関数（eの桁がある場合は中身は3桁にする）\n\t\tconst toStrFromFloat = function(number) {\n\t\t\tif(!isDrawExp) {\n\t\t\t\treturn number.toFixed(draw_decimal_position);\n\t\t\t}\n\t\t\tconst str = number.toExponential(exp_point);\n\t\t\tconst split = str.split(\"e\");\n\t\t\tlet exp_text = split[1];\n\t\t\tif(exp_text.length === 2) {\n\t\t\t\texp_text = exp_text.substr(0, 1) + \"00\" + exp_text.substr(1);\n\t\t\t}\n\t\t\telse if(exp_text.length === 3) {\n\t\t\t\texp_text = exp_text.substr(0, 1) + \"0\" + exp_text.substr(1);\n\t\t\t}\n\t\t\treturn split[0] + \"e\" + exp_text;\n\t\t};\n\t\tthis._each(\n\t\t\tfunction(num) {\n\t\t\t\tconst data = {};\n\t\t\t\tlet real = num.real;\n\t\t\t\tdata.re_sign = real < 0 ? \"-\" : \" \";\n\t\t\t\treal = Math.abs(real);\n\t\t\t\tdata.re_str = toStrFromFloat(real);\n\t\t\t\tstr_max = Math.max(str_max, data.re_str.length + 1);\n\t\t\t\tif(isDrawImag) {\n\t\t\t\t\tlet imag = num.imag;\n\t\t\t\t\tdata.im_sign = imag < 0 ? \"-\" : \"+\";\n\t\t\t\t\timag = Math.abs(imag);\n\t\t\t\t\tdata.im_str = toStrFromFloat(imag);\n\t\t\t\t\tstr_max = Math.max(str_max, data.im_str.length + 1);\n\t\t\t\t}\n\t\t\t\tdraw_buff.push(data);\n\t\t\t}\n\t\t);\n\n\t\t// 右寄せ用関数\n\t\tconst right = function(text, length) {\n\t\t\tconst space = \"                                        \";\n\t\t\treturn space.substr(0, length - text.length) + text;\n\t\t};\n\t\t// 出力用文字列を作成する\n\t\tconst output = [];\n\t\tconst that = this;\n\t\tthis._each(\n\t\t\tfunction(num, row, col) {\n\t\t\t\tconst data = draw_buff.shift();\n\t\t\t\tlet text = right(data.re_sign + data.re_str, str_max);\n\t\t\t\tif(isDrawImag) {\n\t\t\t\t\ttext += \" \" + data.im_sign + right(data.im_str, str_max) + \"i\";\n\t\t\t\t}\n\t\t\t\toutput.push(text);\n\t\t\t\toutput.push((col < that.column_length - 1) ? \" \" : \"\\n\");\n\t\t\t}\n\t\t);\n\n\t\tthis.string_cash = output.join(\"\");\n\n\t\treturn this.string_cash;\n\t}\n\n\t/**\n\t * A.equals(B) = A === B\n\t * @param {Matrix} number\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {boolean} A === B\n\t */\n\tequals(number, epsilon) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix.create(number);\n\t\tif((M1.row_length !== M2.row_length) || (M1.column_length !== M2.column_length)) {\n\t\t\treturn false;\n\t\t}\n\t\tif((M1.row_length === 1) || (M1.column_length ===1)) {\n\t\t\treturn M1.scalar.equals(M2.scalar);\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tif(!x1[row][col].equals(x2[row][col], epsilon)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * 行列を構成する複素数の実数のみを抽出し、JavaScriptで扱える配列を作成する\n\t * @returns {Array} JavaScriptで扱える実数の配列\n\t */\n\tgetNumberMatrixArray() {\n\t\tconst y = new Array(this.row_length);\n\t\tfor(let i = 0; i < this.row_length; i++) {\n\t\t\ty[i] = new Array(this.column_length);\n\t\t\tfor(let j = 0; j < this.column_length; j++) {\n\t\t\t\ty[i][j] = this.matrix_array[i][j].real;\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\t\n\t/**\n\t * 行列を構成するComplex型で構成された配列を作成する\n\t * @returns {Array} 行列のComplex配列を返します\n\t */\n\tgetComplexMatrixArray() {\n\t\tconst y = new Array(this.row_length);\n\t\tfor(let i = 0; i < this.row_length; i++) {\n\t\t\ty[i] = new Array(this.column_length);\n\t\t\tfor(let j = 0; j < this.column_length; j++) {\n\t\t\t\ty[i][j] = this.matrix_array[i][j];\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\t\n\t/**\n\t * 任意の引数データを使用して行列を作成（引数によっては行列オブジェクトを新規作成する）\n\t * @param {Matrix} number \n\t * @returns {Matrix}\n\t */\n\tstatic create(number) {\n\t\tif((arguments.length === 1) && (number instanceof Matrix)) {\n\t\t\treturn number;\n\t\t}\n\t\telse {\n\t\t\treturn new Matrix(number);\n\t\t}\n\t}\n\t\n\t/**\n\t * キャッシュを削除する\n\t */\n\t_clearCash() {\n\t\tif(this.string_cash) {\n\t\t\tdelete this.string_cash;\n\t\t}\n\t}\n\n\t/**\n\t * 行列内の全ての値に処理を加えます。ミュータブルです。\n\t * 内部処理用\n\t * @param {function(num: Complex, row: number, col: number): ?Complex} eachfunc - Function(num, row, col)\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\t_each(eachfunc) {\n\t\tlet isclearcash = false;\n\t\t// 行優先ですべての値に対して指定した関数を実行する。内容を書き換える可能性もある\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tconst ret = eachfunc(this.matrix_array[row][col], row, col);\n\t\t\t\tif(ret === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(ret instanceof Complex) {\n\t\t\t\t\tthis.matrix_array[row][col] = ret;\n\t\t\t\t}\n\t\t\t\telse if(ret instanceof Matrix) {\n\t\t\t\t\tthis.matrix_array[row][col] = ret.scalar;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.matrix_array[row][col] = new Complex(ret);\n\t\t\t\t}\n\t\t\t\tisclearcash = true;\n\t\t\t}\n\t\t}\n\t\tif(isclearcash) {\n\t\t\tthis._clearCash();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * 行列内の各値に対して指定した初期化を行った行列オブジェクトを新規作成する\n\t * @param {function(num: Complex, row: number, col: number): ?Complex} eachfunc - Function(row, col)\n\t * @param {number} dimension - 次元数\n\t * @param {number} [column_length=dimension] - 列数\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\tstatic createMatrixDoEachCalculation(eachfunc, dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 3)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\tconst y_row_length = dimension;\n\t\tconst y_column_length = column_length ? column_length : dimension;\n\t\tconst y = new Array(y_row_length);\n\t\tfor(let row = 0; row < y_row_length; row++) {\n\t\t\ty[row] = new Array(y_column_length);\n\t\t\tfor(let col = 0; col < y_column_length; col++) {\n\t\t\t\tconst ret = eachfunc(row, col);\n\t\t\t\tif(ret === undefined) {\n\t\t\t\t\ty[row][col] = Complex.ZERO;\n\t\t\t\t}\n\t\t\t\telse if(ret instanceof Complex) {\n\t\t\t\t\ty[row][col] = ret;\n\t\t\t\t}\n\t\t\t\telse if(ret instanceof Matrix) {\n\t\t\t\t\ty[row][col] = ret.scalar;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ty[row][col] = new Complex(ret);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * 本行列内部の全ての値に対して指定した処理を加える\n\t * @param {function(num: Complex, row: number, col: number): ?Complex} eachfunc - Function(num, row, col)\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\tcloneMatrixDoEachCalculation(eachfunc) {\n\t\treturn this.clone()._each(eachfunc);\n\t}\n\n\t/**\n\t * 列優先でベクトルに対して何か処理を行い、行列を作成します。\n\t * @param {function(array: Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\t__column_oriented_1_dimensional_processing(array_function) {\n\t\tif(this.isRow()) {\n\t\t\t// 1行であれば、その1行に対して処理を行う\n\t\t\tconst row_array = new Array(this.row_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\trow_array[col] = this.matrix_array[0][col];\n\t\t\t}\n\t\t\treturn new Matrix(array_function(row_array));\n\t\t}\n\t\telse {\n\t\t\tconst y = new Matrix(0);\n\t\t\ty._resize(1, this.column_length);\n\t\t\t// 1列、行列であれば、列ごとに処理を行う\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tconst col_array = new Array(this.row_length);\n\t\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\t\tcol_array[row] = this.matrix_array[row][col];\n\t\t\t\t}\n\t\t\t\tconst col_output = array_function(col_array);\n\t\t\t\ty._resize(Math.max(y.row_length, col_output.length), y.column_length);\n\t\t\t\tfor(let row = 0; row < col_output.length; row++) {\n\t\t\t\t\ty.matrix_array[row][col] = col_output[row];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t}\n\n\t/**\n\t * 行列に対して、行と列に同一の処理を行い、行列を作成します。\n\t * @param {function(array: Array<Complex>): Array<Complex>} array_function - Function(array)\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\t__column_oriented_2_dimensional_processing(array_function) {\n\t\tconst y = new Matrix(0);\n\t\t// 行ごとに処理を行う\n\t\ty._resize(this.row_length, 1);\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tconst row_array = new Array(this.row_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\trow_array[col] = this.matrix_array[0][col];\n\t\t\t}\n\t\t\tconst row_output = array_function(row_array);\n\t\t\ty._resize(y.row_length, Math.max(y.column_length, row_output.length));\n\t\t\tfor(let col = 0; col < row_output.length; col++) {\n\t\t\t\ty.matrix_array[row][col] = row_output[col];\n\t\t\t}\n\t\t}\n\t\t// 列ごとに処理を行う\n\t\tfor(let col = 0; col < y.column_length; col++) {\n\t\t\tconst col_array = new Array(y.row_length);\n\t\t\tfor(let row = 0; row < y.row_length; row++) {\n\t\t\t\tcol_array[row] = y.matrix_array[row][col];\n\t\t\t}\n\t\t\tconst col_output = array_function(col_array);\n\t\t\ty._resize(Math.max(y.row_length, col_output.length), y.column_length);\n\t\t\tfor(let row = 0; row < col_output.length; row++) {\n\t\t\t\ty.matrix_array[row][col] = col_output[row];\n\t\t\t}\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * 行列（ベクトル）内の指定した箇所の値をComplex型で返す。\n\t * @param {Matrix} arg1 - 位置／ベクトルの場合は何番目のベクトルか\n\t * @param {Matrix} [arg2] - 列番号（行番号と列番号で指定する場合（任意））\n\t * @returns {Complex} \n\t */\n\tgetComplex(arg1, arg2) {\n\t\tlet arg1_data = null;\n\t\tlet arg2_data = null;\n\t\t{\n\t\t\tif(typeof arg1 === \"string\" || arg1 instanceof String) {\n\t\t\t\targ1_data = new Matrix(arg1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\targ1_data = arg1;\n\t\t\t}\n\t\t}\n\t\tif(arguments.length === 2) {\n\t\t\tif(typeof arg2 === \"string\" || arg2 instanceof String) {\n\t\t\t\targ2_data = new Matrix(arg2);\n\t\t\t}\n\t\t\telse {\n\t\t\t\targ2_data = arg2;\n\t\t\t}\n\t\t}\n\t\tconst get_scalar = function(x) {\n\t\t\tlet y;\n\t\t\tlet is_scalar = false;\n\t\t\tif(typeof arg1 === \"number\" || arg1 instanceof Number) {\n\t\t\t\ty = Math.round(x);\n\t\t\t\tis_scalar = true;\n\t\t\t}\n\t\t\telse if(arg1 instanceof Complex)  {\n\t\t\t\ty = Math.round(x.real);\n\t\t\t\tis_scalar = true;\n\t\t\t}\n\t\t\telse if((arg1 instanceof Matrix) && arg1.isScalar()) {\n\t\t\t\ty = Math.round(x.doubleValue);\n\t\t\t\tis_scalar = true;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tnumber : y,\n\t\t\t\tis_scalar : is_scalar\n\t\t\t};\n\t\t};\n\t\tlet is_scalar = true;\n\t\tlet arg1_scalar = null;\n\t\tlet arg2_scalar = null;\n\t\tif(arguments.length === 1) {\n\t\t\targ1_scalar = get_scalar(arg1_data);\n\t\t\tis_scalar &= arg1_scalar.is_scalar;\n\t\t}\n\t\telse if(arguments.length === 2) {\n\t\t\targ1_scalar = get_scalar(arg1_data);\n\t\t\tis_scalar &= arg1_scalar.is_scalar;\n\t\t\targ2_scalar = get_scalar(arg2_data);\n\t\t\tis_scalar &= arg2_scalar.is_scalar;\n\t\t}\n\t\t// 1つのみ指定した場合\n\t\tif(is_scalar) {\n\t\t\tif(this.isRow()) {\n\t\t\t\treturn this.matrix_array[0][arg1_scalar.number];\n\t\t\t}\n\t\t\telse if(this.isColumn()) {\n\t\t\t\treturn this.matrix_array[arg1_scalar.number][0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn this.matrix_array[arg1_scalar.number][arg2_scalar.number];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow \"getComplex not scalar : \" + this;\n\t\t}\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の基本操作、基本情報の取得\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t\n\t/**\n\t * 行列の最初の要素の整数値。スカラー値を取得するときなどを想定。\n\t * @returns {number}\n\t */\n\tget intValue() {\n\t\treturn (this.matrix_array[0][0].real) | 0;\n\t}\n\n\t/**\n\t * 行列の最初の要素の実数値。スカラー値を取得するときなどを想定。\n\t * @returns {number}\n\t */\n\tget doubleValue() {\n\t\treturn this.matrix_array[0][0].real;\n\t}\n\n\t/**\n\t * 行列の最初の要素。スカラー値を取得するときなどを想定。\n\t * @returns {Complex}\n\t */\n\tget scalar() {\n\t\treturn this.matrix_array[0][0];\n\t}\n\n\t/**\n\t * 行列の最も大きい行数、列数を返す\n\t * @returns {number}\n\t */\n\tget length() {\n\t\treturn this.row_length > this.column_length ? this.row_length : this.column_length;\n\t}\n\n\t/**\n\t * 行列の1ノルム\n\t * @returns {number}\n\t */\n\tget norm1() {\n\t\tconst y = this.matrix_array;\n\t\t// 行ノルムを計算する\n\t\tif(this.isRow()) {\n\t\t\tlet sum = 0.0;\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tsum += y[0][col].norm;\n\t\t\t}\n\t\t\treturn sum;\n\t\t}\n\t\t// 列ノルムを計算する\n\t\telse if(this.isColumn()) {\n\t\t\tlet sum = 0.0;\n\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\tsum = y[row][0].norm;\n\t\t\t}\n\t\t\treturn sum;\n\t\t}\n\t\t// 列の和の最大値\n\t\tlet max = 0;\n\t\t// 列を固定して行の和を計算\n\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\tlet sum = 0;\n\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\tsum += y[row][col].norm;\n\t\t\t}\n\t\t\tif(max < sum) {\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n\t\n\t/**\n\t * 行列の2ノルム\n\t * @returns {number}\n\t */\n\tget norm2() {\n\t\tconst y = this.matrix_array;\n\t\t// 行ノルムを計算する\n\t\tif(this.isRow()) {\n\t\t\tlet sum = 0.0;\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tsum += y[0][col].square().real;\n\t\t\t}\n\t\t\treturn Math.sqrt(sum);\n\t\t}\n\t\t// 列ノルムを計算する\n\t\telse if(this.isColumn()) {\n\t\t\tlet sum = 0.0;\n\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\tsum = y[row][0].square().real;\n\t\t\t}\n\t\t\treturn Math.sqrt(sum);\n\t\t}\n\t\treturn this.svd().S.diag().max().scalar.real;\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の作成関係\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t\n\t/**\n\t * 単位行列を作成\n\t * @param {number} dimension - 次元数\n\t * @param {number} [column_length] - 列数\n\t * @returns {Matrix}\n\t */\n\tstatic eye(dimension, column_length) {\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn row === col ? Complex.ONE : Complex.ZERO;\n\t\t}, dimension, column_length);\n\t}\n\t\n\t/**\n\t * 指定した数値で初期化\n\t * @param {Matrix} number - 初期値\n\t * @param {number} dimension - 次元数\n\t * @param {number} [column_length] - 列数\n\t * @returns {Matrix}\n\t */\n\tstatic memset(number, dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 3)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\tif((number instanceof Matrix) && (!number.isScalar())) {\n\t\t\tconst x = number.matrix_array;\n\t\t\tconst x_row_length = number.row_length;\n\t\t\tconst x_column_length = number.column_length;\n\t\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\t\treturn x[row % x_row_length][col % x_column_length];\n\t\t\t}, dimension, column_length);\n\t\t}\n\t\telse {\n\t\t\tlet x = 0;\n\t\t\tif((number instanceof Matrix) && (number.isScalar())) {\n\t\t\t\tx = number.scalar;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tx = Complex.create(number);\n\t\t\t}\n\t\t\treturn Matrix.createMatrixDoEachCalculation(function() {\n\t\t\t\treturn x;\n\t\t\t}, dimension, column_length);\n\t\t}\n\t}\n\n\t/**\n\t * 0で初期化\n\t * @param {number} dimension - 次元数\n\t * @param {number} [column_length] - 列数\n\t * @returns {Matrix}\n\t */\n\tstatic zeros(dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 2)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\treturn Matrix.memset(Complex.ZERO, dimension, column_length);\n\t}\n\n\t/**\n\t * 1で初期化\n\t * @param {number} dimension - 次元数\n\t * @param {number} [column_length] - 列数\n\t * @returns {Matrix}\n\t */\n\tstatic ones(dimension, column_length) {\n\t\tif((arguments.length === 0) || (arguments.length > 2)) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\treturn Matrix.memset(Complex.ONE, dimension, column_length);\n\t}\n\n\t/**\n\t * ランダム値で初期化\n\t * @param {number} dimension - 次元数\n\t * @param {number} [column_length] - 列数\n\t * @returns {Matrix}\n\t */\n\tstatic rand(dimension, column_length) {\n\t\treturn Matrix.createMatrixDoEachCalculation(function() {\n\t\t\treturn Complex.rand();\n\t\t}, dimension, column_length);\n\t}\n\n\t/**\n\t * 正規分布に従うランダム値で初期化\n\t * @param {number} dimension - 次元数\n\t * @param {number} [column_length] - 列数\n\t * @returns {Matrix}\n\t */\n\tstatic randn(dimension, column_length) {\n\t\treturn Matrix.createMatrixDoEachCalculation(function() {\n\t\t\treturn Complex.randn();\n\t\t}, dimension, column_length);\n\t}\n\n\t/**\n\t * 行列なら対角成分を列ベクトル / ベクトルなら対角成分を持つ行列\n\t * @returns {Matrix}\n\t */\n\tdiag() {\n\t\tif(this.isVector()) {\n\t\t\t// 行列を作成\n\t\t\tconst M = this;\n\t\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\t\tif(row === col) {\n\t\t\t\t\treturn M.getComplex(row);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn Complex.ZERO;\n\t\t\t\t}\n\t\t\t}, this.length);\n\t\t}\n\t\telse {\n\t\t\t// 列ベクトルを作成\n\t\t\tconst len = Math.min(this.row_length, this.column_length);\n\t\t\tconst y = new Array(len);\n\t\t\tfor(let i = 0; i < len; i++) {\n\t\t\t\ty[i] = new Array(1);\n\t\t\t\ty[i][0] = this.matrix_array[i][i];\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t}\n\n\t// TODO 行列の結合がほしい\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 比較や判定\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * スカラー値の判定\n\t * @returns {boolean}\n\t */\n\tisScalar() {\n\t\treturn this.row_length === 1 && this.column_length == 1;\n\t}\n\t\n\t/**\n\t * 行ベクトル／横ベクトルの判定\n\t * @returns {boolean}\n\t */\n\tisRow() {\n\t\treturn this.row_length === 1;\n\t}\n\t\n\t/**\n\t * 列ベクトル／縦ベクトルの判定\n\t * @returns {boolean}\n\t */\n\tisColumn() {\n\t\treturn this.column_length === 1;\n\t}\n\n\t/**\n\t * ベクトルの判定\n\t * @returns {boolean}\n\t */\n\tisVector() {\n\t\treturn this.row_length === 1 || this.column_length === 1;\n\t}\n\n\t/**\n\t * 行列の判定\n\t * @returns {boolean}\n\t */\n\tisMatrix() {\n\t\treturn this.row_length !== 1 && this.column_length !== 1;\n\t}\n\n\t/**\n\t * 正方行列の判定\n\t * @returns {boolean}\n\t */\n\tisSquare() {\n\t\treturn this.row_length === this.column_length;\n\t}\n\n\t/**\n\t * 実行列の判定\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisReal(epsilon) {\n\t\tlet is_real = true;\n\t\tthis._each(function(num){\n\t\t\tif(is_real && (num.isComplex(epsilon))) {\n\t\t\t\tis_real = false;\n\t\t\t}\n\t\t});\n\t\treturn is_real;\n\t}\n\n\t/**\n\t * 複素行列の判定\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisComplex(epsilon) {\n\t\tlet is_complex = true;\n\t\tthis._each(function(num){\n\t\t\tif(is_complex && (num.isReal(epsilon))) {\n\t\t\t\tis_complex = false;\n\t\t\t}\n\t\t});\n\t\treturn is_complex;\n\t}\n\n\t/**\n\t * 零行列を判定\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisZeros(epsilon) {\n\t\tlet is_zeros = true;\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\tthis._each(function(num){\n\t\t\tif(is_zeros && (!num.isZero(tolerance))) {\n\t\t\t\tis_zeros = false;\n\t\t\t}\n\t\t});\n\t\treturn is_zeros;\n\t}\n\n\t/**\n\t * 単位行列を判定\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisIdentity(epsilon) {\n\t\tif(!this.isDiagonal()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tif(!this.matrix_array[row][row].isOne(tolerance)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * 対角行列を判定\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisDiagonal(epsilon) {\n\t\tlet is_diagonal = true;\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_diagonal && (row !== col) && (!num.isZero(tolerance))) {\n\t\t\t\tis_diagonal = false;\n\t\t\t}\n\t\t});\n\t\treturn is_diagonal;\n\t}\n\t\n\t/**\n\t * 三重対角行列を判定\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisTridiagonal(epsilon) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tlet is_tridiagonal = true;\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\tthis._each(function(num, row, col){\n\t\t\tif(is_tridiagonal && (Math.abs(row - col) > 1) && (!num.isZero(tolerance))) {\n\t\t\t\tis_tridiagonal = false;\n\t\t\t}\n\t\t});\n\t\treturn is_tridiagonal;\n\t}\n\n\t/**\n\t * 正則行列を判定\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisRegular(epsilon) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\t// ランクが行列の次元と等しいかどうかで判定\n\t\t// det(M) != 0 でもよいが、時間がかかる可能性があるので\n\t\t// 誤差は自動で計算など本当はもうすこし良い方法を考える必要がある\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\treturn (this.rank(1.0e-10).equals(this.row_length, tolerance));\n\t}\n\n\t/**\n\t * 直行行列を判定\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisOrthogonal(epsilon) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\treturn (this.mul(this.transpose()).isIdentity(tolerance));\n\t}\n\n\t/**\n\t * ユニタリ行列を判定\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisUnitary(epsilon) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\treturn (this.mul(this.ctranspose()).isIdentity(tolerance));\n\t}\n\n\t/**\n\t * 対称行列を判定\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisSymmetric(epsilon) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = row + 1; col < this.column_length; col++) {\n\t\t\t\tif(!this.matrix_array[row][col].equals(this.matrix_array[col][row], tolerance)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * エルミート行列を判定\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {boolean}\n\t */\n\tisHermitian(epsilon) {\n\t\tif(!this.isSquare()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = row; col < this.column_length; col++) {\n\t\t\t\tif(row === col) {\n\t\t\t\t\tif(!this.matrix_array[row][col].isReal(tolerance)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(!this.matrix_array[row][col].equals(this.matrix_array[col][row].conj(), tolerance)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * A.size() = [row_length column_length] 行列のサイズを取得\n\t * @returns {Matrix} 行ベクトル [row_length column_length]\n\t */\n\tsize() {\n\t\t// 行列のサイズを取得\n\t\treturn new Matrix([[this.row_length, this.column_length]]);\n\t}\n\n\t/**\n\t * A.compareTo(B) 今の値Aと、指定した値Bとを比較する\n\t * スカラー同士の場合の戻り値は、IF文で利用できるように、number型である。\n\t * 行列同士の場合は行列の中で比較を行い、各項に比較結果が入る\n\t * @param {Matrix} number \n\t * @param {number} [epsilon] - 誤差\n\t * @returns {number|Matrix} A < B ? 1 : (A === B ? 0 : -1)\n\t */\n\tcompareTo(number, epsilon) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix.create(number);\n\t\t// ※スカラー同士の場合は、実数を返す\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn M1.scalar.compareTo(M2.scalar, epsilon);\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].compareTo(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * A.max() 行列内の最大値ベクトル、ベクトル内の最大スカラー値を取得\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {Matrix}\n\t */\n\tmax(epsilon) {\n\t\tconst main = function(data) {\n\t\t\tlet x = data[0];\n\t\t\tfor(let i = 1; i < data.length; i++) {\n\t\t\t\tif(x.compareTo(data[i], epsilon) > 0) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [x];\n\t\t};\n\t\treturn this.__column_oriented_1_dimensional_processing(main);\n\t}\n\t\n\t/**\n\t * A.min() 行列内の最小値ベクトル、ベクトル内の最小スカラー値を取得\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {Matrix}\n\t */\n\tmin(epsilon) {\n\t\tconst main = function(data) {\n\t\t\tlet x = data[0];\n\t\t\tfor(let i = 1; i < data.length; i++) {\n\t\t\t\tif(x.compareTo(data[i], epsilon) < 0) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [x];\n\t\t};\n\t\treturn this.__column_oriented_1_dimensional_processing(main);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 四則演算\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t\n\t/**\n\t * A.add(B) = A + B\n\t * @param {Matrix} number \n\t * @returns {Matrix}\n\t */\n\tadd(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix.create(number);\n\t\tif((M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].add(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * A.sub(B) = A - B\n\t * @param {Matrix} number \n\t * @returns {Matrix}\n\t */\n\tsub(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix.create(number);\n\t\tif((M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].sub(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * A.mul(B) = A * B\n\t * @param {Matrix} number \n\t * @returns {Matrix}\n\t */\n\tmul(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix.create(number);\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn new Matrix(x1.scalar.mul(x2.scalar));\n\t\t}\n\t\tif(M1.isScalar()) {\n\t\t\tconst y = new Array(M2.row_length);\n\t\t\tfor(let row = 0; row < M2.row_length; row++) {\n\t\t\t\ty[row] = new Array(M2.column_length);\n\t\t\t\tfor(let col = 0; col < M2.column_length; col++) {\n\t\t\t\t\ty[row][col] = M1.scalar.mul(x2[row][col]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\telse if(M2.isScalar()) {\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\ty[row] = new Array(M1.column_length);\n\t\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\t\ty[row][col] = x1[row][col].mul(M2.scalar);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\tif(M1.column_length !== M2.row_length) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\t{\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\ty[row] = new Array(M2.column_length);\n\t\t\t\tfor(let col = 0; col < M2.column_length; col++) {\n\t\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\t\tfor(let i = 0; i < M1.column_length; i++) {\n\t\t\t\t\t\tsum = sum.add(x1[row][i].mul(x2[i][col]));\n\t\t\t\t\t}\n\t\t\t\t\ty[row][col] = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t}\n\n\t/**\n\t * A.inv() = 単位行列 / A\n\t * @returns {Matrix}\n\t */\n\tinv() {\n\t\tif(this.isScalar()) {\n\t\t\treturn new Matrix(Complex.ONE.div(this.scalar));\n\t\t}\n\t\tif(!this.isSquare()) {\n\t\t\tthrow \"not square\";\n\t\t}\n\t\tif(this.isDiagonal()) {\n\t\t\t// 対角行列の場合は、対角成分のみ逆数をとる\n\t\t\tconst y = this.T();\n\t\t\tconst size = Math.min(y.row_length, y.column_length);\n\t\t\tfor(let i = 0; i < size; i++) {\n\t\t\t\ty.matrix_array[i][i] = y.matrix_array[i][i].inv();\n\t\t\t}\n\t\t\treturn y;\n\t\t}\n\t\t// (ここで正規直交行列の場合なら、転置させるなど入れてもいい？判定はできないけども)\n\t\tconst len = this.column_length;\n\t\t// ガウス・ジョルダン法\n\t\t// 初期値の設定\n\t\tconst M = new Matrix(this);\n\t\tM._concat_left(Matrix.eye(len));\n\t\tconst long_matrix_array = M.matrix_array;\n\t\tconst long_length = M.column_length;\n\n\t\t//前進消去\n\t\tfor(let k = 0; k < len; k++) {\n\t\t\t//ピポットの選択\n\t\t\t{\n\t\t\t\t// k列目で最も大きな行を取得(k列目から調べる)\n\t\t\t\tconst row_num = M._max_row_number(k, k).index;\n\t\t\t\t//交換を行う\n\t\t\t\tM._exchange_row(k, row_num);\n\t\t\t}\n\t\t\t//ピポットの正規化\n\t\t\t{\n\t\t\t\tconst normalize_value = long_matrix_array[k][k].inv();\n\t\t\t\tfor(let row = k, col = k; col < long_length; col++) {\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].mul(normalize_value);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//消去\n\t\t\tfor(let row = 0;row < len; row++) {\n\t\t\t\tif(row === k) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst temp = long_matrix_array[row][k];\n\t\t\t\tfor(let col = k; col < long_length; col++)\n\t\t\t\t{\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].sub(long_matrix_array[k][col].mul(temp));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst y = new Array(len);\n\t\t//右の列を抜き取る\n\t\tfor(let row = 0; row < len; row++) {\n\t\t\ty[row] = new Array(len);\n\t\t\tfor(let col = 0; col < len; col++) {\n\t\t\t\ty[row][col] = long_matrix_array[row][len + col];\n\t\t\t}\n\t\t}\n\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * A.div(B) = A / B\n\t * @param {Matrix} number \n\t * @returns {Matrix}\n\t */\n\tdiv(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix.create(number);\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn new Matrix(x1.scalar.div(x2.scalar));\n\t\t}\n\t\tif(M2.isScalar()) {\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\ty[row] = new Array(M1.column_length);\n\t\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\t\ty[row][col] = x1[row][col].div(M2.scalar);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\tif(M2.row_length === M2.column_length) {\n\t\t\t// ランク落ちしているか確認していないため注意\n\t\t\t// 本来ランク落ちしている場合は、ここでpinvを使用した方法に切り替えるなどする必要がある。\n\t\t\treturn this.mul(M2.inv());\n\t\t}\n\t\tif(M1.column_length !== M2.column_length) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\t\n\t\tthrow \"warning\";\n\t}\n\n\t/**\n\t * A.nmul(B) = A .* B 各項ごとの掛け算\n\t * @param {Matrix} number \n\t * @returns {Matrix}\n\t */\n\tnmul(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix.create(number);\n\t\tif((M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].mul(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t/**\n\t * A.ndiv(B) = A ./ B 各項ごとの割り算\n\t * @param {Matrix} number \n\t * @returns {Matrix}\n\t */\n\tndiv(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix.create(number);\n\t\tif((M1.row_length !== M2.row_length) && (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst y_row_length = Math.max(M1.row_length, M2.row_length);\n\t\tconst y_column_length = Math.max(M1.column_length, M2.column_length);\n\t\treturn Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\treturn x1[row % M1.row_length][col % M1.column_length].div(x2[row % M2.row_length][col % M2.column_length]);\n\t\t}, y_row_length, y_column_length);\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// Complexのメソッドにある機能を行列で使用できるようにしたもの\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * 各項の実部\n\t * @returns {Matrix}\n\t */\n\treal() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.real);\n\t\t});\n\t}\n\t\n\t/**\n\t * 各項の虚部\n\t * @returns {Matrix}\n\t */\n\timag() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.imag);\n\t\t});\n\t}\n\n\t/**\n\t * 各項の偏角（極座標の角度）\n\t * @returns {Matrix}\n\t */\n\tangle() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.angle);\n\t\t});\n\t}\n\n\t/**\n\t * 各項の符号値\n\t * @returns {Matrix}\n\t */\n\tsign() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn new Complex(num.sign());\n\t\t});\n\t}\n\n\t/**\n\t * 各項の整数を判定(1 or 0)\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {Matrix}\n\t */\n\ttestInteger(epsilon) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isInteger(epsilon) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * 各項の複素整数を判定(1 or 0)\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {Matrix}\n\t */\n\ttestComplexInteger(epsilon) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isComplexInteger(epsilon) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * 各項の 0 を判定(1 or 0)\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {Matrix}\n\t */\n\ttestZero(epsilon) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isZero(epsilon) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * 各項の 1 を判定(1 or 0)\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {Matrix}\n\t */\n\ttestOne(epsilon) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isOne(epsilon) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\t\n\t/**\n\t * 各項の複素数を判定(1 or 0)\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {Matrix}\n\t */\n\ttestComplex(epsilon) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isComplex(epsilon) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * 各項の実数を判定(1 or 0)\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {Matrix}\n\t */\n\ttestReal(epsilon) {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isReal(epsilon) ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * 各項の非数を判定(1 or 0)\n\t * @returns {Matrix}\n\t */\n\ttestNaN() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isNaN() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\n\t/**\n\t * real(x) > 0\n\t * @returns {boolean}\n\t */\n\ttestPositive() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isPositive() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * real(x) < 0\n\t * @returns {boolean}\n\t */\n\ttestNegative() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isNegative() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * real(x) >= 0\n\t * @returns {boolean}\n\t */\n\ttestNotNegative() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isNotNegative() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * 各項の無限を判定\n\t * @returns {boolean}\n\t */\n\ttestInfinite() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isInfinite() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\t\n\t/**\n\t * 各項の有限数を判定\n\t * @returns {boolean}\n\t */\n\ttestFinite() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.isFinite() ? Complex.ONE : Complex.ZERO;\n\t\t});\n\t}\n\n\t/**\n\t * 各項の絶対値をとる\n\t * @returns {Matrix}\n\t */\n\tabs() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.abs();\n\t\t});\n\t}\n\n\t/**\n\t * 複素共役行列\n\t * @returns {Matrix}\n\t */\n\tconj() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.conj();\n\t\t});\n\t}\n\n\t/**\n\t * 各項に -1 を掛け算する\n\t * @returns {Matrix}\n\t */\n\tnegate() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.negate();\n\t\t});\n\t}\n\n\t/**\n\t * 各項に sqrt()\n\t * @returns {Matrix}\n\t */\n\tsqrt() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sqrt();\n\t\t});\n\t}\n\n\t/**\n\t * 各項に pow(x)\n\t * @param {Matrix} number - スカラー\n\t * @returns {Matrix}\n\t */\n\tpow(number) {\n\t\tconst M = Matrix.create(number);\n\t\tif(!M.isScalar()) {\n\t\t\tthrow \"not set Scalar\";\n\t\t}\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.pow(M.scalar);\n\t\t});\n\t}\n\n\t/**\n\t * 各項に log()\n\t * @returns {Matrix}\n\t */\n\tlog() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.log();\n\t\t});\n\t}\n\n\t/**\n\t * 各項に exp()\n\t * @returns {Matrix}\n\t */\n\texp() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.exp();\n\t\t});\n\t}\n\n\t/**\n\t * 各項に sin()\n\t * @returns {Matrix}\n\t */\n\tsin() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sin();\n\t\t});\n\t}\n\n\t/**\n\t * 各項に cos()\n\t * @returns {Matrix}\n\t */\n\tcos() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.cos();\n\t\t});\n\t}\n\n\t/**\n\t * 各項に tan()\n\t * @returns {Matrix}\n\t */\n\ttan() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tan();\n\t\t});\n\t}\n\t\n\t/**\n\t * 各項に atan()\n\t * @returns {Matrix}\n\t */\n\tatan() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.atan();\n\t\t});\n\t}\n\n\t/**\n\t * 各項に atan2()\n\t * @param {Matrix} number - スカラー\n\t * @returns {Matrix}\n\t */\n\tatan2(number) {\n\t\tconst M = Matrix.create(number);\n\t\tif(!M.isScalar) {\n\t\t\tthrow \"not set Scalar\";\n\t\t}\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.atan2(M.scalar);\n\t\t});\n\t}\n\n\t/**\n\t * 各項に floor()\n\t * @returns {Matrix}\n\t */\n\tfloor() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.floor();\n\t\t});\n\t}\n\n\t/**\n\t * 各項に ceil()\n\t * @returns {Matrix}\n\t */\n\tceil() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.ceil();\n\t\t});\n\t}\n\n\t/**\n\t * 各項に round()\n\t * @returns {Matrix}\n\t */\n\tround() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.round();\n\t\t});\n\t}\n\n\t/**\n\t * 各項に fix()\n\t * @returns {Matrix}\n\t */\n\tfix() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.fix();\n\t\t});\n\t}\n\n\t/**\n\t * 各項に fract()\n\t * @returns {Matrix}\n\t */\n\tfract() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.fract();\n\t\t});\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の計算でよく使用する処理。\n\t// メソッド内部の処理を記述する際に使用している。\n\t// 他から使用する場合は注意が必要である。\n\t// 前提条件があるメソッド、ミュータブルとなっている。\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * 行列を時計回りに回転させます。ミュータブルです。\n\t * 内部処理用\n\t * @param {number} count - 回転する回数\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\t_rot90(count) {\n\t\tlet rot_type = 1;\n\t\tif(arguments.length === 1) {\n\t\t\trot_type = ((count % 4) + 4) % 4;\n\t\t}\n\t\tif(rot_type === 0) {\n\t\t\treturn this;\n\t\t}\n\t\t// バックアップ\n\t\tconst x = new Array(this.row_length);\n\t\tfor(let i = 0; i < this.row_length; i++) {\n\t\t\tx[i] = new Array(this.column_length);\n\t\t\tfor(let j = 0; j < this.column_length; j++) {\n\t\t\t\tx[i][j] = this.matrix_array[i][j];\n\t\t\t}\n\t\t}\n\t\tconst y = this.matrix_array;\n\t\tif(rot_type === 1) {\n\t\t\t// 90度回転\n\t\t\ty.splice(this.column_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tif(col < this.row_length) {\n\t\t\t\t\ty[col].splice(this.row_length);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ty[col] = new Array(this.row_length);\n\t\t\t\t}\n\t\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\t\ty[col][row] = x[this.row_length - row - 1][col];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(rot_type === 2) {\n\t\t\t// 180度回転\n\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\t\ty[row][col] = x[this.row_length - row - 1][this.column_length - col - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(rot_type === 3) {\n\t\t\t// 270度回転\n\t\t\ty.splice(this.column_length);\n\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\tif(col < this.row_length) {\n\t\t\t\t\ty[col].splice(this.row_length);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ty[col] = new Array(this.row_length);\n\t\t\t\t}\n\t\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\t\ty[col][row] = x[row][this.column_length - col - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.row_length = y.length;\n\t\tthis.column_length = y[0].length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * 行列を拡張します。ミュータブルです。\n\t * 拡張した場合は、0を初期値にします。\n\t * 内部処理用\n\t * @param {number} row_length - 新しい行の長さ\n\t * @param {number} column_length - 新しい列の長さ\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\t_resize(row_length, column_length) {\n\t\tif((row_length === this.row_length) && (column_length === this.column_length)) {\n\t\t\treturn this;\n\t\t}\n\t\tif((row_length <= 0) || (column_length <= 0)) {\n\t\t\tthrow \"_resize\";\n\t\t}\n\t\tconst row_max = Math.max(this.row_length, row_length);\n\t\tconst col_max = Math.max(this.column_length, column_length);\n\t\tconst y = this.matrix_array;\n\t\t// 大きくなった行と列に対してゼロで埋める\n\t\tfor(let row = 0; row < row_max; row++) {\n\t\t\tif(row >= this.row_length) {\n\t\t\t\ty[row] = new Array(col_max);\n\t\t\t}\n\t\t\tfor(let col = 0; col < col_max; col++) {\n\t\t\t\tif((row >= this.row_length) || (col >= this.column_length)) {\n\t\t\t\t\ty[row][col] = Complex.ZERO;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// 小さくなった行と列を削除する\n\t\tif(this.row_length > row_length) {\n\t\t\ty.splice(row_length);\n\t\t}\n\t\tif(this.column_length > column_length) {\n\t\t\tfor(let row = 0; row < y.length; row++) {\n\t\t\t\ty[row].splice(column_length);\n\t\t\t}\n\t\t}\n\t\tthis.row_length = row_length;\n\t\tthis.column_length = column_length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * 行を消去します。ミュータブルです。\n\t * 内部処理用\n\t * @param {number} row_index - 行番号\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\t_delete_row(row_index) {\n\t\tif((this.row_length === 1) || (this.row_length <= row_index)) {\n\t\t\tthrow \"_delete_row\";\n\t\t}\n\t\tthis.matrix_array.splice(row_index, 1);\n\t\tthis.row_length--;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * 列を消去します。ミュータブルです。\n\t * 内部処理用\n\t * @param {number} column_index - 列番号\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\t_delete_column(column_index) {\n\t\tif((this.column_length === 1) || (this.column_length <= column_index)) {\n\t\t\tthrow \"_delete_column\";\n\t\t}\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tthis.matrix_array[row].splice(column_index, 1);\n\t\t}\n\t\tthis.column_length--;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * 行を交換します。ミュータブルです。\n\t * 内部処理用\n\t * @param {number} row_index1 - 行番号1\n\t * @param {number} row_index2 - 行番号2\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\t_exchange_row(row_index1, row_index2) {\n\t\tif((this.row_length === 1) || (this.row_length <= row_index1) || (this.row_length <= row_index2)) {\n\t\t\tthrow \"_exchange_row\";\n\t\t}\n\t\tif(row_index1 === row_index2) {\n\t\t\treturn this;\n\t\t}\n\t\tconst swap = this.matrix_array[row_index1];\n\t\tthis.matrix_array[row_index1] = this.matrix_array[row_index2];\n\t\tthis.matrix_array[row_index2] = swap;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * 行を交換します。ミュータブルです。\n\t * 内部処理用\n\t * @param {number} column_index1 - 行番号1\n\t * @param {number} column_index2 - 行番号2\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\t_exchange_column(column_index1, column_index2) {\n\t\tif((this.column_length === 1) || (this.column_length <= column_index1) || (this.column_length <= column_index2)) {\n\t\t\tthrow \"_exchange_column\";\n\t\t}\n\t\tif(column_index1 === column_index2) {\n\t\t\treturn this;\n\t\t}\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tconst swap = this.matrix_array[row][column_index1];\n\t\t\tthis.matrix_array[row][column_index1] = this.matrix_array[row][column_index2];\n\t\t\tthis.matrix_array[row][column_index2] = swap;\n\t\t}\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * 行列の右に行列をくっつけます。ミュータブルです。\n\t * 内部処理用\n\t * @param {Matrix} left_matrix - 結合したい行列\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\t_concat_left(left_matrix) {\n\t\tconst M = Matrix.create(left_matrix);\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\tfor(let col = 0; col < M.column_length; col++) {\n\t\t\t\tthis.matrix_array[row].push(M.matrix_array[row][col]);\n\t\t\t}\n\t\t}\n\t\tthis.column_length += M.column_length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * 行列の下に行列をくっつけます。ミュータブルです。\n\t * 内部処理用\n\t * @param {Matrix} bottom_matrix - 結合したい行列\n\t * @returns {Matrix} 処理実行後の行列\n\t */\n\t_concat_bottom(bottom_matrix) {\n\t\tconst M = Matrix.create(bottom_matrix);\n\t\tfor(let row = 0; row < M.row_length; row++) {\n\t\t\tthis.matrix_array.push(M.matrix_array[row]);\n\t\t}\n\t\tthis.row_length += M.row_length;\n\t\tthis._clearCash();\n\t\treturn this;\n\t}\n\n\t/**\n\t * 列の中で最もノルムが最大の値がある行番号を返します。ミュータブルです。\n\t * 内部処理用\n\t * @param {number} column_index - 列番号\n\t * @param {number} row_index_offset - 行のオフセット(この値から行う)\n\t * @param {number} row_index_max - 行の最大(この値は含めない)\n\t * @returns {number} 行番号\n\t */\n\t_max_row_number(column_index, row_index_offset, row_index_max) {\n\t\tlet row_index = 0;\n\t\tlet row_max = 0;\n\t\tlet row = row_index_offset ? row_index_offset : 0;\n\t\tconst row_imax = row_index_max ? row_index_max : this.row_length;\n\t\t// n列目で最も大きな行を取得\n\t\tfor(; row < row_imax; row++) {\n\t\t\tconst norm = this.matrix_array[row][column_index].norm;\n\t\t\tif(norm > row_max) {\n\t\t\t\trow_max = norm;\n\t\t\t\trow_index = row;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tindex : row_index,\n\t\t\tmax : row_max\n\t\t};\n\t}\n\n\t/**\n\t * 行列の各行をベクトルと見立て、線型従属している行を抽出する\n\t * 内部処理用\n\t * @param {number} [epsilon=1.0e-10] - 誤差\n\t * @returns {Array} 行番号の行列(昇順)\n\t */\n\t_get_linear_dependence_vector(epsilon) {\n\t\tconst M = new Matrix(this);\n\t\tconst m = M.matrix_array;\n\t\tconst tolerance = epsilon ? epsilon : 1.0e-10;\n\t\t// 確認する行番号（ここから終わった行は削除していく）\n\t\tconst row_index_array = new Array(this.row_length);\n\t\tfor(let i = 0; i < this.row_length; i++) {\n\t\t\trow_index_array[i] = i;\n\t\t}\n\t\t// ガウスの消去法を使用して、行ベクトルを抽出していく\n\t\tfor(let col_target = 0; col_target < M.column_length; col_target++) {\n\t\t\tlet row_max_index = 0;\n\t\t\t{\n\t\t\t\tlet row_max = 0;\n\t\t\t\tlet row_max_key = 0;\n\t\t\t\t// n列目で絶対値が最も大きな行を取得\n\t\t\t\tfor(const row_key in row_index_array) {\n\t\t\t\t\tconst row = row_index_array[row_key];\n\t\t\t\t\tconst norm = m[row][col_target].norm;\n\t\t\t\t\tif(norm > row_max) {\n\t\t\t\t\t\trow_max = norm;\n\t\t\t\t\t\trow_max_key = row_key;\n\t\t\t\t\t\trow_max_index = row;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 大きいのが0である＝その列は全て0である\n\t\t\t\tif(row_max <= tolerance) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// 大きな値があった行は、リストから除去する\n\t\t\t\trow_index_array.splice(row_max_key, 1);\n\t\t\t\tif(col_target === M.column_length - 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 次の列から、大きな値があった行の成分を削除\n\t\t\tfor(const row_key in row_index_array) {\n\t\t\t\tconst row = row_index_array[row_key];\n\t\t\t\tconst inv = m[row][col_target].div(m[row_max_index][col_target]);\n\t\t\t\tfor(let col = col_target; col < M.column_length; col++) {\n\t\t\t\t\tm[row][col] = m[row][col].sub(m[row_max_index][col].mul(inv));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn row_index_array;\n\t}\n\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// 行列の一般計算\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * 行列のpノルム\n\t * @returns {number}\n\t */\n\tnorm(p) {\n\t\tif(arguments.length === 0) {\n\t\t\treturn this.norm2;\n\t\t}\n\t\tif(p === 1) {\n\t\t\treturn this.norm1;\n\t\t}\n\t\telse if(p === 2) {\n\t\t\treturn this.norm2;\n\t\t}\n\t\telse if((p === Number.POSITIVE_INFINITY) || (p === Number.NEGATIVE_INFINITY)) {\n\t\t\tconst y = this.matrix_array;\n\t\t\tlet compare = p === Number.POSITIVE_INFINITY ? 0 : Number.POSITIVE_INFINITY;\n\t\t\t// 行を固定して列の和を計算\n\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\tlet sum = 0.0;\n\t\t\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\t\t\tsum += y[row][col].norm;\n\t\t\t\t}\n\t\t\t\tif(p === Number.POSITIVE_INFINITY) {\n\t\t\t\t\tcompare = Math.max(compare, sum);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcompare = Math.min(compare, sum);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn compare;\n\t\t}\n\t\tif(this.isVector()) {\n\t\t\t// 一般化ベクトルpノルム\n\t\t\tlet sum = 0.0;\n\t\t\tfor(let i = 0; i < this.length; i++) {\n\t\t\t\tsum = Math.pow(this.getComplex(i).norm, p);\n\t\t\t}\n\t\t\treturn Math.pow(sum, 1.0 / p);\n\t\t}\n\t\t// 未実装\n\t\tthrow \"norm\";\n\t}\n\n\t/**\n\t * A.inner(B) = ドット積（内積）\n\t * @param {Matrix} number \n\t * @param {number} [dimension=1] 計算するときに使用する次元（1 or 2）\n\t * @returns {Matrix}\n\t */\n\tinner(number, dimension) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix.create(number);\n\t\tconst x1 = M1.matrix_array;\n\t\tconst x2 = M2.matrix_array;\n\t\tconst dim = dimension ? dimension : 1;\n\t\tif(M1.isScalar() && M2.isScalar()) {\n\t\t\treturn new Matrix(M1.scalar.dot(M2.scalar));\n\t\t}\n\t\tif(M1.isVector() && M2.isVector()) {\n\t\t\tlet sum = Complex.ZERO;\n\t\t\tfor(let i = 0; i < M1.length; i++) {\n\t\t\t\tsum = sum.add(M1.getComplex(i).dot(M2.getComplex(i)));\n\t\t\t}\n\t\t\treturn new Matrix(sum);\n\t\t}\n\t\tif((M1.row_length !== M2.row_length) || (M1.column_length !== M2.column_length)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\tif(dim === 1) {\n\t\t\tconst y = new Array(1);\n\t\t\ty[0] = new Array(M1.column_length);\n\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\t\tsum = sum.add(x1[row][col].dot(x2[row][col]));\n\t\t\t\t}\n\t\t\t\ty[0][col] = sum;\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\telse if(dim === 2) {\n\t\t\tconst y = new Array(M1.row_length);\n\t\t\tfor(let row = 0; row < M1.row_length; row++) {\n\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\tfor(let col = 0; col < M1.column_length; col++) {\n\t\t\t\t\tsum = sum.add(x1[row][col].dot(x2[row][col]));\n\t\t\t\t}\n\t\t\t\ty[row] = [sum];\n\t\t\t}\n\t\t\treturn new Matrix(y);\n\t\t}\n\t\telse {\n\t\t\tthrow \"dim\";\n\t\t}\n\t}\n\t\n\t/**\n\t * 行列のランク\n\t * @param {number} [epsilon] - 誤差\n\t * @returns {number}\n\t */\n\trank(epsilon) {\n\t\treturn Math.abs(this.row_length, this.column_length) - (this._get_linear_dependence_vector(epsilon)).length;\n\t}\n\n\t/**\n\t * 転置行列\n\t * @returns {Matrix}\n\t */\n\ttranspose() {\n\t\tconst y = new Array(this.column_length);\n\t\tfor(let col = 0; col < this.column_length; col++) {\n\t\t\ty[col] = new Array(this.row_length);\n\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\ty[col][row] = this.matrix_array[row][col];\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * エルミート転置行列\n\t * @returns {Matrix}\n\t */\n\tctranspose() {\n\t\treturn this.transpose().conj();\n\t}\n\n\t/**\n\t * エルミート転置行列\n\t * @returns {Matrix}\n\t */\n\tT() {\n\t\treturn this.ctranspose();\n\t}\n\n\t/**\n\t * A.det() = [A] 行列式\n\t * @returns {Matrix}\n\t */\n\tdet() {\n\t\tif(!this.isSquare()) {\n\t\t\tthrow \"not square\";\n\t\t}\n\t\tconst M = this.matrix_array;\n\t\tconst calcDet = function(x) {\n\t\t\tif(x.length === 2) {\n\t\t\t\t// 2次元の行列式になったら、たすき掛け計算する\n\t\t\t\treturn x[0][0].mul(x[1][1]).sub(x[0][1].mul(x[1][0]));\n\t\t\t}\n\t\t\tlet y = Complex.ZERO;\n\t\t\tfor(let i = 0; i < x.length; i++) {\n\t\t\t\t// N次元の行列式を、N-1次元の行列式に分解していく\n\t\t\t\tconst D = [];\n\t\t\t\tconst a = x[i][0];\n\t\t\t\tfor(let row = 0, D_low = 0; row < x.length; row++) {\n\t\t\t\t\tif(i === row) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tD[D_low] = [];\n\t\t\t\t\tfor(let col = 1, D_col = 0; col < x.length; col++, D_col++) {\n\t\t\t\t\t\tD[D_low][D_col] = x[row][col];\n\t\t\t\t\t}\n\t\t\t\t\tD_low++;\n\t\t\t\t}\n\t\t\t\tif((i % 2) === 0) {\n\t\t\t\t\ty = y.add(a.mul(calcDet(D)));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ty = y.sub(a.mul(calcDet(D)));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn new Matrix(calcDet(M));\n\t}\n\n\t/**\n\t * A.lup() = P'*L*U = A となる P,L,Uを解く\n\t * @returns {Object<string, Matrix>} {P, L, U}\n\t */\n\tlup() {\n\t\tconst L = Matrix.zeros(this.row_length);\n\t\tconst U = new Matrix(this);\n\t\tconst P = Matrix.eye(this.row_length);\n\t\tconst l = L.matrix_array;\n\t\tconst u = U.matrix_array;\n\t\t// ガウスの消去法で連立1次方程式の未知数を求める\n\t\t//前進消去\n\t\tfor(let k = 0; k < this.column_length; k++) {\n\t\t\t// ピポットの選択\n\t\t\tlet pivot;\n\t\t\t{\n\t\t\t\t// k列目で最も大きな行を取得(k列目から調べる)\n\t\t\t\tconst max_row_number = U._max_row_number(k, k);\n\t\t\t\tpivot = max_row_number.index;\n\t\t\t\tif(max_row_number.max === 0.0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t//交換を行う\n\t\t\t\tif(k !== pivot) {\n\t\t\t\t\tL._exchange_row(k, pivot);\n\t\t\t\t\tU._exchange_row(k, pivot);\n\t\t\t\t\tP._exchange_row(k, pivot);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 消去\n\t\t\tfor(let row = k + 1;row < this.row_length; row++) {\n\t\t\t\tconst temp = u[row][k].div(u[k][k]);\n\t\t\t\tl[row][k] = temp;\n\t\t\t\t//lの値だけ行交換が必要？\n\t\t\t\tfor(let col = k; col < this.column_length; col++) {\n\t\t\t\t\tu[row][col] = u[row][col].sub(u[k][col].mul(temp));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tL._resize(this.row_length, Math.min(this.row_length, this.column_length));\n\t\tU._resize(Math.min(this.row_length, this.column_length), this.column_length);\n\t\t// L の対角線に1を代入\n\t\tL._each(function(num, row, col) {\n\t\t\treturn row === col ? Complex.ONE : num;\n\t\t});\n\t\treturn {\n\t\t\tL : L,\n\t\t\tU : U,\n\t\t\tP : P\n\t\t};\n\t}\n\n\t/**\n\t * A.linsolve(B) = Ax = B となる xを解く\n\t * @param {Matrix} number \n\t * @returns {Matrix}\n\t */\n\tlinsolve(number) {\n\t\tif(!this.isSquare()) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\t// 連立一次方程式を解く\n\t\tconst len = this.column_length;\n\t\tconst arg = Matrix.create(number);\n\t\tif((arg.row_length !== this.row_length) || (arg.column_length > 1)) {\n\t\t\tthrow \"Matrix size does not match\";\n\t\t}\n\t\t// 行列を準備する\n\t\tconst M = new Matrix(this);\n\t\tM._concat_left(arg);\n\t\tconst long_matrix_array = M.matrix_array;\n\t\tconst long_length = M.column_length;\n\t\t// ガウスの消去法で連立1次方程式の未知数を求める\n\t\t//前進消去\n\t\tfor(let k = 0; k < (len - 1); k++) {\n\t\t\t//ピポットの選択\n\t\t\t{\n\t\t\t\t// k列目で最も大きな行を取得(k列目から調べる)\n\t\t\t\tconst row_num = M._max_row_number(k, k).index;\n\t\t\t\t//交換を行う\n\t\t\t\tM._exchange_row(k, row_num);\n\t\t\t}\n\t\t\t//ピポットの正規化\n\t\t\t{\n\t\t\t\tconst normalize_value = long_matrix_array[k][k].inv();\n\t\t\t\tfor(let row = k, col = k; col < long_length; col++) {\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].mul(normalize_value);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//消去\n\t\t\tfor(let row = k + 1;row < len; row++) {\n\t\t\t\tconst temp = long_matrix_array[row][k];\n\t\t\t\tfor(let col = k; col < long_length; col++) {\n\t\t\t\t\tlong_matrix_array[row][col] = long_matrix_array[row][col].sub(long_matrix_array[k][col].mul(temp));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//後退代入\n\t\tconst y = new Array(len);\n\t\ty[len - 1] = long_matrix_array[len - 1][len].div(long_matrix_array[len - 1][len - 1]);\n\t\tfor(let row = len - 2; row >= 0; row--) {\n\t\t\ty[row] = long_matrix_array[row][long_length - 1];\n\t\t\tfor(let j = row + 1; j < len; j++) {\n\t\t\t\ty[row] = y[row].sub(long_matrix_array[row][j] * y[j]);\n\t\t\t}\n\t\t\ty[row] = y[row].div(long_matrix_array[row][row]);\n\t\t}\n\t\tconst y2 = new Array(this.row_length);\n\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\ty2[row] = [y[row]];\n\t\t}\n\n\t\treturn new Matrix(y2);\n\t}\n\n\t/**\n\t * {Q, R} = A.qr() QR分解を行う\n\t * @returns {Object<string, Matrix>} {Q, R} Qは正規直行行列、Rは上三角行列\n\t */\n\tqr() {\n\t\t// 行列を準備する\n\t\tconst M = new Matrix(this);\n\t\t// 作成後のQとRのサイズ\n\t\tconst Q_row_length = this.row_length;\n\t\tconst Q_column_length = this.row_length;\n\t\tconst R_row_length = this.row_length;\n\t\tconst R_column_length = this.column_length;\n\t\t// 計算時の行と列のサイズ\n\t\tconst dummy_size = Math.max(this.row_length, this.column_length);\n\t\t// 正方行列にする\n\t\tM._resize(dummy_size, dummy_size);\n\t\t// 正規直行化\n\t\tconst orthogonal_matrix = MatrixTool._gram_schmidt_orthonormalization(M);\n\t\t// 計算したデータを取得\n\t\tconst Q_Matrix = orthogonal_matrix.Q;\n\t\tconst R_Matrix = orthogonal_matrix.R;\n\t\tconst non_orthogonalized = orthogonal_matrix.non_orthogonalized;\n\t\t// Qのサイズを成型する\n\t\tif(non_orthogonalized.length !== 0) {\n\t\t\t// 直行化できていない列があるため直行化できてない列以外を抽出\n\t\t\tconst map = {};\n\t\t\tfor(let i = 0; i < non_orthogonalized.length; i++) {\n\t\t\t\tmap[non_orthogonalized[i]] = 1;\n\t\t\t}\n\t\t\tconst orthogonalized = [];\n\t\t\tfor(let i = 0; i < dummy_size; i++) {\n\t\t\t\tif(map[i]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst array = [];\n\t\t\t\tfor(let j = 0; j < dummy_size; j++) {\n\t\t\t\t\tarray[j] = Q_Matrix.matrix_array[j][i];\n\t\t\t\t}\n\t\t\t\torthogonalized.push(array);\n\t\t\t}\n\t\t\t// 直行ベクトルを作成する\n\t\t\tconst orthogonal_vector = MatrixTool._createOrthogonalVector(new Matrix(orthogonalized));\n\t\t\t// 直行化できていない列を差し替える\n\t\t\tfor(let i = 0; i < non_orthogonalized.length; i++) {\n\t\t\t\tconst q_col = non_orthogonalized[i];\n\t\t\t\tfor(let j = 0; j < dummy_size; j++) {\n\t\t\t\t\tQ_Matrix.matrix_array[j][q_col] = orthogonal_vector.matrix_array[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tQ_Matrix._resize(Q_row_length, Q_column_length);\n\t\t// Rのサイズを成形する\n\t\tR_Matrix._resize(R_row_length, R_column_length);\n\t\treturn {\n\t\t\tQ : Q_Matrix,\n\t\t\tR : R_Matrix\n\t\t};\n\t}\n\n\t/**\n\t * {P, H} = A.tridiagonalize() 対称行列の三重対角化する P*H*P'=A\n\t * @returns {Object<string, Matrix>} {P, H} Hは三重対角行列、Pは正規直行行列。三重対角行列の固有値は元の行列と一致する。\n\t */\n\ttridiagonalize() {\n\t\tif(!this.isSquare()) {\n\t\t\tthrow \"not square matrix\";\n\t\t}\n\t\tif(!this.isSymmetric()) {\n\t\t\tthrow \"not Symmetric\";\n\t\t}\n\t\tif(this.isComplex()) {\n\t\t\tthrow \"not Real Matrix\";\n\t\t}\n\t\treturn MatrixTool.tridiagonalize(this);\n\t}\n\n\t/**\n\t * {V, D} = A.eig() 対称行列の固有値分解 V*D*V'=A\n\t * @returns {Object<string, Matrix>} {V, D} Vは右固有ベクトルを列にもつ行列で正規直行行列、Dは固有値を対角成分に持つ行列\n\t */\n\teig() {\n\t\tif(!this.isSquare()) {\n\t\t\tthrow \"not square matrix\";\n\t\t}\n\t\tif(!this.isSymmetric()) {\n\t\t\tthrow \"not Symmetric\";\n\t\t}\n\t\tif(this.isComplex()) {\n\t\t\tthrow \"not Real Matrix\";\n\t\t}\n\t\treturn MatrixTool.eig(this);\n\t}\n\n\t/**\n\t * {U, S, V} = A.svd() 特異値分解 U*S*V' = A\n\t * @returns {Object<string, Matrix>} {U,S,V}\n\t */\n\tsvd() {\n\t\tif(this.isComplex()) {\n\t\t\t// 複素数が入っている場合は、eig関数が使用できないので非対応\n\t\t\tthrow \"Unimplemented\";\n\t\t}\n\t\tconst rank = this.rank();\n\t\t// SVD分解\n\t\t// 参考：Gilbert Strang (2007). Computational Science and Engineering.\n\t\tconst VD = this.T().mul(this).eig();\n\t\tconst sigma = Matrix.zeros(this.row_length, this.column_length);\n\t\tsigma._each(function(num, row, col) {\n\t\t\tif((row === col) && (row < rank)) {\n\t\t\t\treturn VD.D.getComplex(row, row).sqrt();\n\t\t\t}\n\t\t});\n\t\tconst sing = Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\tif(row === col) {\n\t\t\t\treturn sigma.matrix_array[row][row].inv();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Complex.ZERO;\n\t\t\t}\n\t\t}, rank);\n\t\tconst V_rank = (new Matrix(VD.V))._resize(VD.V.row_length, rank);\n\t\tconst u = this.mul(V_rank).mul(sing);\n\t\tconst QR = u.qr();\n\t\treturn {\n\t\t\tU : QR.Q,\n\t\t\tS : sigma,\n\t\t\tV : VD.V\n\t\t};\n\t}\n\n\t/**\n\t * A.pinv() 疑似逆行列\n\t * @returns {Matrix}\n\t */\n\tpinv() {\n\t\tconst USV = this.svd();\n\t\tconst U = USV.U;\n\t\tconst S = USV.S;\n\t\tconst V = USV.V;\n\t\tconst sing = Matrix.createMatrixDoEachCalculation(function(row, col) {\n\t\t\tif(row === col) {\n\t\t\t\tconst x = S.matrix_array[row][row];\n\t\t\t\tif(x.isZero()) {\n\t\t\t\t\treturn Complex.ZERO;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn x.inv();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Complex.ZERO;\n\t\t\t}\n\t\t}, this.column_length, this.row_length);\n\t\treturn V.mul(sing).mul(U.T());\n\t}\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// statistics 統計計算用\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t// TODO 平均や分散など統計でよく利用するものを作る\n\n\t/**\n\t * x.gammaln() = gammaln(x) 対数ガンマ関数\n\t * @returns {Matrix}\n\t */\n\tgammaln() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gammaln();\n\t\t});\n\t}\n\n\t/**\n\t * z.gamma() = gamma(z) ガンマ関数\n\t * @returns {Matrix}\n\t */\n\tgamma() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gamma();\n\t\t});\n\t}\n\n\t/**\n\t * x.gammainc(a, tail) = gammainc(x, a, tail) 不完全ガンマ関数\n\t * @param {Matrix} a\n\t * @param {string} [tail=\"lower\"] - lower/upper\n\t * @returns {Matrix}\n\t */\n\tgammainc(a, tail) {\n\t\tconst a_ = Matrix.create(a).scalar;\n\t\tconst tail_ = arguments.length === 1 ? tail : \"lower\";\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gammainc(a_, tail_);\n\t\t});\n\t}\n\n\t/**\n\t * x.gampdf(k, s) = gampdf(x, k, s) ガンマ分布の確率密度関数\n\t * @param {Matrix} k - 形状母数\n\t * @param {Matrix} s - 尺度母数\n\t * @returns {Matrix}\n\t */\n\tgampdf(k, s) {\n\t\tconst k_ = Matrix.create(k).scalar;\n\t\tconst s_ = Matrix.create(s).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gampdf(k_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * x.gamcdf(k, s) = gamcdf(x, k, s) ガンマ分布の確率密度関数\n\t * @param {Matrix} k - 形状母数\n\t * @param {Matrix} s - 尺度母数\n\t * @returns {Matrix}\n\t */\n\tgamcdf(k, s) {\n\t\tconst k_ = Matrix.create(k).scalar;\n\t\tconst s_ = Matrix.create(s).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gamcdf(k_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * p.gaminv(k, s) = gaminv(p, k, s) ガンマ分布の累積分布関数の逆関数\n\t * @param {Matrix} k - 形状母数\n\t * @param {Matrix} s - 尺度母数\n\t * @returns {Matrix}\n\t */\n\tgaminv(k, s) {\n\t\tconst k_ = Matrix.create(k).scalar;\n\t\tconst s_ = Matrix.create(s).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.gaminv(k_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * x.beta(y) = beta(x, y) ベータ関数\n\t * @param {Matrix} y\n\t * @returns {Matrix}\n\t */\n\tbeta(y) {\n\t\tconst y_ = Matrix.create(y).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.beta(y_);\n\t\t});\n\t}\n\t\n\t/**\n\t * x.betainc(a, b, tail) = betainc(x, a, b, tail) 不完全ベータ関数\n\t * @param {Matrix} a\n\t * @param {Matrix} b\n\t * @param {string} [tail=\"lower\"] - lower/upper\n\t * @returns {Matrix}\n\t */\n\tbetainc(a, b, tail) {\n\t\tconst a_ = Matrix.create(a).scalar;\n\t\tconst b_ = Matrix.create(b).scalar;\n\t\tconst tail_ = arguments.length === 2 ? tail : \"lower\";\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.betainc(a_, b_, tail_);\n\t\t});\n\t}\n\n\t/**\n\t * x.betacdf(a, b) = betacdf(x, a, b) ベータ分布の確率密度関数\n\t * @param {Matrix} a\n\t * @param {Matrix} b\n\t * @returns {Matrix}\n\t */\n\tbetacdf(a, b) {\n\t\tconst a_ = Matrix.create(a).scalar;\n\t\tconst b_ = Matrix.create(b).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.betacdf(a_, b_);\n\t\t});\n\t}\n\n\t/**\n\t * x.betapdf(a, b) = betapdf(x, a, b) ベータ分布の累積分布関数\n\t * @param {Matrix} a\n\t * @param {Matrix} b\n\t * @returns {Matrix}\n\t */\n\tbetapdf(a, b) {\n\t\tconst a_ = Matrix.create(a).scalar;\n\t\tconst b_ = Matrix.create(b).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.betapdf(a_, b_);\n\t\t});\n\t}\n\n\t/**\n\t * p.betainv(a, b) = betainv(p, a, b) ベータ分布の累積分布関数の逆関数\n\t * @param {Matrix} a\n\t * @param {Matrix} b\n\t * @returns {Matrix}\n\t */\n\tbetainv(a, b) {\n\t\tconst a_ = Matrix.create(a).scalar;\n\t\tconst b_ = Matrix.create(b).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.betainv(a_, b_);\n\t\t});\n\t}\n\n\t/**\n\t * x.factorial() = factorial(x), x! 階乗関数\n\t * @returns {Matrix}\n\t */\n\tfactorial() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.factorial();\n\t\t});\n\t}\n\t\n\t/**\n\t * n.nchoosek(k) = nchoosek(n, k), nCk 二項係数またはすべての組合わせ\n\t * @param {Matrix} k\n\t * @returns {Matrix}\n\t */\n\tnchoosek(k) {\n\t\tconst k_ = Matrix.create(k).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.nchoosek(k_);\n\t\t});\n\t}\n\t\n\t/**\n\t * x.erf() = erf(x) 誤差関数\n\t * @returns {Matrix}\n\t */\n\terf() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.erf();\n\t\t});\n\t}\n\n\t/**\n\t * x.erfc() = erfc(x) 相補誤差関数\n\t * @returns {Matrix}\n\t */\n\terfc() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.erfc();\n\t\t});\n\t}\n\t\n\t/**\n\t * x.normpdf(u, s) = normpdf(x, u, s) 正規分布の確率密度関数\n\t * @param {number} [u=0.0] - 平均値\n\t * @param {number} [s=1.0] - 分散\n\t * @returns {Matrix}\n\t */\n\tnormpdf(u, s) {\n\t\tconst u_ = arguments.length <= 0 ? Complex.create(u).scalar : Complex.ZERO;\n\t\tconst s_ = arguments.length <= 1 ? Complex.create(s).scalar : Complex.ONE;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.normpdf(u_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * x.normcdf(u, s) = normcdf(x, u, s) 正規分布の累積分布関数\n\t * @param {number} [u=0.0] - 平均値\n\t * @param {number} [s=1.0] - 分散\n\t * @returns {Matrix}\n\t */\n\tnormcdf(u, s) {\n\t\tconst u_ = arguments.length <= 0 ? Complex.create(u).scalar : Complex.ZERO;\n\t\tconst s_ = arguments.length <= 1 ? Complex.create(s).scalar : Complex.ONE;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.normcdf(u_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * x.norminv(u, s) = norminv(x, u, s) 正規分布の累積分布関数の逆関数\n\t * @param {number} [u=0.0] - 平均値\n\t * @param {number} [s=1.0] - 分散\n\t * @returns {Matrix}\n\t */\n\tnorminv(u, s) {\n\t\tconst u_ = arguments.length <= 0 ? Complex.create(u).scalar : Complex.ZERO;\n\t\tconst s_ = arguments.length <= 1 ? Complex.create(s).scalar : Complex.ONE;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.norminv(u_, s_);\n\t\t});\n\t}\n\n\t/**\n\t * t.tpdf(v) = tpdf(t, v) t分布の確率密度関数\n\t * @param {Matrix} v - 自由度\n\t * @returns {Matrix}\n\t */\n\ttpdf(v) {\n\t\tconst v_ = Matrix.create(v).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tpdf(v_);\n\t\t});\n\t}\n\n\t/**\n\t * t.tcdf(v) = tcdf(t, v) t分布の累積分布関数\n\t * @param {Matrix} v - 自由度\n\t * @returns {Matrix}\n\t */\n\ttcdf(v) {\n\t\tconst v_ = Matrix.create(v).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tcdf(v_);\n\t\t});\n\t}\n\n\t/**\n\t * p.tinv(v) = tinv(p, v) t分布の累積分布関数の逆関数\n\t * @param {Matrix} v - 自由度\n\t * @returns {Matrix}\n\t */\n\ttinv(v) {\n\t\tconst v_ = Matrix.create(v).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tinv(v_);\n\t\t});\n\t}\n\n\t/**\n\t * t.tdist(v, tails) = tdist(t, v, tails) 尾部が指定可能なt分布の累積分布関数\n\t * @param {Matrix} v - 自由度\n\t * @param {Matrix} tails - 尾部(1...片側、2...両側)\n\t * @returns {Matrix}\n\t */\n\ttdist(v, tails) {\n\t\tconst v_ = Matrix.create(v).scalar;\n\t\tconst tails_ = Matrix.create(tails).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tdist(v_, tails_);\n\t\t});\n\t}\n\n\t/**\n\t * p.tinv2(v) = tinv2(p, v) 両側検定時のt分布の累積分布関数\n\t * @param {Matrix} v - 自由度\n\t * @returns {Matrix}\n\t */\n\ttinv2(v) {\n\t\tconst v_ = Matrix.create(v).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.tinv2(v_);\n\t\t});\n\t}\n\n\t/**\n\t * x.chi2pdf(k) = chi2pdf(x, k) カイ二乗分布の確率密度関数\n\t * @param {Matrix} k - 自由度\n\t * @returns {Matrix}\n\t */\n\tchi2pdf(k) {\n\t\tconst k_ = Matrix.create(k).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.chi2pdf(k_);\n\t\t});\n\t}\n\n\t/**\n\t * x.chi2cdf(k) = chi2cdf(x, k) カイ二乗分布の累積分布関数\n\t * @param {Matrix} k - 自由度\n\t * @returns {Matrix}\n\t */\n\tchi2cdf(k) {\n\t\tconst k_ = Matrix.create(k).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.chi2cdf(k_);\n\t\t});\n\t}\n\t\n\t/**\n\t * p.chi2inv(k) = chi2inv(p, k) カイ二乗分布の累積分布関数の逆関数\n\t * @param {Matrix} k - 自由度\n\t * @returns {Matrix}\n\t */\n\tchi2inv(k) {\n\t\tconst k_ = Matrix.create(k).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.chi2inv(k_);\n\t\t});\n\t}\n\n\t/**\n\t * x.fpdf(d1, d2) = fpdf(x, d1, d2) F分布の確率密度関数\n\t * @param {Matrix} d1 - 分子の自由度\n\t * @param {Matrix} d2 - 分母の自由度\n\t * @returns {Matrix}\n\t */\n\tfpdf(d1, d2) {\n\t\tconst d1_ = Matrix.create(d1).scalar;\n\t\tconst d2_ = Matrix.create(d2).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.fpdf(d1_, d2_);\n\t\t});\n\t}\n\n\t/**\n\t * x.fcdf(d1, d2) = fcdf(x, d1, d2) F分布の累積分布関数\n\t * @param {Matrix} d1 - 分子の自由度\n\t * @param {Matrix} d2 - 分母の自由度\n\t * @returns {Matrix}\n\t */\n\tfcdf(d1, d2) {\n\t\tconst d1_ = Matrix.create(d1).scalar;\n\t\tconst d2_ = Matrix.create(d2).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.fcdf(d1_, d2_);\n\t\t});\n\t}\n\n\t/**\n\t * p.finv(d1, d2) = finv(p, d1, d2) F分布の累積分布関数の逆関数\n\t * @param {Matrix} d1 - 分子の自由度\n\t * @param {Matrix} d2 - 分母の自由度\n\t * @returns {Matrix}\n\t */\n\tfinv(d1, d2) {\n\t\tconst d1_ = Matrix.create(d1).scalar;\n\t\tconst d2_ = Matrix.create(d2).scalar;\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.finv(d1_, d2_);\n\t\t});\n\t}\n\t\n\t/**\n\t * A.sum() 合計\n\t * @returns {Matrix}\n\t */\n\tsum() {\n\t\tconst main = function(data) {\n\t\t\t// カハンの加算アルゴリズム\n\t\t\tlet sum = Complex.ZERO;\n\t\t\tlet delta = Complex.ZERO;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst new_number = data[i].add(delta);\n\t\t\t\tconst new_sum = sum.add(new_number);\n\t\t\t\tdelta = new_sum.sub(sum).sub(new_number);\n\t\t\t\tsum = new_sum;\n\t\t\t}\n\t\t\treturn [sum];\n\t\t};\n\t\treturn this.__column_oriented_1_dimensional_processing(main);\n\t}\n\n\t/**\n\t * A.mean() 相加平均\n\t * @returns {Matrix}\n\t */\n\tmean() {\n\t\tconst main = function(data) {\n\t\t\t// カハンの加算アルゴリズム\n\t\t\tlet sum = Complex.ZERO;\n\t\t\tlet delta = Complex.ZERO;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst new_number = data[i].add(delta);\n\t\t\t\tconst new_sum = sum.add(new_number);\n\t\t\t\tdelta = new_sum.sub(sum).sub(new_number);\n\t\t\t\tsum = new_sum;\n\t\t\t}\n\t\t\treturn [sum.div(data.length)];\n\t\t};\n\t\treturn this.__column_oriented_1_dimensional_processing(main);\n\t}\n\n\t/**\n\t * A.geomean() 相乗平均／幾何平均\n\t * @returns {Matrix}\n\t */\n\tgeomean() {\n\t\tconst main = function(data) {\n\t\t\tlet x = Complex.ONE;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tx = x.mul(data[i]);\n\t\t\t}\n\t\t\treturn [x.sqrt()];\n\t\t};\n\t\treturn this.__column_oriented_1_dimensional_processing(main);\n\t}\n\n\t/**\n\t * A.var() 分散\n\t * @param {Matrix} [cor=0] - 補正値 0(不偏分散), 1(標本分散)\n\t * @returns {Matrix}\n\t */\n\tvar(cor) {\n\t\tconst M = this.mean();\n\t\tlet col = 0;\n\t\tconst correction = arguments.length === 0 ? 0 : Matrix.create(cor).doubleValue;\n\t\tconst main = function(data) {\n\t\t\tlet mean;\n\t\t\tif(M.isScalar()) {\n\t\t\t\tmean = M.scalar;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmean = M.getComplex(col++);\n\t\t\t}\n\t\t\tlet x = Complex.ZERO;\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\tconst a = data[i].sub(mean);\n\t\t\t\tx = x.add(a.dot(a));\n\t\t\t}\n\t\t\tif(data.length === 1) {\n\t\t\t\treturn [x.div(data.length)];\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn [x.div(data.length - 1 + correction)];\n\t\t\t}\n\t\t};\n\t\treturn this.__column_oriented_1_dimensional_processing(main);\n\t}\n\n\t/**\n\t * A.std() 標準偏差\n\t * @param {Matrix} [cor=0] - 補正値 0(不偏), 1(標本)\n\t * @returns {Matrix}\n\t */\n\tstd(cor) {\n\t\tconst correction = arguments.length === 0 ? 0 : Matrix.create(cor).doubleValue;\n\t\tconst M = this.var(correction);\n\t\tM._each(function(num) {\n\t\t\treturn num.sqrt();\n\t\t});\n\t\treturn M;\n\t}\n\n\t/**\n\t * A.cov() 共分散行列\n\t * @param {Matrix} [cor=0] - 補正値 0(不偏分散), 1(標本分散)\n\t * @returns {Matrix}\n\t */\n\tcov(cor) {\n\t\tlet correction = arguments.length === 0 ? 0 : Matrix.create(cor).doubleValue;\n\t\tif(this.isVector()) {\n\t\t\treturn this.var(correction);\n\t\t}\n\t\tcorrection = this.row_length === 1 ? 1 : correction;\n\t\tconst x = this.matrix_array;\n\t\tconst mean = this.mean().matrix_array[0];\n\t\t// 上三角行列、対角行列\n\t\tconst y = new Array(this.column_length);\n\t\tfor(let a = 0; a < this.column_length; a++) {\n\t\t\tconst a_mean = mean[a];\n\t\t\ty[a] = new Array(this.column_length);\n\t\t\tfor(let b = a; b < this.column_length; b++) {\n\t\t\t\tconst b_mean = mean[b];\n\t\t\t\tlet sum = Complex.ZERO;\n\t\t\t\tfor(let row = 0; row < this.row_length; row++) {\n\t\t\t\t\tsum = sum.add((x[row][a].sub(a_mean)).dot(x[row][b].sub(b_mean)));\n\t\t\t\t}\n\t\t\t\ty[a][b] = sum.div(this.row_length - 1 + correction);\n\t\t\t}\n\t\t}\n\t\t// 下三角行列を作る\n\t\tfor(let row = 1; row < y[0].length; row++) {\n\t\t\tfor(let col = 0; col < row; col++) {\n\t\t\t\ty[row][col] = y[col][row];\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(y);\n\t}\n\n\t/**\n\t * A.normalize() サンプルを平均値0、標準偏差1にノーマライズ\n\t * @returns {Matrix}\n\t */\n\tnormalize() {\n\t\tconst mean_zero = this.sub(this.mean());\n\t\tconst std_one = mean_zero.ndiv(mean_zero.std());\n\t\treturn std_one;\n\t}\n\n\t/**\n\t * A.corrcoef() 相関行列\n\t * @returns {Matrix}\n\t */\n\tcorrcoef() {\n\t\treturn this.normalize().cov();\n\t}\n\n\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\t// signal 信号処理用\n\t// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆\n\n\t/**\n\t * 各項に sinc()\n\t * @returns {Matrix}\n\t */\n\tsinc() {\n\t\treturn this.cloneMatrixDoEachCalculation(function(num) {\n\t\t\treturn num.sinc();\n\t\t});\n\t}\n\n\t/**\n\t * A.fft() 離散フーリエ変換\n\t * @returns {Matrix}\n\t */\n\tfft(is_2_dimensions = false) {\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tconst imag = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t\timag[i] = data[i].imag;\n\t\t\t}\n\t\t\tconst result = Signal.fft(real, imag);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex([result.real[i], result.imag[i]]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn is_2_dimensions ? this.__column_oriented_2_dimensional_processing(main) : this.__column_oriented_1_dimensional_processing(main);\n\t}\n\n\t/**\n\t * A.ifft() 逆離散フーリエ変換\n\t * @returns {Matrix}\n\t */\n\tifft(is_2_dimensions = false) {\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tconst imag = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t\timag[i] = data[i].imag;\n\t\t\t}\n\t\t\tconst result = Signal.ifft(real, imag);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex([result.real[i], result.imag[i]]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn is_2_dimensions ? this.__column_oriented_2_dimensional_processing(main) : this.__column_oriented_1_dimensional_processing(main);\n\t}\n\n\t/**\n\t * A.powerfft() パワースペクトル密度\n\t * @returns {Matrix}\n\t */\n\tpowerfft() {\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tconst imag = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t\timag[i] = data[i].imag;\n\t\t\t}\n\t\t\tconst result = Signal.powerfft(real, imag);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex([result.real[i], result.imag[i]]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn this.__column_oriented_1_dimensional_processing(main);\n\t}\n\n\t/**\n\t * A.dct() DCT-II (DCT)\n\t * @returns {Matrix}\n\t */\n\tdct(is_2_dimensions = false) {\n\t\tif(this.isComplex()) {\n\t\t\tthrow \"dct don't support complex numbers.\";\n\t\t}\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t}\n\t\t\tconst result = Signal.dct(real);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex(result[i]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn is_2_dimensions ? this.__column_oriented_2_dimensional_processing(main) : this.__column_oriented_1_dimensional_processing(main);\n\t}\n\n\t/**\n\t * A.idct() DCT-III (IDCT)\n\t * @returns {Matrix}\n\t */\n\tidct(is_2_dimensions = false) {\n\t\tif(this.isComplex()) {\n\t\t\tthrow \"idct don't support complex numbers.\";\n\t\t}\n\t\tconst main = function(data) {\n\t\t\tconst real = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\treal[i] = data[i].real;\n\t\t\t}\n\t\t\tconst result = Signal.idct(real);\n\t\t\tconst y = new Array(data.length);\n\t\t\tfor(let i = 0; i < data.length; i++) {\n\t\t\t\ty[i] = new Complex(result[i]);\n\t\t\t}\n\t\t\treturn y;\n\t\t};\n\t\treturn is_2_dimensions ? this.__column_oriented_2_dimensional_processing(main) : this.__column_oriented_1_dimensional_processing(main);\n\t}\n\n\t/**\n\t * A.fft2() 2次元の離散フーリエ変換\n\t * @returns {Matrix}\n\t */\n\tfft2() {\n\t\treturn this.fft(true);\n\t}\n\n\t/**\n\t * A.ifft2() 2次元の逆離散フーリエ変換\n\t * @returns {Matrix}\n\t */\n\tifft2() {\n\t\treturn this.ifft(true);\n\t}\n\n\t/**\n\t * A.dct2() 2次元のDCT変換\n\t * @returns {Matrix}\n\t */\n\tdct2() {\n\t\treturn this.dct2(true);\n\t}\n\n\t/**\n\t * A.idct2() 2次元の逆DCT変換\n\t * @returns {Matrix}\n\t */\n\tidct2() {\n\t\treturn this.idct(true);\n\t}\n\n\t/**\n\t * A.conv(B) = conv(A, B) 畳み込み積分、多項式乗算\n\t * @param {Matrix} number\n\t * @returns {Matrix}\n\t */\n\tconv(number) {\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix.create(number);\n\t\tif(M1.isMatrix() || M2.isMatrix()) {\n\t\t\tthrow \"conv don't support matrix numbers.\";\n\t\t}\n\t\tconst M1_real = new Array(M1.length);\n\t\tconst M1_imag = new Array(M1.length);\n\t\tconst M2_real = new Array(M2.length);\n\t\tconst M2_imag = new Array(M2.length);\n\t\tif(M1.isRow()) {\n\t\t\tfor(let i = 0; i < M1.column_length; i++) {\n\t\t\t\tM1_real[i] = M1.matrix_array[0][i].real;\n\t\t\t\tM1_imag[i] = M1.matrix_array[0][i].imag;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor(let i = 0; i < M1.row_length; i++) {\n\t\t\t\tM1_real[i] = M1.matrix_array[i][0].real;\n\t\t\t\tM1_imag[i] = M1.matrix_array[i][0].imag;\n\t\t\t}\n\t\t}\n\t\tif(M2.isRow()) {\n\t\t\tfor(let i = 0; i < M2.column_length; i++) {\n\t\t\t\tM2_real[i] = M2.matrix_array[0][i].real;\n\t\t\t\tM2_imag[i] = M2.matrix_array[0][i].imag;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor(let i = 0; i < M2.row_length; i++) {\n\t\t\t\tM2_real[i] = M2.matrix_array[i][0].real;\n\t\t\t\tM2_imag[i] = M2.matrix_array[i][0].imag;\n\t\t\t}\n\t\t}\n\t\tconst y = Signal.conv(M1_real, M1_imag, M2_real, M2_imag);\n\t\tconst m = new Array(y.real.length);\n\t\tfor(let i = 0; i < y.real.length; i++) {\n\t\t\tm[i] = new Complex([y.real[i], y.imag[i]]);\n\t\t}\n\t\tconst M = new Matrix([m]);\n\t\treturn M2.isRow() ? M : M.transpose();\n\t}\n\n\t/**\n\t * A.xcorr(B) = xcorr(A, B) 自己相関関数、相互相関関数\n\t * @param {Matrix} [number=this] - 省略した場合は自己相関関数\n\t * @returns {Matrix}\n\t */\n\txcorr(number) {\n\t\tif(!number) {\n\t\t\treturn this.xcorr(this);\n\t\t}\n\t\tconst M1 = this;\n\t\tconst M2 = Matrix.create(number);\n\t\tif(M1.isMatrix() || M2.isMatrix()) {\n\t\t\tthrow \"conv don't support matrix numbers.\";\n\t\t}\n\t\tconst M1_real = new Array(M1.length);\n\t\tconst M1_imag = new Array(M1.length);\n\t\tconst M2_real = new Array(M2.length);\n\t\tconst M2_imag = new Array(M2.length);\n\t\tif(M1.isRow()) {\n\t\t\tfor(let i = 0; i < M1.column_length; i++) {\n\t\t\t\tM1_real[i] = M1.matrix_array[0][i].real;\n\t\t\t\tM1_imag[i] = M1.matrix_array[0][i].imag;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor(let i = 0; i < M1.row_length; i++) {\n\t\t\t\tM1_real[i] = M1.matrix_array[i][0].real;\n\t\t\t\tM1_imag[i] = M1.matrix_array[i][0].imag;\n\t\t\t}\n\t\t}\n\t\tif(M2.isRow()) {\n\t\t\tfor(let i = 0; i < M2.column_length; i++) {\n\t\t\t\tM2_real[i] = M2.matrix_array[0][i].real;\n\t\t\t\tM2_imag[i] = M2.matrix_array[0][i].imag;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor(let i = 0; i < M2.row_length; i++) {\n\t\t\t\tM2_real[i] = M2.matrix_array[i][0].real;\n\t\t\t\tM2_imag[i] = M2.matrix_array[i][0].imag;\n\t\t\t}\n\t\t}\n\t\tconst y = Signal.xcorr(M1_real, M1_imag, M2_real, M2_imag);\n\t\tconst m = new Array(y.real.length);\n\t\tfor(let i = 0; i < y.real.length; i++) {\n\t\t\tm[i] = new Complex([y.real[i], y.imag[i]]);\n\t\t}\n\t\tconst M = new Matrix([m]);\n\t\treturn M1.isRow() ? M : M.transpose();\n\t}\n\n\t/**\n\t * 窓関数\n\t * @param {string} name - 窓関数の名前\n\t * @param {Matrix} size - 長さ\n\t * @param {boolean} [isPeriodic] - true なら periodic, false なら symmetric\n\t * @returns {Matrix} 列ベクトル\n\t */\n\tstatic window(name, size, isPeriodic) {\n\t\tconst size_ = Matrix.create(size).intValue;\n\t\tconst y = Signal.window(name, size_, isPeriodic);\n\t\treturn (new Matrix(y)).transpose();\n\t}\n\n\t/**\n\t * ハニング窓\n\t * @param {Matrix} size - 長さ\n\t * @param {boolean} [isPeriodic] - true なら periodic, false なら symmetric\n\t * @returns {Matrix} 列ベクトル\n\t */\n\tstatic hann(size, isPeriodic) {\n\t\treturn Matrix.window(\"hann\", size, isPeriodic);\n\t}\n\t\n\t/**\n\t * ハミング窓\n\t * @param {Matrix} size - 長さ\n\t * @param {boolean} [isPeriodic] - true なら periodic, false なら symmetric\n\t * @returns {Matrix} 列ベクトル\n\t */\n\tstatic hamming(size, isPeriodic) {\n\t\treturn Matrix.window(\"hamming\", size, isPeriodic);\n\t}\n\t\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/Math/Matrix.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 359,
    "kind": "class",
    "name": "MatrixTool",
    "memberof": "src/Math/Matrix.mjs",
    "static": true,
    "longname": "src/Math/Matrix.mjs~MatrixTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/Math/Matrix.mjs",
    "importStyle": null,
    "description": "内部の行列の計算用",
    "lineNumber": 18,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 360,
    "kind": "method",
    "name": "tridiagonalize",
    "memberof": "src/Math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Matrix.mjs~MatrixTool.tridiagonalize",
    "access": "public",
    "description": "対称行列の三重対角化する（実数計算専用）",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Matrix>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "M",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Matrix>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "eig",
    "memberof": "src/Math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Matrix.mjs~MatrixTool.eig",
    "access": "public",
    "description": "対称行列の固有値分解する（実数計算専用）",
    "lineNumber": 176,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Matrix>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "M",
        "description": "対称行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Matrix>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "_gram_schmidt_orthonormalization",
    "memberof": "src/Math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Matrix.mjs~MatrixTool._gram_schmidt_orthonormalization",
    "access": "private",
    "description": "行列をベクトルと見立て、正規直行化し、QとRの行列を作る",
    "lineNumber": 302,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Matrix>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "M_",
        "description": "正方行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Matrix>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "_createOrthogonalVector",
    "memberof": "src/Math/Matrix.mjs~MatrixTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Matrix.mjs~MatrixTool._createOrthogonalVector",
    "access": "private",
    "description": "行列の全行ベクトルに対して、直行したベクトルを作成する",
    "lineNumber": 371,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 直行したベクトルがなければNULLを返す"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "M_",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0e-10",
        "defaultRaw": 1e-10,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "直行したベクトルがなければNULLを返す"
    }
  },
  {
    "__docId__": 364,
    "kind": "variable",
    "name": "ConstructorTool",
    "memberof": "src/Math/Matrix.mjs",
    "static": true,
    "longname": "src/Math/Matrix.mjs~ConstructorTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/Math/Matrix.mjs",
    "importStyle": null,
    "description": "コンストラクタ用の関数群",
    "lineNumber": 432,
    "type": {
      "types": [
        "{\"match2\": *, \"trimBracket\": *, \"toMatrixFromStringForArrayJSON\": *, \"InterpolationCalculation\": *, \"toArrayFromString\": *, \"toMatrixFromStringForArrayETC\": *, \"toMatrixFromStringForArray\": *, \"toMatrixFromString\": *, \"isCorrectMatrixArray\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 365,
    "kind": "class",
    "name": "Matrix",
    "memberof": "src/Math/Matrix.mjs",
    "static": true,
    "longname": "src/Math/Matrix.mjs~Matrix",
    "access": "public",
    "export": true,
    "importPath": "konpeito.js/src/Math/Matrix.mjs",
    "importStyle": "Matrix",
    "description": "複素行列クラス (immutable)",
    "lineNumber": 673,
    "interface": false
  },
  {
    "__docId__": 366,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#constructor",
    "access": "public",
    "description": "複素行列を作成\n引数は次のタイプをとれます\n・4 \t\t\t\t整数や実数\n・\"1 + j\"\t\t文字列で複素数をわたす\n・[1,2]\t\t\t1次元配列\n・[[1,2],[3,4]]\t行列\n・[\"1+j\", \"2+j\"]\t複素数を含んだ行列\n・\"[1 1:0.5:3]\"\t\tMATLAB/Octave/Scilab互換",
    "lineNumber": 686,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "number",
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "行列データ( \"1 + j\", [1 , 1] など)"
      }
    ]
  },
  {
    "__docId__": 367,
    "kind": "member",
    "name": "matrix_array",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#matrix_array",
    "access": "private",
    "description": "行列を構成する配列",
    "lineNumber": 795,
    "type": {
      "nullable": null,
      "types": [
        "Array<Array<number>>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 368,
    "kind": "member",
    "name": "row_length",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#row_length",
    "access": "private",
    "description": "行数",
    "lineNumber": 802,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 369,
    "kind": "member",
    "name": "column_length",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#column_length",
    "access": "private",
    "description": "列数",
    "lineNumber": 809,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 370,
    "kind": "member",
    "name": "string_cash",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#string_cash",
    "access": "private",
    "description": "文字列化に使用するキャッシュ",
    "lineNumber": 816,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "clone",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#clone",
    "access": "public",
    "description": "複製",
    "lineNumber": 823,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#toString",
    "access": "public",
    "description": "文字列化",
    "lineNumber": 831,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "equals",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#equals",
    "access": "public",
    "description": "A.equals(B) = A === B",
    "lineNumber": 931,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A === B"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A === B"
    }
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "getNumberMatrixArray",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#getNumberMatrixArray",
    "access": "public",
    "description": "行列を構成する複素数の実数のみを抽出し、JavaScriptで扱える配列を作成する",
    "lineNumber": 956,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} JavaScriptで扱える実数の配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "JavaScriptで扱える実数の配列"
    },
    "params": []
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "getComplexMatrixArray",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#getComplexMatrixArray",
    "access": "public",
    "description": "行列を構成するComplex型で構成された配列を作成する",
    "lineNumber": 971,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} 行列のComplex配列を返します"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "行列のComplex配列を返します"
    },
    "params": []
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "create",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Matrix.mjs~Matrix.create",
    "access": "public",
    "description": "任意の引数データを使用して行列を作成（引数によっては行列オブジェクトを新規作成する）",
    "lineNumber": 987,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "_clearCash",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#_clearCash",
    "access": "private",
    "description": "キャッシュを削除する",
    "lineNumber": 999,
    "params": [],
    "return": null
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "_each",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#_each",
    "access": "private",
    "description": "行列内の全ての値に処理を加えます。ミュータブルです。\n内部処理用",
    "lineNumber": 1011,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(num: Complex, row: number, col: number): ?Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "eachfunc",
        "description": "Function(num, row, col)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "createMatrixDoEachCalculation",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Matrix.mjs~Matrix.createMatrixDoEachCalculation",
    "access": "public",
    "description": "行列内の各値に対して指定した初期化を行った行列オブジェクトを新規作成する",
    "lineNumber": 1045,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(num: Complex, row: number, col: number): ?Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "eachfunc",
        "description": "Function(row, col)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "次元数"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "dimension",
        "defaultRaw": "dimension",
        "name": "column_length",
        "description": "列数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "cloneMatrixDoEachCalculation",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#cloneMatrixDoEachCalculation",
    "access": "public",
    "description": "本行列内部の全ての値に対して指定した処理を加える",
    "lineNumber": 1078,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(num: Complex, row: number, col: number): ?Complex"
        ],
        "spread": false,
        "optional": false,
        "name": "eachfunc",
        "description": "Function(num, row, col)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "__column_oriented_1_dimensional_processing",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#__column_oriented_1_dimensional_processing",
    "access": "private",
    "description": "列優先でベクトルに対して何か処理を行い、行列を作成します。",
    "lineNumber": 1087,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(array: Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "__column_oriented_2_dimensional_processing",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#__column_oriented_2_dimensional_processing",
    "access": "private",
    "description": "行列に対して、行と列に同一の処理を行い、行列を作成します。",
    "lineNumber": 1120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(array: Array<Complex>): Array<Complex>"
        ],
        "spread": false,
        "optional": false,
        "name": "array_function",
        "description": "Function(array)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "getComplex",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#getComplex",
    "access": "public",
    "description": "行列（ベクトル）内の指定した箇所の値をComplex型で返す。",
    "lineNumber": 1156,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "arg1",
        "description": "位置／ベクトルの場合は何番目のベクトルか"
      },
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": true,
        "name": "arg2",
        "description": "列番号（行番号と列番号で指定する場合（任意））"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 385,
    "kind": "get",
    "name": "intValue",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#intValue",
    "access": "public",
    "description": "行列の最初の要素の整数値。スカラー値を取得するときなどを想定。",
    "lineNumber": 1233,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "get",
    "name": "doubleValue",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#doubleValue",
    "access": "public",
    "description": "行列の最初の要素の実数値。スカラー値を取得するときなどを想定。",
    "lineNumber": 1241,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "get",
    "name": "scalar",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#scalar",
    "access": "public",
    "description": "行列の最初の要素。スカラー値を取得するときなどを想定。",
    "lineNumber": 1249,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Complex}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Complex"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 388,
    "kind": "get",
    "name": "length",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#length",
    "access": "public",
    "description": "行列の最も大きい行数、列数を返す",
    "lineNumber": 1257,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "get",
    "name": "norm1",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#norm1",
    "access": "public",
    "description": "行列の1ノルム",
    "lineNumber": 1265,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "get",
    "name": "norm2",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#norm2",
    "access": "public",
    "description": "行列の2ノルム",
    "lineNumber": 1302,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "method",
    "name": "eye",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Matrix.mjs~Matrix.eye",
    "access": "public",
    "description": "単位行列を作成",
    "lineNumber": 1333,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "次元数"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "列数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 392,
    "kind": "method",
    "name": "memset",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Matrix.mjs~Matrix.memset",
    "access": "public",
    "description": "指定した数値で初期化",
    "lineNumber": 1346,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "初期値"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "次元数"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "列数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "zeros",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Matrix.mjs~Matrix.zeros",
    "access": "public",
    "description": "0で初期化",
    "lineNumber": 1378,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "次元数"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "列数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "ones",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Matrix.mjs~Matrix.ones",
    "access": "public",
    "description": "1で初期化",
    "lineNumber": 1391,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "次元数"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "列数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "rand",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Matrix.mjs~Matrix.rand",
    "access": "public",
    "description": "ランダム値で初期化",
    "lineNumber": 1404,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "次元数"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "列数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "randn",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Matrix.mjs~Matrix.randn",
    "access": "public",
    "description": "正規分布に従うランダム値で初期化",
    "lineNumber": 1416,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "次元数"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "column_length",
        "description": "列数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "diag",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#diag",
    "access": "public",
    "description": "行列なら対角成分を列ベクトル / ベクトルなら対角成分を持つ行列",
    "lineNumber": 1426,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "isScalar",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#isScalar",
    "access": "public",
    "description": "スカラー値の判定",
    "lineNumber": 1461,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "isRow",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#isRow",
    "access": "public",
    "description": "行ベクトル／横ベクトルの判定",
    "lineNumber": 1469,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 400,
    "kind": "method",
    "name": "isColumn",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#isColumn",
    "access": "public",
    "description": "列ベクトル／縦ベクトルの判定",
    "lineNumber": 1477,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 401,
    "kind": "method",
    "name": "isVector",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#isVector",
    "access": "public",
    "description": "ベクトルの判定",
    "lineNumber": 1485,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "isMatrix",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#isMatrix",
    "access": "public",
    "description": "行列の判定",
    "lineNumber": 1493,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "isSquare",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#isSquare",
    "access": "public",
    "description": "正方行列の判定",
    "lineNumber": 1501,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "isReal",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#isReal",
    "access": "public",
    "description": "実行列の判定",
    "lineNumber": 1510,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "isComplex",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#isComplex",
    "access": "public",
    "description": "複素行列の判定",
    "lineNumber": 1525,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "isZeros",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#isZeros",
    "access": "public",
    "description": "零行列を判定",
    "lineNumber": 1540,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "isIdentity",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#isIdentity",
    "access": "public",
    "description": "単位行列を判定",
    "lineNumber": 1556,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "isDiagonal",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#isDiagonal",
    "access": "public",
    "description": "対角行列を判定",
    "lineNumber": 1574,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "isTridiagonal",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#isTridiagonal",
    "access": "public",
    "description": "三重対角行列を判定",
    "lineNumber": 1590,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "isRegular",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#isRegular",
    "access": "public",
    "description": "正則行列を判定",
    "lineNumber": 1609,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "isOrthogonal",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#isOrthogonal",
    "access": "public",
    "description": "直行行列を判定",
    "lineNumber": 1625,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 412,
    "kind": "method",
    "name": "isUnitary",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#isUnitary",
    "access": "public",
    "description": "ユニタリ行列を判定",
    "lineNumber": 1638,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "isSymmetric",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#isSymmetric",
    "access": "public",
    "description": "対称行列を判定",
    "lineNumber": 1651,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "isHermitian",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#isHermitian",
    "access": "public",
    "description": "エルミート行列を判定",
    "lineNumber": 1671,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "size",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#size",
    "access": "public",
    "description": "A.size() = [row_length column_length] 行列のサイズを取得",
    "lineNumber": 1695,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 行ベクトル [row_length column_length]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "行ベクトル [row_length column_length]"
    },
    "params": []
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "compareTo",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#compareTo",
    "access": "public",
    "description": "A.compareTo(B) 今の値Aと、指定した値Bとを比較する\nスカラー同士の場合の戻り値は、IF文で利用できるように、number型である。\n行列同士の場合は行列の中で比較を行い、各項に比較結果が入る",
    "lineNumber": 1708,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number|Matrix} A < B ? 1 : (A === B ? 0 : -1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "Matrix"
      ],
      "spread": false,
      "description": "A < B ? 1 : (A === B ? 0 : -1)"
    }
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "max",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#max",
    "access": "public",
    "description": "A.max() 行列内の最大値ベクトル、ベクトル内の最大スカラー値を取得",
    "lineNumber": 1729,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "min",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#min",
    "access": "public",
    "description": "A.min() 行列内の最小値ベクトル、ベクトル内の最小スカラー値を取得",
    "lineNumber": 1747,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "add",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#add",
    "access": "public",
    "description": "A.add(B) = A + B",
    "lineNumber": 1769,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "sub",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#sub",
    "access": "public",
    "description": "A.sub(B) = A - B",
    "lineNumber": 1789,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "mul",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#mul",
    "access": "public",
    "description": "A.mul(B) = A * B",
    "lineNumber": 1809,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "inv",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#inv",
    "access": "public",
    "description": "A.inv() = 単位行列 / A",
    "lineNumber": 1860,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "div",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#div",
    "access": "public",
    "description": "A.div(B) = A / B",
    "lineNumber": 1931,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "nmul",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#nmul",
    "access": "public",
    "description": "A.nmul(B) = A .* B 各項ごとの掛け算",
    "lineNumber": 1966,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "ndiv",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#ndiv",
    "access": "public",
    "description": "A.ndiv(B) = A ./ B 各項ごとの割り算",
    "lineNumber": 1986,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "real",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#real",
    "access": "public",
    "description": "各項の実部",
    "lineNumber": 2009,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "imag",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#imag",
    "access": "public",
    "description": "各項の虚部",
    "lineNumber": 2019,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 428,
    "kind": "method",
    "name": "angle",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#angle",
    "access": "public",
    "description": "各項の偏角（極座標の角度）",
    "lineNumber": 2029,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "sign",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#sign",
    "access": "public",
    "description": "各項の符号値",
    "lineNumber": 2039,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "testInteger",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#testInteger",
    "access": "public",
    "description": "各項の整数を判定(1 or 0)",
    "lineNumber": 2050,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "testComplexInteger",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#testComplexInteger",
    "access": "public",
    "description": "各項の複素整数を判定(1 or 0)",
    "lineNumber": 2061,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "testZero",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#testZero",
    "access": "public",
    "description": "各項の 0 を判定(1 or 0)",
    "lineNumber": 2072,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "testOne",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#testOne",
    "access": "public",
    "description": "各項の 1 を判定(1 or 0)",
    "lineNumber": 2083,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "testComplex",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#testComplex",
    "access": "public",
    "description": "各項の複素数を判定(1 or 0)",
    "lineNumber": 2094,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 435,
    "kind": "method",
    "name": "testReal",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#testReal",
    "access": "public",
    "description": "各項の実数を判定(1 or 0)",
    "lineNumber": 2105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "testNaN",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#testNaN",
    "access": "public",
    "description": "各項の非数を判定(1 or 0)",
    "lineNumber": 2115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "testPositive",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#testPositive",
    "access": "public",
    "description": "real(x) > 0",
    "lineNumber": 2126,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "testNegative",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#testNegative",
    "access": "public",
    "description": "real(x) < 0",
    "lineNumber": 2136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 439,
    "kind": "method",
    "name": "testNotNegative",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#testNotNegative",
    "access": "public",
    "description": "real(x) >= 0",
    "lineNumber": 2146,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "testInfinite",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#testInfinite",
    "access": "public",
    "description": "各項の無限を判定",
    "lineNumber": 2156,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "testFinite",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#testFinite",
    "access": "public",
    "description": "各項の有限数を判定",
    "lineNumber": 2166,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "abs",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#abs",
    "access": "public",
    "description": "各項の絶対値をとる",
    "lineNumber": 2176,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "conj",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#conj",
    "access": "public",
    "description": "複素共役行列",
    "lineNumber": 2186,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "negate",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#negate",
    "access": "public",
    "description": "各項に -1 を掛け算する",
    "lineNumber": 2196,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "sqrt",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#sqrt",
    "access": "public",
    "description": "各項に sqrt()",
    "lineNumber": 2206,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "pow",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#pow",
    "access": "public",
    "description": "各項に pow(x)",
    "lineNumber": 2217,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "スカラー"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "log",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#log",
    "access": "public",
    "description": "各項に log()",
    "lineNumber": 2231,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "exp",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#exp",
    "access": "public",
    "description": "各項に exp()",
    "lineNumber": 2241,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "sin",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#sin",
    "access": "public",
    "description": "各項に sin()",
    "lineNumber": 2251,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "cos",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#cos",
    "access": "public",
    "description": "各項に cos()",
    "lineNumber": 2261,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "tan",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#tan",
    "access": "public",
    "description": "各項に tan()",
    "lineNumber": 2271,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "atan",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#atan",
    "access": "public",
    "description": "各項に atan()",
    "lineNumber": 2281,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "atan2",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#atan2",
    "access": "public",
    "description": "各項に atan2()",
    "lineNumber": 2292,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "スカラー"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "floor",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#floor",
    "access": "public",
    "description": "各項に floor()",
    "lineNumber": 2306,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "ceil",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#ceil",
    "access": "public",
    "description": "各項に ceil()",
    "lineNumber": 2316,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 456,
    "kind": "method",
    "name": "round",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#round",
    "access": "public",
    "description": "各項に round()",
    "lineNumber": 2326,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "fix",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#fix",
    "access": "public",
    "description": "各項に fix()",
    "lineNumber": 2336,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "fract",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#fract",
    "access": "public",
    "description": "各項に fract()",
    "lineNumber": 2346,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "_rot90",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#_rot90",
    "access": "private",
    "description": "行列を時計回りに回転させます。ミュータブルです。\n内部処理用",
    "lineNumber": 2365,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "回転する回数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "_resize",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#_resize",
    "access": "private",
    "description": "行列を拡張します。ミュータブルです。\n拡張した場合は、0を初期値にします。\n内部処理用",
    "lineNumber": 2434,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "row_length",
        "description": "新しい行の長さ"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "column_length",
        "description": "新しい列の長さ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "_delete_row",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#_delete_row",
    "access": "private",
    "description": "行を消去します。ミュータブルです。\n内部処理用",
    "lineNumber": 2476,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "row_index",
        "description": "行番号"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 466,
    "kind": "method",
    "name": "_delete_column",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#_delete_column",
    "access": "private",
    "description": "列を消去します。ミュータブルです。\n内部処理用",
    "lineNumber": 2492,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "column_index",
        "description": "列番号"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 467,
    "kind": "method",
    "name": "_exchange_row",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#_exchange_row",
    "access": "private",
    "description": "行を交換します。ミュータブルです。\n内部処理用",
    "lineNumber": 2511,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "row_index1",
        "description": "行番号1"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "row_index2",
        "description": "行番号2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 468,
    "kind": "method",
    "name": "_exchange_column",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#_exchange_column",
    "access": "private",
    "description": "行を交換します。ミュータブルです。\n内部処理用",
    "lineNumber": 2532,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "column_index1",
        "description": "行番号1"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "column_index2",
        "description": "行番号2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "_concat_left",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#_concat_left",
    "access": "private",
    "description": "行列の右に行列をくっつけます。ミュータブルです。\n内部処理用",
    "lineNumber": 2554,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "left_matrix",
        "description": "結合したい行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "_concat_bottom",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#_concat_bottom",
    "access": "private",
    "description": "行列の下に行列をくっつけます。ミュータブルです。\n内部処理用",
    "lineNumber": 2572,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 処理実行後の行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "bottom_matrix",
        "description": "結合したい行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "処理実行後の行列"
    }
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "_max_row_number",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#_max_row_number",
    "access": "private",
    "description": "列の中で最もノルムが最大の値がある行番号を返します。ミュータブルです。\n内部処理用",
    "lineNumber": 2590,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 行番号"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "column_index",
        "description": "列番号"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "row_index_offset",
        "description": "行のオフセット(この値から行う)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "row_index_max",
        "description": "行の最大(この値は含めない)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "行番号"
    }
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "_get_linear_dependence_vector",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#_get_linear_dependence_vector",
    "access": "private",
    "description": "行列の各行をベクトルと見立て、線型従属している行を抽出する\n内部処理用",
    "lineNumber": 2615,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} 行番号の行列(昇順)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0e-10",
        "defaultRaw": 1e-10,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "行番号の行列(昇順)"
    }
  },
  {
    "__docId__": 475,
    "kind": "method",
    "name": "norm",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#norm",
    "access": "public",
    "description": "行列のpノルム",
    "lineNumber": 2671,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 476,
    "kind": "method",
    "name": "inner",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#inner",
    "access": "public",
    "description": "A.inner(B) = ドット積（内積）",
    "lineNumber": 2717,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "dimension",
        "description": "計算するときに使用する次元（1 or 2）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "rank",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#rank",
    "access": "public",
    "description": "行列のランク",
    "lineNumber": 2769,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "epsilon",
        "description": "誤差"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 478,
    "kind": "method",
    "name": "transpose",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#transpose",
    "access": "public",
    "description": "転置行列",
    "lineNumber": 2777,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 479,
    "kind": "method",
    "name": "ctranspose",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#ctranspose",
    "access": "public",
    "description": "エルミート転置行列",
    "lineNumber": 2792,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "T",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#T",
    "access": "public",
    "description": "エルミート転置行列",
    "lineNumber": 2800,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 481,
    "kind": "method",
    "name": "det",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#det",
    "access": "public",
    "description": "A.det() = [A] 行列式",
    "lineNumber": 2808,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 482,
    "kind": "method",
    "name": "lup",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#lup",
    "access": "public",
    "description": "A.lup() = P'*L*U = A となる P,L,Uを解く",
    "lineNumber": 2849,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Matrix>} {P, L, U}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Matrix>"
      ],
      "spread": false,
      "description": "{P, L, U}"
    },
    "params": []
  },
  {
    "__docId__": 483,
    "kind": "method",
    "name": "linsolve",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#linsolve",
    "access": "public",
    "description": "A.linsolve(B) = Ax = B となる xを解く",
    "lineNumber": 2902,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "qr",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#qr",
    "access": "public",
    "description": "{Q, R} = A.qr() QR分解を行う",
    "lineNumber": 2964,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Matrix>} {Q, R} Qは正規直行行列、Rは上三角行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Matrix>"
      ],
      "spread": false,
      "description": "{Q, R} Qは正規直行行列、Rは上三角行列"
    },
    "params": []
  },
  {
    "__docId__": 485,
    "kind": "method",
    "name": "tridiagonalize",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#tridiagonalize",
    "access": "public",
    "description": "{P, H} = A.tridiagonalize() 対称行列の三重対角化する P*H*P'=A",
    "lineNumber": 3023,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Matrix>} {P, H} Hは三重対角行列、Pは正規直行行列。三重対角行列の固有値は元の行列と一致する。"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Matrix>"
      ],
      "spread": false,
      "description": "{P, H} Hは三重対角行列、Pは正規直行行列。三重対角行列の固有値は元の行列と一致する。"
    },
    "params": []
  },
  {
    "__docId__": 486,
    "kind": "method",
    "name": "eig",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#eig",
    "access": "public",
    "description": "{V, D} = A.eig() 対称行列の固有値分解 V*D*V'=A",
    "lineNumber": 3040,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Matrix>} {V, D} Vは右固有ベクトルを列にもつ行列で正規直行行列、Dは固有値を対角成分に持つ行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Matrix>"
      ],
      "spread": false,
      "description": "{V, D} Vは右固有ベクトルを列にもつ行列で正規直行行列、Dは固有値を対角成分に持つ行列"
    },
    "params": []
  },
  {
    "__docId__": 487,
    "kind": "method",
    "name": "svd",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#svd",
    "access": "public",
    "description": "{U, S, V} = A.svd() 特異値分解 U*S*V' = A",
    "lineNumber": 3057,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Matrix>} {U,S,V}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Matrix>"
      ],
      "spread": false,
      "description": "{U,S,V}"
    },
    "params": []
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "pinv",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#pinv",
    "access": "public",
    "description": "A.pinv() 疑似逆行列",
    "lineNumber": 3094,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 489,
    "kind": "method",
    "name": "gammaln",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#gammaln",
    "access": "public",
    "description": "x.gammaln() = gammaln(x) 対数ガンマ関数",
    "lineNumber": 3126,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "gamma",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#gamma",
    "access": "public",
    "description": "z.gamma() = gamma(z) ガンマ関数",
    "lineNumber": 3136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 491,
    "kind": "method",
    "name": "gammainc",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#gammainc",
    "access": "public",
    "description": "x.gammainc(a, tail) = gammainc(x, a, tail) 不完全ガンマ関数",
    "lineNumber": 3148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower/upper"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "gampdf",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#gampdf",
    "access": "public",
    "description": "x.gampdf(k, s) = gampdf(x, k, s) ガンマ分布の確率密度関数",
    "lineNumber": 3162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "gamcdf",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#gamcdf",
    "access": "public",
    "description": "x.gamcdf(k, s) = gamcdf(x, k, s) ガンマ分布の確率密度関数",
    "lineNumber": 3176,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "gaminv",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#gaminv",
    "access": "public",
    "description": "p.gaminv(k, s) = gaminv(p, k, s) ガンマ分布の累積分布関数の逆関数",
    "lineNumber": 3190,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 495,
    "kind": "method",
    "name": "beta",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#beta",
    "access": "public",
    "description": "x.beta(y) = beta(x, y) ベータ関数",
    "lineNumber": 3203,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 496,
    "kind": "method",
    "name": "betainc",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#betainc",
    "access": "public",
    "description": "x.betainc(a, b, tail) = betainc(x, a, b, tail) 不完全ベータ関数",
    "lineNumber": 3217,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower/upper"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 497,
    "kind": "method",
    "name": "betacdf",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#betacdf",
    "access": "public",
    "description": "x.betacdf(a, b) = betacdf(x, a, b) ベータ分布の確率密度関数",
    "lineNumber": 3232,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "betapdf",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#betapdf",
    "access": "public",
    "description": "x.betapdf(a, b) = betapdf(x, a, b) ベータ分布の累積分布関数",
    "lineNumber": 3246,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "betainv",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#betainv",
    "access": "public",
    "description": "p.betainv(a, b) = betainv(p, a, b) ベータ分布の累積分布関数の逆関数",
    "lineNumber": 3260,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#factorial",
    "access": "public",
    "description": "x.factorial() = factorial(x), x! 階乗関数",
    "lineNumber": 3272,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "nchoosek",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#nchoosek",
    "access": "public",
    "description": "n.nchoosek(k) = nchoosek(n, k), nCk 二項係数またはすべての組合わせ",
    "lineNumber": 3283,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "erf",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#erf",
    "access": "public",
    "description": "x.erf() = erf(x) 誤差関数",
    "lineNumber": 3294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 503,
    "kind": "method",
    "name": "erfc",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#erfc",
    "access": "public",
    "description": "x.erfc() = erfc(x) 相補誤差関数",
    "lineNumber": 3304,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "normpdf",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#normpdf",
    "access": "public",
    "description": "x.normpdf(u, s) = normpdf(x, u, s) 正規分布の確率密度関数",
    "lineNumber": 3316,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 505,
    "kind": "method",
    "name": "normcdf",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#normcdf",
    "access": "public",
    "description": "x.normcdf(u, s) = normcdf(x, u, s) 正規分布の累積分布関数",
    "lineNumber": 3330,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 506,
    "kind": "method",
    "name": "norminv",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#norminv",
    "access": "public",
    "description": "x.norminv(u, s) = norminv(x, u, s) 正規分布の累積分布関数の逆関数",
    "lineNumber": 3344,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "tpdf",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#tpdf",
    "access": "public",
    "description": "t.tpdf(v) = tpdf(t, v) t分布の確率密度関数",
    "lineNumber": 3357,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 508,
    "kind": "method",
    "name": "tcdf",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#tcdf",
    "access": "public",
    "description": "t.tcdf(v) = tcdf(t, v) t分布の累積分布関数",
    "lineNumber": 3369,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 509,
    "kind": "method",
    "name": "tinv",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#tinv",
    "access": "public",
    "description": "p.tinv(v) = tinv(p, v) t分布の累積分布関数の逆関数",
    "lineNumber": 3381,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 510,
    "kind": "method",
    "name": "tdist",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#tdist",
    "access": "public",
    "description": "t.tdist(v, tails) = tdist(t, v, tails) 尾部が指定可能なt分布の累積分布関数",
    "lineNumber": 3394,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      },
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "tails",
        "description": "尾部(1...片側、2...両側)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 511,
    "kind": "method",
    "name": "tinv2",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#tinv2",
    "access": "public",
    "description": "p.tinv2(v) = tinv2(p, v) 両側検定時のt分布の累積分布関数",
    "lineNumber": 3407,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 512,
    "kind": "method",
    "name": "chi2pdf",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#chi2pdf",
    "access": "public",
    "description": "x.chi2pdf(k) = chi2pdf(x, k) カイ二乗分布の確率密度関数",
    "lineNumber": 3419,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 513,
    "kind": "method",
    "name": "chi2cdf",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#chi2cdf",
    "access": "public",
    "description": "x.chi2cdf(k) = chi2cdf(x, k) カイ二乗分布の累積分布関数",
    "lineNumber": 3431,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 514,
    "kind": "method",
    "name": "chi2inv",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#chi2inv",
    "access": "public",
    "description": "p.chi2inv(k) = chi2inv(p, k) カイ二乗分布の累積分布関数の逆関数",
    "lineNumber": 3443,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 515,
    "kind": "method",
    "name": "fpdf",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#fpdf",
    "access": "public",
    "description": "x.fpdf(d1, d2) = fpdf(x, d1, d2) F分布の確率密度関数",
    "lineNumber": 3456,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 516,
    "kind": "method",
    "name": "fcdf",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#fcdf",
    "access": "public",
    "description": "x.fcdf(d1, d2) = fcdf(x, d1, d2) F分布の累積分布関数",
    "lineNumber": 3470,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 517,
    "kind": "method",
    "name": "finv",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#finv",
    "access": "public",
    "description": "p.finv(d1, d2) = finv(p, d1, d2) F分布の累積分布関数の逆関数",
    "lineNumber": 3484,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 518,
    "kind": "method",
    "name": "sum",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#sum",
    "access": "public",
    "description": "A.sum() 合計",
    "lineNumber": 3496,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "mean",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#mean",
    "access": "public",
    "description": "A.mean() 相加平均",
    "lineNumber": 3516,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "geomean",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#geomean",
    "access": "public",
    "description": "A.geomean() 相乗平均／幾何平均",
    "lineNumber": 3536,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "var",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#var",
    "access": "public",
    "description": "A.var() 分散",
    "lineNumber": 3552,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "cor",
        "description": "補正値 0(不偏分散), 1(標本分散)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "std",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#std",
    "access": "public",
    "description": "A.std() 標準偏差",
    "lineNumber": 3584,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "cor",
        "description": "補正値 0(不偏), 1(標本)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 523,
    "kind": "method",
    "name": "cov",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#cov",
    "access": "public",
    "description": "A.cov() 共分散行列",
    "lineNumber": 3598,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "cor",
        "description": "補正値 0(不偏分散), 1(標本分散)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "normalize",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#normalize",
    "access": "public",
    "description": "A.normalize() サンプルを平均値0、標準偏差1にノーマライズ",
    "lineNumber": 3633,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "corrcoef",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#corrcoef",
    "access": "public",
    "description": "A.corrcoef() 相関行列",
    "lineNumber": 3643,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "sinc",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#sinc",
    "access": "public",
    "description": "各項に sinc()",
    "lineNumber": 3656,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "fft",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#fft",
    "access": "public",
    "description": "A.fft() 離散フーリエ変換",
    "lineNumber": 3666,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "is_2_dimensions",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ]
  },
  {
    "__docId__": 528,
    "kind": "method",
    "name": "ifft",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#ifft",
    "access": "public",
    "description": "A.ifft() 逆離散フーリエ変換",
    "lineNumber": 3688,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "is_2_dimensions",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ]
  },
  {
    "__docId__": 529,
    "kind": "method",
    "name": "powerfft",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#powerfft",
    "access": "public",
    "description": "A.powerfft() パワースペクトル密度",
    "lineNumber": 3710,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 530,
    "kind": "method",
    "name": "dct",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#dct",
    "access": "public",
    "description": "A.dct() DCT-II (DCT)",
    "lineNumber": 3732,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "is_2_dimensions",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ]
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "idct",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#idct",
    "access": "public",
    "description": "A.idct() DCT-III (IDCT)",
    "lineNumber": 3755,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "is_2_dimensions",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ]
  },
  {
    "__docId__": 532,
    "kind": "method",
    "name": "fft2",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#fft2",
    "access": "public",
    "description": "A.fft2() 2次元の離散フーリエ変換",
    "lineNumber": 3778,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 533,
    "kind": "method",
    "name": "ifft2",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#ifft2",
    "access": "public",
    "description": "A.ifft2() 2次元の逆離散フーリエ変換",
    "lineNumber": 3786,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 534,
    "kind": "method",
    "name": "dct2",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#dct2",
    "access": "public",
    "description": "A.dct2() 2次元のDCT変換",
    "lineNumber": 3794,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 535,
    "kind": "method",
    "name": "idct2",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#idct2",
    "access": "public",
    "description": "A.idct2() 2次元の逆DCT変換",
    "lineNumber": 3802,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 536,
    "kind": "method",
    "name": "conv",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#conv",
    "access": "public",
    "description": "A.conv(B) = conv(A, B) 畳み込み積分、多項式乗算",
    "lineNumber": 3811,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 537,
    "kind": "method",
    "name": "xcorr",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Math/Matrix.mjs~Matrix#xcorr",
    "access": "public",
    "description": "A.xcorr(B) = xcorr(A, B) 自己相関関数、相互相関関数",
    "lineNumber": 3859,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this",
        "defaultRaw": "this",
        "name": "number",
        "description": "省略した場合は自己相関関数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 538,
    "kind": "method",
    "name": "window",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Matrix.mjs~Matrix.window",
    "access": "public",
    "description": "窓関数",
    "lineNumber": 3912,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 列ベクトル"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "窓関数の名前"
      },
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "長さ"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "isPeriodic",
        "description": "true なら periodic, false なら symmetric"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "列ベクトル"
    }
  },
  {
    "__docId__": 539,
    "kind": "method",
    "name": "hann",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Matrix.mjs~Matrix.hann",
    "access": "public",
    "description": "ハニング窓",
    "lineNumber": 3924,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 列ベクトル"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "長さ"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "isPeriodic",
        "description": "true なら periodic, false なら symmetric"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "列ベクトル"
    }
  },
  {
    "__docId__": 540,
    "kind": "method",
    "name": "hamming",
    "memberof": "src/Math/Matrix.mjs~Matrix",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Math/Matrix.mjs~Matrix.hamming",
    "access": "public",
    "description": "ハミング窓",
    "lineNumber": 3934,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Matrix} 列ベクトル"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "長さ"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "isPeriodic",
        "description": "true なら periodic, false なら symmetric"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix"
      ],
      "spread": false,
      "description": "列ベクトル"
    }
  },
  {
    "__docId__": 541,
    "kind": "file",
    "name": "src/MathUtil/MathContext.mjs",
    "content": "/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport RoundingMode from \"./RoundingMode.mjs\";\n\n/**\n * BigDecimal用の環境設定\n */\nexport default  class MathContext {\n\n\t/**\n\t * 任意精度の環境設定データ\n\t * @param {string|number} precision_or_name - 精度を数値で指定するか、設定自体を文字列で指定する\n\t * @param {RoundingModeEntity} [roundingMode=RoundingMode.HALF_UP] - 丸めモード\n\t */\n\tconstructor(precision_or_name, roundingMode) {\n\t\tthis.precision = precision_or_name;\n\t\tthis.roundingMode = roundingMode === undefined ? RoundingMode.HALF_UP : roundingMode;\n\t\tif((typeof precision_or_name === \"string\") || (precision_or_name instanceof String)) {\n\t\t\tlet buff = precision_or_name.match(/precision=\\d+/);\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0].substring(\"precision=\".length, buff[0].length);\n\t\t\t\tthis.precision = parseInt(buff, 10);\n\t\t\t}\n\t\t\tbuff = precision_or_name.match(/roundingMode=\\w+/);\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0].substring(\"roundingMode=\".length, buff[0].length);\n\t\t\t\tthis.roundingMode = RoundingMode.valueOf(buff);\n\t\t\t}\t\n\t\t}\n\t\tif(this.precision < 0) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t}\n\n\t/**\n\t * 精度\n\t * @returns {number}\n\t */\n\tgetPrecision() {\n\t\treturn this.precision;\n\t}\n\n\t/**\n\t * 丸め方\n\t * @returns {RoundingModeEntity}\n\t */\n\tgetRoundingMode() {\n\t\treturn this.roundingMode;\n\t}\n\n\t/**\n\t * 環境が等しいか\n\t * @param {MathContext} x - 比較対象\n\t * @returns {boolean}\n\t */\n\tequals(x) {\n\t\tif(x instanceof MathContext) {\n\t\t\tif(x.toString() === this.toString()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * 文字列化\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn (\"precision=\" + this.precision + \" roundingMode=\" + this.roundingMode.toString());\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * 制限を設けない（ただし、割り算で循環小数の場合にエラーが出ます。）\n\t * @returns {MathContext}\n\t */\n\tstatic get UNLIMITED() {\n\t\treturn DEFINE.UNLIMITED;\n\t}\n\n\t/**\n\t * 32ビットの実数型 ( float ) と同等\n\t * @returns {MathContext}\n\t */\n\tstatic get DECIMAL32() {\n\t\treturn DEFINE.DECIMAL32;\n\t}\n\n\n\t/**\n\t * 64ビットの実数型 ( double ) と同等\n\t * @returns {MathContext}\n\t */\n\tstatic get DECIMAL64() {\n\t\treturn DEFINE.DECIMAL64;\n\t}\n\n\n\t/**\n\t * 128ビットの実数型 ( long double ) と同等\n\t * @returns {MathContext}\n\t */\n\tstatic get DECIMAL128() {\n\t\treturn DEFINE.DECIMAL128;\n\t}\n\n}\n\nconst DEFINE = {\n\tUNLIMITED\t: new MathContext(0,\tRoundingMode.HALF_UP),\n\tDECIMAL32\t: new MathContext(7,\tRoundingMode.HALF_EVEN),\n\tDECIMAL64\t: new MathContext(16,\tRoundingMode.HALF_EVEN),\n\tDECIMAL128\t: new MathContext(34,\tRoundingMode.HALF_EVEN)\n};\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/MathUtil/MathContext.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 542,
    "kind": "class",
    "name": "MathContext",
    "memberof": "src/MathUtil/MathContext.mjs",
    "static": true,
    "longname": "src/MathUtil/MathContext.mjs~MathContext",
    "access": "public",
    "export": true,
    "importPath": "konpeito.js/src/MathUtil/MathContext.mjs",
    "importStyle": "MathContext",
    "description": "BigDecimal用の環境設定",
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 543,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/MathUtil/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/MathContext.mjs~MathContext#constructor",
    "access": "public",
    "description": "任意精度の環境設定データ",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "precision_or_name",
        "description": "精度を数値で指定するか、設定自体を文字列で指定する"
      },
      {
        "nullable": null,
        "types": [
          "RoundingModeEntity"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "RoundingMode.HALF_UP",
        "defaultRaw": "RoundingMode.HALF_UP",
        "name": "roundingMode",
        "description": "丸めモード"
      }
    ]
  },
  {
    "__docId__": 544,
    "kind": "member",
    "name": "precision",
    "memberof": "src/MathUtil/MathContext.mjs~MathContext",
    "static": false,
    "longname": "src/MathUtil/MathContext.mjs~MathContext#precision",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 545,
    "kind": "member",
    "name": "roundingMode",
    "memberof": "src/MathUtil/MathContext.mjs~MathContext",
    "static": false,
    "longname": "src/MathUtil/MathContext.mjs~MathContext#roundingMode",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "getPrecision",
    "memberof": "src/MathUtil/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/MathContext.mjs~MathContext#getPrecision",
    "access": "public",
    "description": "精度",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 549,
    "kind": "method",
    "name": "getRoundingMode",
    "memberof": "src/MathUtil/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/MathContext.mjs~MathContext#getRoundingMode",
    "access": "public",
    "description": "丸め方",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 550,
    "kind": "method",
    "name": "equals",
    "memberof": "src/MathUtil/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/MathContext.mjs~MathContext#equals",
    "access": "public",
    "description": "環境が等しいか",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MathContext"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "比較対象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "toString",
    "memberof": "src/MathUtil/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/MathContext.mjs~MathContext#toString",
    "access": "public",
    "description": "文字列化",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 552,
    "kind": "get",
    "name": "UNLIMITED",
    "memberof": "src/MathUtil/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/MathContext.mjs~MathContext.UNLIMITED",
    "access": "public",
    "description": "制限を設けない（ただし、割り算で循環小数の場合にエラーが出ます。）",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 553,
    "kind": "get",
    "name": "DECIMAL32",
    "memberof": "src/MathUtil/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/MathContext.mjs~MathContext.DECIMAL32",
    "access": "public",
    "description": "32ビットの実数型 ( float ) と同等",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 554,
    "kind": "get",
    "name": "DECIMAL64",
    "memberof": "src/MathUtil/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/MathContext.mjs~MathContext.DECIMAL64",
    "access": "public",
    "description": "64ビットの実数型 ( double ) と同等",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 555,
    "kind": "get",
    "name": "DECIMAL128",
    "memberof": "src/MathUtil/MathContext.mjs~MathContext",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/MathContext.mjs~MathContext.DECIMAL128",
    "access": "public",
    "description": "128ビットの実数型 ( long double ) と同等",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MathContext}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MathContext"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 556,
    "kind": "variable",
    "name": "DEFINE",
    "memberof": "src/MathUtil/MathContext.mjs",
    "static": true,
    "longname": "src/MathUtil/MathContext.mjs~DEFINE",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/MathUtil/MathContext.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "{\"UNLIMITED\": *, \"DECIMAL32\": *, \"DECIMAL64\": *, \"DECIMAL128\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 557,
    "kind": "file",
    "name": "src/MathUtil/Random.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nclass RandomTool {\n\n\t/**\n\t * 32ビットの負ではない整数を作成する\n\t * @param {number} x \n\t * @returns {number}\n\t */\n\tstatic unsigned32(x) {\n\t\treturn ((x < 0) ? ((x & 0x7FFFFFFF) + 0x80000000) : x);\n\t}\n\n\t/**\n\t * 2つの32ビット整数を掛け算して、32ビットの整数を出力する\n\t * @param {number} x1 \n\t * @param {number} x2 \n\t * @returns {number}\n\t */\n\tstatic multiplication32(x1, x2) {\n\t\tlet b = (x1 & 0xFFFF) * (x2 & 0xFFFF);\n\t\tlet y = RandomTool.unsigned32(b);\n\t\tb = (x1 & 0xFFFF) * (x2 >>> 16);\n\t\ty = RandomTool.unsigned32(y + ((b & 0xFFFF) << 16));\n\t\tb = (x1 >>> 16) * (x2 & 0xFFFF);\n\t\ty = RandomTool.unsigned32(y + ((b & 0xFFFF) << 16));\n\t\treturn (y & 0xFFFFFFFF);\n\t}\n\n\n}\n\n/**\n * 乱数クラス\n */\nexport default class Random {\n\t\n\t/**\n\t * 乱数を初期化する\n\t * @param {number} [seed] - 乱数のシード値、指定しない場合は時刻から作成する\n\t */\n\tconstructor(seed) {\n\t\t// 「M系列乱数」で乱数を作成します。\n\t\t// 参考：奥村晴彦 (1991). C言語による最新アルゴリズム事典.\n\t\t// 比較的長い 2^521 - 1通りを出力します。\n\t\t// 乱数はCでの動作と同じ値が出ることを確認。(seed = 1として1000番目の値が等しいことを確認)\n\n\t\t/**\n\t\t * 乱数配列\n\t\t * @private\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.x = [];\n\t\tfor(let i = 0;i < 521;i++) {\n\t\t\tthis.x[i] = 0;\n\t\t}\n\t\tif(arguments.length >= 1) {\n\t\t\tthis.setSeed(seed);\n\t\t}\n\t\telse {\n\t\t\t// 線形合同法で適当に乱数を作成する\n\t\t\tconst seed = ((new Date()).getTime() + Random.seedUniquifier) & 0xFFFFFFFF;\n\t\t\tRandom.seedUniquifier = (Random.seedUniquifier + 1) & 0xFFFFFFFF;\n\t\t\tthis.setSeed(seed);\n\t\t}\n\t}\n\n\t/**\n\t * 内部データをシャッフル\n\t */\n\t_rnd521() {\n\t\tconst x = this.x;\n\t\tfor(let i = 0; i < 32; i++) {\n\t\t\tx[i] ^= x[i + 489];\n\t\t}\n\t\tfor(let i = 32; i < 521; i++) {\n\t\t\tx[i] ^= x[i - 32];\n\t\t}\n\t}\n\n\t/**\n\t * 乱数を初期化する\n\t * @param {number} seed\n\t */\n\tsetSeed(seed) {\n\t\t// 伏見「乱数」東京大学出版会,1989 の方法により初期値を設定\n\t\tlet u = 0;\n\t\tconst x = this.x;\n\t\t// seedを使用して線形合同法でx[0-16]まで初期値を設定\n\t\tfor(let i = 0; i <= 16; i++) {\n\t\t\tfor(let j = 0; j < 32; j++) {\n\t\t\t\tseed = RandomTool.multiplication32(seed, 0x5D588B65) + 1;\n\t\t\t\tu = (u >>> 1) + ((seed < 0) ? 0x80000000 : 0);\n\t\t\t}\n\t\t\tx[i] = u;\n\t\t}\n\t\t// 残りのビットはx[i] = x[i-32] ^ x[i-521]で生成\n\t\tfor(let i = 16; i < 521; i++) {\n\t\t\tu = (i === 16) ? i : (i - 17);\n\t\t\tx[i] = ((x[u] << 23) & 0xFFFFFFFF) ^ (x[i - 16] >>> 9) ^ x[i - 1];\n\t\t}\n\t\t// ビットをシャッフル\n\t\tfor(let i = 0; i < 4; i++) {\n\t\t\tthis._rnd521();\n\t\t}\n\t\t\n\t\t/**\n\t\t * 乱数配列の何番目を使用しているか\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.xi = 0;\n\t\t\n\t\t/**\n\t\t * ガウシアン分布に基づく乱数を保持しているか\n\t\t * @private\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.haveNextNextGaussian = false;\n\t\t\n\t\t/**\n\t\t * 保持したガウシアン分布に基づく乱数\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.nextNextGaussian = 0;\n\t}\n\n\t/**\n\t * 32ビットの乱数\n\t * @returns {number} 32ビットの乱数\n\t */\n\tgenrand_int32() {\n\t\t// 全て使用したら、再び混ぜる\n\t\tif(this.xi === 521) {\n\t\t\tthis._rnd521();\n\t\t\tthis.xi = 0;\n\t\t}\n\t\tconst y = RandomTool.unsigned32(this.x[this.xi]);\n\t\tthis.xi = this.xi + 1;\n\t\treturn y;\n\t}\n\n\t/**\n\t * 指定したビット数の乱数\n\t * @param {number} bits - 必要なビット数（64まで可能）\n\t * @returns {number}\n\t */\n\tnext(bits) {\n\t\tif(bits === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(bits === 32) {\n\t\t\treturn this.genrand_int32();\n\t\t}\n\t\telse if(bits < 32) {\n\t\t\t// 線形合同法ではないため\n\n\t\t\t// 上位のビットを使用しなくてもいいがJavaっぽく。\n\t\t\treturn (this.genrand_int32() >>> (32 - bits));\n\t\t}\n\t\t// double型のため、52ビットまでは、整数として出力可能\n\t\telse if(bits === 63) {\n\t\t\t// 正の値を出力するように調節\n\t\t\treturn (this.next(32) * 0x80000000 + this.next(32));\n\t\t}\n\t\telse if(bits === 64) {\n\t\t\treturn (this.next(32) * 0x100000000 + this.next(32));\n\t\t}\n\t\telse if(bits < 64) {\n\t\t\treturn (this.genrand_int32() * (1 << (bits - 32)) + (this.genrand_int32()  >>> (64 - bits)));\n\t\t}\n\t}\n\n\t/**\n\t * 指定したサイズの8ビットの乱数\n\t * @param {number} size - 必要な長さ\n\t * @returns {Array<number>}\n\t */\n\tnextBytes(size) {\n\t\tconst y = new Array(size);\n\t\t// 配列yに乱数を入れる\n\t\t// 8ビットのために、32ビット乱数を1回回すのはもったいない\n\t\tfor(let i = 0;i < y.length; i++) {\n\t\t\ty[i] = this.next(8);\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * 32ビットの乱数\n\t * @returns {number}\n\t */\n\tnextInt() {\n\t\tif(arguments.length === 1) {\n\t\t\tlet r, y;\n\t\t\tconst a = arguments[0];\n\t\t\tdo {\n\t\t\t\tr = RandomTool.unsigned32(this.genrand_int32());\n\t\t\t\ty = r % a;\n\t\t\t} while((r - y + a) > 0x100000000 );\n\t\t\treturn y;\n\t\t}\n\t\treturn (this.next(32) & 0xFFFFFFFF);\n\t}\n\n\t/**\n\t * 64ビットの乱数\n\t * @returns {number}\n\t */\n\tnextLong() {\n\t\treturn this.next(64);\n\t}\n\n\t/**\n\t * 正負の乱数\n\t * @returns {boolean}\n\t */\n\tnextBoolean() {\n\t\t// 1ビットのために、32ビット乱数を1回回すのはもったいない\n\t\treturn (this.next(1) !== 0);\n\t}\n\n\t/**\n\t * 0 <= x < 1 のFloat(23ビット)乱数\n\t * @returns {number}\n\t */\n\tnextFloat() {\n\t\treturn (this.next(24) / 0x1000000);\n\t}\n\n\t/**\n\t * 0 <= x < 1 のDouble(52ビット)乱数\n\t * @returns {number}\n\t */\n\tnextDouble() {\n\t\tconst a1 = this.next(26) * 0x8000000 + this.next(27);\n\t\tconst a2 = 0x8000000 * 0x4000000;\n\t\treturn (a1 / a2);\n\t}\n\n\t/**\n\t * 平均値0、標準偏差1のガウシアン分布に基づく乱数\n\t * @returns {number}\n\t */\n\tnextGaussian() {\n\t\tif(this.haveNextNextGaussian) {\n\t\t\tthis.haveNextNextGaussian = false;\n\t\t\treturn this.nextNextGaussian;\n\t\t}\n\t\t// Box-Muller法\n\t\tconst a = Math.sqrt( -2 * Math.log( this.nextDouble() ) );\n\t\tconst b = 2 * Math.PI * this.nextDouble();\n\t\tconst y = a * Math.sin(b);\n\t\tthis.nextNextGaussian = a * Math.cos(b);\n\t\tthis.haveNextNextGaussian = true;\n\t\treturn y;\n\t}\n}\n\nRandom.seedUniquifier = 0x87654321;\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/MathUtil/Random.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 558,
    "kind": "class",
    "name": "RandomTool",
    "memberof": "src/MathUtil/Random.mjs",
    "static": true,
    "longname": "src/MathUtil/Random.mjs~RandomTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/MathUtil/Random.mjs",
    "importStyle": null,
    "description": "The script is part of konpeito.\n\nAUTHOR:\n natade (http://twitter.com/natadea)\n\nLICENSE:\n The MIT license https://opensource.org/licenses/MIT",
    "lineNumber": 11,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 559,
    "kind": "method",
    "name": "unsigned32",
    "memberof": "src/MathUtil/Random.mjs~RandomTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Random.mjs~RandomTool.unsigned32",
    "access": "public",
    "description": "32ビットの負ではない整数を作成する",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 560,
    "kind": "method",
    "name": "multiplication32",
    "memberof": "src/MathUtil/Random.mjs~RandomTool",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Random.mjs~RandomTool.multiplication32",
    "access": "public",
    "description": "2つの32ビット整数を掛け算して、32ビットの整数を出力する",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 561,
    "kind": "class",
    "name": "Random",
    "memberof": "src/MathUtil/Random.mjs",
    "static": true,
    "longname": "src/MathUtil/Random.mjs~Random",
    "access": "public",
    "export": true,
    "importPath": "konpeito.js/src/MathUtil/Random.mjs",
    "importStyle": "Random",
    "description": "乱数クラス",
    "lineNumber": 44,
    "interface": false
  },
  {
    "__docId__": 562,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/MathUtil/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Random.mjs~Random#constructor",
    "access": "public",
    "description": "乱数を初期化する",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "seed",
        "description": "乱数のシード値、指定しない場合は時刻から作成する"
      }
    ]
  },
  {
    "__docId__": 563,
    "kind": "member",
    "name": "x",
    "memberof": "src/MathUtil/Random.mjs~Random",
    "static": false,
    "longname": "src/MathUtil/Random.mjs~Random#x",
    "access": "private",
    "description": "乱数配列",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 564,
    "kind": "method",
    "name": "_rnd521",
    "memberof": "src/MathUtil/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Random.mjs~Random#_rnd521",
    "access": "private",
    "description": "内部データをシャッフル",
    "lineNumber": 79,
    "params": [],
    "return": null
  },
  {
    "__docId__": 565,
    "kind": "method",
    "name": "setSeed",
    "memberof": "src/MathUtil/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Random.mjs~Random#setSeed",
    "access": "public",
    "description": "乱数を初期化する",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 566,
    "kind": "member",
    "name": "xi",
    "memberof": "src/MathUtil/Random.mjs~Random",
    "static": false,
    "longname": "src/MathUtil/Random.mjs~Random#xi",
    "access": "private",
    "description": "乱数配列の何番目を使用しているか",
    "lineNumber": 120,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 567,
    "kind": "member",
    "name": "haveNextNextGaussian",
    "memberof": "src/MathUtil/Random.mjs~Random",
    "static": false,
    "longname": "src/MathUtil/Random.mjs~Random#haveNextNextGaussian",
    "access": "private",
    "description": "ガウシアン分布に基づく乱数を保持しているか",
    "lineNumber": 127,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 568,
    "kind": "member",
    "name": "nextNextGaussian",
    "memberof": "src/MathUtil/Random.mjs~Random",
    "static": false,
    "longname": "src/MathUtil/Random.mjs~Random#nextNextGaussian",
    "access": "private",
    "description": "保持したガウシアン分布に基づく乱数",
    "lineNumber": 134,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 569,
    "kind": "method",
    "name": "genrand_int32",
    "memberof": "src/MathUtil/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Random.mjs~Random#genrand_int32",
    "access": "public",
    "description": "32ビットの乱数",
    "lineNumber": 141,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 32ビットの乱数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "32ビットの乱数"
    },
    "params": []
  },
  {
    "__docId__": 572,
    "kind": "method",
    "name": "next",
    "memberof": "src/MathUtil/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Random.mjs~Random#next",
    "access": "public",
    "description": "指定したビット数の乱数",
    "lineNumber": 157,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bits",
        "description": "必要なビット数（64まで可能）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "nextBytes",
    "memberof": "src/MathUtil/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Random.mjs~Random#nextBytes",
    "access": "public",
    "description": "指定したサイズの8ビットの乱数",
    "lineNumber": 188,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "必要な長さ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 574,
    "kind": "method",
    "name": "nextInt",
    "memberof": "src/MathUtil/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Random.mjs~Random#nextInt",
    "access": "public",
    "description": "32ビットの乱数",
    "lineNumber": 202,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 575,
    "kind": "method",
    "name": "nextLong",
    "memberof": "src/MathUtil/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Random.mjs~Random#nextLong",
    "access": "public",
    "description": "64ビットの乱数",
    "lineNumber": 219,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 576,
    "kind": "method",
    "name": "nextBoolean",
    "memberof": "src/MathUtil/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Random.mjs~Random#nextBoolean",
    "access": "public",
    "description": "正負の乱数",
    "lineNumber": 227,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 577,
    "kind": "method",
    "name": "nextFloat",
    "memberof": "src/MathUtil/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Random.mjs~Random#nextFloat",
    "access": "public",
    "description": "0 <= x < 1 のFloat(23ビット)乱数",
    "lineNumber": 236,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 578,
    "kind": "method",
    "name": "nextDouble",
    "memberof": "src/MathUtil/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Random.mjs~Random#nextDouble",
    "access": "public",
    "description": "0 <= x < 1 のDouble(52ビット)乱数",
    "lineNumber": 244,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 579,
    "kind": "method",
    "name": "nextGaussian",
    "memberof": "src/MathUtil/Random.mjs~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Random.mjs~Random#nextGaussian",
    "access": "public",
    "description": "平均値0、標準偏差1のガウシアン分布に基づく乱数",
    "lineNumber": 254,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 583,
    "kind": "file",
    "name": "src/MathUtil/RoundingMode.mjs",
    "content": "/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * BigDecimal用の丸めモードの基底クラス\n * @interface\n */\nexport class RoundingModeEntity {\n\t\n\t/**\n\t * 丸めモードの名前を英語の大文字で取得する\n\t * @returns {string} 丸めモード名\n\t */\n\tstatic toString() {\n\t\treturn \"NONE\";\n\t}\n\n\t/**\n\t * 丸めに必要な加算値\n\t * @param {number} x - 1ケタ目の値\n\t * @returns {number} いくつ足すと丸められるか\n\t */\n\tstatic getAddNumber(x) {\n\t\treturn 0;\n\t}\n\n}\n\n/**\n * 絶対値の切り上げ（1桁目が0より大きければ桁上げする）\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_UP extends RoundingModeEntity {\n\n\t/**\n\t * 丸めモードの名前を英語の大文字で取得する\n\t * @returns {string} 丸めモード名\n\t */\n\tstatic toString() {\n\t\treturn \"UP\";\n\t}\n\n\t/**\n\t * 丸めに必要な加算値\n\t * @param {number} x - 1ケタ目の値\n\t * @returns {number} いくつ足すと丸められるか\n\t */\n\tstatic getAddNumber(x) {\n\t\tx = x % 10;\n\t\tif(x === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(x > 0) {\n\t\t\treturn 10 - x;\n\t\t}\n\t\telse {\n\t\t\treturn (-(10 + x));\n\t\t}\n\t}\n\n}\n\n/**\n * 絶対値の切り下げ（1桁目が0より大きければ桁下げする）\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_DOWN extends RoundingModeEntity {\n\n\t/**\n\t * 丸めモードの名前を英語の大文字で取得する\n\t * @returns {string} 丸めモード名\n\t */\n\tstatic toString() {\n\t\treturn \"DOWN\";\n\t}\n\n\t/**\n\t * 丸めに必要な加算値\n\t * @param {number} x - 1ケタ目の値\n\t * @returns {number} いくつ足すと丸められるか\n\t */\n\tstatic getAddNumber(x) {\n\t\tx = x % 10;\n\t\treturn -x;\n\t}\n\n}\n\n/**\n * 正の無限大に近づく\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_CEILING extends RoundingModeEntity {\n\n\t/**\n\t * 丸めモードの名前を英語の大文字で取得する\n\t * @returns {string} 丸めモード名\n\t */\n\tstatic toString() {\n\t\treturn \"CEILING\";\n\t}\n\n\t/**\n\t * 丸めに必要な加算値\n\t * @param {number} x - 1ケタ目の値\n\t * @returns {number} いくつ足すと丸められるか\n\t */\n\tstatic getAddNumber(x) {\n\t\tx = x % 10;\n\t\tif(x === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(x > 0) {\n\t\t\treturn 10 - x;\n\t\t}\n\t\telse {\n\t\t\treturn -x;\n\t\t}\n\t}\n\n}\n\n/**\n * 負の無限大に近づく\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_FLOOR extends RoundingModeEntity {\n\n\t/**\n\t * 丸めモードの名前を英語の大文字で取得する\n\t * @returns {string} 丸めモード名\n\t */\n\tstatic toString() {\n\t\treturn \"FLOOR\";\n\t}\n\n\t/**\n\t * 丸めに必要な加算値\n\t * @param {number} x - 1ケタ目の値\n\t * @returns {number} いくつ足すと丸められるか\n\t */\n\tstatic getAddNumber(x) {\n\t\tx = x % 10;\n\t\tif(x === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if(x > 0) {\n\t\t\treturn -x;\n\t\t}\n\t\telse {\n\t\t\treturn(-(10 + x));\n\t\t}\n\t}\n\n}\n\n/**\n * 四捨五入\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_HALF_UP extends RoundingModeEntity {\n\n\t/**\n\t * 丸めモードの名前を英語の大文字で取得する\n\t * @returns {string} 丸めモード名\n\t */\n\tstatic toString() {\n\t\treturn \"HALF_UP\";\n\t}\n\n\t/**\n\t * 丸めに必要な加算値\n\t * @param {number} x - 1ケタ目の値\n\t * @returns {number} いくつ足すと丸められるか\n\t */\n\tstatic getAddNumber(x) {\n\t\tx = x % 10;\n\t\tconst sign = x >= 0 ? 1 : -1;\n\t\tif(Math.abs(x) < 5) {\n\t\t\treturn (x * -1);\n\t\t}\n\t\telse {\n\t\t\treturn (sign * (10 - Math.abs(x)));\n\t\t}\n\t}\n\n}\n\n/**\n * 五捨六入\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_HALF_DOWN extends RoundingModeEntity {\n\n\t/**\n\t * 丸めモードの名前を英語の大文字で取得する\n\t * @returns {string} 丸めモード名\n\t */\n\tstatic toString() {\n\t\treturn \"HALF_DOWN\";\n\t}\n\n\t/**\n\t * 丸めに必要な加算値\n\t * @param {number} x - 1ケタ目の値\n\t * @returns {number} いくつ足すと丸められるか\n\t */\n\tstatic getAddNumber(x) {\n\t\tx = x % 10;\n\t\tconst sign = x >= 0 ? 1 : -1;\n\t\tif(Math.abs(x) < 6) {\n\t\t\treturn (x * -1);\n\t\t}\n\t\telse {\n\t\t\treturn (sign * (10 - Math.abs(x)));\n\t\t}\n\t}\n\n}\n\n/**\n * 等間隔なら偶数側へ丸める\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_HALF_EVEN extends RoundingModeEntity {\n\n\t/**\n\t * 丸めモードの名前を英語の大文字で取得する\n\t * @returns {string} 丸めモード名\n\t */\n\tstatic toString() {\n\t\treturn \"HALF_EVEN\";\n\t}\n\n\t/**\n\t * 丸めに必要な加算値\n\t * @param {number} x - 1ケタ目の値\n\t * @returns {number} いくつ足すと丸められるか\n\t */\n\tstatic getAddNumber(x) {\n\t\tx = x % 100;\n\t\tlet sign, even;\n\t\tif(x < 0) {\n\t\t\tsign = -1;\n\t\t\teven = Math.ceil(x / 10) & 1;\n\t\t}\n\t\telse {\n\t\t\tsign = 1;\n\t\t\teven = Math.floor(x / 10) & 1;\n\t\t}\n\t\tlet center;\n\t\tif(even === 1) {\n\t\t\tcenter = 5;\n\t\t}\n\t\telse {\n\t\t\tcenter = 6;\n\t\t}\n\t\tx = x % 10;\n\t\tif(Math.abs(x) < center) {\n\t\t\treturn (x * -1);\n\t\t}\n\t\telse {\n\t\t\treturn (sign * (10 - Math.abs(x)));\n\t\t}\n\t}\n\n}\n\n/**\n * 丸めない（丸める必要が出る場合はエラー）\n * @implements {RoundingModeEntity}\n */\nclass RoundingMode_UNNECESSARY extends RoundingModeEntity {\n\n\t/**\n\t * 丸めモードの名前を英語の大文字で取得する\n\t * @returns {string} 丸めモード名\n\t */\n\tstatic toString() {\n\t\treturn \"UNNECESSARY\";\n\t}\n\n\t/**\n\t * 丸めに必要な加算値\n\t * @param {number} x - 1ケタ目の値\n\t * @returns {number} いくつ足すと丸められるか\n\t */\n\tstatic getAddNumber(x) {\n\t\tx = x % 10;\n\t\tif(x === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse {\n\t\t\tthrow \"ArithmeticException\";\n\t\t}\n\t}\n\n}\n\n/**\n * BigDecimal用の丸めモードクラス\n */\nexport default class RoundingMode {\n\n\t/**\n\t * 指定した文字列で表される丸めクラスを取得する\n\t * @param {string} name - モードの英数名\n\t * @returns {RoundingModeEntity}\n\t */\n\tstatic valueOf(name) {\n\t\tif(name === null) {\n\t\t\tthrow \"NullPointerException\";\n\t\t}\n\t\tif(name instanceof RoundingModeEntity) {\n\t\t\treturn name;\n\t\t}\n\t\tconst modetype = {\n\t\t\tRoundingMode_UP,\n\t\t\tRoundingMode_DOWN,\n\t\t\tRoundingMode_FLOOR,\n\t\t\tRoundingMode_CEILING,\n\t\t\tRoundingMode_HALF_UP,\n\t\t\tRoundingMode_HALF_DOWN,\n\t\t\tRoundingMode_HALF_EVEN,\n\t\t\tRoundingMode_UNNECESSARY\n\t\t};\n\t\tconst upper_name = name.toUpperCase();\n\t\tfor(let i = 0; i < modetype.length; i++) {\n\t\t\tif(modetype[i].toString() === upper_name) {\n\t\t\t\treturn modetype[i];\n\t\t\t}\n\t\t}\n\t\tthrow \"IllegalArgumentException : \" + name;\n\t}\n\n\t// ----------------------\n\t// 定数\n\t// ----------------------\n\t\n\t/**\n\t * 絶対値の切り上げ（1桁目が0より大きければ桁上げする）\n\t * @returns {RoundingModeEntity}\n\t */\n\tstatic get UP() {\n\t\treturn RoundingMode_UP;\n\t}\n\n\t/**\n\t * 絶対値の切り下げ（1桁目が0より大きければ桁下げする）\n\t * @returns {RoundingModeEntity}\n\t */\n\tstatic get DOWN() {\n\t\treturn RoundingMode_DOWN;\n\t}\n\n\t/**\n\t * 正の無限大に近づく\n\t * @returns {RoundingModeEntity}\n\t */\n\tstatic get CEILING() {\n\t\treturn RoundingMode_CEILING;\n\t}\n\n\t/**\n\t * 負の無限大に近づく\n\t * @returns {RoundingModeEntity}\n\t */\n\tstatic get FLOOR() {\n\t\treturn RoundingMode_FLOOR;\n\t}\n\n\t/**\n\t * 四捨五入\n\t * @returns {RoundingModeEntity}\n\t */\n\tstatic get HALF_UP() {\n\t\treturn RoundingMode_HALF_UP;\n\t}\n\n\t/**\n\t * 五捨六入\n\t * @returns {RoundingModeEntity}\n\t */\n\tstatic get HALF_DOWN() {\n\t\treturn RoundingMode_HALF_DOWN;\n\t}\n\n\t/**\n\t * 等間隔なら偶数側へ丸める\n\t * @returns {RoundingModeEntity}\n\t */\n\tstatic get HALF_EVEN() {\n\t\treturn RoundingMode_HALF_EVEN;\n\t}\n\n\t/**\n\t * 丸めない（丸める必要が出る場合はエラー）\n\t * @returns {RoundingModeEntity}\n\t */\n\tstatic get UNNECESSARY() {\n\t\treturn RoundingMode_UNNECESSARY;\n\t}\n\n}\n\n\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/MathUtil/RoundingMode.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 584,
    "kind": "class",
    "name": "RoundingModeEntity",
    "memberof": "src/MathUtil/RoundingMode.mjs",
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingModeEntity",
    "access": "public",
    "export": true,
    "importPath": "konpeito.js/src/MathUtil/RoundingMode.mjs",
    "importStyle": "{RoundingModeEntity}",
    "description": "BigDecimal用の丸めモードの基底クラス",
    "lineNumber": 15,
    "interface": true
  },
  {
    "__docId__": 585,
    "kind": "method",
    "name": "toString",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingModeEntity",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingModeEntity.toString",
    "access": "public",
    "description": "丸めモードの名前を英語の大文字で取得する",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 丸めモード名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "丸めモード名"
    },
    "params": []
  },
  {
    "__docId__": 586,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingModeEntity",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingModeEntity.getAddNumber",
    "access": "public",
    "description": "丸めに必要な加算値",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} いくつ足すと丸められるか"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "1ケタ目の値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "いくつ足すと丸められるか"
    }
  },
  {
    "__docId__": 587,
    "kind": "class",
    "name": "RoundingMode_UP",
    "memberof": "src/MathUtil/RoundingMode.mjs",
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_UP",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/MathUtil/RoundingMode.mjs",
    "importStyle": null,
    "description": "絶対値の切り上げ（1桁目が0より大きければ桁上げする）",
    "lineNumber": 40,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 588,
    "kind": "method",
    "name": "toString",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode_UP",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_UP.toString",
    "access": "public",
    "description": "丸めモードの名前を英語の大文字で取得する",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 丸めモード名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "丸めモード名"
    },
    "params": []
  },
  {
    "__docId__": 589,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode_UP",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_UP.getAddNumber",
    "access": "public",
    "description": "丸めに必要な加算値",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} いくつ足すと丸められるか"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "1ケタ目の値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "いくつ足すと丸められるか"
    }
  },
  {
    "__docId__": 590,
    "kind": "class",
    "name": "RoundingMode_DOWN",
    "memberof": "src/MathUtil/RoundingMode.mjs",
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_DOWN",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/MathUtil/RoundingMode.mjs",
    "importStyle": null,
    "description": "絶対値の切り下げ（1桁目が0より大きければ桁下げする）",
    "lineNumber": 74,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 591,
    "kind": "method",
    "name": "toString",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode_DOWN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_DOWN.toString",
    "access": "public",
    "description": "丸めモードの名前を英語の大文字で取得する",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 丸めモード名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "丸めモード名"
    },
    "params": []
  },
  {
    "__docId__": 592,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode_DOWN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_DOWN.getAddNumber",
    "access": "public",
    "description": "丸めに必要な加算値",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} いくつ足すと丸められるか"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "1ケタ目の値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "いくつ足すと丸められるか"
    }
  },
  {
    "__docId__": 593,
    "kind": "class",
    "name": "RoundingMode_CEILING",
    "memberof": "src/MathUtil/RoundingMode.mjs",
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_CEILING",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/MathUtil/RoundingMode.mjs",
    "importStyle": null,
    "description": "正の無限大に近づく",
    "lineNumber": 100,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 594,
    "kind": "method",
    "name": "toString",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode_CEILING",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_CEILING.toString",
    "access": "public",
    "description": "丸めモードの名前を英語の大文字で取得する",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 丸めモード名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "丸めモード名"
    },
    "params": []
  },
  {
    "__docId__": 595,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode_CEILING",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_CEILING.getAddNumber",
    "access": "public",
    "description": "丸めに必要な加算値",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} いくつ足すと丸められるか"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "1ケタ目の値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "いくつ足すと丸められるか"
    }
  },
  {
    "__docId__": 596,
    "kind": "class",
    "name": "RoundingMode_FLOOR",
    "memberof": "src/MathUtil/RoundingMode.mjs",
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_FLOOR",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/MathUtil/RoundingMode.mjs",
    "importStyle": null,
    "description": "負の無限大に近づく",
    "lineNumber": 134,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 597,
    "kind": "method",
    "name": "toString",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode_FLOOR",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_FLOOR.toString",
    "access": "public",
    "description": "丸めモードの名前を英語の大文字で取得する",
    "lineNumber": 140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 丸めモード名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "丸めモード名"
    },
    "params": []
  },
  {
    "__docId__": 598,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode_FLOOR",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_FLOOR.getAddNumber",
    "access": "public",
    "description": "丸めに必要な加算値",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} いくつ足すと丸められるか"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "1ケタ目の値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "いくつ足すと丸められるか"
    }
  },
  {
    "__docId__": 599,
    "kind": "class",
    "name": "RoundingMode_HALF_UP",
    "memberof": "src/MathUtil/RoundingMode.mjs",
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_HALF_UP",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/MathUtil/RoundingMode.mjs",
    "importStyle": null,
    "description": "四捨五入",
    "lineNumber": 168,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 600,
    "kind": "method",
    "name": "toString",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode_HALF_UP",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_HALF_UP.toString",
    "access": "public",
    "description": "丸めモードの名前を英語の大文字で取得する",
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 丸めモード名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "丸めモード名"
    },
    "params": []
  },
  {
    "__docId__": 601,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode_HALF_UP",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_HALF_UP.getAddNumber",
    "access": "public",
    "description": "丸めに必要な加算値",
    "lineNumber": 183,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} いくつ足すと丸められるか"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "1ケタ目の値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "いくつ足すと丸められるか"
    }
  },
  {
    "__docId__": 602,
    "kind": "class",
    "name": "RoundingMode_HALF_DOWN",
    "memberof": "src/MathUtil/RoundingMode.mjs",
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_HALF_DOWN",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/MathUtil/RoundingMode.mjs",
    "importStyle": null,
    "description": "五捨六入",
    "lineNumber": 200,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 603,
    "kind": "method",
    "name": "toString",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode_HALF_DOWN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_HALF_DOWN.toString",
    "access": "public",
    "description": "丸めモードの名前を英語の大文字で取得する",
    "lineNumber": 206,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 丸めモード名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "丸めモード名"
    },
    "params": []
  },
  {
    "__docId__": 604,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode_HALF_DOWN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_HALF_DOWN.getAddNumber",
    "access": "public",
    "description": "丸めに必要な加算値",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} いくつ足すと丸められるか"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "1ケタ目の値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "いくつ足すと丸められるか"
    }
  },
  {
    "__docId__": 605,
    "kind": "class",
    "name": "RoundingMode_HALF_EVEN",
    "memberof": "src/MathUtil/RoundingMode.mjs",
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_HALF_EVEN",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/MathUtil/RoundingMode.mjs",
    "importStyle": null,
    "description": "等間隔なら偶数側へ丸める",
    "lineNumber": 232,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 606,
    "kind": "method",
    "name": "toString",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode_HALF_EVEN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_HALF_EVEN.toString",
    "access": "public",
    "description": "丸めモードの名前を英語の大文字で取得する",
    "lineNumber": 238,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 丸めモード名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "丸めモード名"
    },
    "params": []
  },
  {
    "__docId__": 607,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode_HALF_EVEN",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_HALF_EVEN.getAddNumber",
    "access": "public",
    "description": "丸めに必要な加算値",
    "lineNumber": 247,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} いくつ足すと丸められるか"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "1ケタ目の値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "いくつ足すと丸められるか"
    }
  },
  {
    "__docId__": 608,
    "kind": "class",
    "name": "RoundingMode_UNNECESSARY",
    "memberof": "src/MathUtil/RoundingMode.mjs",
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_UNNECESSARY",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/MathUtil/RoundingMode.mjs",
    "importStyle": null,
    "description": "丸めない（丸める必要が出る場合はエラー）",
    "lineNumber": 280,
    "interface": false,
    "extends": [
      "RoundingModeEntity"
    ],
    "implements": [
      "RoundingModeEntity"
    ],
    "ignore": true
  },
  {
    "__docId__": 609,
    "kind": "method",
    "name": "toString",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode_UNNECESSARY",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_UNNECESSARY.toString",
    "access": "public",
    "description": "丸めモードの名前を英語の大文字で取得する",
    "lineNumber": 286,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 丸めモード名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "丸めモード名"
    },
    "params": []
  },
  {
    "__docId__": 610,
    "kind": "method",
    "name": "getAddNumber",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode_UNNECESSARY",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode_UNNECESSARY.getAddNumber",
    "access": "public",
    "description": "丸めに必要な加算値",
    "lineNumber": 295,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} いくつ足すと丸められるか"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "1ケタ目の値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "いくつ足すと丸められるか"
    }
  },
  {
    "__docId__": 611,
    "kind": "class",
    "name": "RoundingMode",
    "memberof": "src/MathUtil/RoundingMode.mjs",
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode",
    "access": "public",
    "export": true,
    "importPath": "konpeito.js/src/MathUtil/RoundingMode.mjs",
    "importStyle": "RoundingMode",
    "description": "BigDecimal用の丸めモードクラス",
    "lineNumber": 310,
    "interface": false
  },
  {
    "__docId__": 612,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode.valueOf",
    "access": "public",
    "description": "指定した文字列で表される丸めクラスを取得する",
    "lineNumber": 317,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "モードの英数名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 613,
    "kind": "get",
    "name": "UP",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode.UP",
    "access": "public",
    "description": "絶対値の切り上げ（1桁目が0より大きければ桁上げする）",
    "lineNumber": 351,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 614,
    "kind": "get",
    "name": "DOWN",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode.DOWN",
    "access": "public",
    "description": "絶対値の切り下げ（1桁目が0より大きければ桁下げする）",
    "lineNumber": 359,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 615,
    "kind": "get",
    "name": "CEILING",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode.CEILING",
    "access": "public",
    "description": "正の無限大に近づく",
    "lineNumber": 367,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 616,
    "kind": "get",
    "name": "FLOOR",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode.FLOOR",
    "access": "public",
    "description": "負の無限大に近づく",
    "lineNumber": 375,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 617,
    "kind": "get",
    "name": "HALF_UP",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode.HALF_UP",
    "access": "public",
    "description": "四捨五入",
    "lineNumber": 383,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 618,
    "kind": "get",
    "name": "HALF_DOWN",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode.HALF_DOWN",
    "access": "public",
    "description": "五捨六入",
    "lineNumber": 391,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 619,
    "kind": "get",
    "name": "HALF_EVEN",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode.HALF_EVEN",
    "access": "public",
    "description": "等間隔なら偶数側へ丸める",
    "lineNumber": 399,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 620,
    "kind": "get",
    "name": "UNNECESSARY",
    "memberof": "src/MathUtil/RoundingMode.mjs~RoundingMode",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/RoundingMode.mjs~RoundingMode.UNNECESSARY",
    "access": "public",
    "description": "丸めない（丸める必要が出る場合はエラー）",
    "lineNumber": 407,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RoundingModeEntity}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoundingModeEntity"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 621,
    "kind": "file",
    "name": "src/MathUtil/Signal.mjs",
    "content": "/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nclass FFT {\n\n\t/**\n\t * ビット反転\n\t * @param {number} x - ビット反転させる値（32ビット整数）\n\t * @returns {number} ビット反転した値\n\t */\n\tstatic bit_reverse_32(x) {\n\t\tlet y = x & 0xffffffff;\n\t\t// 1,2,4,8,16ビット単位で交換\n\t\ty = ((y & 0x55555555) << 1) | ((y >> 1) & 0x55555555);\n\t\ty = ((y & 0x33333333) << 2) | ((y >> 2) & 0x33333333);\n\t\ty = ((y & 0x0f0f0f0f) << 4) | ((y >> 4) & 0x0f0f0f0f);\n\t\ty = ((y & 0x00ff00ff) << 8) | ((y >> 8) & 0x00ff00ff);\n\t\ty = ((y & 0x0000ffff) << 16) | ((y >> 16) & 0x0000ffff);\n\t\treturn y;\n\t}\n\t\n\t/**\n\t * 指定したビット分の数値データをビット反転した配列を返す\n\t * @param {number} bit - ビット数\n\t * @returns {Array<number>} ビット反転した値の配列\n\t */\n\tstatic create_bit_reverse_table(bit) {\n\t\tconst size = 1 << bit;\n\t\tconst bitrv = [];\n\t\tfor(let i = 0; i < size; i++) {\n\t\t\tbitrv[i] = FFT.bit_reverse_32(i) >>> (32 - bit);\n\t\t}\n\t\treturn bitrv;\n\t}\n\n\t/**\n\t * FFTクラスの初期化\n\t * @param {number} size - 信号の長さ\n\t */\n\tconstructor(size) {\n\t\tthis.size = size;\n\t\tthis.inv_size = 1.0 / this.size;\n\t\tthis.bit_size = Math.round(Math.log(this.size)/Math.log(2));\n\t\tthis.is_fast = (1 << this.bit_size) === this.size;\n\t\tthis.bitrv = null;\n\t\tthis.fft_re = new Array(this.size);\n\t\tthis.fft_im = new Array(this.size);\n\t\t{\n\t\t\tconst delta = - 2.0 * Math.PI / this.size;\n\t\t\tlet err = 0.0;\n\t\t\tfor(let n = 0, x = 0; n < this.size; n++) {\n\t\t\t\tthis.fft_re[n] = Math.cos(x);\n\t\t\t\tthis.fft_im[n] = Math.sin(x);\n\t\t\t\t// カハンの加算アルゴリズム\n\t\t\t\tconst y = delta + err;\n\t\t\t\tconst t = x + y;\n\t\t\t\terr = t - x - y;\n\t\t\t\tx = t;\n\t\t\t}\n\t\t}\n\t\tif(this.is_fast) {\n\t\t\tthis.bitrv = FFT.create_bit_reverse_table(this.bit_size);\n\t\t}\n\t}\n\n\t/**\n\t * 中のデータを消去する\n\t */\n\tdelete() {\n\t\tdelete this.size;\n\t\tdelete this.inv_size;\n\t\tdelete this.bit_size;\n\t\tdelete this.is_fast;\n\t\tdelete this.bitrv;\n\t\tdelete this.fft_re;\n\t\tdelete this.fft_im;\n\t}\n\t\n\t/**\n\t * 離散フーリエ変換\n\t * @param {Array<number>} real - 実数部\n\t * @param {Array<number>} imag - 虚数部\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tfft(real, imag) {\n\t\tconst f_re = new Array(this.size);\n\t\tconst f_im = new Array(this.size);\n\t\tif(this.is_fast) {\n\t\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\t\tf_re[i] = real[this.bitrv[i]];\n\t\t\t\tf_im[i] = imag[this.bitrv[i]];\n\t\t\t}\n\t\t\t{\n\t\t\t\t// Fast Fourier Transform 時間間引き(前処理にビットリバース)\n\t\t\t\t// 段々ブロックが大きくなっていくタイプ。\n\t\t\t\tlet center = 1;\n\t\t\t\tlet blocklength = this.size / 2;\n\t\t\t\tlet pointlength = 2;\n\t\t\t\tfor(let delta = 1 << (this.bit_size - 1); delta > 0; delta >>= 1) {\n\t\t\t\t\tfor(let blocks = 0; blocks < blocklength; blocks++) {\n\t\t\t\t\t\tlet i = blocks * pointlength;\n\t\t\t\t\t\tfor(let point = 0, n = 0; point < center; point++, i++, n += delta) {\n\t\t\t\t\t\t\tconst re = f_re[i + center] * this.fft_re[n] - f_im[i + center] * this.fft_im[n];\n\t\t\t\t\t\t\tconst im = f_im[i + center] * this.fft_re[n] + f_re[i + center] * this.fft_im[n];\n\t\t\t\t\t\t\tf_re[i + center] = f_re[i] - re;\n\t\t\t\t\t\t\tf_im[i + center] = f_im[i] - im;\n\t\t\t\t\t\t\tf_re[i] += re;\n\t\t\t\t\t\t\tf_im[i] += im;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tblocklength /= 2;\n\t\t\t\t\tpointlength *= 2;\n\t\t\t\t\tcenter *= 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif(!Signal.isContainsZero(imag)) {\n\t\t\t\t// 実数部分のみのフーリエ変換\n\t\t\t\tfor(let t = 0; t < this.size; t++) {\n\t\t\t\t\tf_re[t] = 0.0;\n\t\t\t\t\tf_im[t] = 0.0;\n\t\t\t\t\tfor(let x = 0, n = 0; x < this.size; x++, n = (x * t) % this.size) {\n\t\t\t\t\t\tf_re[t] += real[x] * this.fft_re[n];\n\t\t\t\t\t\tf_im[t] += real[x] * this.fft_im[n];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// 実数部分と複素数部分のフーリエ変換\n\t\t\t\tfor(let t = 0; t < this.size; t++) {\n\t\t\t\t\tf_re[t] = 0.0;\n\t\t\t\t\tf_im[t] = 0.0;\n\t\t\t\t\tfor(let x = 0, n = 0; x < this.size; x++, n = (x * t) % this.size) {\n\t\t\t\t\t\tf_re[t] += real[x] * this.fft_re[n] - imag[x] * this.fft_im[n];\n\t\t\t\t\t\tf_im[t] += real[x] * this.fft_im[n] + imag[x] * this.fft_re[n];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\treal : f_re,\n\t\t\timag : f_im\n\t\t};\n\t}\n\n\t/**\n\t * 逆離散フーリエ変換\n\t * @param {Array} real - 実数部\n\t * @param {Array} imag - 虚数部\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tifft(real, imag) {\n\t\tconst f_re = new Array(this.size);\n\t\tconst f_im = new Array(this.size);\n\t\tif(this.is_fast) {\n\t\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\t\tf_re[i] = real[this.bitrv[i]];\n\t\t\t\tf_im[i] = imag[this.bitrv[i]];\n\t\t\t}\n\t\t\t{\n\t\t\t\t// Inverse Fast Fourier Transform 時間間引き(前処理にビットリバース)\n\t\t\t\t// 段々ブロックが大きくなっていくタイプ。\n\t\t\t\tlet center = 1;\n\t\t\t\tlet blocklength = this.size / 2;\n\t\t\t\tlet pointlength = 2;\n\t\t\t\tlet re, im;\n\t\t\t\tfor(let delta = 1 << (this.bit_size - 1); delta > 0; delta >>= 1) {\n\t\t\t\t\tfor(let blocks = 0; blocks < blocklength; blocks++) {\n\t\t\t\t\t\tlet i = blocks * pointlength;\n\t\t\t\t\t\tfor(let point = 0, n = 0; point < center; point++, i++, n += delta) {\n\t\t\t\t\t\t\tre = f_re[i + center] * this.fft_re[n] + f_im[i + center] * this.fft_im[n];\n\t\t\t\t\t\t\tim = f_im[i + center] * this.fft_re[n] - f_re[i + center] * this.fft_im[n];\n\t\t\t\t\t\t\tf_re[i + center] = f_re[i] - re;\n\t\t\t\t\t\t\tf_im[i + center] = f_im[i] - im;\n\t\t\t\t\t\t\tf_re[i] += re;\n\t\t\t\t\t\t\tf_im[i] += im;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tblocklength /= 2;\n\t\t\t\t\tpointlength *= 2;\n\t\t\t\t\tcenter *= 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif(!Signal.isContainsZero(imag)) {\n\t\t\t\t// 実数部分のみの逆フーリエ変換\n\t\t\t\tfor(let x = 0; x < this.size; x++) {\n\t\t\t\t\tf_re[x] = 0.0;\n\t\t\t\t\tf_im[x] = 0.0;\n\t\t\t\t\tfor(let t = 0, n = 0; t < this.size; t++, n = (x * t) % this.size) {\n\t\t\t\t\t\tf_re[x] +=   real[t] * this.fft_re[n];\n\t\t\t\t\t\tf_im[x] += - real[t] * this.fft_im[n];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// 実数部分と複素数部分の逆フーリエ変換\n\t\t\t\tfor(let x = 0; x < this.size; x++) {\n\t\t\t\t\tf_re[x] = 0.0;\n\t\t\t\t\tf_im[x] = 0.0;\n\t\t\t\t\tfor(let t = 0, n = 0; t < this.size; t++, n = (x * t) % this.size) {\n\t\t\t\t\t\tf_re[x] +=   real[t] * this.fft_re[n] + imag[t] * this.fft_im[n];\n\t\t\t\t\t\tf_im[x] += - real[t] * this.fft_im[n] + imag[t] * this.fft_re[n];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\tf_re[i] *= this.inv_size;\n\t\t\tf_im[i] *= this.inv_size;\n\t\t}\n\t\treturn {\n\t\t\treal : f_re,\n\t\t\timag : f_im\n\t\t};\n\t}\n}\n\nclass Chash {\n\t\n\t/**\n\t * 簡易キャッシュ\n\t * @param {number} chash_size - キャッシュの最大サイズ\n\t * @param {*} object - 作成するオブジェクト\n\t */\n\tconstructor(chash_size, object) {\n\t\tthis.object = object;\n\t\tthis.table_max = chash_size;\n\t\tthis.table_size = 0;\n\t\tthis.table = [];\n\t}\n\n\t/**\n\t * 指定した長さのデータを作成する。キャッシュに存在すればキャッシュから使用する。\n\t * @param {number} size - 作成するオブジェクトのサイズ\n\t * @returns {*}\n\t */\n\tget(size) {\n\t\tfor(let index = 0; index < this.table_size; index++) {\n\t\t\tif(this.table[index].size === size) {\n\t\t\t\t// 先頭にもってくる\n\t\t\t\tconst object = this.table.splice(index, 1);\n\t\t\t\tthis.table.unshift(object);\n\t\t\t\treturn object;\n\t\t\t}\n\t\t}\n\t\tconst new_object = new this.object(size);\n\t\tif(this.table_size === this.table_max) {\n\t\t\t// 後ろのデータを消去\n\t\t\tconst delete_object = this.table.pop();\n\t\t\tdelete_object.delete();\n\t\t}\n\t\t// 前方に追加\n\t\tthis.table.unshift(new_object);\n\t\treturn new_object;\n\t}\n\n}\n\nconst fft_chash = new Chash(4, FFT);\n\nclass DCT {\n\t\n\t/**\n\t * DCTクラスの初期化\n\t * @param {number} size - 信号の長さ\n\t */\n\tconstructor(size) {\n\t\tthis.size = size;\n\t\tthis.dct_size = size * 2;\n\t\tthis.dct_re = new Array(this.size);\n\t\tthis.dct_im = new Array(this.size);\n\t\t{\n\t\t\tconst x_0 = 1.0 / Math.sqrt(this.size);\n\t\t\tconst x_n = x_0 * Math.sqrt(2);\n\t\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\t\tconst x = - Math.PI * i / this.dct_size;\n\t\t\t\tthis.dct_re[i] = Math.cos(x) * (i === 0 ? x_0 : x_n);\n\t\t\t\tthis.dct_im[i] = Math.sin(x) * (i === 0 ? x_0 : x_n);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * 中のデータを消去する\n\t */\n\tdelete() {\n\t\tdelete this.size;\n\t\tdelete this.dct_size;\n\t\tdelete this.dct_re;\n\t\tdelete this.dct_im;\n\t}\n\n\t/**\n\t * DCT-II\n\t * @param {Array<number>} real - 実数部\n\t * @returns {Array<number>}\n\t */\n\tdct(real) {\n\t\tconst re = new Array(this.dct_size);\n\t\tconst im = new Array(this.dct_size);\n\t\tfor(let i = 0; i < this.dct_size; i++) {\n\t\t\tre[i] = i < this.size ? real[i] : 0.0;\n\t\t\tim[i] = 0.0;\n\t\t}\n\t\tconst fft = fft_chash.get(this.dct_size).fft(re, im);\n\t\tfor(let i = 0; i < this.size; i++) {\n\t\t\tre[i] = fft.real[i] * this.dct_re[i] - fft.imag[i] * this.dct_im[i];\n\t\t}\n\t\tre.splice(this.size);\n\t\treturn re;\n\t}\n\n\t/**\n\t * DCT-III (IDCT)\n\t * @param {Array<number>} real - 実数部\n\t * @returns {Array<number>}\n\t */\n\tidct(real) {\n\t\tconst re = new Array(this.dct_size);\n\t\tconst im = new Array(this.dct_size);\n\t\tconst denormlize = this.size * 2.0;\n\t\tfor(let i = 0; i < this.dct_size; i++) {\n\t\t\tre[i] = i < this.size ? (denormlize * real[i] *    this.dct_re[i])  : 0.0;\n\t\t\tim[i] = i < this.size ? (denormlize * real[i] * (- this.dct_im[i])) : 0.0;\n\t\t}\n\t\tconst ifft = fft_chash.get(this.dct_size).ifft(re, im);\n\t\tifft.real.splice(this.size);\n\t\treturn ifft.real;\n\t}\n\t\n}\n\nconst dct_chash = new Chash(4, DCT);\n\n/**\n * 信号処理用の関数集\n * @ignore\n */\nexport default class Signal {\n\t\n\t/**\n\t * 0が含まれるか\n\t * @param {Array<number>} x - 調べたい配列\n\t * @returns {boolean}\n\t */\n\tstatic isContainsZero(x) {\n\t\tfor(let i = 0; i < x.length; i++) {\n\t\t\tif(x[i] !== 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * 離散フーリエ変換\n\t * @param {Array<number>} real - 実数部\n\t * @param {Array<number>} imag - 虚数部\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tstatic fft(real, imag) {\n\t\tconst obj = fft_chash.get(real.length);\t\n\t\treturn obj.fft(real, imag);\n\t}\n\n\t/**\n\t * 逆離散フーリエ変換\n\t * @param {Array<number>} real - 実数部\n\t * @param {Array<number>} imag - 虚数部\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tstatic ifft(real, imag) {\n\t\tconst obj = fft_chash.get(real.length);\t\n\t\treturn obj.ifft(real, imag);\n\t}\n\n\t/**\n\t * DCT-II (DCT)\n\t * @param {Array<number>} real - 実数部\n\t * @returns {Array<number>}\n\t */\n\tstatic dct(real) {\n\t\tconst obj = dct_chash.get(real.length);\t\n\t\treturn obj.dct(real);\n\t}\n\n\t/**\n\t * DCT-III (IDCT)\n\t * @param {Array<number>} real - 実数部\n\t * @returns {Array<number>}\n\t */\n\tstatic idct(real) {\n\t\tconst obj = dct_chash.get(real.length);\t\n\t\treturn obj.idct(real);\n\t}\n\n\t/**\n\t * パワースペクトル密度\n\t * @param {Array<number>} real - 実数部\n\t * @param {Array<number>} imag - 虚数部\n\t * @returns {Array<number>}\n\t */\n\tstatic powerfft(real, imag) {\n\t\tconst size = real.length;\n\t\tconst X = Signal.fft(real, imag);\n\t\tconst power = new Array(size);\n\t\tfor(let i = 0; i < size; i++) {\n\t\t\tpower[i] = X.real[i] * X.real[i] + X.imag[i] * X.imag[i];\n\t\t}\n\t\treturn power;\n\t}\n\n\t/**\n\t * 畳み込み積分、多項式乗算\n\t * @param {Array} x1_real - 実数部\n\t * @param {Array} x1_imag - 虚数部\n\t * @param {Array} x2_real - 実数部\n\t * @param {Array} x2_imag - 虚数部\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tstatic conv(x1_real, x1_imag, x2_real, x2_imag) {\n\t\tlet is_self = false;\n\t\tif(x1_real.length === x2_real.length) {\n\t\t\tis_self = true;\n\t\t\tfor(let i = 0; i < x1_real.length;i++) {\n\t\t\t\tif((x1_real[i] !== x2_real[i]) || (x1_imag[i] !== x2_imag[i])) {\n\t\t\t\t\tis_self = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst size = x1_real.length;\n\t\tconst N2 = size * 2;\n\t\tconst bit_size = Math.round(Math.log(size)/Math.log(2));\n\t\tconst is_fast = (1 << bit_size) === size;\n\t\tif(is_fast) {\n\t\t\t// FFTを用いた手法へ切り替え\n\t\t\t// 周波数空間上では掛け算になる\n\t\t\tif(is_self) {\n\t\t\t\tconst size = x1_real.length;\n\t\t\t\tconst real = new Array(N2);\n\t\t\t\tconst imag = new Array(N2);\n\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\treal[i] = i < size ? x1_real[i] : 0.0;\n\t\t\t\t\timag[i] = i < size ? x1_imag[i] : 0.0;\n\t\t\t\t}\n\t\t\t\tconst X = Signal.fft(real, imag);\n\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\treal[i] = X.real[i] * X.real[i] - X.imag[i] * X.imag[i];\n\t\t\t\t\timag[i] = X.real[i] * X.imag[i] + X.imag[i] * X.real[i];\n\t\t\t\t}\n\t\t\t\tconst x = Signal.ifft(real, imag);\n\t\t\t\tx.real.splice(N2 - 1);\n\t\t\t\tx.imag.splice(N2 - 1);\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\telse if(x1_real.length === x2_real.length) {\n\t\t\t\tconst size = x1_real.length;\n\t\t\t\tconst real1 = new Array(N2);\n\t\t\t\tconst imag1 = new Array(N2);\n\t\t\t\tconst real2 = new Array(N2);\n\t\t\t\tconst imag2 = new Array(N2);\n\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\treal1[i] = i < size ? x1_real[i] : 0.0;\n\t\t\t\t\timag1[i] = i < size ? x1_imag[i] : 0.0;\n\t\t\t\t\treal2[i] = i < size ? x2_real[i] : 0.0;\n\t\t\t\t\timag2[i] = i < size ? x2_imag[i] : 0.0;\n\t\t\t\t}\n\t\t\t\tconst F = Signal.fft(real1, imag1);\n\t\t\t\tconst G = Signal.fft(real2, imag2);\n\t\t\t\tconst real = new Array(N2);\n\t\t\t\tconst imag = new Array(N2);\n\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\treal[i] = F.real[i] * G.real[i] - F.imag[i] * G.imag[i];\n\t\t\t\t\timag[i] = F.real[i] * G.imag[i] + F.imag[i] * G.real[i];\n\t\t\t\t}\n\t\t\t\tconst fg = Signal.ifft(real, imag);\n\t\t\t\tfg.real.splice(N2 - 1);\n\t\t\t\tfg.imag.splice(N2 - 1);\n\t\t\t\treturn fg;\n\t\t\t}\n\t\t}\n\t\tlet is_real_number = !Signal.isContainsZero(x1_imag);\n\t\tif(is_real_number) {\n\t\t\tis_real_number = !Signal.isContainsZero(x2_imag);\n\t\t}\n\t\t{\n\t\t\t// まじめに計算する\n\t\t\tconst real = new Array(x1_real.length + x2_real.length - 1);\n\t\t\tconst imag = new Array(x1_real.length + x2_real.length - 1);\n\t\t\tfor(let i = 0; i < real.length; i++) {\n\t\t\t\treal[i] = 0;\n\t\t\t\timag[i] = 0;\n\t\t\t}\n\t\t\tif(is_real_number) {\n\t\t\t\t// 実数部分のみの畳み込み積分\n\t\t\t\t// スライドさせていく\n\t\t\t\t// AAAA\n\t\t\t\t//  BBBB\n\t\t\t\t//   CCCC\n\t\t\t\tfor(let y = 0; y < x2_real.length; y++) {\n\t\t\t\t\tfor(let x = 0; x < x1_real.length; x++) {\n\t\t\t\t\t\treal[y + x] += x1_real[x] * x2_real[y];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// 実数部分と複素数部分の畳み込み積分\n\t\t\t\tfor(let y = 0; y < x2_real.length; y++) {\n\t\t\t\t\tfor(let x = 0; x < x1_real.length; x++) {\n\t\t\t\t\t\treal[y + x] += x1_real[x] * x2_real[y] - x1_imag[x] * x2_imag[y];\n\t\t\t\t\t\timag[y + x] += x1_real[x] * x2_imag[y] + x1_imag[x] * x2_real[y];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\treal : real,\n\t\t\t\timag : imag\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * 自己相関関数、相互相関関数\n\t * @param {Array} x1_real - 実数部\n\t * @param {Array} x1_imag - 虚数部\n\t * @param {Array} x2_real - 実数部\n\t * @param {Array} x2_imag - 虚数部\n\t * @returns {Object<string, Array<number>>}\n\t */\n\tstatic xcorr(x1_real, x1_imag, x2_real, x2_imag) {\n\t\tlet is_self = false;\n\t\tif(x1_real.length === x2_real.length) {\n\t\t\tis_self = true;\n\t\t\tfor(let i = 0; i < x1_real.length;i++) {\n\t\t\t\tif((x1_real[i] !== x2_real[i]) || (x1_imag[i] !== x2_imag[i])) {\n\t\t\t\t\tis_self = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(x1_real.length === x2_real.length) {\n\t\t\tconst size = x1_real.length;\n\t\t\tconst N2 = size * 2;\n\t\t\tconst bit_size = Math.round(Math.log(size)/Math.log(2));\n\t\t\tconst is_fast = (1 << bit_size) === size;\n\t\t\tif(is_fast) {\n\t\t\t\tlet fg = null;\n\t\t\t\tif(is_self) {\n\t\t\t\t\tconst real = new Array(N2);\n\t\t\t\t\tconst imag = new Array(N2);\n\t\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\t\treal[i] = i < size ? x1_real[i] : 0.0;\n\t\t\t\t\t\timag[i] = i < size ? x1_imag[i] : 0.0;\n\t\t\t\t\t}\n\t\t\t\t\t// パワースペクトル密度は、自己相関のフーリエ変換のため、\n\t\t\t\t\t// パワースペクトル密度の逆変換で求められる。\n\t\t\t\t\tconst power = Signal.powerfft(real, imag);\n\t\t\t\t\tfg = Signal.ifft(power, imag);\n\t\t\t\t\t// シフト\n\t\t\t\t\treal.pop();\n\t\t\t\t\timag.pop();\n\t\t\t\t\tfor(let i = 0, j = size + 1 ; i < real.length; i++, j++) {\n\t\t\t\t\t\tif(N2 <= j) {\n\t\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treal[i] = fg.real[j];\n\t\t\t\t\t\timag[i] = fg.imag[j];\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\treal : real,\n\t\t\t\t\t\timag : imag\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst f_real = new Array(N2);\n\t\t\t\t\tconst f_imag = new Array(N2);\n\t\t\t\t\tconst g_real = new Array(N2);\n\t\t\t\t\tconst g_imag = new Array(N2);\n\t\t\t\t\t// gの順序を反転かつ共役複素数にする\n\t\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\t\tf_real[i] = i < size ?   x1_real[i] : 0.0;\n\t\t\t\t\t\tf_imag[i] = i < size ?   x1_imag[i] : 0.0;\n\t\t\t\t\t\tg_real[i] = i < size ?   x2_real[size - i - 1] : 0.0;\n\t\t\t\t\t\tg_imag[i] = i < size ? - x2_imag[size - i - 1] : 0.0;\n\t\t\t\t\t}\n\t\t\t\t\t// 畳み込み掛け算\n\t\t\t\t\tconst F = Signal.fft(f_real, f_imag);\n\t\t\t\t\tconst G = Signal.fft(g_real, g_imag);\n\t\t\t\t\tconst real = new Array(N2);\n\t\t\t\t\tconst imag = new Array(N2);\n\t\t\t\t\tfor(let i = 0; i < N2; i++) {\n\t\t\t\t\t\treal[i] = F.real[i] * G.real[i] - F.imag[i] * G.imag[i];\n\t\t\t\t\t\timag[i] = F.real[i] * G.imag[i] + F.imag[i] * G.real[i];\n\t\t\t\t\t}\n\t\t\t\t\tfg = Signal.ifft(real, imag);\n\t\t\t\t\tfg.real.splice(N2 - 1);\n\t\t\t\t\tfg.imag.splice(N2 - 1);\n\t\t\t\t\treturn fg;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet is_real_number = !Signal.isContainsZero(x1_imag);\n\t\tif(is_real_number) {\n\t\t\tis_real_number = !Signal.isContainsZero(x2_imag);\n\t\t}\n\t\tif(is_self) {\n\t\t\tconst size = x1_real.length;\n\t\t\tconst N2 = size * 2;\n\t\t\t// 実数の自己相関関数\n\t\t\tif(is_real_number) {\n\t\t\t\tconst fg = new Array(size);\n\t\t\t\tfor(let m = 0; m < size; m++) {\n\t\t\t\t\tfg[m] = 0;\n\t\t\t\t\tconst tmax = size - m;\n\t\t\t\t\tfor(let t = 0; t < tmax; t++) {\n\t\t\t\t\t\tfg[m] += x1_real[t] * x2_real[t + m];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 半分の値は同一なので折り返して計算を省く\n\t\t\t\tconst real = new Array(N2 - 1);\n\t\t\t\tconst imag = new Array(N2 - 1);\n\t\t\t\tfor(let i = 0, j = size - 1 ; i < size; i++, j--) {\n\t\t\t\t\treal[i] = fg[j];\n\t\t\t\t\treal[size + i - 1] = fg[i];\n\t\t\t\t}\n\t\t\t\tfor(let i = 0; i < imag.length; i++) {\n\t\t\t\t\timag[i] = 0.0;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\treal : real,\n\t\t\t\t\timag : imag\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t// 2つの信号の長さが違う、又は2の累乗の長さではない別のデータの場合は通常計算\n\t\t{\n\t\t\tconst g_real = new Array(x2_real.length);\n\t\t\tconst g_imag = new Array(x2_real.length);\n\t\t\t// gの順序を反転かつ共役複素数にする\n\t\t\tfor(let i = 0; i < x2_real.length; i++) {\n\t\t\t\tg_real[i] =   x2_real[x2_real.length - i - 1];\n\t\t\t\tg_imag[i] = - x2_imag[x2_real.length - i - 1];\n\t\t\t}\n\t\t\treturn Signal.conv(x1_real, x1_imag, g_real, g_imag);\n\t\t}\n\t}\n\n\t/**\n\t * 窓を作成する\n\t * @param {string} name - 窓関数の名前\n\t * @param {number} size - 長さ\n\t * @param {boolean} [isPeriodic] - true なら periodic, false なら symmetric\n\t * @returns {Array<number>}\n\t */\n\tstatic window(name, size, isPeriodic) {\n\n\t\tconst name_ = name.toLocaleLowerCase();\n\t\tconst size_ = size;\n\t\tconst window = new Array(size_);\n\t\t\n\t\tconst sinc = function(x) {\n\t\t\treturn x === 0.0 ? 1.0 : Math.sin(x) / x;\n\t\t};\n\n\t\tconst normalzie = function(y) {\n\t\t\tif(isPeriodic) {\n\t\t\t\treturn (y / size_ * (Math.PI * 2.0));\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn (y / (size_ - 1) * (Math.PI * 2.0));\n\t\t\t}\n\t\t};\n\n\t\tconst setBlackmanWindow = function( alpha0, alpha1, alpha2, alpha3, alpha4) {\n\t\t\tfor(let i = 0; i < size_; i++) {\n\t\t\t\twindow[i]  = alpha0;\n\t\t\t\twindow[i] -= alpha1 * Math.cos(1.0 * normalzie(i));\n\t\t\t\twindow[i] += alpha2 * Math.cos(2.0 * normalzie(i));\n\t\t\t\twindow[i] -= alpha3 * Math.cos(3.0 * normalzie(i));\n\t\t\t\twindow[i] += alpha4 * Math.cos(4.0 * normalzie(i));\n\t\t\t}\n\t\t};\n\n\t\tswitch(name_) {\n\t\t\t// rect 矩形窓(rectangular window)\n\t\t\tcase \"rectangle\":\n\t\t\t\tsetBlackmanWindow(1.0, 0.0, 0.0, 0.0, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// hann ハン窓・ハニング窓(hann/hanning window)\n\t\t\tcase \"hann\":\n\t\t\t\tsetBlackmanWindow(0.5, 0.5, 0.0, 0.0, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// hamming ハミング窓(hamming window)\n\t\t\tcase \"hamming\":\n\t\t\t\tsetBlackmanWindow(0.54, 0.46, 0.0, 0.0, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// blackman ブラックマン窓(Blackman window)\n\t\t\tcase \"blackman\":\n\t\t\t\tsetBlackmanWindow(0.42, 0.50, 0.08, 0.0, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// blackmanharris Blackman-Harris window\n\t\t\tcase \"blackmanharris\":\n\t\t\t\tsetBlackmanWindow(0.35875, 0.48829, 0.14128, 0.01168, 0);\n\t\t\t\tbreak;\n\n\t\t\t// blackmannuttall Blackman-Nuttall window\n\t\t\tcase \"blackmannuttall\":\n\t\t\t\tsetBlackmanWindow(0.3635819, 0.4891775, 0.1365995, 0.0106411, 0.0);\n\t\t\t\tbreak;\n\n\t\t\t// flattop Flat top window\n\t\t\tcase \"flattop\":\n\t\t\t\tsetBlackmanWindow(1.0, 1.93, 1.29, 0.388, 0.032);\n\t\t\t\tbreak;\n\n\t\t\t// lanczos Lanczos window\n\t\t\tcase \"lanczos\":\n\t\t\t\tfor(let i = 0; i < size_; i++) {\n\t\t\t\t\twindow[i]  = sinc(normalzie(i) - 1.0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t// Half cycle sine window(MDCT窓)\n\t\t\tcase \"sin\":\n\t\t\t\tfor(let i = 0; i < size_; i++) {\n\t\t\t\t\twindow[i]  = Math.sin(normalzie(i) * 0.5);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t// Vorbis window(MDCT窓)\n\t\t\tcase \"vorbis\":\n\t\t\t\tfor(let i = 0; i < size_; i++) {\n\t\t\t\t\tconst x = Math.sin(normalzie(i) * 0.5);\n\t\t\t\t\twindow[i]  = Math.sin(Math.PI * 0.5 * x * x);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn window;\n\t}\n\n\t/**\n\t * ハニング窓\n\t * @param {number} size - 長さ\n\t * @param {boolean} [isPeriodic] - true なら periodic, false なら symmetric\n\t * @returns {Array<number>}\n\t */\n\tstatic hann(size, isPeriodic) {\n\t\treturn Signal.window(\"hann\", size, isPeriodic);\n\t}\n\t\n\t/**\n\t * ハミング窓を作成\n\t * @param {number} size - 長さ\n\t * @param {boolean} [isPeriodic] - true なら periodic, false なら symmetric\n\t * @returns {Array<number>}\n\t */\n\tstatic hamming(size, isPeriodic) {\n\t\treturn Signal.window(\"hamming\", size, isPeriodic);\n\t}\n\t\n}\n\n\n/*\nconst A = [1,2,3,4,5];\nconst B = [0,0,3,0,0];\nconst C = [5,6,7,8,9];\n\nconsole.log(Signal.conv(A,B,A,B));\nconsole.log(Signal.conv(A,B,C,B));\nconsole.log(Signal.xcorr(A,B,C,B));\n*/\n\n/*\nconst X1 = [1, 2, 30, 100];\nconsole.log(Signal.dct(X1));\nconsole.log(Signal.idct(Signal.dct(X1)));\n\nconsole.log(Signal.mdct(X1));\nconsole.log(Signal.imdct(Signal.mdct(X1)));\n*/\n/*\nconst X1 = [1, 2, 30, 100];\nconsole.log(Signal.dct(X1));\nconsole.log(Signal.idct(Signal.dct(X1)));\n\n{\n\tconst X1 = [1];\n\tconst Y1 = [j];\n\tconst A = Signal.fft(X1, Y1);\n\tconst B = Signal.ifft(A.real, A.imag);\n\n\tconsole.log(X1);\n\tconsole.log(Y1);\n\tconsole.log(A.real);\n\tconsole.log(A.imag);\n\tconsole.log(B.real);\n\tconsole.log(B.imag);\n}\n*/\n\n/*\n{\n\tconst X1 = [1,-2,3,-4];\n\tconst Y1 = [-100,20,-300,40];\n\tconst A = Signal.fft(X1, Y1);\n\tconst B = Signal.ifft(A.real, A.imag);\n\n\tconsole.log(X1);\n\tconsole.log(Y1);\n\tconsole.log(A.real);\n\tconsole.log(A.imag);\n\tconsole.log(B.real);\n\tconsole.log(B.imag);\n}\n*/\n\n/*\n{\n\tconst fft = new FFT(8);\n\tconst X1 = [1,-2,3,-4,32,16,64,-40];\n\tconst Y1 = [-100,20,-300,40,1,2,1,2];\n\tconst A = fft.fft(X1, Y1);\n\tconst B = fft.ifft(A.real, A.imag);\n\n\tconsole.log(X1);\n\tconsole.log(Y1);\n\tconsole.log(A.real);\n\tconsole.log(A.imag);\n\tconsole.log(B.real);\n\tconsole.log(B.imag);\n}\n*/\n\n/*\n{\n\tconst fft = new FFT(5);\n\tconst X1 = [1,-2,-3,-32,40];\n\tconst Y1 = [-100,20,-300,-40,40];\n\tconst A = fft.fft(X1, Y1);\n\tconst B = fft.ifft(A.real, A.imag);\n\n\tconsole.log(X1);\n\tconsole.log(Y1);\n\tconsole.log(A.real);\n\tconsole.log(A.imag);\n\tconsole.log(B.real);\n\tconsole.log(B.imag);\n}\n*/",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/MathUtil/Signal.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 622,
    "kind": "class",
    "name": "FFT",
    "memberof": "src/MathUtil/Signal.mjs",
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~FFT",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/MathUtil/Signal.mjs",
    "importStyle": null,
    "description": "The script is part of konpeito.\n\nAUTHOR:\n natade (http://twitter.com/natadea)\n\nLICENSE:\n The MIT license https://opensource.org/licenses/MIT",
    "lineNumber": 11,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 623,
    "kind": "method",
    "name": "bit_reverse_32",
    "memberof": "src/MathUtil/Signal.mjs~FFT",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~FFT.bit_reverse_32",
    "access": "public",
    "description": "ビット反転",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} ビット反転した値"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "ビット反転させる値（32ビット整数）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "ビット反転した値"
    }
  },
  {
    "__docId__": 624,
    "kind": "method",
    "name": "create_bit_reverse_table",
    "memberof": "src/MathUtil/Signal.mjs~FFT",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~FFT.create_bit_reverse_table",
    "access": "public",
    "description": "指定したビット分の数値データをビット反転した配列を返す",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} ビット反転した値の配列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bit",
        "description": "ビット数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "ビット反転した値の配列"
    }
  },
  {
    "__docId__": 625,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/MathUtil/Signal.mjs~FFT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~FFT#constructor",
    "access": "public",
    "description": "FFTクラスの初期化",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "信号の長さ"
      }
    ]
  },
  {
    "__docId__": 626,
    "kind": "member",
    "name": "size",
    "memberof": "src/MathUtil/Signal.mjs~FFT",
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~FFT#size",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 627,
    "kind": "member",
    "name": "inv_size",
    "memberof": "src/MathUtil/Signal.mjs~FFT",
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~FFT#inv_size",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 628,
    "kind": "member",
    "name": "bit_size",
    "memberof": "src/MathUtil/Signal.mjs~FFT",
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~FFT#bit_size",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 629,
    "kind": "member",
    "name": "is_fast",
    "memberof": "src/MathUtil/Signal.mjs~FFT",
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~FFT#is_fast",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 630,
    "kind": "member",
    "name": "bitrv",
    "memberof": "src/MathUtil/Signal.mjs~FFT",
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~FFT#bitrv",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 631,
    "kind": "member",
    "name": "fft_re",
    "memberof": "src/MathUtil/Signal.mjs~FFT",
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~FFT#fft_re",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 632,
    "kind": "member",
    "name": "fft_im",
    "memberof": "src/MathUtil/Signal.mjs~FFT",
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~FFT#fft_im",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 634,
    "kind": "method",
    "name": "delete",
    "memberof": "src/MathUtil/Signal.mjs~FFT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~FFT#delete",
    "access": "public",
    "description": "中のデータを消去する",
    "lineNumber": 76,
    "params": [],
    "return": null
  },
  {
    "__docId__": 635,
    "kind": "method",
    "name": "fft",
    "memberof": "src/MathUtil/Signal.mjs~FFT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~FFT#fft",
    "access": "public",
    "description": "離散フーリエ変換",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "実数部"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "虚数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 636,
    "kind": "method",
    "name": "ifft",
    "memberof": "src/MathUtil/Signal.mjs~FFT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~FFT#ifft",
    "access": "public",
    "description": "逆離散フーリエ変換",
    "lineNumber": 160,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "実数部"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "虚数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 637,
    "kind": "class",
    "name": "Chash",
    "memberof": "src/MathUtil/Signal.mjs",
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~Chash",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/MathUtil/Signal.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 228,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 638,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/MathUtil/Signal.mjs~Chash",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~Chash#constructor",
    "access": "public",
    "description": "簡易キャッシュ",
    "lineNumber": 235,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "chash_size",
        "description": "キャッシュの最大サイズ"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "作成するオブジェクト"
      }
    ]
  },
  {
    "__docId__": 639,
    "kind": "member",
    "name": "object",
    "memberof": "src/MathUtil/Signal.mjs~Chash",
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~Chash#object",
    "access": "public",
    "description": null,
    "lineNumber": 236,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 640,
    "kind": "member",
    "name": "table_max",
    "memberof": "src/MathUtil/Signal.mjs~Chash",
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~Chash#table_max",
    "access": "public",
    "description": null,
    "lineNumber": 237,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 641,
    "kind": "member",
    "name": "table_size",
    "memberof": "src/MathUtil/Signal.mjs~Chash",
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~Chash#table_size",
    "access": "public",
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 642,
    "kind": "member",
    "name": "table",
    "memberof": "src/MathUtil/Signal.mjs~Chash",
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~Chash#table",
    "access": "public",
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 643,
    "kind": "method",
    "name": "get",
    "memberof": "src/MathUtil/Signal.mjs~Chash",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~Chash#get",
    "access": "public",
    "description": "指定した長さのデータを作成する。キャッシュに存在すればキャッシュから使用する。",
    "lineNumber": 247,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "作成するオブジェクトのサイズ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 644,
    "kind": "variable",
    "name": "fft_chash",
    "memberof": "src/MathUtil/Signal.mjs",
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~fft_chash",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/MathUtil/Signal.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 269,
    "undocument": true,
    "type": {
      "types": [
        "src/MathUtil/Signal.mjs~Chash"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 645,
    "kind": "class",
    "name": "DCT",
    "memberof": "src/MathUtil/Signal.mjs",
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~DCT",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/MathUtil/Signal.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 271,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 646,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/MathUtil/Signal.mjs~DCT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~DCT#constructor",
    "access": "public",
    "description": "DCTクラスの初期化",
    "lineNumber": 277,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "信号の長さ"
      }
    ]
  },
  {
    "__docId__": 647,
    "kind": "member",
    "name": "size",
    "memberof": "src/MathUtil/Signal.mjs~DCT",
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~DCT#size",
    "access": "public",
    "description": null,
    "lineNumber": 278,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 648,
    "kind": "member",
    "name": "dct_size",
    "memberof": "src/MathUtil/Signal.mjs~DCT",
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~DCT#dct_size",
    "access": "public",
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 649,
    "kind": "member",
    "name": "dct_re",
    "memberof": "src/MathUtil/Signal.mjs~DCT",
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~DCT#dct_re",
    "access": "public",
    "description": null,
    "lineNumber": 280,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 650,
    "kind": "member",
    "name": "dct_im",
    "memberof": "src/MathUtil/Signal.mjs~DCT",
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~DCT#dct_im",
    "access": "public",
    "description": null,
    "lineNumber": 281,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 651,
    "kind": "method",
    "name": "delete",
    "memberof": "src/MathUtil/Signal.mjs~DCT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~DCT#delete",
    "access": "public",
    "description": "中のデータを消去する",
    "lineNumber": 296,
    "params": [],
    "return": null
  },
  {
    "__docId__": 652,
    "kind": "method",
    "name": "dct",
    "memberof": "src/MathUtil/Signal.mjs~DCT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~DCT#dct",
    "access": "public",
    "description": "DCT-II",
    "lineNumber": 308,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "実数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 653,
    "kind": "method",
    "name": "idct",
    "memberof": "src/MathUtil/Signal.mjs~DCT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/MathUtil/Signal.mjs~DCT#idct",
    "access": "public",
    "description": "DCT-III (IDCT)",
    "lineNumber": 328,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "実数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 654,
    "kind": "variable",
    "name": "dct_chash",
    "memberof": "src/MathUtil/Signal.mjs",
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~dct_chash",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/MathUtil/Signal.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 343,
    "undocument": true,
    "type": {
      "types": [
        "src/MathUtil/Signal.mjs~Chash"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 655,
    "kind": "class",
    "name": "Signal",
    "memberof": "src/MathUtil/Signal.mjs",
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~Signal",
    "access": "public",
    "export": true,
    "importPath": "konpeito.js/src/MathUtil/Signal.mjs",
    "importStyle": "Signal",
    "description": "信号処理用の関数集",
    "lineNumber": 349,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 656,
    "kind": "method",
    "name": "isContainsZero",
    "memberof": "src/MathUtil/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~Signal.isContainsZero",
    "access": "public",
    "description": "0が含まれるか",
    "lineNumber": 356,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "調べたい配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 657,
    "kind": "method",
    "name": "fft",
    "memberof": "src/MathUtil/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~Signal.fft",
    "access": "public",
    "description": "離散フーリエ変換",
    "lineNumber": 371,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "実数部"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "虚数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 658,
    "kind": "method",
    "name": "ifft",
    "memberof": "src/MathUtil/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~Signal.ifft",
    "access": "public",
    "description": "逆離散フーリエ変換",
    "lineNumber": 382,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "実数部"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "虚数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 659,
    "kind": "method",
    "name": "dct",
    "memberof": "src/MathUtil/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~Signal.dct",
    "access": "public",
    "description": "DCT-II (DCT)",
    "lineNumber": 392,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "実数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 660,
    "kind": "method",
    "name": "idct",
    "memberof": "src/MathUtil/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~Signal.idct",
    "access": "public",
    "description": "DCT-III (IDCT)",
    "lineNumber": 402,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "実数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 661,
    "kind": "method",
    "name": "powerfft",
    "memberof": "src/MathUtil/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~Signal.powerfft",
    "access": "public",
    "description": "パワースペクトル密度",
    "lineNumber": 413,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "real",
        "description": "実数部"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "imag",
        "description": "虚数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 662,
    "kind": "method",
    "name": "conv",
    "memberof": "src/MathUtil/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~Signal.conv",
    "access": "public",
    "description": "畳み込み積分、多項式乗算",
    "lineNumber": 431,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x1_real",
        "description": "実数部"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x1_imag",
        "description": "虚数部"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x2_real",
        "description": "実数部"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x2_imag",
        "description": "虚数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 663,
    "kind": "method",
    "name": "xcorr",
    "memberof": "src/MathUtil/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~Signal.xcorr",
    "access": "public",
    "description": "自己相関関数、相互相関関数",
    "lineNumber": 541,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, Array<number>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x1_real",
        "description": "実数部"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x1_imag",
        "description": "虚数部"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x2_real",
        "description": "実数部"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "x2_imag",
        "description": "虚数部"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, Array<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 664,
    "kind": "method",
    "name": "window",
    "memberof": "src/MathUtil/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~Signal.window",
    "access": "public",
    "description": "窓を作成する",
    "lineNumber": 666,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "窓関数の名前"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "長さ"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "isPeriodic",
        "description": "true なら periodic, false なら symmetric"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 665,
    "kind": "method",
    "name": "hann",
    "memberof": "src/MathUtil/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~Signal.hann",
    "access": "public",
    "description": "ハニング窓",
    "lineNumber": 763,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "長さ"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "isPeriodic",
        "description": "true なら periodic, false なら symmetric"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 666,
    "kind": "method",
    "name": "hamming",
    "memberof": "src/MathUtil/Signal.mjs~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Signal.mjs~Signal.hamming",
    "access": "public",
    "description": "ハミング窓を作成",
    "lineNumber": 773,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "長さ"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "isPeriodic",
        "description": "true なら periodic, false なら symmetric"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 667,
    "kind": "file",
    "name": "src/MathUtil/Statistics.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n * 実数専用の統計処理用の関数集\n * @ignore\n */\nexport default class Statistics {\n\n\t/**\n\t * gammaln(x) 対数ガンマ関数 \n\t * @param {number} x\n\t * @returns {number}\n\t */\n\tstatic gammaln(x) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p30,技術評論社,1991\n\t\tconst LOG_2PI = Math.log(2.0 * Math.PI);\n\t\t//ベルヌーイ数\n\t\t//http://fr.wikipedia.org/wiki/Nombre_de_Bernoulli\n\t\tconst K2 = ( 1.0 / 6.0)\t\t\t\t\t/ (2 * 1);\n\t\tconst K4 = (-1.0 / 30.0)\t\t\t\t/ (4 * 3);\n\t\tconst K6 = ( 1.0 / 42.0)\t\t\t\t/ (6 * 5);\n\t\tconst K8 = (-1.0 / 30.0)\t\t\t\t/ (8 * 7);\n\t\tconst K10 = ( 5.0 / 66.0)\t\t\t\t/ (10 * 9);\n\t\tconst K12 = (-691.0 / 2730.0)\t\t\t/ (12 * 11);\n\t\tconst K14 = ( 7.0 / 6.0)\t\t\t\t/ (14 * 13);\n\t\tconst K16 = (-3617.0 / 510.0)\t\t\t/ (16 * 15);\n\t\tconst K18 = (43867.0 / 798.0)\t\t\t/ (18 * 17);\n\t\tconst K20 = (-174611.0 / 330.0)\t\t\t/ (20 * 19);\n\t\tconst K22 = (854513.0 / 138.0)\t\t\t/ (22 * 21);\n\t\tconst K24 = (-236364091.0 / 2730.0)\t\t/ (24 * 23);\n\t\tconst K26 = (8553103.0 / 6.0)\t\t\t/ (26 * 25);\n\t\tconst K28 = (-23749461029.0 / 870.0)\t/ (28 * 27);\n\t\tconst K30 = (8615841276005.0 / 14322.0)\t/ (30 * 29);\n\t\tconst K32 = (-7709321041217.0 / 510.0)\t/ (32 * 31);\n\t\tconst LIST = [\n\t\t\tK32, K30, K28, K26, K24, K22, K20, K18,\n\t\t\tK16, K14, K12, K10, K8, K6, K4, K2\n\t\t];\n\t\tlet v = 1;\n\t\twhile(x < LIST.length) {\n\t\t\tv *= x;\n\t\t\tx++;\n\t\t}\n\t\tconst w = 1 / (x * x);\n\t\tlet y = LIST[0];\n\t\tfor(let i = 1; i < LIST.length; i++) {\n\t\t\ty *= w;\n\t\t\ty += LIST[i];\n\t\t}\n\t\ty /= x;\n\t\ty += 0.5 * LOG_2PI;\n\t\ty += - Math.log(v) - x + (x - 0.5) * Math.log(x);\n\t\treturn(y);\n\t}\n\n\t/**\n\t * q_gamma(x, a, gammaln_a) 不完全ガンマ関数 上側\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} gammaln_a\n\t * @returns {number}\n\t */\n\tstatic q_gamma(x, a, gammaln_a) {\n\t\tlet k;\n\t\tlet result, w, temp, previous;\n\t\t// Laguerreの多項式\n\t\tlet la = 1.0, lb = 1.0 + x - a;\n\t\tif(x < 1.0 + a) {\n\t\t\treturn (1 - Statistics.p_gamma(x, a, gammaln_a));\n\t\t}\n\t\tw = Math.exp(a * Math.log(x) - x - gammaln_a);\n\t\tresult = w / lb;\n\t\tfor(k = 2; k < 1000; k++) {\n\t\t\ttemp = ((k - 1.0 - a) * (lb - la) + (k + x) * lb) / k;\n\t\t\tla = lb;\n\t\t\tlb = temp;\n\t\t\tw *= (k - 1.0 - a) / k;\n\t\t\ttemp = w / (la * lb);\n\t\t\tprevious = result;\n\t\t\tresult += temp;\n\t\t\tif(result == previous) {\n\t\t\t\treturn(result);\n\t\t\t}\n\t\t}\n\t\treturn Number.NaN;\n\t}\n\n\t/**\n\t * p_gamma(x, a, gammaln_a) 不完全ガンマ関数 下側\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} gammaln_a\n\t * @returns {number}\n\t */\n\tstatic p_gamma(x, a, gammaln_a) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p227,技術評論社,1991\n\t\tlet k;\n\t\tlet result, term, previous;\n\t\tif(x >= 1.0 + a) {\n\t\t\treturn (1.0 - Statistics.q_gamma(x, a, gammaln_a));\n\t\t}\n\t\tif(x === 0.0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tresult = term = Math.exp(a * Math.log(x) - x - gammaln_a) / a;\n\t\tfor(k = 1; k < 1000; k++) {\n\t\t\tterm *= x / (a + k);\n\t\t\tprevious = result;\n\t\t\tresult += term;\n\t\t\tif(result == previous) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn Number.NaN;\n\t}\n\n\t/**\n\t * gamma(z) ガンマ関数\n\t * @param {number} z\n\t * @returns {number}\n\t */\n\tstatic gamma(z) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p30,技術評論社,1991\n\t\tif(z < 0) {\n\t\t\treturn (Math.PI / (Math.sin(Math.PI * z) * Math.exp(Statistics.gammaln(1.0 - z))));\n\t\t}\n\t\treturn Math.exp(Statistics.gammaln(z));\n\t}\n\n\t/**\n\t * gammainc(x, a, tail) 不完全ガンマ関数\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {string} [tail=\"lower\"] lower(デフォルト)/upper\n\t * @returns {number}\n\t */\n\tstatic gammainc(x, a, tail) {\n\t\tif(tail === \"lower\") {\n\t\t\treturn Statistics.p_gamma(x, a, Statistics.gammaln(a));\n\t\t}\n\t\telse if(tail === \"upper\") {\n\t\t\treturn Statistics.q_gamma(x, a, Statistics.gammaln(a));\n\t\t}\n\t\telse if(arguments.length === 2) {\n\t\t\t// 引数を省略した場合\n\t\t\treturn Statistics.gammainc(x, a, \"lower\");\n\t\t}\n\t\telse {\n\t\t\tthrow \"gammainc unsupported argument [\" + tail + \"]\";\n\t\t}\n\t}\n\t\n\t/**\n\t * gampdf(x, k, s) ガンマ分布の確率密度関数\n\t * @param {number} x\n\t * @param {number} k - 形状母数\n\t * @param {number} s - 尺度母数\n\t * @returns {number}\n\t */\n\tstatic gampdf(x, k, s) {\n\t\tlet y = 1.0 / (Statistics.gamma(k) * Math.pow(s, k));\n\t\ty *= Math.pow( x, k - 1);\n\t\ty *= Math.exp( - x / s );\n\t\treturn y;\n\t}\n\n\t/**\n\t * gamcdf(x, k, s) ガンマ分布の累積分布関数\n\t * @param {number} x\n\t * @param {number} k - 形状母数\n\t * @param {number} s - 尺度母数\n\t * @returns {number}\n\t */\n\tstatic gamcdf(x, k, s) {\n\t\treturn Statistics.gammainc(x / s, k);\n\t}\n\t\n\t/**\n\t * gaminv(p, k, s) ガンマ分布の累積分布関数の逆関数\n\t * @param {number} p\n\t * @param {number} k - 形状母数\n\t * @param {number} s - 尺度母数\n\t * @returns {number}\n\t */\n\tstatic gaminv(p, k, s) {\n\t\tif((p < 0.0) || (p > 1.0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if(p == 0.0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\telse if(p == 1.0) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\tconst eps = 1.0e-12;\n\t\t// 初期値を決める\n\t\tlet y = k * s;\n\t\t// 単調増加関数なのでニュートン・ラフソン法で解く\n\t\t// x_n+1 = x_n - f(x) / f'(x)\n\t\t// ここで f(x) は累積分布関数、f'(x) は確率密度関数\n\t\t// a = 累積分関数 → f(x)  = 累積分関数 - a と置く。\n\t\t// aの微分は0なので無関係\n\t\tlet delta, y2;\n\t\tfor(let i = 0; i < 100; i++) {\n\t\t\ty2 = y - ((Statistics.gamcdf(y, k, s) - p) / Statistics.gampdf(y, k, s));\n\t\t\tdelta = y2 - y;\n\t\t\tif(Math.abs(delta) <= eps) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y2;\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * beta(x, y) ベータ関数\n\t * @param {number} x\n\t * @param {number} y\n\t * @returns {number}\n\t */\n\tstatic beta(x, y) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p30,技術評論社,1991\n\t\treturn (Math.exp(Statistics.gammaln(x) + Statistics.gammaln(y) - Statistics.gammaln(x + y)));\n\t}\n\t\n\t/**\n\t * p_beta(x, a, b) 不完全ベータ関数 下側\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic p_beta(x, a, b) {\n\t\t// 参考：奥村,\"C言語による最新アルゴリズム事典\",p231,技術評論社,1991\n\t\tlet k;\n\t\tlet result, term, previous;\n\t\tif(a <= 0.0) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\tif(b <= 0.0) {\n\t\t\tif(x < 1.0) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\telse if(x === 1.0) {\n\t\t\t\treturn 1.0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t\t}\n\t\t}\n\t\tif(x > (a + 1.0) / (a + b + 2.0)) {\n\t\t\treturn (1.0 - Statistics.p_beta(1.0 - x, b, a));\n\t\t}\n\t\tif(x <= 0.0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tterm = a * Math.log(x);\n\t\tterm += b * Math.log(1.0 - x);\n\t\tterm += Statistics.gammaln(a + b);\n\t\tterm -= Statistics.gammaln(a) + Statistics.gammaln(b);\n\t\tterm = Math.exp(term);\n\t\tterm /= a;\n\t\tresult = term;\n\t\tfor(k = 1; k < 1000; k++) {\n\t\t\tterm *= a + b + k - 1.0;\n\t\t\tterm *= x;\n\t\t\tterm /= a + k;\n\t\t\tprevious = result;\n\t\t\tresult += term;\n\t\t\tif(result === previous) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn Number.NaN;\n\t}\n\n\t/**\n\t * q_beta(x, a, b) 不完全ベータ関数 上側\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic q_beta(x, a, b) {\n\t\treturn (1.0 - Statistics.p_beta(x, a, b));\n\t}\n\n\t/**\n\t * betainc(x, a, b, tail) 不完全ベータ関数\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @param {string} [tail=\"lower\"] {string} lower(デフォルト)/upper\n\t * @returns {number}\n\t */\n\tstatic betainc(x, a, b, tail) {\n\t\tif(tail === \"lower\") {\n\t\t\treturn Statistics.p_beta(x, a, b);\n\t\t}\n\t\telse if(tail === \"upper\") {\n\t\t\treturn Statistics.q_beta(x, a, b);\n\t\t}\n\t\telse if(arguments.length === 3) {\n\t\t\t// 引数を省略した場合\n\t\t\treturn Statistics.betainc(x, a, b, \"lower\");\n\t\t}\n\t\telse {\n\t\t\tthrow \"betainc unsupported argument [\" + tail + \"]\";\n\t\t}\n\t}\n\t\n\t/**\n\t * betapdf(x, a, b) ベータ分布の確率密度関数\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic betapdf(x, a, b) {\n\t\t//\treturn(Math.exp((a - 1) * Math.log(x) + (b - 1) * Math.log(1 - x)) / Statistics.beta(a,  b));\n\t\treturn (Math.pow(x, a - 1) * Math.pow(1 - x, b - 1) / Statistics.beta(a,  b));\n\t}\n\n\t/**\n\t * betacdf(x, a, b) ベータ分布の累積分布関数\n\t * @param {number} x\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic betacdf(x, a, b) {\n\t\treturn Statistics.betainc(x, a, b);\n\t}\n\t\n\t/**\n\t * betainv(p, a, b) ベータ分布の累積分布関数の逆関数\n\t * @param {number} p\n\t * @param {number} a\n\t * @param {number} b\n\t * @returns {number}\n\t */\n\tstatic betainv(p, a, b) {\n\t\tif((p < 0.0) || (p > 1.0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if((p == 1.0) && (a > 0.0) && (b > 0.0)) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tconst eps = 1.0e-14;\n\t\t// 初期値を決める\n\t\tlet y;\n\t\tif(b == 0) {\n\t\t\ty = 1.0 - eps;\n\t\t}\n\t\telse if(a == 0) {\n\t\t\ty = eps;\n\t\t}\n\t\telse {\n\t\t\ty = a / (a + b);\n\t\t}\n\t\t// 単調増加関数なのでニュートン・ラフソン法で解く\n\t\t// x_n+1 = x_n - f(x) / f'(x)\n\t\t// ここで f(x) は累積分布関数、f'(x) は確率密度関数\n\t\t// a = 累積分関数 → f(x)  = 累積分関数 - a と置く。\n\t\t// aの微分は0なので無関係\n\t\tlet delta, y2;\n\t\tfor(let i = 0; i < 100; i++) {\n\t\t\ty2 = y - ((Statistics.betacdf(y, a, b) - p) / Statistics.betapdf(y, a, b));\n\t\t\tdelta = y2 - y;\n\t\t\tif(Math.abs(delta) <= eps) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y2;\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * factorial(n) = n! 階乗関数\n\t * @param {number} n\n\t * @returns {number}\n\t */\n\tstatic factorial(n) {\n\t\tconst y = Statistics.gamma(n + 1.0);\n\t\tif((n | 0) === n) {\n\t\t\treturn Math.round(y);\n\t\t}\n\t\telse {\n\t\t\treturn y;\n\t\t}\n\t}\n\n\t/**\n\t * nchoosek(n, k) = nCk 二項係数またはすべての組合わせ\n\t * @param {number} n\n\t * @param {number} k\n\t * @returns {number} nCk\n\t */\n\tstatic nchoosek(n, k) {\n\t\treturn (Math.round(Statistics.factorial(n) / (Statistics.factorial(n - k) * Statistics.factorial(k))));\n\t}\n\n\t/**\n\t * erf(x) 誤差関数\n\t * @param {number} x\n\t * @returns {number}\n\t */\n\tstatic erf(x) {\n\t\treturn (Statistics.p_gamma(x * x, 0.5, Math.log(Math.PI) * 0.5) * (x >= 0 ? 1.0 : -1.0));\n\t}\n\n\t/**\n\t * erfc(x) 相補誤差関数\n\t * @param {number} x\n\t * @returns {number}\n\t */\n\tstatic erfc(x) {\n\t\treturn 1.0 - Statistics.erf(x);\n\t}\n\n\t/**\n\t * normpdf(x, u, s) 正規分布の確率密度関数\n\t * @param {number} x\n\t * @param {number} [u=0.0] - 平均値\n\t * @param {number} [s=1.0] - 分散\n\t * @returns {number}\n\t */\n\tstatic normpdf(x, u, s) {\n\t\tconst u_ = typeof u === \"number\" ? u : 0.0;\n\t\tconst s_ = typeof s === \"number\" ? s : 1.0;\n\t\tlet y = 1.0 / Math.sqrt( 2.0 * Math.PI * s_ * s_ );\n\t\ty *= Math.exp( - (x - u_) * (x - u_) / (2.0 * s_ * s_));\n\t\treturn y;\n\t}\n\n\t/**\n\t * normcdf(x, u, s) 正規分布の累積分布関数\n\t * @param {number} x\n\t * @param {number} [u=0.0] - 平均値\n\t * @param {number} [s=1.0] - 分散\n\t * @returns {number}\n\t */\n\tstatic normcdf(x, u, s) {\n\t\tconst u_ = typeof u === \"number\" ? u : 0.0;\n\t\tconst s_ = typeof s === \"number\" ? s : 1.0;\n\t\treturn (1.0 + Statistics.erf( (x - u_) / (s_ * Math.sqrt(2.0)) )) / 2.0;\n\t}\n\n\t/**\n\t * norminv(p, u, s) 正規分布の累積分布関数の逆関数\n\t * @param {number} p - 確率\n\t * @param {number} [u=0.0] - 平均値\n\t * @param {number} [s=1.0] - 分散\n\t * @returns {number}\n\t */\n\tstatic norminv(p, u, s) {\n\t\tif((p < 0.0) || (p > 1.0)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\telse if(p == 0.0) {\n\t\t\treturn Number.NEGATIVE_INFINITY;\n\t\t}\n\t\telse if(p == 1.0) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\tconst u_ = typeof u === \"number\" ? u : 0.0;\n\t\tconst s_ = typeof s === \"number\" ? s : 1.0;\n\t\tconst eps = 1.0e-12;\n\t\t// 初期値を決める\n\t\tlet y = u_;\n\t\t// 単調増加関数なのでニュートン・ラフソン法で解く\n\t\t// x_n+1 = x_n - f(x) / f'(x)\n\t\t// ここで f(x) は累積分布関数、f'(x) は確率密度関数\n\t\t// a = 累積分関数 → f(x)  = 累積分関数 - a と置く。\n\t\t// aの微分は0なので無関係\n\t\tlet delta, y2;\n\t\tfor(let i = 0; i < 200; i++) {\n\t\t\ty2 = y - ((Statistics.normcdf(y, u_, s_) - p) / Statistics.normpdf(y, u_, s_));\n\t\t\tdelta = y2 - y;\n\t\t\tif(Math.abs(delta) <= eps) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y2;\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * tpdf(t, k) t分布の確率密度関数\n\t * @param {number} t - t値\n\t * @param {number} v - 自由度\n\t * @returns {number}\n\t */\n\tstatic tpdf(t, v) {\n\t\tlet y = 1.0 / (Math.sqrt(v) * Statistics.beta(0.5, v * 0.5));\n\t\ty *= Math.pow( 1 + t * t / v, - (v + 1) * 0.5);\n\t\treturn y;\n\t}\n\n\t/**\n\t * tcdf(t) t分布の累積分布関数\n\t * @param {number} t - t値\n\t * @param {number} v - 自由度\n\t * @returns {number}\n\t */\n\tstatic tcdf(t, v) {\n\t\tconst y = (t * t) / (v + t * t) ;\n\t\tconst p = Statistics.betainc( y, 0.5, v * 0.5 ) * (t < 0 ? -1 : 1);\n\t\treturn 0.5 * (1 + p);\n\t}\n\n\t/**\n\t * tinv(p, v) t分布の累積分布関数の逆関数\n\t * @param {number} p - 確率\n\t * @param {number} v - 自由度\n\t * @returns {number}\n\t */\n\tstatic tinv(p, v) {\n\t\tif((p < 0) || (p > 1)) {\n\t\t\treturn Number.NaN;\n\t\t}\n\t\tif(p == 0) {\n\t\t\treturn Number.NEGATIVE_INFINITY;\n\t\t}\n\t\telse if(p == 1) {\n\t\t\treturn Number.POSITIVE_INFINITY;\n\t\t}\n\t\telse if(p < 0.5) {\n\t\t\tconst y = Statistics.betainv(2.0 * p, 0.5 * v, 0.5);\n\t\t\treturn - Math.sqrt(v / y - v);\n\t\t}\n\t\telse {\n\t\t\tconst y = Statistics.betainv(2.0 * (1.0 - p), 0.5 * v, 0.5);\n\t\t\treturn Math.sqrt(v / y - v);\n\t\t}\n\t}\n\n\t/**\n\t * tdist(t, v, tails) 尾部が指定可能なt分布の累積分布関数\n\t * @param {number} t - t値\n\t * @param {number} v - 自由度\n\t * @param {number} tails - 尾部(1...片側、2...両側)\n\t * @returns {number}\n\t */\n\tstatic tdist(t, v, tails) {\n\t\treturn (1.0 - Statistics.tcdf(t, v)) * tails;\n\t}\n\n\t/**\n\t * einv2(p, v) 両側検定時のt分布の累積分布関数\n\t * @param {number} p - 確率\n\t * @param {number} v - 自由度\n\t * @returns {number}\n\t */\n\tstatic tinv2(p, v) {\n\t\treturn - Statistics.tinv( p * 0.5, v);\n\t}\n\n\t/**\n\t * chi2pdf(x, v) カイ二乗分布の確率密度関数\n\t * @param {number} x \n\t * @param {number} k - 自由度\n\t * @returns {number}\n\t */\n\tstatic chi2pdf(x, k) {\n\t\tif(x <= 0.0) {\n\t\t\treturn 0;\n\t\t}\n\t\tlet y = Math.pow(x, k / 2.0 - 1.0) * Math.exp( - x / 2.0 );\n\t\ty /= Math.pow(2, k / 2.0) * Statistics.gamma( k / 2.0);\n\t\treturn y;\n\t}\n\n\t/**\n\t * chi2cdf(x, v) カイ二乗分布の累積分布関数\n\t * @param {number} x \n\t * @param {number} k - 自由度\n\t * @returns {number}\n\t */\n\tstatic chi2cdf(x, k) {\n\t\treturn Statistics.gammainc(x / 2.0, k / 2.0);\n\t}\n\n\t/**\n\t * chi2inv(p, v) カイ二乗分布の逆累積分布関数\n\t * @param {number} p - 確率\n\t * @param {number} k - 自由度\n\t * @returns {number}\n\t */\n\tstatic chi2inv(p, k) {\n\t\treturn Statistics.gaminv(p, k / 2.0, 2);\n\t}\n\n\t/**\n\t * fpdf(x, d1, d2) F分布の確率密度関数\n\t * @param {number} x\n\t * @param {number} d1 - 分子の自由度\n\t * @param {number} d2 - 分母の自由度\n\t * @returns {number}\n\t */\n\tstatic fpdf(x, d1, d2) {\n\t\tlet y = 1.0;\n\t\ty *= Math.pow( (d1 * x) / (d1 * x + d2) , d1 / 2.0);\n\t\ty *= Math.pow( 1.0 - ((d1 * x) / (d1 * x + d2)), d2 / 2.0);\n\t\ty /= x * Statistics.beta(d1 / 2.0, d2 / 2.0);\n\t\treturn y;\n\t}\n\n\t/**\n\t * fcdf(x, d1, d2) F分布の累積分布関数\n\t * @param {number} x\n\t * @param {number} d1 - 分子の自由度\n\t * @param {number} d2 - 分母の自由度\n\t * @returns {number}\n\t */\n\tstatic fcdf(x, d1, d2) {\n\t\treturn Statistics.betacdf( d1 * x / (d1 * x + d2), d1 / 2.0, d2 / 2.0 );\n\t}\n\n\t/**\n\t * finv(p, d1, d2) F分布の累積分布関数の逆関数\n\t * @param {number} p - 確率\n\t * @param {number} d1 - 分子の自由度\n\t * @param {number} d2 - 分母の自由度\n\t * @returns {number}\n\t */\n\tstatic finv(p, d1, d2) {\n\t\treturn (1.0 / Statistics.betainv( 1.0 - p, d2 / 2.0, d1 / 2.0 ) - 1.0) * d2 / d1;\n\t}\n\n}\n\n/*\n//test\n\n// -0.12078223763524543\nconsole.log(Statistics.gammaln(1.5));\n// 0.8862269254527578\nconsole.log(Statistics.gamma(1.5));\n// 0.034141584125708564\nconsole.log(Statistics.gammainc(0.7, 3));\n// 0.02265533286799037\nconsole.log(Statistics.gampdf(10, 7, 3));\n// 0.054134113294645195\nconsole.log(Statistics.gamcdf(10, 7, 3));\n// 24.333147920078357\nconsole.log(Statistics.gaminv(0.7, 7, 3));\n\n// 1.570796326794883\nconsole.log(Statistics.beta(0.5, 1.5));\n// 0.9824904585216\nconsole.log(Statistics.betainc(0.6, 5, 10));\n// 0.3400783626239994\nconsole.log(Statistics.betapdf(0.6, 5, 10));\n// 0.9824904585216\nconsole.log(Statistics.betacdf(0.6, 5, 10));\n// 0.3573724870841673\nconsole.log(Statistics.betainv(0.6, 5, 10));\n\n// 0.3286267594591274\nconsole.log(Statistics.erf(0.3));\n\n//0.2896915527614828\nconsole.log(Statistics.normpdf(0.8));\n// 0.7881446014166031\nconsole.log(Statistics.normcdf(0.8));\n// 0.8416212335729142\nconsole.log(Statistics.norminv(0.8));\n// 0.2713125051165461\nconsole.log(Statistics.tpdf(0.8, 7));\n// 0.7749986502650896\nconsole.log(Statistics.tcdf(0.8, 7));\n// 0.8960296443137515\nconsole.log(Statistics.tinv(0.8, 7));\n// 0.05534766632274616\nconsole.log(Statistics.chi2pdf(2, 7));\n// 0.04015963126989858\nconsole.log(Statistics.chi2cdf(2, 7));\n// 8.383430828608336\nconsole.log(Statistics.chi2inv(0.7, 7));\n// 0.17142030504271438\nconsole.log(Statistics.fpdf(0.7, 0.6, 0.8));\n// 0.5005807484277708\nconsole.log(Statistics.fcdf(0.7, 0.6, 0.8));\n// 3.8856206694367055\nconsole.log(Statistics.finv(0.7, 0.6, 0.8));\n*/\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/MathUtil/Statistics.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 668,
    "kind": "class",
    "name": "Statistics",
    "memberof": "src/MathUtil/Statistics.mjs",
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics",
    "access": "public",
    "export": true,
    "importPath": "konpeito.js/src/MathUtil/Statistics.mjs",
    "importStyle": "Statistics",
    "description": "実数専用の統計処理用の関数集",
    "lineNumber": 15,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 669,
    "kind": "method",
    "name": "gammaln",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.gammaln",
    "access": "public",
    "description": "gammaln(x) 対数ガンマ関数 ",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 670,
    "kind": "method",
    "name": "q_gamma",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.q_gamma",
    "access": "public",
    "description": "q_gamma(x, a, gammaln_a) 不完全ガンマ関数 上側",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "gammaln_a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 671,
    "kind": "method",
    "name": "p_gamma",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.p_gamma",
    "access": "public",
    "description": "p_gamma(x, a, gammaln_a) 不完全ガンマ関数 下側",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "gammaln_a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 672,
    "kind": "method",
    "name": "gamma",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.gamma",
    "access": "public",
    "description": "gamma(z) ガンマ関数",
    "lineNumber": 130,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 673,
    "kind": "method",
    "name": "gammainc",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.gammainc",
    "access": "public",
    "description": "gammainc(x, a, tail) 不完全ガンマ関数",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "lower(デフォルト)/upper"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 674,
    "kind": "method",
    "name": "gampdf",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.gampdf",
    "access": "public",
    "description": "gampdf(x, k, s) ガンマ分布の確率密度関数",
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 675,
    "kind": "method",
    "name": "gamcdf",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.gamcdf",
    "access": "public",
    "description": "gamcdf(x, k, s) ガンマ分布の累積分布関数",
    "lineNumber": 182,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 676,
    "kind": "method",
    "name": "gaminv",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.gaminv",
    "access": "public",
    "description": "gaminv(p, k, s) ガンマ分布の累積分布関数の逆関数",
    "lineNumber": 193,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "形状母数"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "尺度母数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 677,
    "kind": "method",
    "name": "beta",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.beta",
    "access": "public",
    "description": "beta(x, y) ベータ関数",
    "lineNumber": 229,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 678,
    "kind": "method",
    "name": "p_beta",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.p_beta",
    "access": "public",
    "description": "p_beta(x, a, b) 不完全ベータ関数 下側",
    "lineNumber": 241,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 679,
    "kind": "method",
    "name": "q_beta",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.q_beta",
    "access": "public",
    "description": "q_beta(x, a, b) 不完全ベータ関数 上側",
    "lineNumber": 292,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 680,
    "kind": "method",
    "name": "betainc",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.betainc",
    "access": "public",
    "description": "betainc(x, a, b, tail) 不完全ベータ関数",
    "lineNumber": 304,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"lower\"",
        "defaultRaw": "lower",
        "name": "tail",
        "description": "{string} lower(デフォルト)/upper"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 681,
    "kind": "method",
    "name": "betapdf",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.betapdf",
    "access": "public",
    "description": "betapdf(x, a, b) ベータ分布の確率密度関数",
    "lineNumber": 327,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 682,
    "kind": "method",
    "name": "betacdf",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.betacdf",
    "access": "public",
    "description": "betacdf(x, a, b) ベータ分布の累積分布関数",
    "lineNumber": 339,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 683,
    "kind": "method",
    "name": "betainv",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.betainv",
    "access": "public",
    "description": "betainv(p, a, b) ベータ分布の累積分布関数の逆関数",
    "lineNumber": 350,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 684,
    "kind": "method",
    "name": "factorial",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.factorial",
    "access": "public",
    "description": "factorial(n) = n! 階乗関数",
    "lineNumber": 391,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 685,
    "kind": "method",
    "name": "nchoosek",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.nchoosek",
    "access": "public",
    "description": "nchoosek(n, k) = nCk 二項係数またはすべての組合わせ",
    "lineNumber": 407,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} nCk"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "nCk"
    }
  },
  {
    "__docId__": 686,
    "kind": "method",
    "name": "erf",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.erf",
    "access": "public",
    "description": "erf(x) 誤差関数",
    "lineNumber": 416,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 687,
    "kind": "method",
    "name": "erfc",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.erfc",
    "access": "public",
    "description": "erfc(x) 相補誤差関数",
    "lineNumber": 425,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 688,
    "kind": "method",
    "name": "normpdf",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.normpdf",
    "access": "public",
    "description": "normpdf(x, u, s) 正規分布の確率密度関数",
    "lineNumber": 436,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 689,
    "kind": "method",
    "name": "normcdf",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.normcdf",
    "access": "public",
    "description": "normcdf(x, u, s) 正規分布の累積分布関数",
    "lineNumber": 451,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 690,
    "kind": "method",
    "name": "norminv",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.norminv",
    "access": "public",
    "description": "norminv(p, u, s) 正規分布の累積分布関数の逆関数",
    "lineNumber": 464,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "確率"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "u",
        "description": "平均値"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "s",
        "description": "分散"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 691,
    "kind": "method",
    "name": "tpdf",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.tpdf",
    "access": "public",
    "description": "tpdf(t, k) t分布の確率密度関数",
    "lineNumber": 502,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "t値"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 692,
    "kind": "method",
    "name": "tcdf",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.tcdf",
    "access": "public",
    "description": "tcdf(t) t分布の累積分布関数",
    "lineNumber": 514,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "t値"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 693,
    "kind": "method",
    "name": "tinv",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.tinv",
    "access": "public",
    "description": "tinv(p, v) t分布の累積分布関数の逆関数",
    "lineNumber": 526,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "確率"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 694,
    "kind": "method",
    "name": "tdist",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.tdist",
    "access": "public",
    "description": "tdist(t, v, tails) 尾部が指定可能なt分布の累積分布関数",
    "lineNumber": 553,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "t値"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "tails",
        "description": "尾部(1...片側、2...両側)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 695,
    "kind": "method",
    "name": "tinv2",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.tinv2",
    "access": "public",
    "description": "einv2(p, v) 両側検定時のt分布の累積分布関数",
    "lineNumber": 563,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "確率"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 696,
    "kind": "method",
    "name": "chi2pdf",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.chi2pdf",
    "access": "public",
    "description": "chi2pdf(x, v) カイ二乗分布の確率密度関数",
    "lineNumber": 573,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 697,
    "kind": "method",
    "name": "chi2cdf",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.chi2cdf",
    "access": "public",
    "description": "chi2cdf(x, v) カイ二乗分布の累積分布関数",
    "lineNumber": 588,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 698,
    "kind": "method",
    "name": "chi2inv",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.chi2inv",
    "access": "public",
    "description": "chi2inv(p, v) カイ二乗分布の逆累積分布関数",
    "lineNumber": 598,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "確率"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "k",
        "description": "自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 699,
    "kind": "method",
    "name": "fpdf",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.fpdf",
    "access": "public",
    "description": "fpdf(x, d1, d2) F分布の確率密度関数",
    "lineNumber": 609,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 700,
    "kind": "method",
    "name": "fcdf",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.fcdf",
    "access": "public",
    "description": "fcdf(x, d1, d2) F分布の累積分布関数",
    "lineNumber": 624,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 701,
    "kind": "method",
    "name": "finv",
    "memberof": "src/MathUtil/Statistics.mjs~Statistics",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/MathUtil/Statistics.mjs~Statistics.finv",
    "access": "public",
    "description": "finv(p, d1, d2) F分布の累積分布関数の逆関数",
    "lineNumber": 635,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "確率"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "分子の自由度"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "分母の自由度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 702,
    "kind": "file",
    "name": "src/Util/File.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nconst CSVTool = {\n\t\n\tparseCSV: function(text, separator) {\n\t\tif(arguments.length < 2) {\n\t\t\tseparator = \",\";\n\t\t}\n\t\t// 改行コードの正規化\n\t\ttext = text.replace(/\\r\\n?|\\n/g, \"\\n\");\n\t\tconst CODE_SEPARATOR = separator.charCodeAt(0);\n\t\tconst CODE_CR    = 0x0D;\n\t\tconst CODE_LF    = 0x0A;\n\t\tconst CODE_DOUBLEQUOTES = 0x22;\n\t\tconst out = [];\n\t\tconst length = text.length;\n\t\tlet element = \"\";\n\t\tlet count_rows    = 0;\n\t\tlet count_columns = 0;\n\t\tlet isnextelement = false;\n\t\tlet isnextline    = false;\n\t\tfor(let i = 0; i < length; i++) {\n\t\t\tlet code = text.charCodeAt(i);\n\t\t\t// 複数行なら一気に全て読み込んでしまう(1文字目がダブルクォーテーションかどうか)\n\t\t\tif((code === CODE_DOUBLEQUOTES)&&(element.length === 0)) {\n\t\t\t\ti++;\n\t\t\t\tfor(;i < length;i++) {\n\t\t\t\t\tcode = text.charCodeAt(i);\n\t\t\t\t\tif(code === CODE_DOUBLEQUOTES) {\n\t\t\t\t\t\t// フィールドの終了か？\n\t\t\t\t\t\t// 文字としてのダブルクォーテーションなのか\n\t\t\t\t\t\tif((i + 1) !== (length - 1)) {\n\t\t\t\t\t\t\tif(text.charCodeAt(i + 1) === CODE_DOUBLEQUOTES) {\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t\telement += \"\\\"\"; \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\telement += text.charAt(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 複数行以外なら1文字ずつ解析\n\t\t\telse {\n\t\t\t\tswitch(code) {\n\t\t\t\t\tcase(CODE_SEPARATOR):\n\t\t\t\t\t\tisnextelement = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase(CODE_CR):\n\t\t\t\t\tcase(CODE_LF):\n\t\t\t\t\t\tisnextline = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(isnextelement) {\n\t\t\t\t\tisnextelement = false;\n\t\t\t\t\tif(out[count_rows] === undefined) {\n\t\t\t\t\t\tout[count_rows] = [];\n\t\t\t\t\t}\n\t\t\t\t\tout[count_rows][count_columns] = element;\n\t\t\t\t\telement = \"\";\n\t\t\t\t\tcount_columns += 1;\n\t\t\t\t}\n\t\t\t\telse if(isnextline) {\n\t\t\t\t\tisnextline = false;\n\t\t\t\t\t//文字があったり、改行がある場合は処理\n\t\t\t\t\t//例えば CR+LF や 最後のフィールド で改行しているだけなどは無視できる\n\t\t\t\t\tif((element !== \"\")||(count_columns !== 0)) {\n\t\t\t\t\t\tif(out[count_rows] === undefined) {\n\t\t\t\t\t\t\tout[count_rows] = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tout[count_rows][count_columns] = element;\n\t\t\t\t\t\telement = \"\";\n\t\t\t\t\t\tcount_rows    += 1;\n\t\t\t\t\t\tcount_columns  = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\telement += text.charAt(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 最終行に改行がない場合\n\t\t\tif(i === length - 1) {\n\t\t\t\tif(count_columns !== 0) {\n\t\t\t\t\tout[count_rows][count_columns] = element;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t},\n\t\n\tmakeCSV: function(text, separator, newline) {\n\t\tif(arguments.length < 2) {\n\t\t\tseparator = \",\";\n\t\t}\n\t\tif(arguments.length < 3) {\n\t\t\tnewline = \"\\r\\n\";\n\t\t}\n\t\tlet out = \"\";\n\t\tconst escape = /[\"\\r\\n,\\t]/;\n\t\tif(text !== undefined) {\n\t\t\tfor(let i = 0;i < text.length;i++) {\n\t\t\t\tif(text[i] !== undefined) {\n\t\t\t\t\tfor(let j = 0;j < text[i].length;j++) {\n\t\t\t\t\t\tlet element = text[i][j];\n\t\t\t\t\t\tif(escape.test(element)) {\n\t\t\t\t\t\t\telement = element.replace(/\"/g, \"\\\"\\\"\");\n\t\t\t\t\t\t\telement = \"\\\"\" + element + \"\\\"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tout += element;\n\t\t\t\t\t\tif(j !== text[i].length - 1) {\n\t\t\t\t\t\t\tout += separator;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tout += newline;\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n};\n\n/**\n * 調整中\n * @ignore\n */\nexport default class File {\n\t\n\tconstructor(pathname) {\n\t\tthis.isHTML = (typeof window !== \"undefined\");\n\t\tthis.isNode = false;\n\t\tif(arguments.length !== 1) {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\telse if((typeof pathname === \"string\")||(pathname instanceof String)) {\n\t\t\t// \\を/に置き換える\n\t\t\tthis.pathname = pathname.replace(/\\\\/g, \"/\" );\n\t\t}\n\t\telse if(pathname instanceof File) {\n\t\t\tthis.pathname = pathname.getAbsolutePath();\n\t\t}\n\t\telse {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t}\n\n\tdelete_() {\n\t\tthrow \"IllegalMethod\";\n\t}\n\t\n\texists() {\n\t\tthrow \"IllegalMethod\";\n\t}\n\t\n\tcopy() {\n\t\tthrow \"IllegalMethod\";\n\t}\n\t\n\tmove() {\n\t\tthrow \"IllegalMethod\";\n\t}\n\t\n\ttoString() {\n\t\treturn this.getAbsolutePath();\n\t}\n\t\n\tgetName() {\n\t\tif(this.isHTML) {\n\t\t\t// 最後がスラッシュで終えている場合は、ファイル名取得できない\n\t\t\tif(this.isDirectory()) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\tconst slashsplit = this.pathname.split(\"/\");\n\t\t\treturn slashsplit[slashsplit.length - 1];\n\t\t}\n\t\telse if(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\t// 親フォルダの絶対パス名\n\tgetParent() {\n\t\tconst x = this.getAbsolutePath().match(/.*[/\\\\]/)[0];\n\t\treturn x.substring(0 ,x.length - 1);\n\t}\n\t\n\tgetParentFile() {\n\t\treturn new File(this.getParent());\n\t}\n\t\n\tgetExtensionName() {\n\t\tif(this.isHTML) {\n\t\t\tconst dotlist = this.getName().split(\".\");\n\t\t\treturn dotlist[dotlist.length - 1];\n\t\t}\n\t\telse if(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tisAbsolute() {\n\t\tif(this.isHTML) {\n\t\t\treturn this.getAbsolutePath() === this.pathname;\n\t\t}\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tisDirectory() {\n\t\tif(this.isHTML) {\n\t\t\t// 最後がスラッシュで終えている場合はディレクトリ\n\t\t\treturn /\\/$/.test(this.pathname);\n\t\t}\n\t\telse if(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tisFile() {\n\t\tif(this.isHTML) {\n\t\t\t// 最後がスラッシュで終えていない場合はファイル\n\t\t\treturn /[^/]$/.test(this.pathname);\n\t\t}\n\t\telse if(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\tisHidden() {\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tlastModified() {\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tsetLastModified() {\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tlength() {\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tgetFiles() {\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tgetSubFolders() {\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tgetNormalizedPathName() {\n\t\tif(this.pathname === \"\") {\n\t\t\treturn \".\\\\\";\n\t\t}\n\t\tlet name = this.pathname.replace(/\\//g, \"\\\\\");\n\t\tif(name.slice(-1) !== \"\\\\\") {\n\t\t\tname += \"\\\\\";\n\t\t}\n\t\treturn name;\n\t}\n\t\n\tgetAllFiles() {\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tlist() {\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tgetAbsolutePath() {\n\t\tif(this.isHTML) {\n\t\t\tlet all_path = null;\n\t\t\t// URLを一度取得する\n\t\t\tif(/^http/.test(this.pathname)) {\n\t\t\t\tall_path = this.pathname;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet curdir = window.location.toString();\n\t\t\t\t// 最後がスラッシュで終えていないは、ファイル部分を削る\n\t\t\t\tif(!(/\\/$/.test(curdir))) {\n\t\t\t\t\tcurdir = curdir.match(/.*\\//)[0];\n\t\t\t\t}\n\t\t\t\tall_path = curdir + this.pathname;\n\t\t\t}\n\t\t\t// ホストとファイルに分ける\n\t\t\tconst hosttext = all_path.match(/^http[^/]+\\/\\/[^/]+\\//)[0];\n\t\t\tconst filetext = all_path.substr(hosttext.length);\n\t\t\t// パスを1つずつ解析しながら辿っていく\n\t\t\tlet name = hosttext;\n\t\t\tconst namelist = filetext.split(\"/\");\n\t\t\tlet i;\n\t\t\tfor(i = 0; i < namelist.length; i++) {\n\t\t\t\tif((namelist[i] === \"\") || (namelist[i] === \".\")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(namelist[i] === \"..\") {\n\t\t\t\t\tname = name.substring(0 ,name.length - 1).match(/.*\\//)[0];\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tname += namelist[i];\n\t\t\t\tif(i !== namelist.length - 1) {\n\t\t\t\t\tname += \"/\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn name;\n\t\t}\n\t\telse if(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tmkdir() {\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tmkdirs() {\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\trenameTo() {\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\trun() {\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\twriteLine() {\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tdownload(callback) {\n\t\tif(this.isHTML) {\n\t\t\tconst ext = this.getExtensionName().toLocaleString();\n\t\t\tconst that = this;\n\t\t\tif((ext === \"gif\") || (ext === \"jpg\") || (ext === \"png\") || (ext === \"bmp\") || (ext === \"svg\") || (ext === \"jpeg\")) {\n\t\t\t\tconst image = new Image();\n\t\t\t\timage.onload = function() {\n\t\t\t\t\tthat.dataImage = image;\n\t\t\t\t\tcallback(that);\n\t\t\t\t};\n\t\t\t\timage.src = this.pathname;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst http = File.createXMLHttpRequest();\n\t\t\t\tif(http === null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tconst handleHttpResponse = function (){\n\t\t\t\t\t// readyState === 0 UNSENT\n\t\t\t\t\t// readyState === 1 OPENED\n\t\t\t\t\t// readyState === 2 HEADERS_RECEIVED\n\t\t\t\t\t// readyState === 3 LOADING\n\t\t\t\t\tif(http.readyState === 4) { // DONE\n\t\t\t\t\t\tif(http.status !== 200) {\n\t\t\t\t\t\t\tconsole.log(\"error downloadText \" + that.pathname);\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthat.dataText = http.responseText;\n\t\t\t\t\t\tcallback(that);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\thttp.onreadystatechange = handleHttpResponse;\n\t\t\t\thttp.open(\"GET\", this.pathname, true);\n\t\t\t\thttp.send(null);\n\t\t\t}\n\t\t}\n\t\telse if(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tgetImage() {\n\t\tif(this.isHTML) {\n\t\t\treturn this.dataImage;\n\t\t}\n\t}\n\t\n\tgetText() {\n\t\tif(this.isHTML) {\n\t\t\treturn this.dataText;\n\t\t}\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tsetText() {\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tgetCSV(separator, charset, newline) {\n\t\tif(this.isHTML) {\n\t\t\treturn(CSVTool.parseCSV(this.dataText, separator, newline));\n\t\t}\n\t\telse if(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\n\tsetCSV() {\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\n\tgetByte() {\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\n\tsetByte() {\n\t\tif(this.isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tstatic createTempFile(){\n\t\tconst isHTML = (typeof window !== \"undefined\");\n\t\tif(isHTML) {\n\t\t\tthrow \"not createTempFile\";\n\t\t}\n\t\tconst isNode = false;\n\t\tif(isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tstatic getCurrentDirectory(){\n\t\tconst isHTML = (typeof window !== \"undefined\");\n\t\tif(isHTML) {\n\t\t\tconst file = new File(\"./\");\n\t\t\treturn file.getParent();\n\t\t}\n\t\tconst isNode = false;\n\t\tif(isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tstatic setCurrentDirectory() {\n\t\tconst isHTML = (typeof window !== \"undefined\");\n\t\tif(isHTML) {\n\t\t\tthrow \"not setCurrentDirectory\";\n\t\t}\n\t\tconst isNode = false;\n\t\tif(isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tstatic searchFile(){\n\t\tconst isHTML = (typeof window !== \"undefined\");\n\t\tif(isHTML) {\n\t\t\tthrow \"not searchFile\";\n\t\t}\n\t\tconst isNode = false;\n\t\tif(isNode) {\n\t\t\tthrow \"IllegalMethod\";\n\t\t}\n\t}\n\t\n\tstatic downloadFileList(files, lastCallback, fileCallback) {\n\t\tlet downloadcount = 0;\n\t\tlet i;\n\t\tconst inf = function(filenumber) {\n\t\t\treturn function() {\n\t\t\t\tdownloadcount++;\n\t\t\t\tif(fileCallback && fileCallback.length && fileCallback[filenumber] ) {\n\t\t\t\t\tfileCallback[filenumber](files[filenumber]);\n\t\t\t\t}\n\t\t\t\tif(downloadcount === files.length) {\n\t\t\t\t\tif(lastCallback) {\n\t\t\t\t\t\tlastCallback(files);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t\tfor(i = 0; i < files.length; i++ ) {\n\t\t\tfiles[i].download(inf(i));\n\t\t}\n\t}\n\n\tstatic createXMLHttpRequest() {\n\t\treturn new XMLHttpRequest();\n\t}\n\t\n\tstatic getCSVTool() {\n\t\treturn CSVTool;\n\t}\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/Util/File.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 703,
    "kind": "variable",
    "name": "CSVTool",
    "memberof": "src/Util/File.mjs",
    "static": true,
    "longname": "src/Util/File.mjs~CSVTool",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/Util/File.mjs",
    "importStyle": null,
    "description": "The script is part of konpeito.\n\nAUTHOR:\n natade (http://twitter.com/natadea)\n\nLICENSE:\n The MIT license https://opensource.org/licenses/MIT",
    "lineNumber": 11,
    "type": {
      "types": [
        "{\"parseCSV\": *, \"makeCSV\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 704,
    "kind": "class",
    "name": "File",
    "memberof": "src/Util/File.mjs",
    "static": true,
    "longname": "src/Util/File.mjs~File",
    "access": "public",
    "export": true,
    "importPath": "konpeito.js/src/Util/File.mjs",
    "importStyle": "File",
    "description": "調整中",
    "lineNumber": 143,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 705,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true
  },
  {
    "__docId__": 706,
    "kind": "member",
    "name": "isHTML",
    "memberof": "src/Util/File.mjs~File",
    "static": false,
    "longname": "src/Util/File.mjs~File#isHTML",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 707,
    "kind": "member",
    "name": "isNode",
    "memberof": "src/Util/File.mjs~File",
    "static": false,
    "longname": "src/Util/File.mjs~File#isNode",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 708,
    "kind": "member",
    "name": "pathname",
    "memberof": "src/Util/File.mjs~File",
    "static": false,
    "longname": "src/Util/File.mjs~File#pathname",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 710,
    "kind": "method",
    "name": "delete_",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#delete_",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 711,
    "kind": "method",
    "name": "exists",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#exists",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 712,
    "kind": "method",
    "name": "copy",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#copy",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 713,
    "kind": "method",
    "name": "move",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#move",
    "access": "public",
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 714,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#toString",
    "access": "public",
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 715,
    "kind": "method",
    "name": "getName",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#getName",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 716,
    "kind": "method",
    "name": "getParent",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#getParent",
    "access": "public",
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 717,
    "kind": "method",
    "name": "getParentFile",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#getParentFile",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 718,
    "kind": "method",
    "name": "getExtensionName",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#getExtensionName",
    "access": "public",
    "description": null,
    "lineNumber": 207,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 719,
    "kind": "method",
    "name": "isAbsolute",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#isAbsolute",
    "access": "public",
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 720,
    "kind": "method",
    "name": "isDirectory",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#isDirectory",
    "access": "public",
    "description": null,
    "lineNumber": 226,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 721,
    "kind": "method",
    "name": "isFile",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#isFile",
    "access": "public",
    "description": null,
    "lineNumber": 236,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 722,
    "kind": "method",
    "name": "isHidden",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#isHidden",
    "access": "public",
    "description": null,
    "lineNumber": 245,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 723,
    "kind": "method",
    "name": "lastModified",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#lastModified",
    "access": "public",
    "description": null,
    "lineNumber": 251,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 724,
    "kind": "method",
    "name": "setLastModified",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#setLastModified",
    "access": "public",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 725,
    "kind": "method",
    "name": "length",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#length",
    "access": "public",
    "description": null,
    "lineNumber": 263,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 726,
    "kind": "method",
    "name": "getFiles",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#getFiles",
    "access": "public",
    "description": null,
    "lineNumber": 269,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 727,
    "kind": "method",
    "name": "getSubFolders",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#getSubFolders",
    "access": "public",
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 728,
    "kind": "method",
    "name": "getNormalizedPathName",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#getNormalizedPathName",
    "access": "public",
    "description": null,
    "lineNumber": 281,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 729,
    "kind": "method",
    "name": "getAllFiles",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#getAllFiles",
    "access": "public",
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 730,
    "kind": "method",
    "name": "list",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#list",
    "access": "public",
    "description": null,
    "lineNumber": 298,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 731,
    "kind": "method",
    "name": "getAbsolutePath",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#getAbsolutePath",
    "access": "public",
    "description": null,
    "lineNumber": 304,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 732,
    "kind": "method",
    "name": "mkdir",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#mkdir",
    "access": "public",
    "description": null,
    "lineNumber": 346,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 733,
    "kind": "method",
    "name": "mkdirs",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#mkdirs",
    "access": "public",
    "description": null,
    "lineNumber": 352,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 734,
    "kind": "method",
    "name": "renameTo",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#renameTo",
    "access": "public",
    "description": null,
    "lineNumber": 358,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 735,
    "kind": "method",
    "name": "run",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#run",
    "access": "public",
    "description": null,
    "lineNumber": 364,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 736,
    "kind": "method",
    "name": "writeLine",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#writeLine",
    "access": "public",
    "description": null,
    "lineNumber": 370,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 737,
    "kind": "method",
    "name": "download",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#download",
    "access": "public",
    "description": null,
    "lineNumber": 376,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 738,
    "kind": "method",
    "name": "getImage",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#getImage",
    "access": "public",
    "description": null,
    "lineNumber": 417,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 739,
    "kind": "method",
    "name": "getText",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#getText",
    "access": "public",
    "description": null,
    "lineNumber": 423,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 740,
    "kind": "method",
    "name": "setText",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#setText",
    "access": "public",
    "description": null,
    "lineNumber": 432,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 741,
    "kind": "method",
    "name": "getCSV",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#getCSV",
    "access": "public",
    "description": null,
    "lineNumber": 438,
    "undocument": true,
    "params": [
      {
        "name": "separator",
        "types": [
          "*"
        ]
      },
      {
        "name": "charset",
        "types": [
          "*"
        ]
      },
      {
        "name": "newline",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 742,
    "kind": "method",
    "name": "setCSV",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#setCSV",
    "access": "public",
    "description": null,
    "lineNumber": 447,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 743,
    "kind": "method",
    "name": "getByte",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#getByte",
    "access": "public",
    "description": null,
    "lineNumber": 453,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 744,
    "kind": "method",
    "name": "setByte",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/File.mjs~File#setByte",
    "access": "public",
    "description": null,
    "lineNumber": 459,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 745,
    "kind": "method",
    "name": "createTempFile",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Util/File.mjs~File.createTempFile",
    "access": "public",
    "description": null,
    "lineNumber": 465,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 746,
    "kind": "method",
    "name": "getCurrentDirectory",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Util/File.mjs~File.getCurrentDirectory",
    "access": "public",
    "description": null,
    "lineNumber": 476,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 747,
    "kind": "method",
    "name": "setCurrentDirectory",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Util/File.mjs~File.setCurrentDirectory",
    "access": "public",
    "description": null,
    "lineNumber": 488,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 748,
    "kind": "method",
    "name": "searchFile",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Util/File.mjs~File.searchFile",
    "access": "public",
    "description": null,
    "lineNumber": 499,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 749,
    "kind": "method",
    "name": "downloadFileList",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Util/File.mjs~File.downloadFileList",
    "access": "public",
    "description": null,
    "lineNumber": 510,
    "undocument": true,
    "params": [
      {
        "name": "files",
        "types": [
          "*"
        ]
      },
      {
        "name": "lastCallback",
        "types": [
          "*"
        ]
      },
      {
        "name": "fileCallback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 750,
    "kind": "method",
    "name": "createXMLHttpRequest",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Util/File.mjs~File.createXMLHttpRequest",
    "access": "public",
    "description": null,
    "lineNumber": 531,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 751,
    "kind": "method",
    "name": "getCSVTool",
    "memberof": "src/Util/File.mjs~File",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Util/File.mjs~File.getCSVTool",
    "access": "public",
    "description": null,
    "lineNumber": 535,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 752,
    "kind": "file",
    "name": "src/Util/Format.mjs",
    "content": "﻿/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\n/**\n  * \n  * @ignore\n  */\nexport default class Format {\n\n\t/**\n\t * C言語のprintfを再現\n\t * ロケール、日付時刻等はサポートしていません。\n\t * sprintfの変換指定子のpとnはサポートしていません。\n\t * @param {string} text \n\t * @param {string} parmeter パラメータは可変引数\n\t * @returns {string}\n\t * @ignore\n\t */\n\tstatic format(text, parmeter) {\n\t\tlet parm_number = 1;\n\t\tconst parm = arguments;\n\t\tconst toUnsign  = function(x) {\n\t\t\tif(x >= 0) {\n\t\t\t\treturn(x);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tx = -x;\n\t\t\t\t//16ビットごとに分けてビット反転\n\t\t\t\tlet high = ((~x) >> 16) & 0xFFFF;\n\t\t\t\thigh *= 0x00010000;\n\t\t\t\tconst low  =  (~x) & 0xFFFF;\n\t\t\t\treturn(high + low + 1);\n\t\t\t}\n\t\t};\n\t\tconst func = function(str) {\n\t\t\t// 1文字目の%を除去\n\t\t\tstr = str.substring(1, str.length);\n\t\t\tlet buff;\n\t\t\t// [6] 変換指定子(最後の1文字を取得)\n\t\t\tbuff = str.match(/.$/);\n\t\t\tconst type = buff[0];\n\t\t\tif(type === \"%\") {\n\t\t\t\treturn(\"%\");\n\t\t\t}\n\t\t\t// ここからパラメータの解析開始\n\t\t\t// [1] 引数順\n\t\t\tbuff = str.match(/^[0-9]+\\$/);\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0];\n\t\t\t\t// 残りの文字列を取得\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t\t// 数字だけ切り出す\n\t\t\t\tbuff = buff.substring(0, buff.length - 1);\n\t\t\t\t// 整数へ\n\t\t\t\tparm_number = parseInt(buff , 10);\n\t\t\t}\n\t\t\t// 引数を取得\n\t\t\tlet parameter = parm[parm_number];\n\t\t\tparm_number = parm_number + 1;\n\t\t\t// [2] フラグ\n\t\t\tbuff = str.match(/^[-+ #0]+/);\n\t\t\tlet isFlagSharp = false;\n\t\t\tlet isFlagTextAlignLeft = false;\n\t\t\tconst isFlagFill = false;\n\t\t\tlet sFillCharacter = \" \";\n\t\t\tlet isFlagFillZero = false;\n\t\t\tlet isFlagDrawSign = false;\n\t\t\tlet sSignCharacter = \"\";\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0];\n\t\t\t\t// 残りの文字列を取得\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t\tif(buff.indexOf(\"#\") !== -1) {\n\t\t\t\t\tisFlagSharp = true;\n\t\t\t\t}\n\t\t\t\tif(buff.indexOf(\"-\") !== -1) {\n\t\t\t\t\tisFlagTextAlignLeft = true;\n\t\t\t\t}\n\t\t\t\tif(buff.indexOf(\" \") !== -1) {\n\t\t\t\t\tisFlagDrawSign = true;\n\t\t\t\t\tsSignCharacter = \" \";\n\t\t\t\t}\n\t\t\t\tif(buff.indexOf(\"+\") !== -1) {\n\t\t\t\t\tisFlagDrawSign = true;\n\t\t\t\t\tsSignCharacter = \"+\";\n\t\t\t\t}\n\t\t\t\tif(buff.indexOf(\"0\") !== -1) {\n\t\t\t\t\tisFlagFillZero = true;\n\t\t\t\t\tsFillCharacter = \"0\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t// [3] 最小フィールド幅\n\t\t\tlet width = 0;\n\t\t\tbuff = str.match(/^([0-9]+|\\*)/);\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0];\n\t\t\t\t// 残りの文字列を取得\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t\tif(buff.indexOf(\"*\") !== -1) { // 引数で最小フィールド幅を指定\n\t\t\t\t\twidth = parameter;\n\t\t\t\t\tparameter = parm[parm_number];\n\t\t\t\t\tparm_number = parm_number + 1;\n\t\t\t\t}\n\t\t\t\telse { // 数字で指定\n\t\t\t\t\twidth = parseInt(buff , 10);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// [4] 精度の指定\n\t\t\tlet isPrecision = false;\n\t\t\tlet precision = 0;\n\t\t\tbuff = str.match(/^(\\.((-?[0-9]+)|\\*)|\\.)/); //.-3, .* , .\n\t\t\tif(buff !== null) {\n\t\t\t\tbuff = buff[0];\n\t\t\t\t// 残りの文字列を取得\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t\tisPrecision = true;\n\t\t\t\tif(buff.indexOf(\"*\") !== -1) { // 引数で精度を指定\n\t\t\t\t\tprecision = parameter;\n\t\t\t\t\tparameter = parm[parm_number];\n\t\t\t\t\tparm_number = parm_number + 1;\n\t\t\t\t}\n\t\t\t\telse if(buff.length === 1) { // 小数点だけの指定\n\t\t\t\t\tprecision = 0;\n\t\t\t\t}\n\t\t\t\telse { // 数字で指定\n\t\t\t\t\tbuff = buff.substring(1, buff.length);\n\t\t\t\t\tprecision = parseInt(buff , 10);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 長さ修飾子(非サポート)\n\t\t\tbuff = str.match(/^hh|h|ll|l|L|z|j|t/);\n\t\t\tif(buff !== null) {\n\t\t\t\tstr = str.substring(buff.length, str.length);\n\t\t\t}\n\t\t\t// 文字列を作成する\n\t\t\tlet output = \"\";\n\t\t\tlet isInteger = false;\n\t\t\tswitch(type.toLowerCase()) {\n\t\t\t\t// 数字関連\n\t\t\t\tcase \"d\":\n\t\t\t\tcase \"i\":\n\t\t\t\tcase \"u\":\n\t\t\t\tcase \"b\":\n\t\t\t\tcase \"o\":\n\t\t\t\tcase \"x\":\n\t\t\t\t\tisInteger = true;\n\t\t\t\t\t// falls through\n\t\t\t\tcase \"e\":\n\t\t\t\tcase \"f\":\n\t\t\t\tcase \"g\":\n\t\t\t\t{\n\t\t\t\t\tlet sharpdata = \"\";\n\t\t\t\t\tlet textlength = 0; // 現在の文字を構成するために必要な長さ\n\t\t\t\t\tlet spacesize;  // 追加する横幅\n\t\t\t\t\t// 整数\n\t\t\t\t\tif(isInteger) {\n\t\t\t\t\t\t// 数字に変換\n\t\t\t\t\t\tif(isNaN(parameter)) {\n\t\t\t\t\t\t\tparameter = parseInt(parameter, 10);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 正負判定\n\t\t\t\t\t\tif((type === \"d\") || (type === \"i\")) {\n\t\t\t\t\t\t\tif(parameter < 0) {\n\t\t\t\t\t\t\t\tsSignCharacter = \"-\";\n\t\t\t\t\t\t\t\tparameter  = -parameter;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tparameter  = Math.floor(parameter);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif(parameter >= 0) {\n\t\t\t\t\t\t\t\tparameter  = Math.floor(parameter);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tparameter  = Math.ceil(parameter);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 実数\n\t\t\t\t\telse {\n\t\t\t\t\t\t// 数字に変換\n\t\t\t\t\t\tif(isNaN(parameter)) {\n\t\t\t\t\t\t\tparameter = parseFloat(parameter);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 正負判定\n\t\t\t\t\t\tif(parameter < 0) {\n\t\t\t\t\t\t\tsSignCharacter = \"-\";\n\t\t\t\t\t\t\tparameter  = -parameter;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!isPrecision) {\n\t\t\t\t\t\t\tprecision = 6;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 文字列を作成していく\n\t\t\t\t\tswitch(type.toLowerCase()) {\n\t\t\t\t\t\tcase \"d\":\n\t\t\t\t\t\tcase \"i\":\n\t\t\t\t\t\t\toutput += parameter.toString(10);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"u\":\n\t\t\t\t\t\t\toutput += toUnsign(parameter).toString(10);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"b\":\n\t\t\t\t\t\t\toutput += toUnsign(parameter).toString(2);\n\t\t\t\t\t\t\tif(isFlagSharp) {\n\t\t\t\t\t\t\t\tsharpdata = \"0b\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"o\":\n\t\t\t\t\t\t\toutput  += toUnsign(parameter).toString(8);\n\t\t\t\t\t\t\tif(isFlagSharp) {\n\t\t\t\t\t\t\t\tsharpdata = \"0\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"x\":\n\t\t\t\t\t\tcase \"X\":\n\t\t\t\t\t\t\toutput  += toUnsign(parameter).toString(16);\n\t\t\t\t\t\t\tif(isFlagSharp) {\n\t\t\t\t\t\t\t\tsharpdata = \"0x\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"e\":\n\t\t\t\t\t\t\toutput += parameter.toExponential(precision);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"f\":\n\t\t\t\t\t\t\toutput += parameter.toFixed(precision);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"g\":\n\t\t\t\t\t\t\tif(precision === 0) { // 0は1とする\n\t\t\t\t\t\t\t\tprecision = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\toutput += parameter.toPrecision(precision);\n\t\t\t\t\t\t\t// 小数点以下の語尾の0の削除\n\t\t\t\t\t\t\tif((!isFlagSharp) && (output.indexOf(\".\") !== -1)) {\n\t\t\t\t\t\t\t\toutput = output.replace(/\\.?0+$/, \"\");  // 1.00 , 1.10\n\t\t\t\t\t\t\t\toutput = output.replace(/\\.?0+e/, \"e\"); // 1.0e , 1.10e\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// 上でチェックしているため、ありえない\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// 整数での後処理\n\t\t\t\t\tif(isInteger) {\n\t\t\t\t\t\tif(isPrecision) { // 精度の付け足し\n\t\t\t\t\t\t\tspacesize  = precision - output.length;\n\t\t\t\t\t\t\tfor(let i = 0; i < spacesize; i++) {\n\t\t\t\t\t\t\t\toutput = \"0\" + output;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 実数での後処理\n\t\t\t\t\telse {\n\t\t\t\t\t\tif(isFlagSharp) { \n\t\t\t\t\t\t\t// sharp指定の時は小数点を必ず残す\n\t\t\t\t\t\t\tif(output.indexOf(\".\") === -1) {\n\t\t\t\t\t\t\t\tif(output.indexOf(\"e\") !== -1) {\n\t\t\t\t\t\t\t\t\toutput = output.replace(\"e\", \".e\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\toutput += \".\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 指数表記は、3桁表示(double型のため)\n\t\t\t\t\tif(output.indexOf(\"e\") !== -1) {\n\t\t\t\t\t\tconst buff = function(str) {\n\t\t\t\t\t\t\tconst l   = str.length;\n\t\t\t\t\t\t\tif(str.length === 3) { // e+1 -> e+001\n\t\t\t\t\t\t\t\treturn(str.substring(0, l - 1) + \"00\" + str.substring(l - 1, l));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse { // e+10 -> e+010\n\t\t\t\t\t\t\t\treturn(str.substring(0, l - 2) + \"0\" + str.substring(l - 2, l));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\toutput = output.replace(/e[+-][0-9]{1,2}$/, buff);\n\t\t\t\t\t}\n\t\t\t\t\ttextlength = output.length + sharpdata.length + sSignCharacter.length;\n\t\t\t\t\tspacesize  = width - textlength;\n\t\t\t\t\t// 左よせ\n\t\t\t\t\tif(isFlagTextAlignLeft) {\n\t\t\t\t\t\tfor(let i = 0; i < spacesize; i++) {\n\t\t\t\t\t\t\toutput = output + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 0を埋める場合\n\t\t\t\t\tif(isFlagFillZero) {\n\t\t\t\t\t\tfor(let i = 0; i < spacesize; i++) {\n\t\t\t\t\t\t\toutput = \"0\" + output;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// マイナスや、「0x」などを接続\n\t\t\t\t\toutput = sharpdata + output;\n\t\t\t\t\toutput = sSignCharacter + output;\n\t\t\t\t\t// 0 で埋めない場合\n\t\t\t\t\tif((!isFlagFillZero) && (!isFlagTextAlignLeft)) {\n\t\t\t\t\t\tfor(let i = 0; i < spacesize; i++) {\n\t\t\t\t\t\t\toutput = \" \" + output;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// 大文字化\n\t\t\t\t\tif(type.toUpperCase() === type) {\n\t\t\t\t\t\toutput = output.toUpperCase();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// 文字列の場合\n\t\t\t\tcase \"c\":\n\t\t\t\t\tif(!isNaN(parameter)) {\n\t\t\t\t\t\tparameter = String.fromCharCode(parameter);\n\t\t\t\t\t}\n\t\t\t\t\t// falls through\n\t\t\t\tcase \"s\":\n\t\t\t\t{\n\t\t\t\t\tif(!isNaN(parameter)) {\n\t\t\t\t\t\tparameter = parameter.toString(10);\n\t\t\t\t\t}\n\t\t\t\t\toutput = parameter;\n\t\t\t\t\tif(isPrecision) { // 最大表示文字数\n\t\t\t\t\t\tif(output.length > precision) {\n\t\t\t\t\t\t\toutput = output.substring(0, precision);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst s_textlength = output.length; // 現在の文字を構成するために必要な長さ\n\t\t\t\t\tconst s_spacesize  = width - s_textlength;  // 追加する横幅\n\t\t\t\t\t// 左よせ / 右よせ\n\t\t\t\t\tif(isFlagTextAlignLeft) {\n\t\t\t\t\t\tfor(let i = 0; i < s_spacesize; i++) {\n\t\t\t\t\t\t\toutput = output + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// 拡張\n\t\t\t\t\t\tconst s = isFlagFillZero ? \"0\" : \" \";\n\t\t\t\t\t\tfor(let i = 0; i < s_spacesize; i++) {\n\t\t\t\t\t\t\toutput = s + output;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// パーセント\n\t\t\t\tcase \"%\":\n\t\t\t\t\toutput = \"%\";\n\t\t\t\t\tbreak;\n\t\t\t\t// 未サポート\n\t\t\t\tcase \"p\":\n\t\t\t\tcase \"n\":\n\t\t\t\t\toutput = \"(変換できません)\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// 正規表現でチェックしているため、ありえない\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn (output);\t\n\t\t};\n\t\treturn (parm[0].replace(/%[^diubBoxXeEfFgGaAcspn%]*[diubBoxXeEfFgGaAcspn%]/g, func));\n\t}\n\n}\n",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/Util/Format.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 753,
    "kind": "class",
    "name": "Format",
    "memberof": "src/Util/Format.mjs",
    "static": true,
    "longname": "src/Util/Format.mjs~Format",
    "access": "public",
    "export": true,
    "importPath": "konpeito.js/src/Util/Format.mjs",
    "importStyle": "Format",
    "description": "",
    "lineNumber": 15,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 754,
    "kind": "method",
    "name": "format",
    "memberof": "src/Util/Format.mjs~Format",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Util/Format.mjs~Format.format",
    "access": "public",
    "description": "C言語のprintfを再現\nロケール、日付時刻等はサポートしていません。\nsprintfの変換指定子のpとnはサポートしていません。",
    "lineNumber": 26,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "parmeter",
        "description": "パラメータは可変引数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 755,
    "kind": "file",
    "name": "src/Util/Log.mjs",
    "content": "﻿/* global WSH, WScript */\n\n/**\n * The script is part of konpeito.\n * \n * AUTHOR:\n *  natade (http://twitter.com/natadea)\n * \n * LICENSE:\n *  The MIT license https://opensource.org/licenses/MIT\n */\n\nimport Format from \"./Format.mjs\";\nconst format = Format.format;\n\nconst toStringFromObj = function(text_obj) {\n\tlet text;\n\tif((typeof text_obj === \"string\")||(text_obj instanceof String)) {\n\t\tif(text_obj.length === 0) {\n\t\t\t// Edge だと console.log(\"\") でエラー表示になるため\n\t\t\ttext = \" \";\n\t\t}\n\t\telse {\n\t\t\ttext = text_obj;\n\t\t}\n\t}\n\telse if(typeof text_obj === \"undefined\") {\n\t\ttext = typeof text_obj;\n\t}\n\telse if(text_obj === null) {\n\t\ttext = \"null\";\n\t}\n\telse if(typeof text_obj.toString === \"function\") {\n\t\ttext = text_obj.toString();\n\t}\n\telse if(text_obj instanceof Object) {\n\t\ttext = \"Object\";\n\t}\n\telse {\n\t\ttext = \"null\";\n\t}\n\treturn text;\n};\n\nclass CUIConsole {\n\t\n\tconstructor() {\n\t\tthis.output = CUIConsole._getOutput();\n\t}\n\n\tstatic _getOutput() {\n\t\tconst getConsole = function() {\n\t\t\tif(typeof WSH !== \"undefined\") {\n\t\t\t\treturn(null);\n\t\t\t}\n\t\t\telse if(typeof console !== \"undefined\") {\n\t\t\t\treturn(console);\n\t\t\t}\n\t\t\telse if(typeof window !== \"undefined\") {\n\t\t\t\tif(typeof window.console !== \"undefined\") {\n\t\t\t\t\treturn(window.console);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn(null);\n\t\t};\n\t\tconst isJScript = function() {\n\t\t\treturn(typeof WSH !== \"undefined\");\n\t\t};\n\t\tconst isConsole = function() {\n\t\t\treturn(getConsole() !== null);\n\t\t};\n\t\tlet output = null;\n\t\t// JScript 用\n\t\tif(isJScript()) {\n\t\t\tif(/cscript\\.exe$/i.test(WSH.FullName)) {\n\t\t\t\toutput = function(text) {\n\t\t\t\t\tif(/\\n$/.test(text)) {\n\t\t\t\t\t\tWSH.StdOut.Write(text);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tWSH.StdOut.Write(text + \"\\n\");\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\telse {\n\t\t\t\toutput = WScript.Echo;\n\t\t\t}\n\t\t}\n\t\t// HTMLで表示する場合\n\t\telse if(isConsole()) {\n\t\t\tconst console = getConsole();\n\t\t\toutput = console.log;\n\t\t}\n\t\t// 最終的には alert IE10用\n\t\telse if(typeof alert !== \"undefined\") {\n\t\t\toutput = alert;\n\t\t}\n\t\treturn output;\n\t}\n\n\tgetOutput() {\n\t\treturn this.output;\n\t}\n}\n\nclass HtmlConsole {\n\n\tconstructor() {\n\t\tthis.root\t\t= null;\n\t\tthis.element\t= null;\n\t\tthis.isshow\t\t= false;\n\t\tthis.loglength\t= 250;\n\t\tthis.linelength\t= 0;\n\t}\n\n\t_getElement() {\n\t\tif(this.element !== null) {\n\t\t\treturn this.element;\n\t\t}\n\t\tconst element = document.createElement(\"div\");\n\t\telement.style.backgroundColor = \"black\";\n\t\telement.style.color = \"white\";\n\t\telement.style.display = \"block\";\n\t\telement.style.margin = \"0px\";\n\t\telement.style.padding = \"5px\";\n\t\telement.style.fontFamily = \"Consolas, Courier New, Courier, Monaco, monospace\";\n\t\telement.style.whiteSpace = \"pre\";\n\t\tthis.element = element;\n\t\treturn this.element;\n\t}\n\n\t_initHTML() {\n\t\tif(this.root !== null) {\n\t\t\treturn;\n\t\t}\n\t\tlet root;\n\t\troot = document.getElementById(\"senko_console\");\n\t\tif(root) {\n\t\t\tlet child = root.lastChild;\n\t\t\twhile (child) {\n\t\t\t\troot.removeChild(child);\n\t\t\t\tchild = root.lastChild;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\troot = document.body;\n\t\t}\n\t\troot.style.backgroundColor = \"black\";\n\t\troot.style.margin = \"0px\";\n\t\troot.style.padding = \"0px\";\n\t\troot.style.overflowY = \"scroll\";\n\t\troot.appendChild(this._getElement());\n\t\tthis.root = root;\n\t}\n\n\tisShow() {\n\t\treturn this.isshow;\n\t}\n\n\tsetShow(isshow) {\n\t\tif(typeof isshow !== \"boolean\") {\n\t\t\tthrow \"not boolean\";\n\t\t}\n\t\tthis._initHTML();\n\t\tconst element = this._getElement();\n\t\tif(this.isshow !== isshow) {\n\t\t\tthis.isshow = isshow;\n\t\t\tif(element) {\n\t\t\t\telement.style.display = this.isshow ? \"block\" : \"none\";\n\t\t\t}\n\t\t}\n\t}\n\n\t_autoScroll() {\n\t\tif((this.element === null) || (this.root === null)) {\n\t\t\treturn;\n\t\t}\n\t\tconst parentheight\t= this.root.clientHeight;\n\t\tconst childheight\t\t= this.element.clientHeight;\n\t\t// スクロールしないと見えない領域とマージン\n\t\tconst hideheight\t\t= childheight - parentheight;\n\t\tconst margin\t\t\t= parentheight * 1.0;\n\t\t// スクロールしないと見えない領域が見えている状態ならオートスクロール\n\t\tif(hideheight - margin <= this.root.scrollTop) {\n\t\t\tthis.root.scrollTop = childheight;\n\t\t}\n\t}\n\n\t_addNewLine() {\n\t\tthis._initHTML();\n\t\tconst element = this._getElement();\n\t\t// 次の行を作成する\n\t\tconst p = document.createElement(\"p\");\n\t\tp.innerText = \"> \";\n\t\tp.style.margin = \"0.2em 0px 0.2em 0px\";\n\t\tp.style.padding = \"0px\";\n\t\telement.appendChild(p);\n\t\tthis.linelength++;\n\t\tthis._cleaningLog();\n\t}\n\n\t_appendText(text) {\n\t\tthis._initHTML();\n\t\tconst element = this._getElement();\n\t\tconst p = element.lastElementChild;\n\t\tp.innerText = p.innerText + text;\n\t}\n\n\t_cleaningLog() {\n\t\tif(this.element === null) {\n\t\t\treturn;\n\t\t}\n\t\twhile(this.linelength > this.loglength) {\n\t\t\tthis.element.removeChild(this.element.firstElementChild);\n\t\t\tthis.linelength--;\n\t\t}\n\t}\n\n\tsetLogLength(loglength) {\n\t\tthis.loglength = loglength;\n\t}\n\n\tprintln(text) {\n\t\tthis._initHTML();\n\t\tconst element = this._getElement();\n\t\tif(element) {\n\t\t\t// 最終行に文字を追加する\n\t\t\tif(!element.lastElementChild) {\n\t\t\t\tthis._addNewLine();\n\t\t\t}\n\t\t\tthis._appendText(text);\n\t\t\t// 次の行を作成する\n\t\t\tthis._addNewLine();\n\t\t}\n\t\tthis._autoScroll();\n\t}\n}\n\nconst cui = (new CUIConsole()).getOutput();\nlet gui_obj = null;\nlet gui = null;\nif (console || (window && window.console)) {\n\tgui_obj = new HtmlConsole();\n\tgui = function(text) {\n\t\tgui_obj.println(text);\n\t};\n}\n\nlet show_gui = false;\nlet printbuffer = \"\";\n\n/**\n * 調整中\n * @ignore\n */\nclass Log {\n\n\tstatic setGUI() {\n\t\tif(gui) {\n\t\t\tshow_gui = true;\n\t\t}\n\t}\n\t\n\tstatic setCUI() {\n\t\tshow_gui = false;\n\t}\n\n\tstatic println(text_obj) {\n\t\tconst text = printbuffer + toStringFromObj(text_obj);\n\t\tprintbuffer = \"\";\n\t\tif(show_gui) {\n\t\t\tgui(text);\n\t\t}\n\t\telse {\n\t\t\tcui(text);\n\t\t}\n\t}\n\t\n\tstatic print(text_obj) {\n\t\tprintbuffer += toStringFromObj(text_obj);\n\t}\n\t\n\tstatic printf() {\n\t\tconst x = [];\n\t\tfor(let i = 0 ; i < arguments.length ; i++) {\n\t\t\tx.push(arguments[i]);\n\t\t}\n\t\tLog.print(format.apply(this, x));\n\t}\n\n}\n\nexport default Log;",
    "static": true,
    "longname": "D:/JavaScript/konpeito/src/Util/Log.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 756,
    "kind": "variable",
    "name": "format",
    "memberof": "src/Util/Log.mjs",
    "static": true,
    "longname": "src/Util/Log.mjs~format",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/Util/Log.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 757,
    "kind": "function",
    "name": "toStringFromObj",
    "memberof": "src/Util/Log.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Util/Log.mjs~toStringFromObj",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/Util/Log.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "text_obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 758,
    "kind": "class",
    "name": "CUIConsole",
    "memberof": "src/Util/Log.mjs",
    "static": true,
    "longname": "src/Util/Log.mjs~CUIConsole",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/Util/Log.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 759,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Util/Log.mjs~CUIConsole",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/Log.mjs~CUIConsole#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true
  },
  {
    "__docId__": 760,
    "kind": "member",
    "name": "output",
    "memberof": "src/Util/Log.mjs~CUIConsole",
    "static": false,
    "longname": "src/Util/Log.mjs~CUIConsole#output",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 761,
    "kind": "method",
    "name": "_getOutput",
    "memberof": "src/Util/Log.mjs~CUIConsole",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Util/Log.mjs~CUIConsole._getOutput",
    "access": "private",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 762,
    "kind": "method",
    "name": "getOutput",
    "memberof": "src/Util/Log.mjs~CUIConsole",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/Log.mjs~CUIConsole#getOutput",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 763,
    "kind": "class",
    "name": "HtmlConsole",
    "memberof": "src/Util/Log.mjs",
    "static": true,
    "longname": "src/Util/Log.mjs~HtmlConsole",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/Util/Log.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 764,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Util/Log.mjs~HtmlConsole",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/Log.mjs~HtmlConsole#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true
  },
  {
    "__docId__": 765,
    "kind": "member",
    "name": "root",
    "memberof": "src/Util/Log.mjs~HtmlConsole",
    "static": false,
    "longname": "src/Util/Log.mjs~HtmlConsole#root",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 766,
    "kind": "member",
    "name": "element",
    "memberof": "src/Util/Log.mjs~HtmlConsole",
    "static": false,
    "longname": "src/Util/Log.mjs~HtmlConsole#element",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 767,
    "kind": "member",
    "name": "isshow",
    "memberof": "src/Util/Log.mjs~HtmlConsole",
    "static": false,
    "longname": "src/Util/Log.mjs~HtmlConsole#isshow",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 768,
    "kind": "member",
    "name": "loglength",
    "memberof": "src/Util/Log.mjs~HtmlConsole",
    "static": false,
    "longname": "src/Util/Log.mjs~HtmlConsole#loglength",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 769,
    "kind": "member",
    "name": "linelength",
    "memberof": "src/Util/Log.mjs~HtmlConsole",
    "static": false,
    "longname": "src/Util/Log.mjs~HtmlConsole#linelength",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 770,
    "kind": "method",
    "name": "_getElement",
    "memberof": "src/Util/Log.mjs~HtmlConsole",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/Log.mjs~HtmlConsole#_getElement",
    "access": "private",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 772,
    "kind": "method",
    "name": "_initHTML",
    "memberof": "src/Util/Log.mjs~HtmlConsole",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/Log.mjs~HtmlConsole#_initHTML",
    "access": "private",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 774,
    "kind": "method",
    "name": "isShow",
    "memberof": "src/Util/Log.mjs~HtmlConsole",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/Log.mjs~HtmlConsole#isShow",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 775,
    "kind": "method",
    "name": "setShow",
    "memberof": "src/Util/Log.mjs~HtmlConsole",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/Log.mjs~HtmlConsole#setShow",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [
      {
        "name": "isshow",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 777,
    "kind": "method",
    "name": "_autoScroll",
    "memberof": "src/Util/Log.mjs~HtmlConsole",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/Log.mjs~HtmlConsole#_autoScroll",
    "access": "private",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 778,
    "kind": "method",
    "name": "_addNewLine",
    "memberof": "src/Util/Log.mjs~HtmlConsole",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/Log.mjs~HtmlConsole#_addNewLine",
    "access": "private",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 779,
    "kind": "method",
    "name": "_appendText",
    "memberof": "src/Util/Log.mjs~HtmlConsole",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/Log.mjs~HtmlConsole#_appendText",
    "access": "private",
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 780,
    "kind": "method",
    "name": "_cleaningLog",
    "memberof": "src/Util/Log.mjs~HtmlConsole",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/Log.mjs~HtmlConsole#_cleaningLog",
    "access": "private",
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 781,
    "kind": "method",
    "name": "setLogLength",
    "memberof": "src/Util/Log.mjs~HtmlConsole",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/Log.mjs~HtmlConsole#setLogLength",
    "access": "public",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "params": [
      {
        "name": "loglength",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 783,
    "kind": "method",
    "name": "println",
    "memberof": "src/Util/Log.mjs~HtmlConsole",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Util/Log.mjs~HtmlConsole#println",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 784,
    "kind": "variable",
    "name": "cui",
    "memberof": "src/Util/Log.mjs",
    "static": true,
    "longname": "src/Util/Log.mjs~cui",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/Util/Log.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 785,
    "kind": "variable",
    "name": "gui_obj",
    "memberof": "src/Util/Log.mjs",
    "static": true,
    "longname": "src/Util/Log.mjs~gui_obj",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/Util/Log.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 240,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 786,
    "kind": "variable",
    "name": "gui",
    "memberof": "src/Util/Log.mjs",
    "static": true,
    "longname": "src/Util/Log.mjs~gui",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/Util/Log.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 241,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 787,
    "kind": "variable",
    "name": "show_gui",
    "memberof": "src/Util/Log.mjs",
    "static": true,
    "longname": "src/Util/Log.mjs~show_gui",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/Util/Log.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 788,
    "kind": "variable",
    "name": "printbuffer",
    "memberof": "src/Util/Log.mjs",
    "static": true,
    "longname": "src/Util/Log.mjs~printbuffer",
    "access": "public",
    "export": false,
    "importPath": "konpeito.js/src/Util/Log.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 250,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 789,
    "kind": "class",
    "name": "Log",
    "memberof": "src/Util/Log.mjs",
    "static": true,
    "longname": "src/Util/Log.mjs~Log",
    "access": "public",
    "export": true,
    "importPath": "konpeito.js/src/Util/Log.mjs",
    "importStyle": "Log",
    "description": "調整中",
    "lineNumber": 256,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 790,
    "kind": "method",
    "name": "setGUI",
    "memberof": "src/Util/Log.mjs~Log",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Util/Log.mjs~Log.setGUI",
    "access": "public",
    "description": null,
    "lineNumber": 258,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 791,
    "kind": "method",
    "name": "setCUI",
    "memberof": "src/Util/Log.mjs~Log",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Util/Log.mjs~Log.setCUI",
    "access": "public",
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 792,
    "kind": "method",
    "name": "println",
    "memberof": "src/Util/Log.mjs~Log",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Util/Log.mjs~Log.println",
    "access": "public",
    "description": null,
    "lineNumber": 268,
    "undocument": true,
    "params": [
      {
        "name": "text_obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 793,
    "kind": "method",
    "name": "print",
    "memberof": "src/Util/Log.mjs~Log",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Util/Log.mjs~Log.print",
    "access": "public",
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "params": [
      {
        "name": "text_obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 794,
    "kind": "method",
    "name": "printf",
    "memberof": "src/Util/Log.mjs~Log",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Util/Log.mjs~Log.printf",
    "access": "public",
    "description": null,
    "lineNumber": 283,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "kind": "index",
    "content": "# konpeito #\n\n### What ####\n- The collection of javascirpt library such as numerical calculation.\n\n### Author ###\n- [natade](https://twitter.com/natadea)\n\n### Repository ###\n- [konpeito](https://github.com/natade-jp/konpeito)\n\n### Document ###\n- [document](https://natade-jp.github.io/konpeito/doc/)\n\n### Note ###\nIt is a multifunctional library under development, specialized for HTML5.<br>\n\n### Demo ###\nPlease check the console and main.mjs.\n- [BigDecimal](https://natade-jp.github.io/konpeito/doc/examples/demos/BigDecimal/)\n- [BigInteger](https://natade-jp.github.io/konpeito/doc/examples/demos/BigInteger/)\n- [Matrix](https://natade-jp.github.io/konpeito/doc/examples/demos/Matrix/)\n- [Random](https://natade-jp.github.io/konpeito/doc/examples/demos/Random/)\n",
    "longname": "D:\\JavaScript\\konpeito\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n\t\"name\": \"konpeito.js\",\n\t\"version\": \"0.1.0\",\n\t\"description\": \"The collection of javascirpt library such as GUI, numerical calculation, 3DCG etc.\",\n\t\"keywords\": [\n\t\t\"konpeito\",\n\t\t\"biginteger\",\n\t\t\"bigdecimal\",\n\t\t\"complex\",\n\t\t\"matrix\"\n\t],\n\t\"license\": \"MIT\",\n\t\"author\": \"natade\",\n\t\"main\": \"./build/konpeito.umd.js\",\n\t\"module\": \"./build/konpeito.module.mjs\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://github.com/natade-jp/konpeito\"\n\t},\n\t\"directories\": {\n\t\t\"src\": \"src\",\n\t\t\"build\": \"build\",\n\t\t\"example\": \"examples\"\n\t},\n\t\"scripts\": {\n\t\t\"dev\": \"node ./package.dev.js\",\n\t\t\"build\": \"node ./package.build.js\",\n\t\t\"doc\": \"node ./package.doc.js\"\n\t},\n\t\"devDependencies\": {\n\t\t\"esdoc\": \"^1.1.0\",\n\t\t\"esdoc-standard-plugin\": \"^1.0.0\",\n\t\t\"rollup\": \"^0.67.0\",\n\t\t\"rollup-plugin-buble\": \"^0.19.4\",\n\t\t\"rollup-plugin-uglify\": \"^6.0.0\",\n\t\t\"rollup-plugin-uglify-es\": \"0.0.1\"\n\t}\n}\n",
    "longname": "D:\\JavaScript\\konpeito\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]